
kernel7.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020012 	cps	#18
    803c:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8040:	f1020017 	cps	#23
    8044:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8048:	f102001b 	cps	#27
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001f 	cps	#31
    8054:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8058:	ea0007dc 	b	9fd0 <sysinit>

0000805c <_start_secondary>:
    805c:	f57ff04f 	dsb	sy
    8060:	e320f003 	wfi
    8064:	eafffffd 	b	8060 <_start_secondary+0x4>

00008068 <main>:
    8068:	e92d4010 	push	{r4, lr}
    806c:	e24ddebe 	sub	sp, sp, #3040	; 0xbe0
    8070:	e1a0000d 	mov	r0, sp
    8074:	eb000011 	bl	80c0 <CKernel::CKernel()>
    8078:	e1a0000d 	mov	r0, sp
    807c:	eb00003f 	bl	8180 <CKernel::Initialize()>
    8080:	e2504000 	subs	r4, r0, #0
    8084:	0a000004 	beq	809c <main+0x34>
    8088:	e1a0000d 	mov	r0, sp
    808c:	eb000062 	bl	821c <CKernel::Run()>
    8090:	e3500002 	cmp	r0, #2
    8094:	13a04000 	movne	r4, #0
    8098:	0a000005 	beq	80b4 <main+0x4c>
    809c:	eb0007be 	bl	9f9c <halt>
    80a0:	e1a0000d 	mov	r0, sp
    80a4:	eb000067 	bl	8248 <CKernel::~CKernel()>
    80a8:	e1a00004 	mov	r0, r4
    80ac:	e28ddebe 	add	sp, sp, #3040	; 0xbe0
    80b0:	e8bd8010 	pop	{r4, pc}
    80b4:	eb0007bc 	bl	9fac <reboot>
    80b8:	e3a04001 	mov	r4, #1
    80bc:	eafffff7 	b	80a0 <main+0x38>

000080c0 <CKernel::CKernel()>:
    80c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80c4:	e3a01001 	mov	r1, #1
    80c8:	e1a04000 	mov	r4, r0
    80cc:	e284501c 	add	r5, r4, #28
    80d0:	eb000746 	bl	9df0 <CMemorySystem::CMemorySystem(int)>
    80d4:	e2840010 	add	r0, r4, #16
    80d8:	e2847e95 	add	r7, r4, #2384	; 0x950
    80dc:	eb00028c 	bl	8b14 <CActLED::CActLED()>
    80e0:	e1a00005 	mov	r0, r5
    80e4:	eb000b2e 	bl	ada4 <CKernelOptions::CKernelOptions()>
    80e8:	e2840e85 	add	r0, r4, #2128	; 0x850
    80ec:	e280000c 	add	r0, r0, #12
    80f0:	e2846eb9 	add	r6, r4, #2960	; 0xb90
    80f4:	eb0011d6 	bl	c854 <CDeviceNameService::CDeviceNameService()>
    80f8:	e1a00005 	mov	r0, r5
    80fc:	eb000af4 	bl	acd4 <CKernelOptions::GetWidth() const>
    8100:	e1a08000 	mov	r8, r0
    8104:	e1a00005 	mov	r0, r5
    8108:	eb000af3 	bl	acdc <CKernelOptions::GetHeight() const>
    810c:	e1a02000 	mov	r2, r0
    8110:	e2840e86 	add	r0, r4, #2144	; 0x860
    8114:	e3a03000 	mov	r3, #0
    8118:	e1a01008 	mov	r1, r8
    811c:	e2800004 	add	r0, r0, #4
    8120:	eb000cf1 	bl	b4ec <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    8124:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    8128:	e2800004 	add	r0, r0, #4
    812c:	eb0013bc 	bl	d024 <CSerialDevice::CSerialDevice()>
    8130:	e2840d25 	add	r0, r4, #2368	; 0x940
    8134:	e280000c 	add	r0, r0, #12
    8138:	eb001799 	bl	dfa4 <CExceptionHandler::CExceptionHandler()>
    813c:	e1a00007 	mov	r0, r7
    8140:	eb001861 	bl	e2cc <CInterruptSystem::CInterruptSystem()>
    8144:	e1a01007 	mov	r1, r7
    8148:	e1a00006 	mov	r0, r6
    814c:	eb0007c9 	bl	a078 <CTimer::CTimer(CInterruptSystem*)>
    8150:	e1a00005 	mov	r0, r5
    8154:	eb000ae5 	bl	acf0 <CKernelOptions::GetLogLevel() const>
    8158:	e1a01000 	mov	r1, r0
    815c:	e2840ebb 	add	r0, r4, #2992	; 0xbb0
    8160:	e1a02006 	mov	r2, r6
    8164:	e2800008 	add	r0, r0, #8
    8168:	eb001267 	bl	cb0c <CLogger::CLogger(unsigned int, CTimer*)>
    816c:	e2840ebd 	add	r0, r4, #3024	; 0xbd0
    8170:	e2800004 	add	r0, r0, #4
    8174:	eb000050 	bl	82bc <Nes::Nes()>
    8178:	e1a00004 	mov	r0, r4
    817c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008180 <CKernel::Initialize()>:
    8180:	e92d4070 	push	{r4, r5, r6, lr}
    8184:	e2804e86 	add	r4, r0, #2144	; 0x860
    8188:	e2844004 	add	r4, r4, #4
    818c:	e1a05000 	mov	r5, r0
    8190:	e1a00004 	mov	r0, r4
    8194:	eb00106b 	bl	c348 <CScreenDevice::Initialize()>
    8198:	e3500000 	cmp	r0, #0
    819c:	1a000001 	bne	81a8 <CKernel::Initialize()+0x28>
    81a0:	e3a00000 	mov	r0, #0
    81a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    81a8:	e2850d23 	add	r0, r5, #2240	; 0x8c0
    81ac:	e3a01cc2 	mov	r1, #49664	; 0xc200
    81b0:	e3401001 	movt	r1, #1
    81b4:	e2800004 	add	r0, r0, #4
    81b8:	eb0013b7 	bl	d09c <CSerialDevice::Initialize(unsigned int)>
    81bc:	e3500000 	cmp	r0, #0
    81c0:	0afffff6 	beq	81a0 <CKernel::Initialize()+0x20>
    81c4:	e285001c 	add	r0, r5, #28
    81c8:	eb000ac5 	bl	ace4 <CKernelOptions::GetLogDevice() const>
    81cc:	e1a01000 	mov	r1, r0
    81d0:	e2850e85 	add	r0, r5, #2128	; 0x850
    81d4:	e3a02000 	mov	r2, #0
    81d8:	e280000c 	add	r0, r0, #12
    81dc:	eb0011f8 	bl	c9c4 <CDeviceNameService::GetDevice(char const*, int)>
    81e0:	e3500000 	cmp	r0, #0
    81e4:	11a01000 	movne	r1, r0
    81e8:	e2850ebb 	add	r0, r5, #2992	; 0xbb0
    81ec:	01a01004 	moveq	r1, r4
    81f0:	e2800008 	add	r0, r0, #8
    81f4:	eb00134b 	bl	cf28 <CLogger::Initialize(CDevice*)>
    81f8:	e3500000 	cmp	r0, #0
    81fc:	0affffe7 	beq	81a0 <CKernel::Initialize()+0x20>
    8200:	e2850e95 	add	r0, r5, #2384	; 0x950
    8204:	eb001843 	bl	e318 <CInterruptSystem::Initialize()>
    8208:	e3500000 	cmp	r0, #0
    820c:	0affffe3 	beq	81a0 <CKernel::Initialize()+0x20>
    8210:	e2850eb9 	add	r0, r5, #2960	; 0xb90
    8214:	e8bd4070 	pop	{r4, r5, r6, lr}
    8218:	ea0009ff 	b	aa1c <CTimer::Initialize()>

0000821c <CKernel::Run()>:
    821c:	e2800ebb 	add	r0, r0, #2992	; 0xbb0
    8220:	e92d4010 	push	{r4, lr}
    8224:	e2800008 	add	r0, r0, #8
    8228:	e3a02003 	mov	r2, #3
    822c:	e300350c 	movw	r3, #1292	; 0x50c
    8230:	e3403001 	movt	r3, #1
    8234:	e3001504 	movw	r1, #1284	; 0x504
    8238:	e3401001 	movt	r1, #1
    823c:	eb00132d 	bl	cef8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8240:	e3a00001 	mov	r0, #1
    8244:	e8bd8010 	pop	{r4, pc}

00008248 <CKernel::~CKernel()>:
    8248:	e92d4010 	push	{r4, lr}
    824c:	e1a04000 	mov	r4, r0
    8250:	e2800ebb 	add	r0, r0, #2992	; 0xbb0
    8254:	e2800008 	add	r0, r0, #8
    8258:	eb00123d 	bl	cb54 <CLogger::~CLogger()>
    825c:	e2840eb9 	add	r0, r4, #2960	; 0xb90
    8260:	eb0007a4 	bl	a0f8 <CTimer::~CTimer()>
    8264:	e2840e95 	add	r0, r4, #2384	; 0x950
    8268:	eb001825 	bl	e304 <CInterruptSystem::~CInterruptSystem()>
    826c:	e2840d25 	add	r0, r4, #2368	; 0x940
    8270:	e280000c 	add	r0, r0, #12
    8274:	eb00176e 	bl	e034 <CExceptionHandler::~CExceptionHandler()>
    8278:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    827c:	e2800004 	add	r0, r0, #4
    8280:	eb0013d6 	bl	d1e0 <CSerialDevice::~CSerialDevice()>
    8284:	e2840e86 	add	r0, r4, #2144	; 0x860
    8288:	e2800004 	add	r0, r0, #4
    828c:	eb000c40 	bl	b394 <CScreenDevice::~CScreenDevice()>
    8290:	e2840e85 	add	r0, r4, #2128	; 0x850
    8294:	e280000c 	add	r0, r0, #12
    8298:	eb001180 	bl	c8a0 <CDeviceNameService::~CDeviceNameService()>
    829c:	e284001c 	add	r0, r4, #28
    82a0:	eb000a86 	bl	acc0 <CKernelOptions::~CKernelOptions()>
    82a4:	e2840010 	add	r0, r4, #16
    82a8:	eb0001f4 	bl	8a80 <CActLED::~CActLED()>
    82ac:	e1a00004 	mov	r0, r4
    82b0:	eb00066c 	bl	9c68 <CMemorySystem::~CMemorySystem()>
    82b4:	e1a00004 	mov	r0, r4
    82b8:	e8bd8010 	pop	{r4, pc}

000082bc <Nes::Nes()>:
    82bc:	e92d4070 	push	{r4, r5, r6, lr}
    82c0:	e1a04000 	mov	r4, r0
    82c4:	e3a0001c 	mov	r0, #28
    82c8:	e3400004 	movt	r0, #4
    82cc:	eb000700 	bl	9ed4 <operator new(unsigned int)>
    82d0:	e1a05000 	mov	r5, r0
    82d4:	e3a0e010 	mov	lr, #16
    82d8:	e3a0cc02 	mov	ip, #512	; 0x200
    82dc:	e3a03010 	mov	r3, #16
    82e0:	e3403004 	movt	r3, #4
    82e4:	e585e000 	str	lr, [r5]
    82e8:	e1a02003 	mov	r2, r3
    82ec:	e585c004 	str	ip, [r5, #4]
    82f0:	e280000c 	add	r0, r0, #12
    82f4:	e5853008 	str	r3, [r5, #8]
    82f8:	e3001530 	movw	r1, #1328	; 0x530
    82fc:	e3401001 	movt	r1, #1
    8300:	eb000a3f 	bl	ac04 <memcpy>
    8304:	e5845000 	str	r5, [r4]
    8308:	e3000918 	movw	r0, #2328	; 0x918
    830c:	eb0006f0 	bl	9ed4 <operator new(unsigned int)>
    8310:	e5941000 	ldr	r1, [r4]
    8314:	e1a05000 	mov	r5, r0
    8318:	eb00015b 	bl	888c <Cpu::Cpu(Rom const*)>
    831c:	e5845004 	str	r5, [r4, #4]
    8320:	e3a000c8 	mov	r0, #200	; 0xc8
    8324:	e3400001 	movt	r0, #1
    8328:	eb0006e9 	bl	9ed4 <operator new(unsigned int)>
    832c:	e5941000 	ldr	r1, [r4]
    8330:	e1a05000 	mov	r5, r0
    8334:	eb000184 	bl	894c <Ppu::Ppu(Rom const*)>
    8338:	e5845008 	str	r5, [r4, #8]
    833c:	e1a00004 	mov	r0, r4
    8340:	e8bd8070 	pop	{r4, r5, r6, pc}

00008344 <Cpu::ASL_ACC()>:
    8344:	e5902000 	ldr	r2, [r0]
    8348:	e5d23003 	ldrb	r3, [r2, #3]
    834c:	e1a03083 	lsl	r3, r3, #1
    8350:	e5c23003 	strb	r3, [r2, #3]
    8354:	e12fff1e 	bx	lr

00008358 <Cpu::UNIMP()>:
    8358:	e12fff1e 	bx	lr

0000835c <Cpu::ORA_IND_X()>:
    835c:	e5902000 	ldr	r2, [r0]
    8360:	e92d4010 	push	{r4, lr}
    8364:	e1a04000 	mov	r4, r0
    8368:	e5901004 	ldr	r1, [r0, #4]
    836c:	e1d230b0 	ldrh	r3, [r2]
    8370:	e5d22004 	ldrb	r2, [r2, #4]
    8374:	e2833001 	add	r3, r3, #1
    8378:	e6ff3073 	uxth	r3, r3
    837c:	e7d11003 	ldrb	r1, [r1, r3]
    8380:	eb00018e 	bl	89c0 <Cpu::PreIndexedIndirect(unsigned char, unsigned char) const>
    8384:	e894000c 	ldm	r4, {r2, r3}
    8388:	e7d33000 	ldrb	r3, [r3, r0]
    838c:	e5d21003 	ldrb	r1, [r2, #3]
    8390:	e1833001 	orr	r3, r3, r1
    8394:	e5c23003 	strb	r3, [r2, #3]
    8398:	e8bd8010 	pop	{r4, pc}

0000839c <Cpu::ORA_ZP()>:
    839c:	e5903000 	ldr	r3, [r0]
    83a0:	e92d4010 	push	{r4, lr}
    83a4:	e1a04000 	mov	r4, r0
    83a8:	e5902004 	ldr	r2, [r0, #4]
    83ac:	e1d330b0 	ldrh	r3, [r3]
    83b0:	e2833001 	add	r3, r3, #1
    83b4:	e6ff3073 	uxth	r3, r3
    83b8:	e7d21003 	ldrb	r1, [r2, r3]
    83bc:	eb00016e 	bl	897c <Cpu::ZeroPage(unsigned char) const>
    83c0:	e894000c 	ldm	r4, {r2, r3}
    83c4:	e7d33000 	ldrb	r3, [r3, r0]
    83c8:	e5d21003 	ldrb	r1, [r2, #3]
    83cc:	e1833001 	orr	r3, r3, r1
    83d0:	e5c23003 	strb	r3, [r2, #3]
    83d4:	e8bd8010 	pop	{r4, pc}

000083d8 <Cpu::ASL_ZP()>:
    83d8:	e5903000 	ldr	r3, [r0]
    83dc:	e92d4010 	push	{r4, lr}
    83e0:	e1a04000 	mov	r4, r0
    83e4:	e5902004 	ldr	r2, [r0, #4]
    83e8:	e1d330b0 	ldrh	r3, [r3]
    83ec:	e2833001 	add	r3, r3, #1
    83f0:	e6ff3073 	uxth	r3, r3
    83f4:	e7d21003 	ldrb	r1, [r2, r3]
    83f8:	eb00015f 	bl	897c <Cpu::ZeroPage(unsigned char) const>
    83fc:	e5942004 	ldr	r2, [r4, #4]
    8400:	e7d23000 	ldrb	r3, [r2, r0]
    8404:	e1a03083 	lsl	r3, r3, #1
    8408:	e7c23000 	strb	r3, [r2, r0]
    840c:	e8bd8010 	pop	{r4, pc}

00008410 <Cpu::ORA_IMM()>:
    8410:	e5903000 	ldr	r3, [r0]
    8414:	e92d4010 	push	{r4, lr}
    8418:	e1a04000 	mov	r4, r0
    841c:	e5902004 	ldr	r2, [r0, #4]
    8420:	e1d330b0 	ldrh	r3, [r3]
    8424:	e2833001 	add	r3, r3, #1
    8428:	e6ff3073 	uxth	r3, r3
    842c:	e7d21003 	ldrb	r1, [r2, r3]
    8430:	eb00014f 	bl	8974 <Cpu::Immediate(unsigned char) const>
    8434:	e5942000 	ldr	r2, [r4]
    8438:	e5d23003 	ldrb	r3, [r2, #3]
    843c:	e1800003 	orr	r0, r0, r3
    8440:	e5c20003 	strb	r0, [r2, #3]
    8444:	e8bd8010 	pop	{r4, pc}

00008448 <Cpu::ORA_ABS()>:
    8448:	e5903000 	ldr	r3, [r0]
    844c:	e92d4010 	push	{r4, lr}
    8450:	e1a04000 	mov	r4, r0
    8454:	e5901004 	ldr	r1, [r0, #4]
    8458:	e1d330b0 	ldrh	r3, [r3]
    845c:	e2832002 	add	r2, r3, #2
    8460:	e2833001 	add	r3, r3, #1
    8464:	e6ff2072 	uxth	r2, r2
    8468:	e6ff3073 	uxth	r3, r3
    846c:	e7d12002 	ldrb	r2, [r1, r2]
    8470:	e7d11003 	ldrb	r1, [r1, r3]
    8474:	eb000142 	bl	8984 <Cpu::Absolute(unsigned char, unsigned char) const>
    8478:	e894000c 	ldm	r4, {r2, r3}
    847c:	e7d33000 	ldrb	r3, [r3, r0]
    8480:	e5d21003 	ldrb	r1, [r2, #3]
    8484:	e1833001 	orr	r3, r3, r1
    8488:	e5c23003 	strb	r3, [r2, #3]
    848c:	e8bd8010 	pop	{r4, pc}

00008490 <Cpu::ASL_ABS()>:
    8490:	e5903000 	ldr	r3, [r0]
    8494:	e92d4010 	push	{r4, lr}
    8498:	e1a04000 	mov	r4, r0
    849c:	e5901004 	ldr	r1, [r0, #4]
    84a0:	e1d330b0 	ldrh	r3, [r3]
    84a4:	e2832002 	add	r2, r3, #2
    84a8:	e2833001 	add	r3, r3, #1
    84ac:	e6ff2072 	uxth	r2, r2
    84b0:	e6ff3073 	uxth	r3, r3
    84b4:	e7d12002 	ldrb	r2, [r1, r2]
    84b8:	e7d11003 	ldrb	r1, [r1, r3]
    84bc:	eb000130 	bl	8984 <Cpu::Absolute(unsigned char, unsigned char) const>
    84c0:	e5942004 	ldr	r2, [r4, #4]
    84c4:	e7d23000 	ldrb	r3, [r2, r0]
    84c8:	e1a03083 	lsl	r3, r3, #1
    84cc:	e7c23000 	strb	r3, [r2, r0]
    84d0:	e8bd8010 	pop	{r4, pc}

000084d4 <Cpu::ORA_IND_Y()>:
    84d4:	e5902000 	ldr	r2, [r0]
    84d8:	e92d4010 	push	{r4, lr}
    84dc:	e1a04000 	mov	r4, r0
    84e0:	e5901004 	ldr	r1, [r0, #4]
    84e4:	e1d230b0 	ldrh	r3, [r2]
    84e8:	e5d22005 	ldrb	r2, [r2, #5]
    84ec:	e2833001 	add	r3, r3, #1
    84f0:	e6ff3073 	uxth	r3, r3
    84f4:	e7d11003 	ldrb	r1, [r1, r3]
    84f8:	eb000138 	bl	89e0 <Cpu::PostIndexedIndirect(unsigned char, unsigned char) const>
    84fc:	e894000c 	ldm	r4, {r2, r3}
    8500:	e7d33000 	ldrb	r3, [r3, r0]
    8504:	e5d21003 	ldrb	r1, [r2, #3]
    8508:	e1833001 	orr	r3, r3, r1
    850c:	e5c23003 	strb	r3, [r2, #3]
    8510:	e8bd8010 	pop	{r4, pc}

00008514 <Cpu::ORA_ZP_X()>:
    8514:	e5902000 	ldr	r2, [r0]
    8518:	e92d4010 	push	{r4, lr}
    851c:	e1a04000 	mov	r4, r0
    8520:	e5901004 	ldr	r1, [r0, #4]
    8524:	e1d230b0 	ldrh	r3, [r2]
    8528:	e5d22004 	ldrb	r2, [r2, #4]
    852c:	e2833001 	add	r3, r3, #1
    8530:	e6ff3073 	uxth	r3, r3
    8534:	e7d11003 	ldrb	r1, [r1, r3]
    8538:	eb000117 	bl	899c <Cpu::ZeroPageIndexed(unsigned char, unsigned char) const>
    853c:	e894000c 	ldm	r4, {r2, r3}
    8540:	e7d33000 	ldrb	r3, [r3, r0]
    8544:	e5d21003 	ldrb	r1, [r2, #3]
    8548:	e1833001 	orr	r3, r3, r1
    854c:	e5c23003 	strb	r3, [r2, #3]
    8550:	e8bd8010 	pop	{r4, pc}

00008554 <Cpu::ASL_ZP_X()>:
    8554:	e5902000 	ldr	r2, [r0]
    8558:	e92d4010 	push	{r4, lr}
    855c:	e1a04000 	mov	r4, r0
    8560:	e5901004 	ldr	r1, [r0, #4]
    8564:	e1d230b0 	ldrh	r3, [r2]
    8568:	e5d22004 	ldrb	r2, [r2, #4]
    856c:	e2833001 	add	r3, r3, #1
    8570:	e6ff3073 	uxth	r3, r3
    8574:	e7d11003 	ldrb	r1, [r1, r3]
    8578:	eb000107 	bl	899c <Cpu::ZeroPageIndexed(unsigned char, unsigned char) const>
    857c:	e5942004 	ldr	r2, [r4, #4]
    8580:	e7d23000 	ldrb	r3, [r2, r0]
    8584:	e1a03083 	lsl	r3, r3, #1
    8588:	e7c23000 	strb	r3, [r2, r0]
    858c:	e8bd8010 	pop	{r4, pc}

00008590 <Cpu::ORA_ABS_Y()>:
    8590:	e92d4010 	push	{r4, lr}
    8594:	e1a04000 	mov	r4, r0
    8598:	e8904008 	ldm	r0, {r3, lr}
    859c:	e1d320b0 	ldrh	r2, [r3]
    85a0:	e5d33005 	ldrb	r3, [r3, #5]
    85a4:	e282c002 	add	ip, r2, #2
    85a8:	e2822001 	add	r2, r2, #1
    85ac:	e6ffc07c 	uxth	ip, ip
    85b0:	e6ff1072 	uxth	r1, r2
    85b4:	e7de200c 	ldrb	r2, [lr, ip]
    85b8:	e7de1001 	ldrb	r1, [lr, r1]
    85bc:	eb0000f2 	bl	898c <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>
    85c0:	e894000c 	ldm	r4, {r2, r3}
    85c4:	e7d33000 	ldrb	r3, [r3, r0]
    85c8:	e5d21003 	ldrb	r1, [r2, #3]
    85cc:	e1833001 	orr	r3, r3, r1
    85d0:	e5c23003 	strb	r3, [r2, #3]
    85d4:	e8bd8010 	pop	{r4, pc}

000085d8 <Cpu::ORA_ABS_X()>:
    85d8:	e92d4010 	push	{r4, lr}
    85dc:	e1a04000 	mov	r4, r0
    85e0:	e8904008 	ldm	r0, {r3, lr}
    85e4:	e1d320b0 	ldrh	r2, [r3]
    85e8:	e5d33004 	ldrb	r3, [r3, #4]
    85ec:	e282c002 	add	ip, r2, #2
    85f0:	e2822001 	add	r2, r2, #1
    85f4:	e6ffc07c 	uxth	ip, ip
    85f8:	e6ff1072 	uxth	r1, r2
    85fc:	e7de200c 	ldrb	r2, [lr, ip]
    8600:	e7de1001 	ldrb	r1, [lr, r1]
    8604:	eb0000e0 	bl	898c <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>
    8608:	e894000c 	ldm	r4, {r2, r3}
    860c:	e7d33000 	ldrb	r3, [r3, r0]
    8610:	e5d21003 	ldrb	r1, [r2, #3]
    8614:	e1833001 	orr	r3, r3, r1
    8618:	e5c23003 	strb	r3, [r2, #3]
    861c:	e8bd8010 	pop	{r4, pc}

00008620 <Cpu::ASL_ABS_X()>:
    8620:	e92d4010 	push	{r4, lr}
    8624:	e1a04000 	mov	r4, r0
    8628:	e8904008 	ldm	r0, {r3, lr}
    862c:	e1d320b0 	ldrh	r2, [r3]
    8630:	e5d33004 	ldrb	r3, [r3, #4]
    8634:	e282c002 	add	ip, r2, #2
    8638:	e2822001 	add	r2, r2, #1
    863c:	e6ffc07c 	uxth	ip, ip
    8640:	e6ff1072 	uxth	r1, r2
    8644:	e7de200c 	ldrb	r2, [lr, ip]
    8648:	e7de1001 	ldrb	r1, [lr, r1]
    864c:	eb0000ce 	bl	898c <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>
    8650:	e5942004 	ldr	r2, [r4, #4]
    8654:	e7d23000 	ldrb	r3, [r2, r0]
    8658:	e1a03083 	lsl	r3, r3, #1
    865c:	e7c23000 	strb	r3, [r2, r0]
    8660:	e8bd8010 	pop	{r4, pc}

00008664 <Cpu::SBC_ABS_X()>:
    8664:	e12fff1e 	bx	lr

00008668 <Cpu::INC_ABS_X()>:
    8668:	e12fff1e 	bx	lr

0000866c <Cpu::BRK()>:
    866c:	e12fff1e 	bx	lr

00008670 <Cpu::PHP()>:
    8670:	e12fff1e 	bx	lr

00008674 <Cpu::BPL()>:
    8674:	e12fff1e 	bx	lr

00008678 <Cpu::CLC()>:
    8678:	e12fff1e 	bx	lr

0000867c <Cpu::JSR()>:
    867c:	e12fff1e 	bx	lr

00008680 <Cpu::AND_IND_X()>:
    8680:	e12fff1e 	bx	lr

00008684 <Cpu::BIT_ZP()>:
    8684:	e12fff1e 	bx	lr

00008688 <Cpu::AND_ZP()>:
    8688:	e12fff1e 	bx	lr

0000868c <Cpu::ROL_ZP()>:
    868c:	e12fff1e 	bx	lr

00008690 <Cpu::PLP()>:
    8690:	e12fff1e 	bx	lr

00008694 <Cpu::AND_IMM()>:
    8694:	e12fff1e 	bx	lr

00008698 <Cpu::ROL_ACC()>:
    8698:	e12fff1e 	bx	lr

0000869c <Cpu::BIT_ABS()>:
    869c:	e12fff1e 	bx	lr

000086a0 <Cpu::AND_ABS()>:
    86a0:	e12fff1e 	bx	lr

000086a4 <Cpu::ROL_ABS()>:
    86a4:	e12fff1e 	bx	lr

000086a8 <Cpu::BMI()>:
    86a8:	e12fff1e 	bx	lr

000086ac <Cpu::AND_IND_Y()>:
    86ac:	e12fff1e 	bx	lr

000086b0 <Cpu::AND_ZP_X()>:
    86b0:	e12fff1e 	bx	lr

000086b4 <Cpu::ROL_ZP_X()>:
    86b4:	e12fff1e 	bx	lr

000086b8 <Cpu::SEC()>:
    86b8:	e12fff1e 	bx	lr

000086bc <Cpu::AND_ABS_Y()>:
    86bc:	e12fff1e 	bx	lr

000086c0 <Cpu::AND_ABS_X()>:
    86c0:	e12fff1e 	bx	lr

000086c4 <Cpu::ROL_ABS_X()>:
    86c4:	e12fff1e 	bx	lr

000086c8 <Cpu::RTI()>:
    86c8:	e12fff1e 	bx	lr

000086cc <Cpu::EOR_IND_X()>:
    86cc:	e12fff1e 	bx	lr

000086d0 <Cpu::EOR_ZP()>:
    86d0:	e12fff1e 	bx	lr

000086d4 <Cpu::LSR_ZP()>:
    86d4:	e12fff1e 	bx	lr

000086d8 <Cpu::PHA()>:
    86d8:	e12fff1e 	bx	lr

000086dc <Cpu::EOR_IMM()>:
    86dc:	e12fff1e 	bx	lr

000086e0 <Cpu::LSR_ACC()>:
    86e0:	e12fff1e 	bx	lr

000086e4 <Cpu::JMP_ABS()>:
    86e4:	e12fff1e 	bx	lr

000086e8 <Cpu::EOR_ABS()>:
    86e8:	e12fff1e 	bx	lr

000086ec <Cpu::LSR_ABS()>:
    86ec:	e12fff1e 	bx	lr

000086f0 <Cpu::BVC()>:
    86f0:	e12fff1e 	bx	lr

000086f4 <Cpu::EOR_IND_Y()>:
    86f4:	e12fff1e 	bx	lr

000086f8 <Cpu::EOR_ZP_X()>:
    86f8:	e12fff1e 	bx	lr

000086fc <Cpu::LSR_ZP_X()>:
    86fc:	e12fff1e 	bx	lr

00008700 <Cpu::CLI()>:
    8700:	e12fff1e 	bx	lr

00008704 <Cpu::EOR_ABS_Y()>:
    8704:	e12fff1e 	bx	lr

00008708 <Cpu::EOR_ABS_X()>:
    8708:	e12fff1e 	bx	lr

0000870c <Cpu::LSR_ABS_X()>:
    870c:	e12fff1e 	bx	lr

00008710 <Cpu::RTS()>:
    8710:	e12fff1e 	bx	lr

00008714 <Cpu::ADC_IND_X()>:
    8714:	e12fff1e 	bx	lr

00008718 <Cpu::ADC_ZP()>:
    8718:	e12fff1e 	bx	lr

0000871c <Cpu::ROR_ZP()>:
    871c:	e12fff1e 	bx	lr

00008720 <Cpu::PLA()>:
    8720:	e12fff1e 	bx	lr

00008724 <Cpu::ADC_IMM()>:
    8724:	e12fff1e 	bx	lr

00008728 <Cpu::ROR_ACC()>:
    8728:	e12fff1e 	bx	lr

0000872c <Cpu::JMP_IND()>:
    872c:	e12fff1e 	bx	lr

00008730 <Cpu::ADC_ABS()>:
    8730:	e12fff1e 	bx	lr

00008734 <Cpu::ROR_ABS()>:
    8734:	e12fff1e 	bx	lr

00008738 <Cpu::BVS()>:
    8738:	e12fff1e 	bx	lr

0000873c <Cpu::ADC_IND_Y()>:
    873c:	e12fff1e 	bx	lr

00008740 <Cpu::ADC_ZP_X()>:
    8740:	e12fff1e 	bx	lr

00008744 <Cpu::ROR_ZP_X()>:
    8744:	e12fff1e 	bx	lr

00008748 <Cpu::SEI()>:
    8748:	e12fff1e 	bx	lr

0000874c <Cpu::ADC_ABS_Y()>:
    874c:	e12fff1e 	bx	lr

00008750 <Cpu::ADC_ABS_X()>:
    8750:	e12fff1e 	bx	lr

00008754 <Cpu::ROR_ABS_X()>:
    8754:	e12fff1e 	bx	lr

00008758 <Cpu::STA_IND_X()>:
    8758:	e12fff1e 	bx	lr

0000875c <Cpu::STY_ZP()>:
    875c:	e12fff1e 	bx	lr

00008760 <Cpu::STA_ZP()>:
    8760:	e12fff1e 	bx	lr

00008764 <Cpu::STX_ZP()>:
    8764:	e12fff1e 	bx	lr

00008768 <Cpu::DEY()>:
    8768:	e12fff1e 	bx	lr

0000876c <Cpu::TXA()>:
    876c:	e12fff1e 	bx	lr

00008770 <Cpu::STY_ABS()>:
    8770:	e12fff1e 	bx	lr

00008774 <Cpu::STA_ABS()>:
    8774:	e12fff1e 	bx	lr

00008778 <Cpu::STX_ABS()>:
    8778:	e12fff1e 	bx	lr

0000877c <Cpu::BCC()>:
    877c:	e12fff1e 	bx	lr

00008780 <Cpu::STA_IND_Y()>:
    8780:	e12fff1e 	bx	lr

00008784 <Cpu::STY_ZP_X()>:
    8784:	e12fff1e 	bx	lr

00008788 <Cpu::STA_ZP_X()>:
    8788:	e12fff1e 	bx	lr

0000878c <Cpu::STX_ZP_Y()>:
    878c:	e12fff1e 	bx	lr

00008790 <Cpu::TYA()>:
    8790:	e12fff1e 	bx	lr

00008794 <Cpu::STA_ABS_Y()>:
    8794:	e12fff1e 	bx	lr

00008798 <Cpu::TXS()>:
    8798:	e12fff1e 	bx	lr

0000879c <Cpu::STA_ABS_X()>:
    879c:	e12fff1e 	bx	lr

000087a0 <Cpu::LDY_IMM()>:
    87a0:	e12fff1e 	bx	lr

000087a4 <Cpu::LDA_IND_X()>:
    87a4:	e12fff1e 	bx	lr

000087a8 <Cpu::LDX_IMM()>:
    87a8:	e12fff1e 	bx	lr

000087ac <Cpu::LDY_ZP()>:
    87ac:	e12fff1e 	bx	lr

000087b0 <Cpu::LDA_ZP()>:
    87b0:	e12fff1e 	bx	lr

000087b4 <Cpu::LDX_ZP()>:
    87b4:	e12fff1e 	bx	lr

000087b8 <Cpu::TAY()>:
    87b8:	e12fff1e 	bx	lr

000087bc <Cpu::LDA_IMM()>:
    87bc:	e12fff1e 	bx	lr

000087c0 <Cpu::TAX()>:
    87c0:	e12fff1e 	bx	lr

000087c4 <Cpu::LDY_ABS()>:
    87c4:	e12fff1e 	bx	lr

000087c8 <Cpu::LDA_ABS()>:
    87c8:	e12fff1e 	bx	lr

000087cc <Cpu::LDX_ABS()>:
    87cc:	e12fff1e 	bx	lr

000087d0 <Cpu::BCS()>:
    87d0:	e12fff1e 	bx	lr

000087d4 <Cpu::LDA_IND_Y()>:
    87d4:	e12fff1e 	bx	lr

000087d8 <Cpu::LDY_ZP_X()>:
    87d8:	e12fff1e 	bx	lr

000087dc <Cpu::LDA_ZP_X()>:
    87dc:	e12fff1e 	bx	lr

000087e0 <Cpu::LDX_ZP_Y()>:
    87e0:	e12fff1e 	bx	lr

000087e4 <Cpu::CLV()>:
    87e4:	e12fff1e 	bx	lr

000087e8 <Cpu::LDA_ABS_Y()>:
    87e8:	e12fff1e 	bx	lr

000087ec <Cpu::TSX()>:
    87ec:	e12fff1e 	bx	lr

000087f0 <Cpu::LDY_ABS_X()>:
    87f0:	e12fff1e 	bx	lr

000087f4 <Cpu::LDA_ABS_X()>:
    87f4:	e12fff1e 	bx	lr

000087f8 <Cpu::LDX_ABS_Y()>:
    87f8:	e12fff1e 	bx	lr

000087fc <Cpu::CPY_IMM()>:
    87fc:	e12fff1e 	bx	lr

00008800 <Cpu::CMP_IND_X()>:
    8800:	e12fff1e 	bx	lr

00008804 <Cpu::CPY_ZP()>:
    8804:	e12fff1e 	bx	lr

00008808 <Cpu::CMP_ZP()>:
    8808:	e12fff1e 	bx	lr

0000880c <Cpu::DEC_ZP()>:
    880c:	e12fff1e 	bx	lr

00008810 <Cpu::INY()>:
    8810:	e12fff1e 	bx	lr

00008814 <Cpu::CMP_IMM()>:
    8814:	e12fff1e 	bx	lr

00008818 <Cpu::DEX()>:
    8818:	e12fff1e 	bx	lr

0000881c <Cpu::CPY_ABS()>:
    881c:	e12fff1e 	bx	lr

00008820 <Cpu::CMP_ABS()>:
    8820:	e12fff1e 	bx	lr

00008824 <Cpu::DEC_ABS()>:
    8824:	e12fff1e 	bx	lr

00008828 <Cpu::BNE()>:
    8828:	e12fff1e 	bx	lr

0000882c <Cpu::CMP_IND_Y()>:
    882c:	e12fff1e 	bx	lr

00008830 <Cpu::CMP_ZP_X()>:
    8830:	e12fff1e 	bx	lr

00008834 <Cpu::DEC_ZP_X()>:
    8834:	e12fff1e 	bx	lr

00008838 <Cpu::CLD()>:
    8838:	e12fff1e 	bx	lr

0000883c <Cpu::CMP_ABS_Y()>:
    883c:	e12fff1e 	bx	lr

00008840 <Cpu::CMP_ABS_X()>:
    8840:	e12fff1e 	bx	lr

00008844 <Cpu::DEC_ABS_X()>:
    8844:	e12fff1e 	bx	lr

00008848 <Cpu::CPX_IMM()>:
    8848:	e12fff1e 	bx	lr

0000884c <Cpu::SBC_IND_X()>:
    884c:	e12fff1e 	bx	lr

00008850 <Cpu::CPX_ZP()>:
    8850:	e12fff1e 	bx	lr

00008854 <Cpu::SBC_ZP()>:
    8854:	e12fff1e 	bx	lr

00008858 <Cpu::INC_ZP()>:
    8858:	e12fff1e 	bx	lr

0000885c <Cpu::INX()>:
    885c:	e12fff1e 	bx	lr

00008860 <Cpu::SBC_IMM()>:
    8860:	e12fff1e 	bx	lr

00008864 <Cpu::NOP()>:
    8864:	e12fff1e 	bx	lr

00008868 <Cpu::CPX_ABS()>:
    8868:	e12fff1e 	bx	lr

0000886c <Cpu::SBC_ABS()>:
    886c:	e12fff1e 	bx	lr

00008870 <Cpu::INC_ABS()>:
    8870:	e12fff1e 	bx	lr

00008874 <Cpu::BEQ()>:
    8874:	e12fff1e 	bx	lr

00008878 <Cpu::SBC_IND_Y()>:
    8878:	e12fff1e 	bx	lr

0000887c <Cpu::SBC_ZP_X()>:
    887c:	e12fff1e 	bx	lr

00008880 <Cpu::INC_ZP_X()>:
    8880:	e12fff1e 	bx	lr

00008884 <Cpu::SED()>:
    8884:	e12fff1e 	bx	lr

00008888 <Cpu::SBC_ABS_Y()>:
    8888:	e12fff1e 	bx	lr

0000888c <Cpu::Cpu(Rom const*)>:
    888c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8890:	e1a04000 	mov	r4, r0
    8894:	e3a03a02 	mov	r3, #8192	; 0x2000
    8898:	e3a02901 	mov	r2, #16384	; 0x4000
    889c:	e1a05001 	mov	r5, r1
    88a0:	e584300c 	str	r3, [r4, #12]
    88a4:	e2800014 	add	r0, r0, #20
    88a8:	e5843010 	str	r3, [r4, #16]
    88ac:	e3001540 	movw	r1, #1344	; 0x540
    88b0:	e3401005 	movt	r1, #5
    88b4:	e5842008 	str	r2, [r4, #8]
    88b8:	e3a02c01 	mov	r2, #256	; 0x100
    88bc:	eb0008d0 	bl	ac04 <memcpy>
    88c0:	e59f1080 	ldr	r1, [pc, #128]	; 8948 <Cpu::Cpu(Rom const*)+0xbc>
    88c4:	e3a02b02 	mov	r2, #2048	; 0x800
    88c8:	e2840f45 	add	r0, r4, #276	; 0x114
    88cc:	eb0008cc 	bl	ac04 <memcpy>
    88d0:	e1a00005 	mov	r0, r5
    88d4:	eb000049 	bl	8a00 <Rom::GetHeader() const>
    88d8:	e1d060d4 	ldrsb	r6, [r0, #4]
    88dc:	e1a00005 	mov	r0, r5
    88e0:	eb000056 	bl	8a40 <Rom::GetTrainerOffset() const>
    88e4:	e3560001 	cmp	r6, #1
    88e8:	e5951000 	ldr	r1, [r5]
    88ec:	e0807001 	add	r7, r0, r1
    88f0:	0a00000a 	beq	8920 <Cpu::Cpu(Rom const*)+0x94>
    88f4:	e3560002 	cmp	r6, #2
    88f8:	1a000010 	bne	8940 <Cpu::Cpu(Rom const*)+0xb4>
    88fc:	e1a00005 	mov	r0, r5
    8900:	e5946004 	ldr	r6, [r4, #4]
    8904:	eb000049 	bl	8a30 <Rom::GetRaw() const>
    8908:	e5942008 	ldr	r2, [r4, #8]
    890c:	e2866903 	add	r6, r6, #49152	; 0xc000
    8910:	e0871002 	add	r1, r7, r2
    8914:	e0801001 	add	r1, r0, r1
    8918:	e1a00006 	mov	r0, r6
    891c:	eb0008b8 	bl	ac04 <memcpy>
    8920:	e5943004 	ldr	r3, [r4, #4]
    8924:	e1a00005 	mov	r0, r5
    8928:	e2835902 	add	r5, r3, #32768	; 0x8000
    892c:	eb00003f 	bl	8a30 <Rom::GetRaw() const>
    8930:	e5942008 	ldr	r2, [r4, #8]
    8934:	e0801007 	add	r1, r0, r7
    8938:	e1a00005 	mov	r0, r5
    893c:	eb0008b0 	bl	ac04 <memcpy>
    8940:	e1a00004 	mov	r0, r4
    8944:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8948:	00050640 	.word	0x00050640

0000894c <Ppu::Ppu(Rom const*)>:
    894c:	e92d4010 	push	{r4, lr}
    8950:	e3001e40 	movw	r1, #3648	; 0xe40
    8954:	e3401005 	movt	r1, #5
    8958:	e3a020c0 	mov	r2, #192	; 0xc0
    895c:	eb0008a8 	bl	ac04 <memcpy>
    8960:	e8bd8010 	pop	{r4, pc}

00008964 <Cpu::FromValues(unsigned char) const>:
    8964:	e1a00001 	mov	r0, r1
    8968:	e12fff1e 	bx	lr

0000896c <Cpu::FromValues(unsigned char, unsigned char) const>:
    896c:	e1810402 	orr	r0, r1, r2, lsl #8
    8970:	e12fff1e 	bx	lr

00008974 <Cpu::Immediate(unsigned char) const>:
    8974:	e1a00001 	mov	r0, r1
    8978:	e12fff1e 	bx	lr

0000897c <Cpu::ZeroPage(unsigned char) const>:
    897c:	e1a00001 	mov	r0, r1
    8980:	e12fff1e 	bx	lr

00008984 <Cpu::Absolute(unsigned char, unsigned char) const>:
    8984:	e1810402 	orr	r0, r1, r2, lsl #8
    8988:	e12fff1e 	bx	lr

0000898c <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>:
    898c:	e1812402 	orr	r2, r1, r2, lsl #8
    8990:	e0823003 	add	r3, r2, r3
    8994:	e6ff0073 	uxth	r0, r3
    8998:	e12fff1e 	bx	lr

0000899c <Cpu::ZeroPageIndexed(unsigned char, unsigned char) const>:
    899c:	e0810002 	add	r0, r1, r2
    89a0:	e12fff1e 	bx	lr

000089a4 <Cpu::Indirect(unsigned char, unsigned char) const>:
    89a4:	e5903008 	ldr	r3, [r0, #8]
    89a8:	e1812402 	orr	r2, r1, r2, lsl #8
    89ac:	e0831002 	add	r1, r3, r2
    89b0:	e7d33002 	ldrb	r3, [r3, r2]
    89b4:	e5d10001 	ldrb	r0, [r1, #1]
    89b8:	e1830400 	orr	r0, r3, r0, lsl #8
    89bc:	e12fff1e 	bx	lr

000089c0 <Cpu::PreIndexedIndirect(unsigned char, unsigned char) const>:
    89c0:	e0812002 	add	r2, r1, r2
    89c4:	e5903008 	ldr	r3, [r0, #8]
    89c8:	e6ef2072 	uxtb	r2, r2
    89cc:	e0831002 	add	r1, r3, r2
    89d0:	e7d33002 	ldrb	r3, [r3, r2]
    89d4:	e5d10001 	ldrb	r0, [r1, #1]
    89d8:	e1830400 	orr	r0, r3, r0, lsl #8
    89dc:	e12fff1e 	bx	lr

000089e0 <Cpu::PostIndexedIndirect(unsigned char, unsigned char) const>:
    89e0:	e5903008 	ldr	r3, [r0, #8]
    89e4:	e083c001 	add	ip, r3, r1
    89e8:	e7d30001 	ldrb	r0, [r3, r1]
    89ec:	e5dc3001 	ldrb	r3, [ip, #1]
    89f0:	e1800403 	orr	r0, r0, r3, lsl #8
    89f4:	e0800002 	add	r0, r0, r2
    89f8:	e6ff0070 	uxth	r0, r0
    89fc:	e12fff1e 	bx	lr

00008a00 <Rom::GetHeader() const>:
    8a00:	e92d4010 	push	{r4, lr}
    8a04:	e1a04000 	mov	r4, r0
    8a08:	e3a00010 	mov	r0, #16
    8a0c:	eb000530 	bl	9ed4 <operator new(unsigned int)>
    8a10:	e284300b 	add	r3, r4, #11
    8a14:	e284c01b 	add	ip, r4, #27
    8a18:	e2402001 	sub	r2, r0, #1
    8a1c:	e5f31001 	ldrb	r1, [r3, #1]!
    8a20:	e153000c 	cmp	r3, ip
    8a24:	e5e21001 	strb	r1, [r2, #1]!
    8a28:	1afffffb 	bne	8a1c <Rom::GetHeader() const+0x1c>
    8a2c:	e8bd8010 	pop	{r4, pc}

00008a30 <Rom::GetRaw() const>:
    8a30:	e280000c 	add	r0, r0, #12
    8a34:	e12fff1e 	bx	lr

00008a38 <Rom::GetLength() const>:
    8a38:	e5900008 	ldr	r0, [r0, #8]
    8a3c:	e12fff1e 	bx	lr

00008a40 <Rom::GetTrainerOffset() const>:
    8a40:	e92d4010 	push	{r4, lr}
    8a44:	e1a04000 	mov	r4, r0
    8a48:	e3a00010 	mov	r0, #16
    8a4c:	eb000520 	bl	9ed4 <operator new(unsigned int)>
    8a50:	e284300b 	add	r3, r4, #11
    8a54:	e2402001 	sub	r2, r0, #1
    8a58:	e284c01b 	add	ip, r4, #27
    8a5c:	e5f31001 	ldrb	r1, [r3, #1]!
    8a60:	e153000c 	cmp	r3, ip
    8a64:	e5e21001 	strb	r1, [r2, #1]!
    8a68:	1afffffb 	bne	8a5c <Rom::GetTrainerOffset() const+0x1c>
    8a6c:	e5d03006 	ldrb	r3, [r0, #6]
    8a70:	e5940004 	ldr	r0, [r4, #4]
    8a74:	e2033004 	and	r3, r3, #4
    8a78:	e0000390 	mul	r0, r0, r3
    8a7c:	e8bd8010 	pop	{r4, pc}

00008a80 <CActLED::~CActLED()>:
    8a80:	e3023d6c 	movw	r3, #11628	; 0x2d6c
    8a84:	e3403005 	movt	r3, #5
    8a88:	e3a02000 	mov	r2, #0
    8a8c:	e5832000 	str	r2, [r3]
    8a90:	e12fff1e 	bx	lr

00008a94 <CActLED::On()>:
    8a94:	e5903000 	ldr	r3, [r0]
    8a98:	e3530000 	cmp	r3, #0
    8a9c:	0a000004 	beq	8ab4 <CActLED::On()+0x20>
    8aa0:	e5901008 	ldr	r1, [r0, #8]
    8aa4:	e1a00003 	mov	r0, r3
    8aa8:	e2911000 	adds	r1, r1, #0
    8aac:	13a01001 	movne	r1, #1
    8ab0:	ea0000ee 	b	8e70 <CGPIOPin::Write(unsigned int)>
    8ab4:	e5903004 	ldr	r3, [r0, #4]
    8ab8:	e3530000 	cmp	r3, #0
    8abc:	012fff1e 	bxeq	lr
    8ac0:	e5901008 	ldr	r1, [r0, #8]
    8ac4:	e1a00003 	mov	r0, r3
    8ac8:	e2911000 	adds	r1, r1, #0
    8acc:	13a01001 	movne	r1, #1
    8ad0:	ea001841 	b	ebdc <CVirtualGPIOPin::Write(unsigned int)>

00008ad4 <CActLED::Off()>:
    8ad4:	e5903000 	ldr	r3, [r0]
    8ad8:	e3530000 	cmp	r3, #0
    8adc:	0a000004 	beq	8af4 <CActLED::Off()+0x20>
    8ae0:	e5901008 	ldr	r1, [r0, #8]
    8ae4:	e1a00003 	mov	r0, r3
    8ae8:	e16f1f11 	clz	r1, r1
    8aec:	e1a012a1 	lsr	r1, r1, #5
    8af0:	ea0000de 	b	8e70 <CGPIOPin::Write(unsigned int)>
    8af4:	e5903004 	ldr	r3, [r0, #4]
    8af8:	e3530000 	cmp	r3, #0
    8afc:	012fff1e 	bxeq	lr
    8b00:	e5901008 	ldr	r1, [r0, #8]
    8b04:	e1a00003 	mov	r0, r3
    8b08:	e16f1f11 	clz	r1, r1
    8b0c:	e1a012a1 	lsr	r1, r1, #5
    8b10:	ea001831 	b	ebdc <CVirtualGPIOPin::Write(unsigned int)>

00008b14 <CActLED::CActLED()>:
    8b14:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8b18:	e1a04000 	mov	r4, r0
    8b1c:	e3023d6c 	movw	r3, #11628	; 0x2d6c
    8b20:	e3403005 	movt	r3, #5
    8b24:	e24dd024 	sub	sp, sp, #36	; 0x24
    8b28:	e3a05000 	mov	r5, #0
    8b2c:	e5805000 	str	r5, [r0]
    8b30:	e28d0008 	add	r0, sp, #8
    8b34:	e5845004 	str	r5, [r4, #4]
    8b38:	e5834000 	str	r4, [r3]
    8b3c:	eb000051 	bl	8c88 <CBcmPropertyTags::CBcmPropertyTags()>
    8b40:	e3a03010 	mov	r3, #16
    8b44:	e58d5000 	str	r5, [sp]
    8b48:	e28d0008 	add	r0, sp, #8
    8b4c:	e3a01002 	mov	r1, #2
    8b50:	e3401001 	movt	r1, #1
    8b54:	e08d2003 	add	r2, sp, r3
    8b58:	eb000092 	bl	8da8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8b5c:	e1500005 	cmp	r0, r5
    8b60:	0a000011 	beq	8bac <CActLED::CActLED()+0x98>
    8b64:	e59d301c 	ldr	r3, [sp, #28]
    8b68:	e3130502 	tst	r3, #8388608	; 0x800000
    8b6c:	1a000013 	bne	8bc0 <CActLED::CActLED()+0xac>
    8b70:	e6ff3073 	uxth	r3, r3
    8b74:	e353000f 	cmp	r3, #15
    8b78:	83a06001 	movhi	r6, #1
    8b7c:	9a00001c 	bls	8bf4 <CActLED::CActLED()+0xe0>
    8b80:	e3a00020 	mov	r0, #32
    8b84:	eb0004d2 	bl	9ed4 <operator new(unsigned int)>
    8b88:	e3a03000 	mov	r3, #0
    8b8c:	e1a05000 	mov	r5, r0
    8b90:	e3a02001 	mov	r2, #1
    8b94:	e3a0102f 	mov	r1, #47	; 0x2f
    8b98:	eb0003ad 	bl	9a54 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8b9c:	e5845000 	str	r5, [r4]
    8ba0:	e5846008 	str	r6, [r4, #8]
    8ba4:	e1a00004 	mov	r0, r4
    8ba8:	ebffffc9 	bl	8ad4 <CActLED::Off()>
    8bac:	e28d0008 	add	r0, sp, #8
    8bb0:	eb00003a 	bl	8ca0 <CBcmPropertyTags::~CBcmPropertyTags()>
    8bb4:	e1a00004 	mov	r0, r4
    8bb8:	e28dd024 	add	sp, sp, #36	; 0x24
    8bbc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8bc0:	e7e73253 	ubfx	r3, r3, #4, #8
    8bc4:	e3530001 	cmp	r3, #1
    8bc8:	9a000009 	bls	8bf4 <CActLED::CActLED()+0xe0>
    8bcc:	e3530008 	cmp	r3, #8
    8bd0:	1a000012 	bne	8c20 <CActLED::CActLED()+0x10c>
    8bd4:	e3a00010 	mov	r0, #16
    8bd8:	e3a06001 	mov	r6, #1
    8bdc:	eb0004bc 	bl	9ed4 <operator new(unsigned int)>
    8be0:	e1a01005 	mov	r1, r5
    8be4:	e1a07000 	mov	r7, r0
    8be8:	eb0017bf 	bl	eaec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    8bec:	e5847004 	str	r7, [r4, #4]
    8bf0:	eaffffea 	b	8ba0 <CActLED::CActLED()+0x8c>
    8bf4:	e3a00020 	mov	r0, #32
    8bf8:	eb0004b5 	bl	9ed4 <operator new(unsigned int)>
    8bfc:	e3a03000 	mov	r3, #0
    8c00:	e3a02001 	mov	r2, #1
    8c04:	e3a01010 	mov	r1, #16
    8c08:	e1a05000 	mov	r5, r0
    8c0c:	eb000390 	bl	9a54 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8c10:	e3a03000 	mov	r3, #0
    8c14:	e5845000 	str	r5, [r4]
    8c18:	e5843008 	str	r3, [r4, #8]
    8c1c:	eaffffe0 	b	8ba4 <CActLED::CActLED()+0x90>
    8c20:	e2536009 	subs	r6, r3, #9
    8c24:	13a06001 	movne	r6, #1
    8c28:	eaffffd4 	b	8b80 <CActLED::CActLED()+0x6c>

00008c2c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    8c2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8c30:	e2516000 	subs	r6, r1, #0
    8c34:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8c38:	e1a08003 	mov	r8, r3
    8c3c:	e1a07002 	mov	r7, r2
    8c40:	e1a05000 	mov	r5, r0
    8c44:	e3a04001 	mov	r4, #1
    8c48:	e1a00005 	mov	r0, r5
    8c4c:	e2844001 	add	r4, r4, #1
    8c50:	ebffff8f 	bl	8a94 <CActLED::On()>
    8c54:	e1a00007 	mov	r0, r7
    8c58:	eb00078e 	bl	aa98 <CTimer::SimpleMsDelay(unsigned int)>
    8c5c:	e1a00005 	mov	r0, r5
    8c60:	ebffff9b 	bl	8ad4 <CActLED::Off()>
    8c64:	e1a00008 	mov	r0, r8
    8c68:	eb00078a 	bl	aa98 <CTimer::SimpleMsDelay(unsigned int)>
    8c6c:	e1560004 	cmp	r6, r4
    8c70:	2afffff4 	bcs	8c48 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    8c74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008c78 <CActLED::Get()>:
    8c78:	e3023d6c 	movw	r3, #11628	; 0x2d6c
    8c7c:	e3403005 	movt	r3, #5
    8c80:	e5930000 	ldr	r0, [r3]
    8c84:	e12fff1e 	bx	lr

00008c88 <CBcmPropertyTags::CBcmPropertyTags()>:
    8c88:	e92d4010 	push	{r4, lr}
    8c8c:	e3a01008 	mov	r1, #8
    8c90:	e1a04000 	mov	r4, r0
    8c94:	eb001baa 	bl	fb44 <CBcmMailBox::CBcmMailBox(unsigned int)>
    8c98:	e1a00004 	mov	r0, r4
    8c9c:	e8bd8010 	pop	{r4, pc}

00008ca0 <CBcmPropertyTags::~CBcmPropertyTags()>:
    8ca0:	e92d4010 	push	{r4, lr}
    8ca4:	e1a04000 	mov	r4, r0
    8ca8:	eb001ba8 	bl	fb50 <CBcmMailBox::~CBcmMailBox()>
    8cac:	e1a00004 	mov	r0, r4
    8cb0:	e8bd8010 	pop	{r4, pc}

00008cb4 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    8cb4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8cb8:	e2519000 	subs	r9, r1, #0
    8cbc:	e1a0a000 	mov	sl, r0
    8cc0:	e1a04002 	mov	r4, r2
    8cc4:	0a000030 	beq	8d8c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd8>
    8cc8:	e354000f 	cmp	r4, #15
    8ccc:	9a000027 	bls	8d70 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xbc>
    8cd0:	e284800c 	add	r8, r4, #12
    8cd4:	e3180003 	tst	r8, #3
    8cd8:	1a00001d 	bne	8d54 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
    8cdc:	e3a06501 	mov	r6, #4194304	; 0x400000
    8ce0:	e3a05008 	mov	r5, #8
    8ce4:	e3405040 	movt	r5, #64	; 0x40
    8ce8:	e3a07000 	mov	r7, #0
    8cec:	e1a00005 	mov	r0, r5
    8cf0:	e5868000 	str	r8, [r6]
    8cf4:	e1a02004 	mov	r2, r4
    8cf8:	e5867004 	str	r7, [r6, #4]
    8cfc:	e1a01009 	mov	r1, r9
    8d00:	eb0007bf 	bl	ac04 <memcpy>
    8d04:	e7857004 	str	r7, [r5, r4]
    8d08:	f57ff04f 	dsb	sy
    8d0c:	e1a01007 	mov	r1, r7
    8d10:	e1a0000a 	mov	r0, sl
    8d14:	e34c1040 	movt	r1, #49216	; 0xc040
    8d18:	eb001bbc 	bl	fc10 <CBcmMailBox::WriteRead(unsigned int)>
    8d1c:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
    8d20:	0a000001 	beq	8d2c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x78>
    8d24:	e3a00000 	mov	r0, #0
    8d28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8d2c:	f57ff05f 	dmb	sy
    8d30:	e5963004 	ldr	r3, [r6, #4]
    8d34:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    8d38:	1afffff9 	bne	8d24 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x70>
    8d3c:	e1a02004 	mov	r2, r4
    8d40:	e1a01005 	mov	r1, r5
    8d44:	e1a00009 	mov	r0, r9
    8d48:	eb0007ad 	bl	ac04 <memcpy>
    8d4c:	e3a00001 	mov	r0, #1
    8d50:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8d54:	e3001f00 	movw	r1, #3840	; 0xf00
    8d58:	e3401005 	movt	r1, #5
    8d5c:	e3000f4c 	movw	r0, #3916	; 0xf4c
    8d60:	e3400005 	movt	r0, #5
    8d64:	e3a02051 	mov	r2, #81	; 0x51
    8d68:	eb000e06 	bl	c588 <assertion_failed>
    8d6c:	eaffffda 	b	8cdc <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    8d70:	e3001f00 	movw	r1, #3840	; 0xf00
    8d74:	e3401005 	movt	r1, #5
    8d78:	e3000f20 	movw	r0, #3872	; 0xf20
    8d7c:	e3400005 	movt	r0, #5
    8d80:	e3a0204f 	mov	r2, #79	; 0x4f
    8d84:	eb000dff 	bl	c588 <assertion_failed>
    8d88:	eaffffd0 	b	8cd0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    8d8c:	e3001f00 	movw	r1, #3840	; 0xf00
    8d90:	e3401005 	movt	r1, #5
    8d94:	e3000f14 	movw	r0, #3860	; 0xf14
    8d98:	e3400005 	movt	r0, #5
    8d9c:	e3a0204e 	mov	r2, #78	; 0x4e
    8da0:	eb000df8 	bl	c588 <assertion_failed>
    8da4:	eaffffc7 	b	8cc8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>

00008da8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    8da8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8dac:	e2524000 	subs	r4, r2, #0
    8db0:	e1a08000 	mov	r8, r0
    8db4:	e1a07001 	mov	r7, r1
    8db8:	e1a05003 	mov	r5, r3
    8dbc:	e59d6018 	ldr	r6, [sp, #24]
    8dc0:	0a00001d 	beq	8e3c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x94>
    8dc4:	e355000f 	cmp	r5, #15
    8dc8:	9a000014 	bls	8e20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
    8dcc:	e245300c 	sub	r3, r5, #12
    8dd0:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
    8dd4:	e5846008 	str	r6, [r4, #8]
    8dd8:	e1a00008 	mov	r0, r8
    8ddc:	e5847000 	str	r7, [r4]
    8de0:	e1a02005 	mov	r2, r5
    8de4:	e5843004 	str	r3, [r4, #4]
    8de8:	e1a01004 	mov	r1, r4
    8dec:	ebffffb0 	bl	8cb4 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    8df0:	e3500000 	cmp	r0, #0
    8df4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8df8:	e5940008 	ldr	r0, [r4, #8]
    8dfc:	e3500000 	cmp	r0, #0
    8e00:	ba000001 	blt	8e0c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
    8e04:	e3a00000 	mov	r0, #0
    8e08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8e0c:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    8e10:	e5840008 	str	r0, [r4, #8]
    8e14:	e2900000 	adds	r0, r0, #0
    8e18:	13a00001 	movne	r0, #1
    8e1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8e20:	e3001f00 	movw	r1, #3840	; 0xf00
    8e24:	e3401005 	movt	r1, #5
    8e28:	e3000f70 	movw	r0, #3952	; 0xf70
    8e2c:	e3400005 	movt	r0, #5
    8e30:	e3a02032 	mov	r2, #50	; 0x32
    8e34:	eb000dd3 	bl	c588 <assertion_failed>
    8e38:	eaffffe3 	b	8dcc <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    8e3c:	e3001f00 	movw	r1, #3840	; 0xf00
    8e40:	e3401005 	movt	r1, #5
    8e44:	e3000f64 	movw	r0, #3940	; 0xf64
    8e48:	e3400005 	movt	r0, #5
    8e4c:	e3a02031 	mov	r2, #49	; 0x31
    8e50:	eb000dcc 	bl	c588 <assertion_failed>
    8e54:	eaffffda 	b	8dc4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>

00008e58 <CGPIOPin::~CGPIOPin()>:
    8e58:	e12fff1e 	bx	lr

00008e5c <CGPIOPin::~CGPIOPin()>:
    8e5c:	e92d4010 	push	{r4, lr}
    8e60:	e1a04000 	mov	r4, r0
    8e64:	eb00041c 	bl	9edc <operator delete(void*)>
    8e68:	e1a00004 	mov	r0, r4
    8e6c:	e8bd8010 	pop	{r4, pc}

00008e70 <CGPIOPin::Write(unsigned int)>:
    8e70:	e5d03008 	ldrb	r3, [r0, #8]
    8e74:	e92d4070 	push	{r4, r5, r6, lr}
    8e78:	e1a04000 	mov	r4, r0
    8e7c:	e3530003 	cmp	r3, #3
    8e80:	e1a05001 	mov	r5, r1
    8e84:	ca000017 	bgt	8ee8 <CGPIOPin::Write(unsigned int)+0x78>
    8e88:	e3550001 	cmp	r5, #1
    8e8c:	9a000005 	bls	8ea8 <CGPIOPin::Write(unsigned int)+0x38>
    8e90:	e3001fc0 	movw	r1, #4032	; 0xfc0
    8e94:	e3401005 	movt	r1, #5
    8e98:	e3000ff0 	movw	r0, #4080	; 0xff0
    8e9c:	e3400005 	movt	r0, #5
    8ea0:	e3a02081 	mov	r2, #129	; 0x81
    8ea4:	eb000db7 	bl	c588 <assertion_failed>
    8ea8:	e5943004 	ldr	r3, [r4, #4]
    8eac:	e584500c 	str	r5, [r4, #12]
    8eb0:	e3530035 	cmp	r3, #53	; 0x35
    8eb4:	8a000012 	bhi	8f04 <CGPIOPin::Write(unsigned int)+0x94>
    8eb8:	e203c01f 	and	ip, r3, #31
    8ebc:	e3a0001c 	mov	r0, #28
    8ec0:	e3430f20 	movt	r0, #16160	; 0x3f20
    8ec4:	e3a01001 	mov	r1, #1
    8ec8:	e3550000 	cmp	r5, #0
    8ecc:	e3a02028 	mov	r2, #40	; 0x28
    8ed0:	e3432f20 	movt	r2, #16160	; 0x3f20
    8ed4:	e1a032a3 	lsr	r3, r3, #5
    8ed8:	11a02000 	movne	r2, r0
    8edc:	e1a01c11 	lsl	r1, r1, ip
    8ee0:	e7821103 	str	r1, [r2, r3, lsl #2]
    8ee4:	e8bd8070 	pop	{r4, r5, r6, pc}
    8ee8:	e3001fc0 	movw	r1, #4032	; 0xfc0
    8eec:	e3401005 	movt	r1, #5
    8ef0:	e3000fcc 	movw	r0, #4044	; 0xfcc
    8ef4:	e3400005 	movt	r0, #5
    8ef8:	e3a0207d 	mov	r2, #125	; 0x7d
    8efc:	eb000da1 	bl	c588 <assertion_failed>
    8f00:	eaffffe0 	b	8e88 <CGPIOPin::Write(unsigned int)+0x18>
    8f04:	e3001fc0 	movw	r1, #4032	; 0xfc0
    8f08:	e3401005 	movt	r1, #5
    8f0c:	e3010010 	movw	r0, #4112	; 0x1010
    8f10:	e3400005 	movt	r0, #5
    8f14:	e3a02084 	mov	r2, #132	; 0x84
    8f18:	eb000d9a 	bl	c588 <assertion_failed>
    8f1c:	e594500c 	ldr	r5, [r4, #12]
    8f20:	e5943004 	ldr	r3, [r4, #4]
    8f24:	eaffffe3 	b	8eb8 <CGPIOPin::Write(unsigned int)+0x48>

00008f28 <CGPIOPin::Read() const>:
    8f28:	e5d03008 	ldrb	r3, [r0, #8]
    8f2c:	e92d4010 	push	{r4, lr}
    8f30:	e1a04000 	mov	r4, r0
    8f34:	e2432002 	sub	r2, r3, #2
    8f38:	e3530000 	cmp	r3, #0
    8f3c:	13520001 	cmpne	r2, #1
    8f40:	9a000005 	bls	8f5c <CGPIOPin::Read() const+0x34>
    8f44:	e3001fc0 	movw	r1, #4032	; 0xfc0
    8f48:	e3401005 	movt	r1, #5
    8f4c:	e3010024 	movw	r0, #4132	; 0x1024
    8f50:	e3400005 	movt	r0, #5
    8f54:	e3a02091 	mov	r2, #145	; 0x91
    8f58:	eb000d8a 	bl	c588 <assertion_failed>
    8f5c:	e5942004 	ldr	r2, [r4, #4]
    8f60:	e3520035 	cmp	r2, #53	; 0x35
    8f64:	8a000009 	bhi	8f90 <CGPIOPin::Read() const+0x68>
    8f68:	e3a0300d 	mov	r3, #13
    8f6c:	e3403fc8 	movt	r3, #4040	; 0xfc8
    8f70:	e3a00001 	mov	r0, #1
    8f74:	e202101f 	and	r1, r2, #31
    8f78:	e08332a2 	add	r3, r3, r2, lsr #5
    8f7c:	e1a03103 	lsl	r3, r3, #2
    8f80:	e5933000 	ldr	r3, [r3]
    8f84:	e0133110 	ands	r3, r3, r0, lsl r1
    8f88:	03a00000 	moveq	r0, #0
    8f8c:	e8bd8010 	pop	{r4, pc}
    8f90:	e3a02095 	mov	r2, #149	; 0x95
    8f94:	e3001fc0 	movw	r1, #4032	; 0xfc0
    8f98:	e3401005 	movt	r1, #5
    8f9c:	e3010010 	movw	r0, #4112	; 0x1010
    8fa0:	e3400005 	movt	r0, #5
    8fa4:	eb000d77 	bl	c588 <assertion_failed>
    8fa8:	e5942004 	ldr	r2, [r4, #4]
    8fac:	eaffffed 	b	8f68 <CGPIOPin::Read() const+0x40>

00008fb0 <CGPIOPin::Invert()>:
    8fb0:	e5d03008 	ldrb	r3, [r0, #8]
    8fb4:	e92d4010 	push	{r4, lr}
    8fb8:	e1a04000 	mov	r4, r0
    8fbc:	e3530001 	cmp	r3, #1
    8fc0:	0a000005 	beq	8fdc <CGPIOPin::Invert()+0x2c>
    8fc4:	e3001fc0 	movw	r1, #4032	; 0xfc0
    8fc8:	e3401005 	movt	r1, #5
    8fcc:	e3010080 	movw	r0, #4224	; 0x1080
    8fd0:	e3400005 	movt	r0, #5
    8fd4:	e3a020a2 	mov	r2, #162	; 0xa2
    8fd8:	eb000d6a 	bl	c588 <assertion_failed>
    8fdc:	e594100c 	ldr	r1, [r4, #12]
    8fe0:	e1a00004 	mov	r0, r4
    8fe4:	e8bd4010 	pop	{r4, lr}
    8fe8:	e2211001 	eor	r1, r1, #1
    8fec:	eaffff9f 	b	8e70 <CGPIOPin::Write(unsigned int)>

00008ff0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    8ff0:	e5d03008 	ldrb	r3, [r0, #8]
    8ff4:	e92d4070 	push	{r4, r5, r6, lr}
    8ff8:	e1a06002 	mov	r6, r2
    8ffc:	e2432002 	sub	r2, r3, #2
    9000:	e3530000 	cmp	r3, #0
    9004:	13520001 	cmpne	r2, #1
    9008:	e1a04000 	mov	r4, r0
    900c:	e1a05001 	mov	r5, r1
    9010:	9a000005 	bls	902c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x3c>
    9014:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9018:	e3401005 	movt	r1, #5
    901c:	e3010024 	movw	r0, #4132	; 0x1024
    9020:	e3400005 	movt	r0, #5
    9024:	e3a020ab 	mov	r2, #171	; 0xab
    9028:	eb000d56 	bl	c588 <assertion_failed>
    902c:	e5d4301c 	ldrb	r3, [r4, #28]
    9030:	e3530006 	cmp	r3, #6
    9034:	0a000005 	beq	9050 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x60>
    9038:	e3001fc0 	movw	r1, #4032	; 0xfc0
    903c:	e3401005 	movt	r1, #5
    9040:	e301009c 	movw	r0, #4252	; 0x109c
    9044:	e3400005 	movt	r0, #5
    9048:	e3a020ad 	mov	r2, #173	; 0xad
    904c:	eb000d4d 	bl	c588 <assertion_failed>
    9050:	e5d4301d 	ldrb	r3, [r4, #29]
    9054:	e3530006 	cmp	r3, #6
    9058:	0a000005 	beq	9074 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x84>
    905c:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9060:	e3401005 	movt	r1, #5
    9064:	e30100c0 	movw	r0, #4288	; 0x10c0
    9068:	e3400005 	movt	r0, #5
    906c:	e3a020ae 	mov	r2, #174	; 0xae
    9070:	eb000d44 	bl	c588 <assertion_failed>
    9074:	e3550000 	cmp	r5, #0
    9078:	0a00001a 	beq	90e8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    907c:	e5943014 	ldr	r3, [r4, #20]
    9080:	e3530000 	cmp	r3, #0
    9084:	0a000005 	beq	90a0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    9088:	e3001fc0 	movw	r1, #4032	; 0xfc0
    908c:	e3401005 	movt	r1, #5
    9090:	e30100f8 	movw	r0, #4344	; 0x10f8
    9094:	e3400005 	movt	r0, #5
    9098:	e3a020b1 	mov	r2, #177	; 0xb1
    909c:	eb000d39 	bl	c588 <assertion_failed>
    90a0:	e5940010 	ldr	r0, [r4, #16]
    90a4:	e5845014 	str	r5, [r4, #20]
    90a8:	e3500000 	cmp	r0, #0
    90ac:	e5846018 	str	r6, [r4, #24]
    90b0:	0a000002 	beq	90c0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    90b4:	e1a01004 	mov	r1, r4
    90b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    90bc:	ea0015c4 	b	e7d4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    90c0:	e3001fc0 	movw	r1, #4032	; 0xfc0
    90c4:	e3401005 	movt	r1, #5
    90c8:	e3010108 	movw	r0, #4360	; 0x1108
    90cc:	e3400005 	movt	r0, #5
    90d0:	e3a020b6 	mov	r2, #182	; 0xb6
    90d4:	eb000d2b 	bl	c588 <assertion_failed>
    90d8:	e5940010 	ldr	r0, [r4, #16]
    90dc:	e1a01004 	mov	r1, r4
    90e0:	e8bd4070 	pop	{r4, r5, r6, lr}
    90e4:	ea0015ba 	b	e7d4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    90e8:	e3001fc0 	movw	r1, #4032	; 0xfc0
    90ec:	e3401005 	movt	r1, #5
    90f0:	e30100e8 	movw	r0, #4328	; 0x10e8
    90f4:	e3400005 	movt	r0, #5
    90f8:	e3a020b0 	mov	r2, #176	; 0xb0
    90fc:	eb000d21 	bl	c588 <assertion_failed>
    9100:	eaffffdd 	b	907c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x8c>

00009104 <CGPIOPin::DisconnectInterrupt()>:
    9104:	e5d03008 	ldrb	r3, [r0, #8]
    9108:	e92d4010 	push	{r4, lr}
    910c:	e1a04000 	mov	r4, r0
    9110:	e2432002 	sub	r2, r3, #2
    9114:	e3530000 	cmp	r3, #0
    9118:	13520001 	cmpne	r2, #1
    911c:	9a000005 	bls	9138 <CGPIOPin::DisconnectInterrupt()+0x34>
    9120:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9124:	e3401005 	movt	r1, #5
    9128:	e3010024 	movw	r0, #4132	; 0x1024
    912c:	e3400005 	movt	r0, #5
    9130:	e3a020be 	mov	r2, #190	; 0xbe
    9134:	eb000d13 	bl	c588 <assertion_failed>
    9138:	e5d4301c 	ldrb	r3, [r4, #28]
    913c:	e3530006 	cmp	r3, #6
    9140:	0a000005 	beq	915c <CGPIOPin::DisconnectInterrupt()+0x58>
    9144:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9148:	e3401005 	movt	r1, #5
    914c:	e301009c 	movw	r0, #4252	; 0x109c
    9150:	e3400005 	movt	r0, #5
    9154:	e3a020c0 	mov	r2, #192	; 0xc0
    9158:	eb000d0a 	bl	c588 <assertion_failed>
    915c:	e5d4301d 	ldrb	r3, [r4, #29]
    9160:	e3530006 	cmp	r3, #6
    9164:	0a000005 	beq	9180 <CGPIOPin::DisconnectInterrupt()+0x7c>
    9168:	e3001fc0 	movw	r1, #4032	; 0xfc0
    916c:	e3401005 	movt	r1, #5
    9170:	e30100c0 	movw	r0, #4288	; 0x10c0
    9174:	e3400005 	movt	r0, #5
    9178:	e3a020c1 	mov	r2, #193	; 0xc1
    917c:	eb000d01 	bl	c588 <assertion_failed>
    9180:	e5943014 	ldr	r3, [r4, #20]
    9184:	e3530000 	cmp	r3, #0
    9188:	0a000011 	beq	91d4 <CGPIOPin::DisconnectInterrupt()+0xd0>
    918c:	e5940010 	ldr	r0, [r4, #16]
    9190:	e3a03000 	mov	r3, #0
    9194:	e5843014 	str	r3, [r4, #20]
    9198:	e1500003 	cmp	r0, r3
    919c:	0a000002 	beq	91ac <CGPIOPin::DisconnectInterrupt()+0xa8>
    91a0:	e1a01004 	mov	r1, r4
    91a4:	e8bd4010 	pop	{r4, lr}
    91a8:	ea0015b5 	b	e884 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    91ac:	e3001fc0 	movw	r1, #4032	; 0xfc0
    91b0:	e3401005 	movt	r1, #5
    91b4:	e3010108 	movw	r0, #4360	; 0x1108
    91b8:	e3400005 	movt	r0, #5
    91bc:	e3a020c6 	mov	r2, #198	; 0xc6
    91c0:	eb000cf0 	bl	c588 <assertion_failed>
    91c4:	e5940010 	ldr	r0, [r4, #16]
    91c8:	e1a01004 	mov	r1, r4
    91cc:	e8bd4010 	pop	{r4, lr}
    91d0:	ea0015ab 	b	e884 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    91d4:	e3001fc0 	movw	r1, #4032	; 0xfc0
    91d8:	e3401005 	movt	r1, #5
    91dc:	e3010118 	movw	r0, #4376	; 0x1118
    91e0:	e3400005 	movt	r0, #5
    91e4:	e3a020c3 	mov	r2, #195	; 0xc3
    91e8:	eb000ce6 	bl	c588 <assertion_failed>
    91ec:	eaffffe6 	b	918c <CGPIOPin::DisconnectInterrupt()+0x88>

000091f0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    91f0:	e5d03008 	ldrb	r3, [r0, #8]
    91f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    91f8:	e1a04000 	mov	r4, r0
    91fc:	e2432002 	sub	r2, r3, #2
    9200:	e3530000 	cmp	r3, #0
    9204:	13520001 	cmpne	r2, #1
    9208:	e1a08001 	mov	r8, r1
    920c:	9a000005 	bls	9228 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x38>
    9210:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9214:	e3401005 	movt	r1, #5
    9218:	e3010024 	movw	r0, #4132	; 0x1024
    921c:	e3400005 	movt	r0, #5
    9220:	e3a020ce 	mov	r2, #206	; 0xce
    9224:	eb000cd7 	bl	c588 <assertion_failed>
    9228:	e5943010 	ldr	r3, [r4, #16]
    922c:	e3530000 	cmp	r3, #0
    9230:	0a000043 	beq	9344 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    9234:	e5943014 	ldr	r3, [r4, #20]
    9238:	e3530000 	cmp	r3, #0
    923c:	0a000047 	beq	9360 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x170>
    9240:	e5d4301c 	ldrb	r3, [r4, #28]
    9244:	e3530006 	cmp	r3, #6
    9248:	0a000005 	beq	9264 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x74>
    924c:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9250:	e3401005 	movt	r1, #5
    9254:	e301009c 	movw	r0, #4252	; 0x109c
    9258:	e3400005 	movt	r0, #5
    925c:	e3a020d2 	mov	r2, #210	; 0xd2
    9260:	eb000cc8 	bl	c588 <assertion_failed>
    9264:	e3580005 	cmp	r8, #5
    9268:	ca000025 	bgt	9304 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
    926c:	e5d4301d 	ldrb	r3, [r4, #29]
    9270:	e1530008 	cmp	r3, r8
    9274:	0a00002b 	beq	9328 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x138>
    9278:	e5943004 	ldr	r3, [r4, #4]
    927c:	e5c4801c 	strb	r8, [r4, #28]
    9280:	e3530035 	cmp	r3, #53	; 0x35
    9284:	8a000016 	bhi	92e4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9288:	e3026d70 	movw	r6, #11632	; 0x2d70
    928c:	e3406005 	movt	r6, #5
    9290:	e203101f 	and	r1, r3, #31
    9294:	e3a05001 	mov	r5, #1
    9298:	e3a0700c 	mov	r7, #12
    929c:	e3a04013 	mov	r4, #19
    92a0:	e3404fc8 	movt	r4, #4040	; 0xfc8
    92a4:	e5962000 	ldr	r2, [r6]
    92a8:	e1a05115 	lsl	r5, r5, r1
    92ac:	e08442a3 	add	r4, r4, r3, lsr #5
    92b0:	e0070897 	mul	r7, r7, r8
    92b4:	e3520000 	cmp	r2, #0
    92b8:	1a000007 	bne	92dc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xec>
    92bc:	e7973104 	ldr	r3, [r7, r4, lsl #2]
    92c0:	e1855003 	orr	r5, r5, r3
    92c4:	e7875104 	str	r5, [r7, r4, lsl #2]
    92c8:	e5963000 	ldr	r3, [r6]
    92cc:	e3530000 	cmp	r3, #0
    92d0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    92d4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    92d8:	ea00030e 	b	9f18 <LeaveCritical>
    92dc:	eb000300 	bl	9ee4 <EnterCritical>
    92e0:	eafffff5 	b	92bc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
    92e4:	e3001fc0 	movw	r1, #4032	; 0xfc0
    92e8:	e3401005 	movt	r1, #5
    92ec:	e3010010 	movw	r0, #4112	; 0x1010
    92f0:	e3400005 	movt	r0, #5
    92f4:	e3a020d7 	mov	r2, #215	; 0xd7
    92f8:	eb000ca2 	bl	c588 <assertion_failed>
    92fc:	e5943004 	ldr	r3, [r4, #4]
    9300:	eaffffe0 	b	9288 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x98>
    9304:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9308:	e3401005 	movt	r1, #5
    930c:	e3010128 	movw	r0, #4392	; 0x1128
    9310:	e3400005 	movt	r0, #5
    9314:	e3a020d3 	mov	r2, #211	; 0xd3
    9318:	eb000c9a 	bl	c588 <assertion_failed>
    931c:	e5d4301d 	ldrb	r3, [r4, #29]
    9320:	e1530008 	cmp	r3, r8
    9324:	1affffd3 	bne	9278 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x88>
    9328:	e3001fc0 	movw	r1, #4032	; 0xfc0
    932c:	e3401005 	movt	r1, #5
    9330:	e301014c 	movw	r0, #4428	; 0x114c
    9334:	e3400005 	movt	r0, #5
    9338:	e3a020d4 	mov	r2, #212	; 0xd4
    933c:	eb000c91 	bl	c588 <assertion_failed>
    9340:	eaffffcc 	b	9278 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x88>
    9344:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9348:	e3401005 	movt	r1, #5
    934c:	e3010108 	movw	r0, #4360	; 0x1108
    9350:	e3400005 	movt	r0, #5
    9354:	e3a020cf 	mov	r2, #207	; 0xcf
    9358:	eb000c8a 	bl	c588 <assertion_failed>
    935c:	eaffffb4 	b	9234 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x44>
    9360:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9364:	e3401005 	movt	r1, #5
    9368:	e3010118 	movw	r0, #4376	; 0x1118
    936c:	e3400005 	movt	r0, #5
    9370:	e3a020d0 	mov	r2, #208	; 0xd0
    9374:	eb000c83 	bl	c588 <assertion_failed>
    9378:	eaffffb0 	b	9240 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x50>

0000937c <CGPIOPin::DisableInterrupt()>:
    937c:	e5d03008 	ldrb	r3, [r0, #8]
    9380:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9384:	e1a04000 	mov	r4, r0
    9388:	e2432002 	sub	r2, r3, #2
    938c:	e3530000 	cmp	r3, #0
    9390:	13520001 	cmpne	r2, #1
    9394:	9a000005 	bls	93b0 <CGPIOPin::DisableInterrupt()+0x34>
    9398:	e3001fc0 	movw	r1, #4032	; 0xfc0
    939c:	e3401005 	movt	r1, #5
    93a0:	e3010024 	movw	r0, #4132	; 0x1024
    93a4:	e3400005 	movt	r0, #5
    93a8:	e3a020e8 	mov	r2, #232	; 0xe8
    93ac:	eb000c75 	bl	c588 <assertion_failed>
    93b0:	e5d4301c 	ldrb	r3, [r4, #28]
    93b4:	e3530005 	cmp	r3, #5
    93b8:	ca000024 	bgt	9450 <CGPIOPin::DisableInterrupt()+0xd4>
    93bc:	e5943004 	ldr	r3, [r4, #4]
    93c0:	e3530035 	cmp	r3, #53	; 0x35
    93c4:	8a000019 	bhi	9430 <CGPIOPin::DisableInterrupt()+0xb4>
    93c8:	e3026d70 	movw	r6, #11632	; 0x2d70
    93cc:	e3406005 	movt	r6, #5
    93d0:	e5d4201c 	ldrb	r2, [r4, #28]
    93d4:	e203101f 	and	r1, r3, #31
    93d8:	e3a08001 	mov	r8, #1
    93dc:	e3a0700c 	mov	r7, #12
    93e0:	e5960000 	ldr	r0, [r6]
    93e4:	e3a05013 	mov	r5, #19
    93e8:	e3405fc8 	movt	r5, #4040	; 0xfc8
    93ec:	e3500000 	cmp	r0, #0
    93f0:	e1a08118 	lsl	r8, r8, r1
    93f4:	e08552a3 	add	r5, r5, r3, lsr #5
    93f8:	e0070297 	mul	r7, r7, r2
    93fc:	1a000009 	bne	9428 <CGPIOPin::DisableInterrupt()+0xac>
    9400:	e7973105 	ldr	r3, [r7, r5, lsl #2]
    9404:	e1c33008 	bic	r3, r3, r8
    9408:	e7873105 	str	r3, [r7, r5, lsl #2]
    940c:	e5963000 	ldr	r3, [r6]
    9410:	e3530000 	cmp	r3, #0
    9414:	0a000000 	beq	941c <CGPIOPin::DisableInterrupt()+0xa0>
    9418:	eb0002be 	bl	9f18 <LeaveCritical>
    941c:	e3a03006 	mov	r3, #6
    9420:	e5c4301c 	strb	r3, [r4, #28]
    9424:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9428:	eb0002ad 	bl	9ee4 <EnterCritical>
    942c:	eafffff3 	b	9400 <CGPIOPin::DisableInterrupt()+0x84>
    9430:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9434:	e3401005 	movt	r1, #5
    9438:	e3010010 	movw	r0, #4112	; 0x1010
    943c:	e3400005 	movt	r0, #5
    9440:	e3a020ec 	mov	r2, #236	; 0xec
    9444:	eb000c4f 	bl	c588 <assertion_failed>
    9448:	e5943004 	ldr	r3, [r4, #4]
    944c:	eaffffdd 	b	93c8 <CGPIOPin::DisableInterrupt()+0x4c>
    9450:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9454:	e3401005 	movt	r1, #5
    9458:	e3010168 	movw	r0, #4456	; 0x1168
    945c:	e3400005 	movt	r0, #5
    9460:	e3a020ea 	mov	r2, #234	; 0xea
    9464:	eb000c47 	bl	c588 <assertion_failed>
    9468:	eaffffd3 	b	93bc <CGPIOPin::DisableInterrupt()+0x40>

0000946c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    946c:	e5d03008 	ldrb	r3, [r0, #8]
    9470:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9474:	e1a04000 	mov	r4, r0
    9478:	e2432002 	sub	r2, r3, #2
    947c:	e3530000 	cmp	r3, #0
    9480:	13520001 	cmpne	r2, #1
    9484:	e1a08001 	mov	r8, r1
    9488:	9a000005 	bls	94a4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x38>
    948c:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9490:	e3401005 	movt	r1, #5
    9494:	e3010024 	movw	r0, #4132	; 0x1024
    9498:	e3400005 	movt	r0, #5
    949c:	e3a020fe 	mov	r2, #254	; 0xfe
    94a0:	eb000c38 	bl	c588 <assertion_failed>
    94a4:	e5943010 	ldr	r3, [r4, #16]
    94a8:	e3530000 	cmp	r3, #0
    94ac:	0a000043 	beq	95c0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    94b0:	e5943014 	ldr	r3, [r4, #20]
    94b4:	e3530000 	cmp	r3, #0
    94b8:	0a000047 	beq	95dc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x170>
    94bc:	e5d4301d 	ldrb	r3, [r4, #29]
    94c0:	e3530006 	cmp	r3, #6
    94c4:	0a000005 	beq	94e0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x74>
    94c8:	e3001fc0 	movw	r1, #4032	; 0xfc0
    94cc:	e3401005 	movt	r1, #5
    94d0:	e30100c0 	movw	r0, #4288	; 0x10c0
    94d4:	e3400005 	movt	r0, #5
    94d8:	e3002102 	movw	r2, #258	; 0x102
    94dc:	eb000c29 	bl	c588 <assertion_failed>
    94e0:	e3580005 	cmp	r8, #5
    94e4:	ca000025 	bgt	9580 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
    94e8:	e5d4301c 	ldrb	r3, [r4, #28]
    94ec:	e1530008 	cmp	r3, r8
    94f0:	0a00002b 	beq	95a4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x138>
    94f4:	e5943004 	ldr	r3, [r4, #4]
    94f8:	e5c4801d 	strb	r8, [r4, #29]
    94fc:	e3530035 	cmp	r3, #53	; 0x35
    9500:	8a000016 	bhi	9560 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    9504:	e3026d70 	movw	r6, #11632	; 0x2d70
    9508:	e3406005 	movt	r6, #5
    950c:	e203101f 	and	r1, r3, #31
    9510:	e3a05001 	mov	r5, #1
    9514:	e3a0700c 	mov	r7, #12
    9518:	e3a04013 	mov	r4, #19
    951c:	e3404fc8 	movt	r4, #4040	; 0xfc8
    9520:	e5962000 	ldr	r2, [r6]
    9524:	e1a05115 	lsl	r5, r5, r1
    9528:	e08442a3 	add	r4, r4, r3, lsr #5
    952c:	e0070897 	mul	r7, r7, r8
    9530:	e3520000 	cmp	r2, #0
    9534:	1a000007 	bne	9558 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xec>
    9538:	e7973104 	ldr	r3, [r7, r4, lsl #2]
    953c:	e1855003 	orr	r5, r5, r3
    9540:	e7875104 	str	r5, [r7, r4, lsl #2]
    9544:	e5963000 	ldr	r3, [r6]
    9548:	e3530000 	cmp	r3, #0
    954c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9550:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9554:	ea00026f 	b	9f18 <LeaveCritical>
    9558:	eb000261 	bl	9ee4 <EnterCritical>
    955c:	eafffff5 	b	9538 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
    9560:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9564:	e3401005 	movt	r1, #5
    9568:	e3010010 	movw	r0, #4112	; 0x1010
    956c:	e3400005 	movt	r0, #5
    9570:	e3002107 	movw	r2, #263	; 0x107
    9574:	eb000c03 	bl	c588 <assertion_failed>
    9578:	e5943004 	ldr	r3, [r4, #4]
    957c:	eaffffe0 	b	9504 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x98>
    9580:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9584:	e3401005 	movt	r1, #5
    9588:	e3010128 	movw	r0, #4392	; 0x1128
    958c:	e3400005 	movt	r0, #5
    9590:	e3002103 	movw	r2, #259	; 0x103
    9594:	eb000bfb 	bl	c588 <assertion_failed>
    9598:	e5d4301c 	ldrb	r3, [r4, #28]
    959c:	e1530008 	cmp	r3, r8
    95a0:	1affffd3 	bne	94f4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x88>
    95a4:	e3001fc0 	movw	r1, #4032	; 0xfc0
    95a8:	e3401005 	movt	r1, #5
    95ac:	e301018c 	movw	r0, #4492	; 0x118c
    95b0:	e3400005 	movt	r0, #5
    95b4:	e3a02f41 	mov	r2, #260	; 0x104
    95b8:	eb000bf2 	bl	c588 <assertion_failed>
    95bc:	eaffffcc 	b	94f4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x88>
    95c0:	e3001fc0 	movw	r1, #4032	; 0xfc0
    95c4:	e3401005 	movt	r1, #5
    95c8:	e3010108 	movw	r0, #4360	; 0x1108
    95cc:	e3400005 	movt	r0, #5
    95d0:	e3a020ff 	mov	r2, #255	; 0xff
    95d4:	eb000beb 	bl	c588 <assertion_failed>
    95d8:	eaffffb4 	b	94b0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x44>
    95dc:	e3001fc0 	movw	r1, #4032	; 0xfc0
    95e0:	e3401005 	movt	r1, #5
    95e4:	e3010118 	movw	r0, #4376	; 0x1118
    95e8:	e3400005 	movt	r0, #5
    95ec:	e3a02c01 	mov	r2, #256	; 0x100
    95f0:	eb000be4 	bl	c588 <assertion_failed>
    95f4:	eaffffb0 	b	94bc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x50>

000095f8 <CGPIOPin::DisableInterrupt2()>:
    95f8:	e5d03008 	ldrb	r3, [r0, #8]
    95fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9600:	e1a04000 	mov	r4, r0
    9604:	e2432002 	sub	r2, r3, #2
    9608:	e3530000 	cmp	r3, #0
    960c:	13520001 	cmpne	r2, #1
    9610:	9a000005 	bls	962c <CGPIOPin::DisableInterrupt2()+0x34>
    9614:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9618:	e3401005 	movt	r1, #5
    961c:	e3010024 	movw	r0, #4132	; 0x1024
    9620:	e3400005 	movt	r0, #5
    9624:	e3a02f46 	mov	r2, #280	; 0x118
    9628:	eb000bd6 	bl	c588 <assertion_failed>
    962c:	e5d4301d 	ldrb	r3, [r4, #29]
    9630:	e3530005 	cmp	r3, #5
    9634:	ca000024 	bgt	96cc <CGPIOPin::DisableInterrupt2()+0xd4>
    9638:	e5943004 	ldr	r3, [r4, #4]
    963c:	e3530035 	cmp	r3, #53	; 0x35
    9640:	8a000019 	bhi	96ac <CGPIOPin::DisableInterrupt2()+0xb4>
    9644:	e3026d70 	movw	r6, #11632	; 0x2d70
    9648:	e3406005 	movt	r6, #5
    964c:	e5d4201d 	ldrb	r2, [r4, #29]
    9650:	e203101f 	and	r1, r3, #31
    9654:	e3a08001 	mov	r8, #1
    9658:	e3a0700c 	mov	r7, #12
    965c:	e5960000 	ldr	r0, [r6]
    9660:	e3a05013 	mov	r5, #19
    9664:	e3405fc8 	movt	r5, #4040	; 0xfc8
    9668:	e3500000 	cmp	r0, #0
    966c:	e1a08118 	lsl	r8, r8, r1
    9670:	e08552a3 	add	r5, r5, r3, lsr #5
    9674:	e0070297 	mul	r7, r7, r2
    9678:	1a000009 	bne	96a4 <CGPIOPin::DisableInterrupt2()+0xac>
    967c:	e7973105 	ldr	r3, [r7, r5, lsl #2]
    9680:	e1c33008 	bic	r3, r3, r8
    9684:	e7873105 	str	r3, [r7, r5, lsl #2]
    9688:	e5963000 	ldr	r3, [r6]
    968c:	e3530000 	cmp	r3, #0
    9690:	0a000000 	beq	9698 <CGPIOPin::DisableInterrupt2()+0xa0>
    9694:	eb00021f 	bl	9f18 <LeaveCritical>
    9698:	e3a03006 	mov	r3, #6
    969c:	e5c4301d 	strb	r3, [r4, #29]
    96a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    96a4:	eb00020e 	bl	9ee4 <EnterCritical>
    96a8:	eafffff3 	b	967c <CGPIOPin::DisableInterrupt2()+0x84>
    96ac:	e3001fc0 	movw	r1, #4032	; 0xfc0
    96b0:	e3401005 	movt	r1, #5
    96b4:	e3010010 	movw	r0, #4112	; 0x1010
    96b8:	e3400005 	movt	r0, #5
    96bc:	e3a02f47 	mov	r2, #284	; 0x11c
    96c0:	eb000bb0 	bl	c588 <assertion_failed>
    96c4:	e5943004 	ldr	r3, [r4, #4]
    96c8:	eaffffdd 	b	9644 <CGPIOPin::DisableInterrupt2()+0x4c>
    96cc:	e3001fc0 	movw	r1, #4032	; 0xfc0
    96d0:	e3401005 	movt	r1, #5
    96d4:	e30101a8 	movw	r0, #4520	; 0x11a8
    96d8:	e3400005 	movt	r0, #5
    96dc:	e300211a 	movw	r2, #282	; 0x11a
    96e0:	eb000ba8 	bl	c588 <assertion_failed>
    96e4:	eaffffd3 	b	9638 <CGPIOPin::DisableInterrupt2()+0x40>

000096e8 <CGPIOPin::SetPullUpMode(unsigned int)>:
    96e8:	e5903004 	ldr	r3, [r0, #4]
    96ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    96f0:	e1a08001 	mov	r8, r1
    96f4:	e3530035 	cmp	r3, #53	; 0x35
    96f8:	8a000026 	bhi	9798 <CGPIOPin::SetPullUpMode(unsigned int)+0xb0>
    96fc:	e3025d70 	movw	r5, #11632	; 0x2d70
    9700:	e3405005 	movt	r5, #5
    9704:	e3a04026 	mov	r4, #38	; 0x26
    9708:	e3404fc8 	movt	r4, #4040	; 0xfc8
    970c:	e203701f 	and	r7, r3, #31
    9710:	e5952000 	ldr	r2, [r5]
    9714:	e08442a3 	add	r4, r4, r3, lsr #5
    9718:	e3520000 	cmp	r2, #0
    971c:	e1a04104 	lsl	r4, r4, #2
    9720:	1a00001a 	bne	9790 <CGPIOPin::SetPullUpMode(unsigned int)+0xa8>
    9724:	e3580002 	cmp	r8, #2
    9728:	8a000011 	bhi	9774 <CGPIOPin::SetPullUpMode(unsigned int)+0x8c>
    972c:	e3a06000 	mov	r6, #0
    9730:	e3436f20 	movt	r6, #16160	; 0x3f20
    9734:	e3a00005 	mov	r0, #5
    9738:	e5868094 	str	r8, [r6, #148]	; 0x94
    973c:	eb0004e5 	bl	aad8 <CTimer::SimpleusDelay(unsigned int)>
    9740:	e3a03001 	mov	r3, #1
    9744:	e3a00005 	mov	r0, #5
    9748:	e1a03713 	lsl	r3, r3, r7
    974c:	e5843000 	str	r3, [r4]
    9750:	eb0004e0 	bl	aad8 <CTimer::SimpleusDelay(unsigned int)>
    9754:	e3a03000 	mov	r3, #0
    9758:	e5863094 	str	r3, [r6, #148]	; 0x94
    975c:	e5843000 	str	r3, [r4]
    9760:	e5953000 	ldr	r3, [r5]
    9764:	e3530000 	cmp	r3, #0
    9768:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    976c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9770:	ea0001e8 	b	9f18 <LeaveCritical>
    9774:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9778:	e3401005 	movt	r1, #5
    977c:	e30101cc 	movw	r0, #4556	; 0x11cc
    9780:	e3400005 	movt	r0, #5
    9784:	e3002133 	movw	r2, #307	; 0x133
    9788:	eb000b7e 	bl	c588 <assertion_failed>
    978c:	eaffffe6 	b	972c <CGPIOPin::SetPullUpMode(unsigned int)+0x44>
    9790:	eb0001d3 	bl	9ee4 <EnterCritical>
    9794:	eaffffe2 	b	9724 <CGPIOPin::SetPullUpMode(unsigned int)+0x3c>
    9798:	e1a04000 	mov	r4, r0
    979c:	e3001fc0 	movw	r1, #4032	; 0xfc0
    97a0:	e3401005 	movt	r1, #5
    97a4:	e3010010 	movw	r0, #4112	; 0x1010
    97a8:	e3400005 	movt	r0, #5
    97ac:	e300212d 	movw	r2, #301	; 0x12d
    97b0:	eb000b74 	bl	c588 <assertion_failed>
    97b4:	e5943004 	ldr	r3, [r4, #4]
    97b8:	eaffffcf 	b	96fc <CGPIOPin::SetPullUpMode(unsigned int)+0x14>

000097bc <CGPIOPin::SetAlternateFunction(unsigned int)>:
    97bc:	e5902004 	ldr	r2, [r0, #4]
    97c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    97c4:	e1a06001 	mov	r6, r1
    97c8:	e3520035 	cmp	r2, #53	; 0x35
    97cc:	8a000026 	bhi	986c <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
    97d0:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    97d4:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    97d8:	e3a0100a 	mov	r1, #10
    97dc:	e3560005 	cmp	r6, #5
    97e0:	e0843293 	umull	r3, r4, r3, r2
    97e4:	e1a041a4 	lsr	r4, r4, #3
    97e8:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    97ec:	e2833702 	add	r3, r3, #524288	; 0x80000
    97f0:	e0642491 	mls	r4, r1, r4, r2
    97f4:	e1a07103 	lsl	r7, r3, #2
    97f8:	e0844084 	add	r4, r4, r4, lsl #1
    97fc:	8a000013 	bhi	9850 <CGPIOPin::SetAlternateFunction(unsigned int)+0x94>
    9800:	e3025d70 	movw	r5, #11632	; 0x2d70
    9804:	e3405005 	movt	r5, #5
    9808:	e5953000 	ldr	r3, [r5]
    980c:	e3530000 	cmp	r3, #0
    9810:	1a00000c 	bne	9848 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    9814:	e5973000 	ldr	r3, [r7]
    9818:	e3002f98 	movw	r2, #3992	; 0xf98
    981c:	e3402005 	movt	r2, #5
    9820:	e3a01007 	mov	r1, #7
    9824:	e7922106 	ldr	r2, [r2, r6, lsl #2]
    9828:	e1c33411 	bic	r3, r3, r1, lsl r4
    982c:	e1834412 	orr	r4, r3, r2, lsl r4
    9830:	e5874000 	str	r4, [r7]
    9834:	e5953000 	ldr	r3, [r5]
    9838:	e3530000 	cmp	r3, #0
    983c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9840:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9844:	ea0001b3 	b	9f18 <LeaveCritical>
    9848:	eb0001a5 	bl	9ee4 <EnterCritical>
    984c:	eafffff0 	b	9814 <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
    9850:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9854:	e3401005 	movt	r1, #5
    9858:	e30101d8 	movw	r0, #4568	; 0x11d8
    985c:	e3400005 	movt	r0, #5
    9860:	e3a02f51 	mov	r2, #324	; 0x144
    9864:	eb000b47 	bl	c588 <assertion_failed>
    9868:	eaffffe4 	b	9800 <CGPIOPin::SetAlternateFunction(unsigned int)+0x44>
    986c:	e1a04000 	mov	r4, r0
    9870:	e3a02d05 	mov	r2, #320	; 0x140
    9874:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9878:	e3401005 	movt	r1, #5
    987c:	e3010010 	movw	r0, #4112	; 0x1010
    9880:	e3400005 	movt	r0, #5
    9884:	eb000b3f 	bl	c588 <assertion_failed>
    9888:	e5942004 	ldr	r2, [r4, #4]
    988c:	eaffffcf 	b	97d0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>

00009890 <CGPIOPin::SetMode(TGPIOMode, int)>:
    9890:	e3510009 	cmp	r1, #9
    9894:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9898:	e1a04001 	mov	r4, r1
    989c:	e1a05000 	mov	r5, r0
    98a0:	e1a06002 	mov	r6, r2
    98a4:	e1a07001 	mov	r7, r1
    98a8:	ca000037 	bgt	998c <CGPIOPin::SetMode(TGPIOMode, int)+0xfc>
    98ac:	e2443004 	sub	r3, r4, #4
    98b0:	e5c54008 	strb	r4, [r5, #8]
    98b4:	e3530005 	cmp	r3, #5
    98b8:	9a00002d 	bls	9974 <CGPIOPin::SetMode(TGPIOMode, int)+0xe4>
    98bc:	e2963000 	adds	r3, r6, #0
    98c0:	13a03001 	movne	r3, #1
    98c4:	e3540001 	cmp	r4, #1
    98c8:	13a03000 	movne	r3, #0
    98cc:	e3530000 	cmp	r3, #0
    98d0:	1a00005b 	bne	9a44 <CGPIOPin::SetMode(TGPIOMode, int)+0x1b4>
    98d4:	e5952004 	ldr	r2, [r5, #4]
    98d8:	e3520035 	cmp	r2, #53	; 0x35
    98dc:	8a00003a 	bhi	99cc <CGPIOPin::SetMode(TGPIOMode, int)+0x13c>
    98e0:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    98e4:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    98e8:	e3028d70 	movw	r8, #11632	; 0x2d70
    98ec:	e3408005 	movt	r8, #5
    98f0:	e3a0100a 	mov	r1, #10
    98f4:	e0843293 	umull	r3, r4, r3, r2
    98f8:	e5983000 	ldr	r3, [r8]
    98fc:	e1a041a4 	lsr	r4, r4, #3
    9900:	e3530000 	cmp	r3, #0
    9904:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    9908:	e2833702 	add	r3, r3, #524288	; 0x80000
    990c:	e0642491 	mls	r4, r1, r4, r2
    9910:	e1a07103 	lsl	r7, r3, #2
    9914:	e0844084 	add	r4, r4, r4, lsl #1
    9918:	1a000033 	bne	99ec <CGPIOPin::SetMode(TGPIOMode, int)+0x15c>
    991c:	e5d52008 	ldrb	r2, [r5, #8]
    9920:	e3a01007 	mov	r1, #7
    9924:	e5973000 	ldr	r3, [r7]
    9928:	e2422001 	sub	r2, r2, #1
    992c:	e16f2f12 	clz	r2, r2
    9930:	e1c33411 	bic	r3, r3, r1, lsl r4
    9934:	e1a022a2 	lsr	r2, r2, #5
    9938:	e1834412 	orr	r4, r3, r2, lsl r4
    993c:	e5874000 	str	r4, [r7]
    9940:	e5983000 	ldr	r3, [r8]
    9944:	e3530000 	cmp	r3, #0
    9948:	1a000029 	bne	99f4 <CGPIOPin::SetMode(TGPIOMode, int)+0x164>
    994c:	e3560000 	cmp	r6, #0
    9950:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9954:	e5d53008 	ldrb	r3, [r5, #8]
    9958:	e3530003 	cmp	r3, #3
    995c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9960:	ea000010 	b	99a8 <CGPIOPin::SetMode(TGPIOMode, int)+0x118>
    9964:	00009a34 	.word	0x00009a34
    9968:	00009a24 	.word	0x00009a24
    996c:	00009a14 	.word	0x00009a14
    9970:	00009a04 	.word	0x00009a04
    9974:	e3560000 	cmp	r6, #0
    9978:	1a00000b 	bne	99ac <CGPIOPin::SetMode(TGPIOMode, int)+0x11c>
    997c:	e2471004 	sub	r1, r7, #4
    9980:	e1a00005 	mov	r0, r5
    9984:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9988:	eaffff8b 	b	97bc <CGPIOPin::SetAlternateFunction(unsigned int)>
    998c:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9990:	e3401005 	movt	r1, #5
    9994:	e30101e8 	movw	r0, #4584	; 0x11e8
    9998:	e3400005 	movt	r0, #5
    999c:	e3a0203a 	mov	r2, #58	; 0x3a
    99a0:	eb000af8 	bl	c588 <assertion_failed>
    99a4:	eaffffc0 	b	98ac <CGPIOPin::SetMode(TGPIOMode, int)+0x1c>
    99a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    99ac:	e1a00005 	mov	r0, r5
    99b0:	e3a01000 	mov	r1, #0
    99b4:	ebffff4b 	bl	96e8 <CGPIOPin::SetPullUpMode(unsigned int)>
    99b8:	e5d57008 	ldrb	r7, [r5, #8]
    99bc:	e1a00005 	mov	r0, r5
    99c0:	e2471004 	sub	r1, r7, #4
    99c4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    99c8:	eaffff7b 	b	97bc <CGPIOPin::SetAlternateFunction(unsigned int)>
    99cc:	e3a02053 	mov	r2, #83	; 0x53
    99d0:	e3001fc0 	movw	r1, #4032	; 0xfc0
    99d4:	e3401005 	movt	r1, #5
    99d8:	e3010010 	movw	r0, #4112	; 0x1010
    99dc:	e3400005 	movt	r0, #5
    99e0:	eb000ae8 	bl	c588 <assertion_failed>
    99e4:	e5952004 	ldr	r2, [r5, #4]
    99e8:	eaffffbc 	b	98e0 <CGPIOPin::SetMode(TGPIOMode, int)+0x50>
    99ec:	eb00013c 	bl	9ee4 <EnterCritical>
    99f0:	eaffffc9 	b	991c <CGPIOPin::SetMode(TGPIOMode, int)+0x8c>
    99f4:	eb000147 	bl	9f18 <LeaveCritical>
    99f8:	e3560000 	cmp	r6, #0
    99fc:	1affffd4 	bne	9954 <CGPIOPin::SetMode(TGPIOMode, int)+0xc4>
    9a00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9a04:	e1a00005 	mov	r0, r5
    9a08:	e3a01001 	mov	r1, #1
    9a0c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9a10:	eaffff34 	b	96e8 <CGPIOPin::SetPullUpMode(unsigned int)>
    9a14:	e1a00005 	mov	r0, r5
    9a18:	e3a01002 	mov	r1, #2
    9a1c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9a20:	eaffff30 	b	96e8 <CGPIOPin::SetPullUpMode(unsigned int)>
    9a24:	e1a00005 	mov	r0, r5
    9a28:	e3a01000 	mov	r1, #0
    9a2c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9a30:	eafffd0e 	b	8e70 <CGPIOPin::Write(unsigned int)>
    9a34:	e1a00005 	mov	r0, r5
    9a38:	e3a01000 	mov	r1, #0
    9a3c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9a40:	eaffff28 	b	96e8 <CGPIOPin::SetPullUpMode(unsigned int)>
    9a44:	e3a01000 	mov	r1, #0
    9a48:	e1a00005 	mov	r0, r5
    9a4c:	ebffff25 	bl	96e8 <CGPIOPin::SetPullUpMode(unsigned int)>
    9a50:	eaffff9f 	b	98d4 <CGPIOPin::SetMode(TGPIOMode, int)+0x44>

00009a54 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    9a54:	e92d4070 	push	{r4, r5, r6, lr}
    9a58:	e3510035 	cmp	r1, #53	; 0x35
    9a5c:	e1a04000 	mov	r4, r0
    9a60:	e59fe07c 	ldr	lr, [pc, #124]	; 9ae4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x90>
    9a64:	e1a05001 	mov	r5, r1
    9a68:	e3a0c00a 	mov	ip, #10
    9a6c:	e3a01006 	mov	r1, #6
    9a70:	e3a00000 	mov	r0, #0
    9a74:	e5845004 	str	r5, [r4, #4]
    9a78:	e5843010 	str	r3, [r4, #16]
    9a7c:	e1a06002 	mov	r6, r2
    9a80:	e584e000 	str	lr, [r4]
    9a84:	e5c4c008 	strb	ip, [r4, #8]
    9a88:	e5840014 	str	r0, [r4, #20]
    9a8c:	e5c4101c 	strb	r1, [r4, #28]
    9a90:	e5c4101d 	strb	r1, [r4, #29]
    9a94:	8a000005 	bhi	9ab0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x5c>
    9a98:	e1a00004 	mov	r0, r4
    9a9c:	e1a01006 	mov	r1, r6
    9aa0:	e3a02001 	mov	r2, #1
    9aa4:	ebffff79 	bl	9890 <CGPIOPin::SetMode(TGPIOMode, int)>
    9aa8:	e1a00004 	mov	r0, r4
    9aac:	e8bd8070 	pop	{r4, r5, r6, pc}
    9ab0:	eb001551 	bl	effc <CMachineInfo::Get()>
    9ab4:	e6ef1075 	uxtb	r1, r5
    9ab8:	eb001524 	bl	ef50 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    9abc:	e3500035 	cmp	r0, #53	; 0x35
    9ac0:	e5840004 	str	r0, [r4, #4]
    9ac4:	9afffff3 	bls	9a98 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    9ac8:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9acc:	e3401005 	movt	r1, #5
    9ad0:	e3010010 	movw	r0, #4112	; 0x1010
    9ad4:	e3400005 	movt	r0, #5
    9ad8:	e3a0202b 	mov	r2, #43	; 0x2b
    9adc:	eb000aa9 	bl	c588 <assertion_failed>
    9ae0:	eaffffec 	b	9a98 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    9ae4:	00050fb8 	.word	0x00050fb8

00009ae8 <CGPIOPin::InterruptHandler()>:
    9ae8:	e5d03008 	ldrb	r3, [r0, #8]
    9aec:	e92d4010 	push	{r4, lr}
    9af0:	e1a04000 	mov	r4, r0
    9af4:	e2432002 	sub	r2, r3, #2
    9af8:	e3530000 	cmp	r3, #0
    9afc:	13520001 	cmpne	r2, #1
    9b00:	9a000005 	bls	9b1c <CGPIOPin::InterruptHandler()+0x34>
    9b04:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9b08:	e3401005 	movt	r1, #5
    9b0c:	e3010024 	movw	r0, #4132	; 0x1024
    9b10:	e3400005 	movt	r0, #5
    9b14:	e3002153 	movw	r2, #339	; 0x153
    9b18:	eb000a9a 	bl	c588 <assertion_failed>
    9b1c:	e5d4301c 	ldrb	r3, [r4, #28]
    9b20:	e3530005 	cmp	r3, #5
    9b24:	da000002 	ble	9b34 <CGPIOPin::InterruptHandler()+0x4c>
    9b28:	e5d4301d 	ldrb	r3, [r4, #29]
    9b2c:	e3530005 	cmp	r3, #5
    9b30:	ca000005 	bgt	9b4c <CGPIOPin::InterruptHandler()+0x64>
    9b34:	e5943014 	ldr	r3, [r4, #20]
    9b38:	e3530000 	cmp	r3, #0
    9b3c:	0a00000b 	beq	9b70 <CGPIOPin::InterruptHandler()+0x88>
    9b40:	e5940018 	ldr	r0, [r4, #24]
    9b44:	e8bd4010 	pop	{r4, lr}
    9b48:	e12fff13 	bx	r3
    9b4c:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9b50:	e3401005 	movt	r1, #5
    9b54:	e3010200 	movw	r0, #4608	; 0x1200
    9b58:	e3400005 	movt	r0, #5
    9b5c:	e3002155 	movw	r2, #341	; 0x155
    9b60:	eb000a88 	bl	c588 <assertion_failed>
    9b64:	e5943014 	ldr	r3, [r4, #20]
    9b68:	e3530000 	cmp	r3, #0
    9b6c:	1afffff3 	bne	9b40 <CGPIOPin::InterruptHandler()+0x58>
    9b70:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9b74:	e3401005 	movt	r1, #5
    9b78:	e3010118 	movw	r0, #4376	; 0x1118
    9b7c:	e3400005 	movt	r0, #5
    9b80:	e3002157 	movw	r2, #343	; 0x157
    9b84:	eb000a7f 	bl	c588 <assertion_failed>
    9b88:	e5943014 	ldr	r3, [r4, #20]
    9b8c:	e5940018 	ldr	r0, [r4, #24]
    9b90:	e8bd4010 	pop	{r4, lr}
    9b94:	e12fff13 	bx	r3

00009b98 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    9b98:	e3500035 	cmp	r0, #53	; 0x35
    9b9c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9ba0:	e1a07000 	mov	r7, r0
    9ba4:	8a000023 	bhi	9c38 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    9ba8:	e3026d70 	movw	r6, #11632	; 0x2d70
    9bac:	e3406005 	movt	r6, #5
    9bb0:	e3a04013 	mov	r4, #19
    9bb4:	e3404fc8 	movt	r4, #4040	; 0xfc8
    9bb8:	e207501f 	and	r5, r7, #31
    9bbc:	e3a02001 	mov	r2, #1
    9bc0:	e5963000 	ldr	r3, [r6]
    9bc4:	e08442a7 	add	r4, r4, r7, lsr #5
    9bc8:	e3530000 	cmp	r3, #0
    9bcc:	e1a04104 	lsl	r4, r4, #2
    9bd0:	e1a05512 	lsl	r5, r2, r5
    9bd4:	1a000011 	bne	9c20 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
    9bd8:	e3a0308b 	mov	r3, #139	; 0x8b
    9bdc:	e3433f20 	movt	r3, #16160	; 0x3f20
    9be0:	e1540003 	cmp	r4, r3
    9be4:	8a00000c 	bhi	9c1c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
    9be8:	e3a0108b 	mov	r1, #139	; 0x8b
    9bec:	e3431f20 	movt	r1, #16160	; 0x3f20
    9bf0:	e1e02005 	mvn	r2, r5
    9bf4:	e5943000 	ldr	r3, [r4]
    9bf8:	e0033002 	and	r3, r3, r2
    9bfc:	e484300c 	str	r3, [r4], #12
    9c00:	e1540001 	cmp	r4, r1
    9c04:	9afffffa 	bls	9bf4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x5c>
    9c08:	e5963000 	ldr	r3, [r6]
    9c0c:	e3530000 	cmp	r3, #0
    9c10:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9c14:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9c18:	ea0000be 	b	9f18 <LeaveCritical>
    9c1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9c20:	eb0000af 	bl	9ee4 <EnterCritical>
    9c24:	e3a0308b 	mov	r3, #139	; 0x8b
    9c28:	e3433f20 	movt	r3, #16160	; 0x3f20
    9c2c:	e1540003 	cmp	r4, r3
    9c30:	9affffec 	bls	9be8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    9c34:	eafffff3 	b	9c08 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
    9c38:	e3001fc0 	movw	r1, #4032	; 0xfc0
    9c3c:	e3401005 	movt	r1, #5
    9c40:	e301024c 	movw	r0, #4684	; 0x124c
    9c44:	e3400005 	movt	r0, #5
    9c48:	e300215d 	movw	r2, #349	; 0x15d
    9c4c:	eb000a4d 	bl	c588 <assertion_failed>
    9c50:	eaffffd4 	b	9ba8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>

00009c54 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    9c54:	e3023d70 	movw	r3, #11632	; 0x2d70
    9c58:	e3403005 	movt	r3, #5
    9c5c:	e3a02001 	mov	r2, #1
    9c60:	e5832000 	str	r2, [r3]
    9c64:	e12fff1e 	bx	lr

00009c68 <CMemorySystem::~CMemorySystem()>:
    9c68:	e5903000 	ldr	r3, [r0]
    9c6c:	e92d4070 	push	{r4, r5, r6, lr}
    9c70:	e1a04000 	mov	r4, r0
    9c74:	e3530000 	cmp	r3, #0
    9c78:	0a000005 	beq	9c94 <CMemorySystem::~CMemorySystem()+0x2c>
    9c7c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    9c80:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    9c84:	e3c33005 	bic	r3, r3, #5
    9c88:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    9c8c:	e3a03000 	mov	r3, #0
    9c90:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    9c94:	e594500c 	ldr	r5, [r4, #12]
    9c98:	e3550000 	cmp	r5, #0
    9c9c:	0a000003 	beq	9cb0 <CMemorySystem::~CMemorySystem()+0x48>
    9ca0:	e1a00005 	mov	r0, r5
    9ca4:	eb0005ae 	bl	b364 <CPageTable::~CPageTable()>
    9ca8:	e1a00005 	mov	r0, r5
    9cac:	eb00008a 	bl	9edc <operator delete(void*)>
    9cb0:	e5945008 	ldr	r5, [r4, #8]
    9cb4:	e3a03000 	mov	r3, #0
    9cb8:	e584300c 	str	r3, [r4, #12]
    9cbc:	e1550003 	cmp	r5, r3
    9cc0:	0a000003 	beq	9cd4 <CMemorySystem::~CMemorySystem()+0x6c>
    9cc4:	e1a00005 	mov	r0, r5
    9cc8:	eb0005a5 	bl	b364 <CPageTable::~CPageTable()>
    9ccc:	e1a00005 	mov	r0, r5
    9cd0:	eb000081 	bl	9edc <operator delete(void*)>
    9cd4:	e1a00004 	mov	r0, r4
    9cd8:	e8bd8070 	pop	{r4, r5, r6, pc}

00009cdc <CMemorySystem::GetMemSize() const>:
    9cdc:	e5900004 	ldr	r0, [r0, #4]
    9ce0:	e12fff1e 	bx	lr

00009ce4 <CMemorySystem::EnableMMU()>:
    9ce4:	e5903000 	ldr	r3, [r0]
    9ce8:	e92d4010 	push	{r4, lr}
    9cec:	e1a04000 	mov	r4, r0
    9cf0:	e3530000 	cmp	r3, #0
    9cf4:	0a00001f 	beq	9d78 <CMemorySystem::EnableMMU()+0x94>
    9cf8:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    9cfc:	e3833040 	orr	r3, r3, #64	; 0x40
    9d00:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    9d04:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    9d08:	e3130001 	tst	r3, #1
    9d0c:	1a000020 	bne	9d94 <CMemorySystem::EnableMMU()+0xb0>
    9d10:	e3a03002 	mov	r3, #2
    9d14:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    9d18:	e5940008 	ldr	r0, [r4, #8]
    9d1c:	e3500000 	cmp	r0, #0
    9d20:	0a00002a 	beq	9dd0 <CMemorySystem::EnableMMU()+0xec>
    9d24:	eb000597 	bl	b388 <CPageTable::GetBaseAddress() const>
    9d28:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    9d2c:	e594000c 	ldr	r0, [r4, #12]
    9d30:	e3500000 	cmp	r0, #0
    9d34:	0a00001d 	beq	9db0 <CMemorySystem::EnableMMU()+0xcc>
    9d38:	eb000592 	bl	b388 <CPageTable::GetBaseAddress() const>
    9d3c:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    9d40:	e3a03005 	mov	r3, #5
    9d44:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    9d48:	eb0014d4 	bl	f0a0 <InvalidateDataCache>
    9d4c:	e3a03000 	mov	r3, #0
    9d50:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    9d54:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    9d58:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    9d5c:	f57ff04f 	dsb	sy
    9d60:	f57ff06f 	isb	sy
    9d64:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    9d68:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    9d6c:	e3833005 	orr	r3, r3, #5
    9d70:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    9d74:	e8bd8010 	pop	{r4, pc}
    9d78:	e3011260 	movw	r1, #4704	; 0x1260
    9d7c:	e3401005 	movt	r1, #5
    9d80:	e301026c 	movw	r0, #4716	; 0x126c
    9d84:	e3400005 	movt	r0, #5
    9d88:	e3a020c0 	mov	r2, #192	; 0xc0
    9d8c:	eb0009fd 	bl	c588 <assertion_failed>
    9d90:	eaffffd8 	b	9cf8 <CMemorySystem::EnableMMU()+0x14>
    9d94:	e3011260 	movw	r1, #4704	; 0x1260
    9d98:	e3401005 	movt	r1, #5
    9d9c:	e301027c 	movw	r0, #4732	; 0x127c
    9da0:	e3400005 	movt	r0, #5
    9da4:	e3a020cd 	mov	r2, #205	; 0xcd
    9da8:	eb0009f6 	bl	c588 <assertion_failed>
    9dac:	eaffffd7 	b	9d10 <CMemorySystem::EnableMMU()+0x2c>
    9db0:	e3011260 	movw	r1, #4704	; 0x1260
    9db4:	e3401005 	movt	r1, #5
    9db8:	e30102c4 	movw	r0, #4804	; 0x12c4
    9dbc:	e3400005 	movt	r0, #5
    9dc0:	e3a020d7 	mov	r2, #215	; 0xd7
    9dc4:	eb0009ef 	bl	c588 <assertion_failed>
    9dc8:	e594000c 	ldr	r0, [r4, #12]
    9dcc:	eaffffd9 	b	9d38 <CMemorySystem::EnableMMU()+0x54>
    9dd0:	e3011260 	movw	r1, #4704	; 0x1260
    9dd4:	e3401005 	movt	r1, #5
    9dd8:	e30102a8 	movw	r0, #4776	; 0x12a8
    9ddc:	e3400005 	movt	r0, #5
    9de0:	e3a020d3 	mov	r2, #211	; 0xd3
    9de4:	eb0009e7 	bl	c588 <assertion_failed>
    9de8:	e5940008 	ldr	r0, [r4, #8]
    9dec:	eaffffcc 	b	9d24 <CMemorySystem::EnableMMU()+0x40>

00009df0 <CMemorySystem::CMemorySystem(int)>:
    9df0:	e92d4030 	push	{r4, r5, lr}
    9df4:	e1a04000 	mov	r4, r0
    9df8:	e3a05000 	mov	r5, #0
    9dfc:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    9e00:	e8840022 	stm	r4, {r1, r5}
    9e04:	e28d000c 	add	r0, sp, #12
    9e08:	e5845008 	str	r5, [r4, #8]
    9e0c:	e584500c 	str	r5, [r4, #12]
    9e10:	ebfffb9c 	bl	8c88 <CBcmPropertyTags::CBcmPropertyTags()>
    9e14:	e3a03014 	mov	r3, #20
    9e18:	e58d5000 	str	r5, [sp]
    9e1c:	e28d000c 	add	r0, sp, #12
    9e20:	e3a01005 	mov	r1, #5
    9e24:	e3401001 	movt	r1, #1
    9e28:	e08d2003 	add	r2, sp, r3
    9e2c:	ebfffbdd 	bl	8da8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9e30:	e3500000 	cmp	r0, #0
    9e34:	1a000019 	bne	9ea0 <CMemorySystem::CMemorySystem(int)+0xb0>
    9e38:	e3a01303 	mov	r1, #201326592	; 0xc000000
    9e3c:	e58d0020 	str	r0, [sp, #32]
    9e40:	e58d1024 	str	r1, [sp, #36]	; 0x24
    9e44:	e5841004 	str	r1, [r4, #4]
    9e48:	eb001638 	bl	f730 <mem_init>
    9e4c:	e5943000 	ldr	r3, [r4]
    9e50:	e3530000 	cmp	r3, #0
    9e54:	0a00000c 	beq	9e8c <CMemorySystem::CMemorySystem(int)+0x9c>
    9e58:	e3a00008 	mov	r0, #8
    9e5c:	eb00001c 	bl	9ed4 <operator new(unsigned int)>
    9e60:	e5941004 	ldr	r1, [r4, #4]
    9e64:	e1a05000 	mov	r5, r0
    9e68:	eb0004ed 	bl	b224 <CPageTable::CPageTable(unsigned int)>
    9e6c:	e5845008 	str	r5, [r4, #8]
    9e70:	e3a00008 	mov	r0, #8
    9e74:	eb000016 	bl	9ed4 <operator new(unsigned int)>
    9e78:	e1a05000 	mov	r5, r0
    9e7c:	eb0004bc 	bl	b174 <CPageTable::CPageTable()>
    9e80:	e584500c 	str	r5, [r4, #12]
    9e84:	e1a00004 	mov	r0, r4
    9e88:	ebffff95 	bl	9ce4 <CMemorySystem::EnableMMU()>
    9e8c:	e28d000c 	add	r0, sp, #12
    9e90:	ebfffb82 	bl	8ca0 <CBcmPropertyTags::~CBcmPropertyTags()>
    9e94:	e1a00004 	mov	r0, r4
    9e98:	e28dd02c 	add	sp, sp, #44	; 0x2c
    9e9c:	e8bd8030 	pop	{r4, r5, pc}
    9ea0:	e59d0020 	ldr	r0, [sp, #32]
    9ea4:	e3500000 	cmp	r0, #0
    9ea8:	059d1024 	ldreq	r1, [sp, #36]	; 0x24
    9eac:	0affffe4 	beq	9e44 <CMemorySystem::CMemorySystem(int)+0x54>
    9eb0:	e3011260 	movw	r1, #4704	; 0x1260
    9eb4:	e3401005 	movt	r1, #5
    9eb8:	e30102d8 	movw	r0, #4824	; 0x12d8
    9ebc:	e3400005 	movt	r0, #5
    9ec0:	e3a02042 	mov	r2, #66	; 0x42
    9ec4:	eb0009af 	bl	c588 <assertion_failed>
    9ec8:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    9ecc:	e59d0020 	ldr	r0, [sp, #32]
    9ed0:	eaffffdb 	b	9e44 <CMemorySystem::CMemorySystem(int)+0x54>

00009ed4 <operator new(unsigned int)>:
    9ed4:	ea00162e 	b	f794 <malloc>

00009ed8 <operator new[](unsigned int)>:
    9ed8:	ea00162d 	b	f794 <malloc>

00009edc <operator delete(void*)>:
    9edc:	ea00168e 	b	f91c <free>

00009ee0 <operator delete[](void*)>:
    9ee0:	ea00168d 	b	f91c <free>

00009ee4 <EnterCritical>:
    9ee4:	e10f1000 	mrs	r1, CPSR
    9ee8:	f10c0080 	cpsid	i
    9eec:	e3023d74 	movw	r3, #11636	; 0x2d74
    9ef0:	e3403005 	movt	r3, #5
    9ef4:	e5932000 	ldr	r2, [r3]
    9ef8:	e3520000 	cmp	r2, #0
    9efc:	e2822001 	add	r2, r2, #1
    9f00:	02211080 	eoreq	r1, r1, #128	; 0x80
    9f04:	e5832000 	str	r2, [r3]
    9f08:	07e013d1 	ubfxeq	r1, r1, #7, #1
    9f0c:	05831004 	streq	r1, [r3, #4]
    9f10:	f57ff05f 	dmb	sy
    9f14:	e12fff1e 	bx	lr

00009f18 <LeaveCritical>:
    9f18:	e92d4010 	push	{r4, lr}
    9f1c:	f57ff05f 	dmb	sy
    9f20:	e3024d74 	movw	r4, #11636	; 0x2d74
    9f24:	e3404005 	movt	r4, #5
    9f28:	e5943000 	ldr	r3, [r4]
    9f2c:	e3530000 	cmp	r3, #0
    9f30:	0a000009 	beq	9f5c <LeaveCritical+0x44>
    9f34:	e5943000 	ldr	r3, [r4]
    9f38:	e2433001 	sub	r3, r3, #1
    9f3c:	e3530000 	cmp	r3, #0
    9f40:	e5843000 	str	r3, [r4]
    9f44:	18bd8010 	popne	{r4, pc}
    9f48:	e5943004 	ldr	r3, [r4, #4]
    9f4c:	e3530000 	cmp	r3, #0
    9f50:	08bd8010 	popeq	{r4, pc}
    9f54:	f1080080 	cpsie	i
    9f58:	e8bd8010 	pop	{r4, pc}
    9f5c:	e30112f4 	movw	r1, #4852	; 0x12f4
    9f60:	e3401005 	movt	r1, #5
    9f64:	e3010304 	movw	r0, #4868	; 0x1304
    9f68:	e3400005 	movt	r0, #5
    9f6c:	e3a0205b 	mov	r2, #91	; 0x5b
    9f70:	eb000984 	bl	c588 <assertion_failed>
    9f74:	eaffffee 	b	9f34 <LeaveCritical+0x1c>

00009f78 <SyncDataAndInstructionCache>:
    9f78:	e92d4010 	push	{r4, lr}
    9f7c:	eb001471 	bl	f148 <CleanDataCache>
    9f80:	e3a03000 	mov	r3, #0
    9f84:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    9f88:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    9f8c:	f57ff04f 	dsb	sy
    9f90:	f57ff06f 	isb	sy
    9f94:	e8bd8010 	pop	{r4, pc}

00009f98 <__aeabi_atexit>:
    9f98:	e12fff1e 	bx	lr

00009f9c <halt>:
    9f9c:	f10c0080 	cpsid	i
    9fa0:	f57ff04f 	dsb	sy
    9fa4:	e320f003 	wfi
    9fa8:	eafffffc 	b	9fa0 <halt+0x4>

00009fac <reboot>:
    9fac:	e3a03000 	mov	r3, #0
    9fb0:	e3433f10 	movt	r3, #16144	; 0x3f10
    9fb4:	e3a01001 	mov	r1, #1
    9fb8:	e3451a00 	movt	r1, #23040	; 0x5a00
    9fbc:	e3a02020 	mov	r2, #32
    9fc0:	e3452a00 	movt	r2, #23040	; 0x5a00
    9fc4:	e5831024 	str	r1, [r3, #36]	; 0x24
    9fc8:	e583201c 	str	r2, [r3, #28]
    9fcc:	eafffffe 	b	9fcc <reboot+0x20>

00009fd0 <sysinit>:
    9fd0:	e92d4030 	push	{r4, r5, lr}
    9fd4:	e24dd01c 	sub	sp, sp, #28
    9fd8:	eb001415 	bl	f034 <InvalidateDataCacheL1Only>
    9fdc:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    9fe0:	e308305c 	movw	r3, #32860	; 0x805c
    9fe4:	e3403000 	movt	r3, #0
    9fe8:	e582309c 	str	r3, [r2, #156]	; 0x9c
    9fec:	e58230ac 	str	r3, [r2, #172]	; 0xac
    9ff0:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    9ff4:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    9ff8:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    9ffc:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    a000:	f57ff06f 	isb	sy
    a004:	eee82a10 	vmsr	fpexc, r2
    a008:	e3a01000 	mov	r1, #0
    a00c:	eee11a10 	vmsr	fpscr, r1
    a010:	e3023d6c 	movw	r3, #11628	; 0x2d6c
    a014:	e3403005 	movt	r3, #5
    a018:	e3022dc0 	movw	r2, #11712	; 0x2dc0
    a01c:	e3402005 	movt	r2, #5
    a020:	e1530002 	cmp	r3, r2
    a024:	2a000002 	bcs	a034 <sysinit+0x64>
    a028:	e4c31001 	strb	r1, [r3], #1
    a02c:	e1530002 	cmp	r3, r2
    a030:	1afffffc 	bne	a028 <sysinit+0x58>
    a034:	e1a0000d 	mov	r0, sp
    a038:	e3025c84 	movw	r5, #11396	; 0x2c84
    a03c:	e3405005 	movt	r5, #5
    a040:	e3024c78 	movw	r4, #11384	; 0x2c78
    a044:	e3404005 	movt	r4, #5
    a048:	eb0012fa 	bl	ec38 <CMachineInfo::CMachineInfo()>
    a04c:	e1540005 	cmp	r4, r5
    a050:	2a000003 	bcs	a064 <sysinit+0x94>
    a054:	e4943004 	ldr	r3, [r4], #4
    a058:	e12fff33 	blx	r3
    a05c:	e1540005 	cmp	r4, r5
    a060:	3afffffb 	bcc	a054 <sysinit+0x84>
    a064:	ebfff7ff 	bl	8068 <main>
    a068:	e3500001 	cmp	r0, #1
    a06c:	0a000000 	beq	a074 <sysinit+0xa4>
    a070:	ebffffc9 	bl	9f9c <halt>
    a074:	ebffffcc 	bl	9fac <reboot>

0000a078 <CTimer::CTimer(CInterruptSystem*)>:
    a078:	e92d4070 	push	{r4, r5, r6, lr}
    a07c:	e1a04000 	mov	r4, r0
    a080:	e3025d80 	movw	r5, #11648	; 0x2d80
    a084:	e3405005 	movt	r5, #5
    a088:	e3a03000 	mov	r3, #0
    a08c:	e3a06001 	mov	r6, #1
    a090:	e5801000 	str	r1, [r0]
    a094:	e2800018 	add	r0, r0, #24
    a098:	e5843004 	str	r3, [r4, #4]
    a09c:	e5843014 	str	r3, [r4, #20]
    a0a0:	e5843008 	str	r3, [r4, #8]
    a0a4:	e5846010 	str	r6, [r4, #16]
    a0a8:	e584300c 	str	r3, [r4, #12]
    a0ac:	eb00145d 	bl	f228 <CPtrList::CPtrList()>
    a0b0:	e5951000 	ldr	r1, [r5]
    a0b4:	e300215e 	movw	r2, #350	; 0x15e
    a0b8:	e3053730 	movw	r3, #22320	; 0x5730
    a0bc:	e3403005 	movt	r3, #5
    a0c0:	e3510000 	cmp	r1, #0
    a0c4:	e584601c 	str	r6, [r4, #28]
    a0c8:	e5843020 	str	r3, [r4, #32]
    a0cc:	e5842024 	str	r2, [r4, #36]	; 0x24
    a0d0:	0a000005 	beq	a0ec <CTimer::CTimer(CInterruptSystem*)+0x74>
    a0d4:	e3011354 	movw	r1, #4948	; 0x1354
    a0d8:	e3401005 	movt	r1, #5
    a0dc:	e3010360 	movw	r0, #4960	; 0x1360
    a0e0:	e3400005 	movt	r0, #5
    a0e4:	e3a0203b 	mov	r2, #59	; 0x3b
    a0e8:	eb000926 	bl	c588 <assertion_failed>
    a0ec:	e5854000 	str	r4, [r5]
    a0f0:	e1a00004 	mov	r0, r4
    a0f4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a0f8 <CTimer::~CTimer()>:
    a0f8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a0fc:	e1a09000 	mov	r9, r0
    a100:	e5900000 	ldr	r0, [r0]
    a104:	e3500000 	cmp	r0, #0
    a108:	0a00002b 	beq	a1bc <CTimer::~CTimer()+0xc4>
    a10c:	e3a01003 	mov	r1, #3
    a110:	e3017354 	movw	r7, #4948	; 0x1354
    a114:	e3407005 	movt	r7, #5
    a118:	e301a388 	movw	sl, #5000	; 0x1388
    a11c:	e340a005 	movt	sl, #5
    a120:	e3048d43 	movw	r8, #19779	; 0x4d43
    a124:	e3448b54 	movt	r8, #19284	; 0x4b54
    a128:	e2894018 	add	r4, r9, #24
    a12c:	eb0010e1 	bl	e4b8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    a130:	ea00000f 	b	a174 <CTimer::~CTimer()+0x7c>
    a134:	eb001464 	bl	f2cc <CPtrList::GetPtr(TPtrListElement*)>
    a138:	e2506000 	subs	r6, r0, #0
    a13c:	0a000019 	beq	a1a8 <CTimer::~CTimer()+0xb0>
    a140:	e5963000 	ldr	r3, [r6]
    a144:	e3010394 	movw	r0, #5012	; 0x1394
    a148:	e3400005 	movt	r0, #5
    a14c:	e1530008 	cmp	r3, r8
    a150:	e3a02049 	mov	r2, #73	; 0x49
    a154:	e1a01007 	mov	r1, r7
    a158:	0a000000 	beq	a160 <CTimer::~CTimer()+0x68>
    a15c:	eb000909 	bl	c588 <assertion_failed>
    a160:	e1a00004 	mov	r0, r4
    a164:	e1a01005 	mov	r1, r5
    a168:	eb0014f7 	bl	f54c <CPtrList::Remove(TPtrListElement*)>
    a16c:	e1a00006 	mov	r0, r6
    a170:	ebffff59 	bl	9edc <operator delete(void*)>
    a174:	e1a00004 	mov	r0, r4
    a178:	eb00143a 	bl	f268 <CPtrList::GetFirst()>
    a17c:	e2505000 	subs	r5, r0, #0
    a180:	e1a01005 	mov	r1, r5
    a184:	e1a00004 	mov	r0, r4
    a188:	1affffe9 	bne	a134 <CTimer::~CTimer()+0x3c>
    a18c:	e3023d80 	movw	r3, #11648	; 0x2d80
    a190:	e3403005 	movt	r3, #5
    a194:	e1a00004 	mov	r0, r4
    a198:	e5835000 	str	r5, [r3]
    a19c:	eb001424 	bl	f234 <CPtrList::~CPtrList()>
    a1a0:	e1a00009 	mov	r0, r9
    a1a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a1a8:	e3a02048 	mov	r2, #72	; 0x48
    a1ac:	e1a01007 	mov	r1, r7
    a1b0:	e1a0000a 	mov	r0, sl
    a1b4:	eb0008f3 	bl	c588 <assertion_failed>
    a1b8:	eaffffe0 	b	a140 <CTimer::~CTimer()+0x48>
    a1bc:	e3011354 	movw	r1, #4948	; 0x1354
    a1c0:	e3401005 	movt	r1, #5
    a1c4:	e3010370 	movw	r0, #4976	; 0x1370
    a1c8:	e3400005 	movt	r0, #5
    a1cc:	e3a02041 	mov	r2, #65	; 0x41
    a1d0:	eb0008ec 	bl	c588 <assertion_failed>
    a1d4:	e5990000 	ldr	r0, [r9]
    a1d8:	eaffffcb 	b	a10c <CTimer::~CTimer()+0x14>

0000a1dc <CTimer::SetTimeZone(int)>:
    a1dc:	e2813e59 	add	r3, r1, #1424	; 0x590
    a1e0:	e3002b3e 	movw	r2, #2878	; 0xb3e
    a1e4:	e283300f 	add	r3, r3, #15
    a1e8:	e1530002 	cmp	r3, r2
    a1ec:	95801014 	strls	r1, [r0, #20]
    a1f0:	93a00001 	movls	r0, #1
    a1f4:	83a00000 	movhi	r0, #0
    a1f8:	e12fff1e 	bx	lr

0000a1fc <CTimer::GetTimeZone() const>:
    a1fc:	e5900014 	ldr	r0, [r0, #20]
    a200:	e12fff1e 	bx	lr

0000a204 <CTimer::SetTime(unsigned int, int)>:
    a204:	e3520000 	cmp	r2, #0
    a208:	e92d4070 	push	{r4, r5, r6, lr}
    a20c:	e1a04000 	mov	r4, r0
    a210:	e1a05001 	mov	r5, r1
    a214:	1a000005 	bne	a230 <CTimer::SetTime(unsigned int, int)+0x2c>
    a218:	e5901014 	ldr	r1, [r0, #20]
    a21c:	e3a0303c 	mov	r3, #60	; 0x3c
    a220:	e0030193 	mul	r3, r3, r1
    a224:	e3530000 	cmp	r3, #0
    a228:	ba00000e 	blt	a268 <CTimer::SetTime(unsigned int, int)+0x64>
    a22c:	e0855003 	add	r5, r5, r3
    a230:	e5943010 	ldr	r3, [r4, #16]
    a234:	e3530000 	cmp	r3, #0
    a238:	1a000002 	bne	a248 <CTimer::SetTime(unsigned int, int)+0x44>
    a23c:	e3a00001 	mov	r0, #1
    a240:	e584500c 	str	r5, [r4, #12]
    a244:	e8bd8070 	pop	{r4, r5, r6, pc}
    a248:	ebffff25 	bl	9ee4 <EnterCritical>
    a24c:	e5943010 	ldr	r3, [r4, #16]
    a250:	e584500c 	str	r5, [r4, #12]
    a254:	e3530000 	cmp	r3, #0
    a258:	0a000007 	beq	a27c <CTimer::SetTime(unsigned int, int)+0x78>
    a25c:	ebffff2d 	bl	9f18 <LeaveCritical>
    a260:	e3a00001 	mov	r0, #1
    a264:	e8bd8070 	pop	{r4, r5, r6, pc}
    a268:	e2631000 	rsb	r1, r3, #0
    a26c:	e1510005 	cmp	r1, r5
    a270:	daffffed 	ble	a22c <CTimer::SetTime(unsigned int, int)+0x28>
    a274:	e1a00002 	mov	r0, r2
    a278:	e8bd8070 	pop	{r4, r5, r6, pc}
    a27c:	e3a00001 	mov	r0, #1
    a280:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a284 <CTimer::GetClockTicks()>:
    a284:	e3a03a03 	mov	r3, #12288	; 0x3000
    a288:	e3433f00 	movt	r3, #16128	; 0x3f00
    a28c:	e5930004 	ldr	r0, [r3, #4]
    a290:	e12fff1e 	bx	lr

0000a294 <CTimer::GetTicks() const>:
    a294:	e5900004 	ldr	r0, [r0, #4]
    a298:	e12fff1e 	bx	lr

0000a29c <CTimer::GetUptime() const>:
    a29c:	e5900008 	ldr	r0, [r0, #8]
    a2a0:	e12fff1e 	bx	lr

0000a2a4 <CTimer::GetTime() const>:
    a2a4:	e590000c 	ldr	r0, [r0, #12]
    a2a8:	e12fff1e 	bx	lr

0000a2ac <CTimer::GetUniversalTime() const>:
    a2ac:	e5902014 	ldr	r2, [r0, #20]
    a2b0:	e3a0303c 	mov	r3, #60	; 0x3c
    a2b4:	e590000c 	ldr	r0, [r0, #12]
    a2b8:	e0030293 	mul	r3, r3, r2
    a2bc:	e1530000 	cmp	r3, r0
    a2c0:	d0400003 	suble	r0, r0, r3
    a2c4:	c3a00000 	movgt	r0, #0
    a2c8:	e12fff1e 	bx	lr

0000a2cc <CTimer::GetTimeString()>:
    a2cc:	e5903010 	ldr	r3, [r0, #16]
    a2d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2d4:	e1a04000 	mov	r4, r0
    a2d8:	e3530000 	cmp	r3, #0
    a2dc:	e24dd014 	sub	sp, sp, #20
    a2e0:	1a00006c 	bne	a498 <CTimer::GetTimeString()+0x1cc>
    a2e4:	e590500c 	ldr	r5, [r0, #12]
    a2e8:	e5909004 	ldr	r9, [r0, #4]
    a2ec:	e1950009 	orrs	r0, r5, r9
    a2f0:	0a000051 	beq	a43c <CTimer::GetTimeString()+0x170>
    a2f4:	e3086889 	movw	r6, #34953	; 0x8889
    a2f8:	e3486888 	movt	r6, #34952	; 0x8888
    a2fc:	e30b73c5 	movw	r7, #46021	; 0xb3c5
    a300:	e34971a2 	movt	r7, #37282	; 0x91a2
    a304:	e3044507 	movw	r4, #17671	; 0x4507
    a308:	e34c422e 	movt	r4, #49710	; 0xc22e
    a30c:	e0813596 	umull	r3, r1, r6, r5
    a310:	e3a0003c 	mov	r0, #60	; 0x3c
    a314:	e0832695 	umull	r2, r3, r5, r6
    a318:	e308c51f 	movw	ip, #34079	; 0x851f
    a31c:	e345c1eb 	movt	ip, #20971	; 0x51eb
    a320:	e1a012a1 	lsr	r1, r1, #5
    a324:	e1a082a3 	lsr	r8, r3, #5
    a328:	e0873597 	umull	r3, r7, r7, r5
    a32c:	e3a0a064 	mov	sl, #100	; 0x64
    a330:	e0843594 	umull	r3, r4, r4, r5
    a334:	e3a0ee19 	mov	lr, #400	; 0x190
    a338:	e0863196 	umull	r3, r6, r6, r1
    a33c:	e1a075a7 	lsr	r7, r7, #11
    a340:	e0685890 	mls	r8, r0, r8, r5
    a344:	e1a04824 	lsr	r4, r4, #16
    a348:	e1a062a6 	lsr	r6, r6, #5
    a34c:	e30057b2 	movw	r5, #1970	; 0x7b2
    a350:	e300216d 	movw	r2, #365	; 0x16d
    a354:	e300316e 	movw	r3, #366	; 0x16e
    a358:	e0661690 	mls	r6, r0, r6, r1
    a35c:	ea000001 	b	a368 <CTimer::GetTimeString()+0x9c>
    a360:	e0444000 	sub	r4, r4, r0
    a364:	e2855001 	add	r5, r5, #1
    a368:	e0810c95 	umull	r0, r1, r5, ip
    a36c:	e1a002a1 	lsr	r0, r1, #5
    a370:	e1a013a1 	lsr	r1, r1, #7
    a374:	e060509a 	mls	r0, sl, r0, r5
    a378:	e061519e 	mls	r1, lr, r1, r5
    a37c:	e3500000 	cmp	r0, #0
    a380:	e16f1f11 	clz	r1, r1
    a384:	01a012a1 	lsreq	r1, r1, #5
    a388:	0a000002 	beq	a398 <CTimer::GetTimeString()+0xcc>
    a38c:	e3150003 	tst	r5, #3
    a390:	03a01001 	moveq	r1, #1
    a394:	13a01000 	movne	r1, #0
    a398:	e3510000 	cmp	r1, #0
    a39c:	01a00002 	moveq	r0, r2
    a3a0:	11a00003 	movne	r0, r3
    a3a4:	e1540000 	cmp	r4, r0
    a3a8:	2affffec 	bcs	a360 <CTimer::GetTimeString()+0x94>
    a3ac:	e301031c 	movw	r0, #4892	; 0x131c
    a3b0:	e3400005 	movt	r0, #5
    a3b4:	e3a0a000 	mov	sl, #0
    a3b8:	ea000001 	b	a3c4 <CTimer::GetTimeString()+0xf8>
    a3bc:	e0444003 	sub	r4, r4, r3
    a3c0:	e28aa001 	add	sl, sl, #1
    a3c4:	e35a0001 	cmp	sl, #1
    a3c8:	13a02000 	movne	r2, #0
    a3cc:	02012001 	andeq	r2, r1, #1
    a3d0:	e3a0301d 	mov	r3, #29
    a3d4:	e3520000 	cmp	r2, #0
    a3d8:	0790310a 	ldreq	r3, [r0, sl, lsl #2]
    a3dc:	e1540003 	cmp	r4, r3
    a3e0:	2afffff5 	bcs	a3bc <CTimer::GetTimeString()+0xf0>
    a3e4:	e308251f 	movw	r2, #34079	; 0x851f
    a3e8:	e34521eb 	movt	r2, #20971	; 0x51eb
    a3ec:	e3a01064 	mov	r1, #100	; 0x64
    a3f0:	e3a00010 	mov	r0, #16
    a3f4:	e0832299 	umull	r2, r3, r9, r2
    a3f8:	e1a0b2a3 	lsr	fp, r3, #5
    a3fc:	e06b9b91 	mls	fp, r1, fp, r9
    a400:	ebfffeb3 	bl	9ed4 <operator new(unsigned int)>
    a404:	e1a09000 	mov	r9, r0
    a408:	eb000bc2 	bl	d318 <CString::CString()>
    a40c:	e30037b7 	movw	r3, #1975	; 0x7b7
    a410:	e1550003 	cmp	r5, r3
    a414:	8a00000a 	bhi	a444 <CTimer::GetTimeString()+0x178>
    a418:	e1a00009 	mov	r0, r9
    a41c:	e58db004 	str	fp, [sp, #4]
    a420:	e1a03006 	mov	r3, r6
    a424:	e58d8000 	str	r8, [sp]
    a428:	e1a02007 	mov	r2, r7
    a42c:	e30113d8 	movw	r1, #5080	; 0x13d8
    a430:	e3401005 	movt	r1, #5
    a434:	eb000eca 	bl	df64 <CString::Format(char const*, ...)>
    a438:	e1a00009 	mov	r0, r9
    a43c:	e28dd014 	add	sp, sp, #20
    a440:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a444:	e30a0aab 	movw	r0, #43691	; 0xaaab
    a448:	e34a0aaa 	movt	r0, #43690	; 0xaaaa
    a44c:	e3a0c018 	mov	ip, #24
    a450:	e3022c84 	movw	r2, #11396	; 0x2c84
    a454:	e3402005 	movt	r2, #5
    a458:	e0810097 	umull	r0, r1, r7, r0
    a45c:	e58db00c 	str	fp, [sp, #12]
    a460:	e58d8008 	str	r8, [sp, #8]
    a464:	e2843001 	add	r3, r4, #1
    a468:	e1a00221 	lsr	r0, r1, #4
    a46c:	e30113bc 	movw	r1, #5052	; 0x13bc
    a470:	e3401005 	movt	r1, #5
    a474:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    a478:	e067709c 	mls	r7, ip, r0, r7
    a47c:	e58d6004 	str	r6, [sp, #4]
    a480:	e1a00009 	mov	r0, r9
    a484:	e58d7000 	str	r7, [sp]
    a488:	eb000eb5 	bl	df64 <CString::Format(char const*, ...)>
    a48c:	e1a00009 	mov	r0, r9
    a490:	e28dd014 	add	sp, sp, #20
    a494:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a498:	ebfffe91 	bl	9ee4 <EnterCritical>
    a49c:	e5943010 	ldr	r3, [r4, #16]
    a4a0:	e594500c 	ldr	r5, [r4, #12]
    a4a4:	e3530000 	cmp	r3, #0
    a4a8:	e5949004 	ldr	r9, [r4, #4]
    a4ac:	0affff8e 	beq	a2ec <CTimer::GetTimeString()+0x20>
    a4b0:	ebfffe98 	bl	9f18 <LeaveCritical>
    a4b4:	eaffff8c 	b	a2ec <CTimer::GetTimeString()+0x20>

0000a4b8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    a4b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4bc:	e1a0a000 	mov	sl, r0
    a4c0:	e1a04002 	mov	r4, r2
    a4c4:	e24dd00c 	sub	sp, sp, #12
    a4c8:	e3a00014 	mov	r0, #20
    a4cc:	e1a06001 	mov	r6, r1
    a4d0:	e1a07003 	mov	r7, r3
    a4d4:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
    a4d8:	ebfffe7d 	bl	9ed4 <operator new(unsigned int)>
    a4dc:	e3540000 	cmp	r4, #0
    a4e0:	e59a1004 	ldr	r1, [sl, #4]
    a4e4:	e1a09000 	mov	r9, r0
    a4e8:	e0816006 	add	r6, r1, r6
    a4ec:	0a000042 	beq	a5fc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
    a4f0:	e59a301c 	ldr	r3, [sl, #28]
    a4f4:	e3042d43 	movw	r2, #19779	; 0x4d43
    a4f8:	e3442b54 	movt	r2, #19284	; 0x4b54
    a4fc:	e3530000 	cmp	r3, #0
    a500:	e98900d0 	stmib	r9, {r4, r6, r7}
    a504:	e5895010 	str	r5, [r9, #16]
    a508:	e5892000 	str	r2, [r9]
    a50c:	1a000038 	bne	a5f4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
    a510:	e28a5018 	add	r5, sl, #24
    a514:	e1a00005 	mov	r0, r5
    a518:	eb001352 	bl	f268 <CPtrList::GetFirst()>
    a51c:	e2504000 	subs	r4, r0, #0
    a520:	0a00002e 	beq	a5e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    a524:	e30133ec 	movw	r3, #5100	; 0x13ec
    a528:	e3403005 	movt	r3, #5
    a52c:	e3017354 	movw	r7, #4948	; 0x1354
    a530:	e3407005 	movt	r7, #5
    a534:	e3048d43 	movw	r8, #19779	; 0x4d43
    a538:	e3448b54 	movt	r8, #19284	; 0x4b54
    a53c:	e58d3004 	str	r3, [sp, #4]
    a540:	ea000011 	b	a58c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd4>
    a544:	e59bc000 	ldr	ip, [fp]
    a548:	e30103fc 	movw	r0, #5116	; 0x13fc
    a54c:	e3400005 	movt	r0, #5
    a550:	e15c0008 	cmp	ip, r8
    a554:	e3002116 	movw	r2, #278	; 0x116
    a558:	e1a01007 	mov	r1, r7
    a55c:	0a000000 	beq	a564 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xac>
    a560:	eb000808 	bl	c588 <assertion_failed>
    a564:	e59b3008 	ldr	r3, [fp, #8]
    a568:	e1a01004 	mov	r1, r4
    a56c:	e1a00005 	mov	r0, r5
    a570:	e0433006 	sub	r3, r3, r6
    a574:	e3530000 	cmp	r3, #0
    a578:	ca00000d 	bgt	a5b4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
    a57c:	eb00133b 	bl	f270 <CPtrList::GetNext(TPtrListElement*)>
    a580:	e3500000 	cmp	r0, #0
    a584:	0a000015 	beq	a5e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    a588:	e1a04000 	mov	r4, r0
    a58c:	e1a01004 	mov	r1, r4
    a590:	e1a00005 	mov	r0, r5
    a594:	eb00134c 	bl	f2cc <CPtrList::GetPtr(TPtrListElement*)>
    a598:	e250b000 	subs	fp, r0, #0
    a59c:	1affffe8 	bne	a544 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x8c>
    a5a0:	e3002115 	movw	r2, #277	; 0x115
    a5a4:	e1a01007 	mov	r1, r7
    a5a8:	e59d0004 	ldr	r0, [sp, #4]
    a5ac:	eb0007f5 	bl	c588 <assertion_failed>
    a5b0:	eaffffe3 	b	a544 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x8c>
    a5b4:	e1a01004 	mov	r1, r4
    a5b8:	e1a00005 	mov	r0, r5
    a5bc:	e1a02009 	mov	r2, r9
    a5c0:	eb001358 	bl	f328 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    a5c4:	e59a301c 	ldr	r3, [sl, #28]
    a5c8:	e3530000 	cmp	r3, #0
    a5cc:	0a000000 	beq	a5d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x11c>
    a5d0:	ebfffe50 	bl	9f18 <LeaveCritical>
    a5d4:	e1a00009 	mov	r0, r9
    a5d8:	e28dd00c 	add	sp, sp, #12
    a5dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5e0:	e1a01004 	mov	r1, r4
    a5e4:	e1a00005 	mov	r0, r5
    a5e8:	e1a02009 	mov	r2, r9
    a5ec:	eb001393 	bl	f440 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    a5f0:	eafffff3 	b	a5c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
    a5f4:	ebfffe3a 	bl	9ee4 <EnterCritical>
    a5f8:	eaffffc4 	b	a510 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
    a5fc:	e3011354 	movw	r1, #4948	; 0x1354
    a600:	e3401005 	movt	r1, #5
    a604:	e30100e8 	movw	r0, #4328	; 0x10e8
    a608:	e3400005 	movt	r0, #5
    a60c:	e3002105 	movw	r2, #261	; 0x105
    a610:	eb0007dc 	bl	c588 <assertion_failed>
    a614:	eaffffb5 	b	a4f0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x38>

0000a618 <CTimer::CancelKernelTimer(unsigned int)>:
    a618:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a61c:	e2514000 	subs	r4, r1, #0
    a620:	e1a05000 	mov	r5, r0
    a624:	0a000021 	beq	a6b0 <CTimer::CancelKernelTimer(unsigned int)+0x98>
    a628:	e595301c 	ldr	r3, [r5, #28]
    a62c:	e3530000 	cmp	r3, #0
    a630:	1a00001c 	bne	a6a8 <CTimer::CancelKernelTimer(unsigned int)+0x90>
    a634:	e2856018 	add	r6, r5, #24
    a638:	e1a01004 	mov	r1, r4
    a63c:	e1a00006 	mov	r0, r6
    a640:	eb00141c 	bl	f6b8 <CPtrList::Find(void*)>
    a644:	e2507000 	subs	r7, r0, #0
    a648:	0a000011 	beq	a694 <CTimer::CancelKernelTimer(unsigned int)+0x7c>
    a64c:	e5942000 	ldr	r2, [r4]
    a650:	e3043d43 	movw	r3, #19779	; 0x4d43
    a654:	e3443b54 	movt	r3, #19284	; 0x4b54
    a658:	e1520003 	cmp	r2, r3
    a65c:	0a000005 	beq	a678 <CTimer::CancelKernelTimer(unsigned int)+0x60>
    a660:	e3011354 	movw	r1, #4948	; 0x1354
    a664:	e3401005 	movt	r1, #5
    a668:	e3010394 	movw	r0, #5012	; 0x1394
    a66c:	e3400005 	movt	r0, #5
    a670:	e3002139 	movw	r2, #313	; 0x139
    a674:	eb0007c3 	bl	c588 <assertion_failed>
    a678:	e1a00006 	mov	r0, r6
    a67c:	e1a01007 	mov	r1, r7
    a680:	eb0013b1 	bl	f54c <CPtrList::Remove(TPtrListElement*)>
    a684:	e3a03000 	mov	r3, #0
    a688:	e5843000 	str	r3, [r4]
    a68c:	e1a00004 	mov	r0, r4
    a690:	ebfffe11 	bl	9edc <operator delete(void*)>
    a694:	e595301c 	ldr	r3, [r5, #28]
    a698:	e3530000 	cmp	r3, #0
    a69c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a6a0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a6a4:	eafffe1b 	b	9f18 <LeaveCritical>
    a6a8:	ebfffe0d 	bl	9ee4 <EnterCritical>
    a6ac:	eaffffe0 	b	a634 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    a6b0:	e3011354 	movw	r1, #4948	; 0x1354
    a6b4:	e3401005 	movt	r1, #5
    a6b8:	e3010388 	movw	r0, #5000	; 0x1388
    a6bc:	e3400005 	movt	r0, #5
    a6c0:	e3002132 	movw	r2, #306	; 0x132
    a6c4:	eb0007af 	bl	c588 <assertion_failed>
    a6c8:	eaffffd6 	b	a628 <CTimer::CancelKernelTimer(unsigned int)+0x10>

0000a6cc <CTimer::PollKernelTimers()>:
    a6cc:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6d0:	e1a06000 	mov	r6, r0
    a6d4:	e590301c 	ldr	r3, [r0, #28]
    a6d8:	e3530000 	cmp	r3, #0
    a6dc:	1a00004e 	bne	a81c <CTimer::PollKernelTimers()+0x150>
    a6e0:	e2867018 	add	r7, r6, #24
    a6e4:	e1a00007 	mov	r0, r7
    a6e8:	eb0012de 	bl	f268 <CPtrList::GetFirst()>
    a6ec:	e2505000 	subs	r5, r0, #0
    a6f0:	0a00003f 	beq	a7f4 <CTimer::PollKernelTimers()+0x128>
    a6f4:	e3019354 	movw	r9, #4948	; 0x1354
    a6f8:	e3409005 	movt	r9, #5
    a6fc:	e301a388 	movw	sl, #5000	; 0x1388
    a700:	e340a005 	movt	sl, #5
    a704:	e3048d43 	movw	r8, #19779	; 0x4d43
    a708:	e3448b54 	movt	r8, #19284	; 0x4b54
    a70c:	ea00000f 	b	a750 <CTimer::PollKernelTimers()+0x84>
    a710:	e5945004 	ldr	r5, [r4, #4]
    a714:	e3550000 	cmp	r5, #0
    a718:	0a00002c 	beq	a7d0 <CTimer::PollKernelTimers()+0x104>
    a71c:	e5942010 	ldr	r2, [r4, #16]
    a720:	e1a00004 	mov	r0, r4
    a724:	e594100c 	ldr	r1, [r4, #12]
    a728:	e12fff35 	blx	r5
    a72c:	e3a03000 	mov	r3, #0
    a730:	e5843000 	str	r3, [r4]
    a734:	e1a00004 	mov	r0, r4
    a738:	ebfffde7 	bl	9edc <operator delete(void*)>
    a73c:	e596301c 	ldr	r3, [r6, #28]
    a740:	e3530000 	cmp	r3, #0
    a744:	1a000027 	bne	a7e8 <CTimer::PollKernelTimers()+0x11c>
    a748:	e25b5000 	subs	r5, fp, #0
    a74c:	0a000028 	beq	a7f4 <CTimer::PollKernelTimers()+0x128>
    a750:	e1a01005 	mov	r1, r5
    a754:	e1a00007 	mov	r0, r7
    a758:	eb0012db 	bl	f2cc <CPtrList::GetPtr(TPtrListElement*)>
    a75c:	e2504000 	subs	r4, r0, #0
    a760:	0a000028 	beq	a808 <CTimer::PollKernelTimers()+0x13c>
    a764:	e5943000 	ldr	r3, [r4]
    a768:	e1530008 	cmp	r3, r8
    a76c:	0a000004 	beq	a784 <CTimer::PollKernelTimers()+0xb8>
    a770:	e3010394 	movw	r0, #5012	; 0x1394
    a774:	e3400005 	movt	r0, #5
    a778:	e300214f 	movw	r2, #335	; 0x14f
    a77c:	e1a01009 	mov	r1, r9
    a780:	eb000780 	bl	c588 <assertion_failed>
    a784:	e5962004 	ldr	r2, [r6, #4]
    a788:	e5943008 	ldr	r3, [r4, #8]
    a78c:	e0433002 	sub	r3, r3, r2
    a790:	e3530000 	cmp	r3, #0
    a794:	ca000016 	bgt	a7f4 <CTimer::PollKernelTimers()+0x128>
    a798:	e1a01005 	mov	r1, r5
    a79c:	e1a00007 	mov	r0, r7
    a7a0:	eb0012b2 	bl	f270 <CPtrList::GetNext(TPtrListElement*)>
    a7a4:	e1a01005 	mov	r1, r5
    a7a8:	e1a0b000 	mov	fp, r0
    a7ac:	e1a00007 	mov	r0, r7
    a7b0:	eb001365 	bl	f54c <CPtrList::Remove(TPtrListElement*)>
    a7b4:	e596301c 	ldr	r3, [r6, #28]
    a7b8:	e3530000 	cmp	r3, #0
    a7bc:	0affffd3 	beq	a710 <CTimer::PollKernelTimers()+0x44>
    a7c0:	ebfffdd4 	bl	9f18 <LeaveCritical>
    a7c4:	e5945004 	ldr	r5, [r4, #4]
    a7c8:	e3550000 	cmp	r5, #0
    a7cc:	1affffd2 	bne	a71c <CTimer::PollKernelTimers()+0x50>
    a7d0:	e30100e8 	movw	r0, #4328	; 0x10e8
    a7d4:	e3400005 	movt	r0, #5
    a7d8:	e300215d 	movw	r2, #349	; 0x15d
    a7dc:	e1a01009 	mov	r1, r9
    a7e0:	eb000768 	bl	c588 <assertion_failed>
    a7e4:	eaffffcc 	b	a71c <CTimer::PollKernelTimers()+0x50>
    a7e8:	ebfffdbd 	bl	9ee4 <EnterCritical>
    a7ec:	e25b5000 	subs	r5, fp, #0
    a7f0:	1affffd6 	bne	a750 <CTimer::PollKernelTimers()+0x84>
    a7f4:	e596301c 	ldr	r3, [r6, #28]
    a7f8:	e3530000 	cmp	r3, #0
    a7fc:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a800:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a804:	eafffdc3 	b	9f18 <LeaveCritical>
    a808:	e300214e 	movw	r2, #334	; 0x14e
    a80c:	e1a01009 	mov	r1, r9
    a810:	e1a0000a 	mov	r0, sl
    a814:	eb00075b 	bl	c588 <assertion_failed>
    a818:	eaffffd1 	b	a764 <CTimer::PollKernelTimers()+0x98>
    a81c:	ebfffdb0 	bl	9ee4 <EnterCritical>
    a820:	eaffffae 	b	a6e0 <CTimer::PollKernelTimers()+0x14>

0000a824 <CTimer::InterruptHandler()>:
    a824:	e3a03a03 	mov	r3, #12288	; 0x3000
    a828:	e3433f00 	movt	r3, #16128	; 0x3f00
    a82c:	e92d4010 	push	{r4, lr}
    a830:	e1a04000 	mov	r4, r0
    a834:	e5933000 	ldr	r3, [r3]
    a838:	e3130008 	tst	r3, #8
    a83c:	0a000036 	beq	a91c <CTimer::InterruptHandler()+0xf8>
    a840:	e3a03a03 	mov	r3, #12288	; 0x3000
    a844:	e3433f00 	movt	r3, #16128	; 0x3f00
    a848:	e3021710 	movw	r1, #10000	; 0x2710
    a84c:	e5932018 	ldr	r2, [r3, #24]
    a850:	e0822001 	add	r2, r2, r1
    a854:	e5832018 	str	r2, [r3, #24]
    a858:	e5930004 	ldr	r0, [r3, #4]
    a85c:	e1520000 	cmp	r2, r0
    a860:	35932004 	ldrcc	r2, [r3, #4]
    a864:	30821001 	addcc	r1, r2, r1
    a868:	e3a02008 	mov	r2, #8
    a86c:	35831018 	strcc	r1, [r3, #24]
    a870:	e3a03a03 	mov	r3, #12288	; 0x3000
    a874:	e3433f00 	movt	r3, #16128	; 0x3f00
    a878:	e5832000 	str	r2, [r3]
    a87c:	e5942010 	ldr	r2, [r4, #16]
    a880:	e3520000 	cmp	r2, #0
    a884:	1a000016 	bne	a8e4 <CTimer::InterruptHandler()+0xc0>
    a888:	e5943004 	ldr	r3, [r4, #4]
    a88c:	e308051f 	movw	r0, #34079	; 0x851f
    a890:	e34501eb 	movt	r0, #20971	; 0x51eb
    a894:	e2833001 	add	r3, r3, #1
    a898:	e3a0c064 	mov	ip, #100	; 0x64
    a89c:	e5843004 	str	r3, [r4, #4]
    a8a0:	e0810093 	umull	r0, r1, r3, r0
    a8a4:	e1a012a1 	lsr	r1, r1, #5
    a8a8:	e063319c 	mls	r3, ip, r1, r3
    a8ac:	e3530000 	cmp	r3, #0
    a8b0:	1a000008 	bne	a8d8 <CTimer::InterruptHandler()+0xb4>
    a8b4:	e5943008 	ldr	r3, [r4, #8]
    a8b8:	e2833001 	add	r3, r3, #1
    a8bc:	e5843008 	str	r3, [r4, #8]
    a8c0:	e594300c 	ldr	r3, [r4, #12]
    a8c4:	e2833001 	add	r3, r3, #1
    a8c8:	e584300c 	str	r3, [r4, #12]
    a8cc:	e3520000 	cmp	r2, #0
    a8d0:	0a000000 	beq	a8d8 <CTimer::InterruptHandler()+0xb4>
    a8d4:	ebfffd8f 	bl	9f18 <LeaveCritical>
    a8d8:	e1a00004 	mov	r0, r4
    a8dc:	e8bd4010 	pop	{r4, lr}
    a8e0:	eaffff79 	b	a6cc <CTimer::PollKernelTimers()>
    a8e4:	ebfffd7e 	bl	9ee4 <EnterCritical>
    a8e8:	e5943004 	ldr	r3, [r4, #4]
    a8ec:	e308051f 	movw	r0, #34079	; 0x851f
    a8f0:	e34501eb 	movt	r0, #20971	; 0x51eb
    a8f4:	e2833001 	add	r3, r3, #1
    a8f8:	e3a0c064 	mov	ip, #100	; 0x64
    a8fc:	e5843004 	str	r3, [r4, #4]
    a900:	e5942010 	ldr	r2, [r4, #16]
    a904:	e0810093 	umull	r0, r1, r3, r0
    a908:	e1a012a1 	lsr	r1, r1, #5
    a90c:	e063319c 	mls	r3, ip, r1, r3
    a910:	e3530000 	cmp	r3, #0
    a914:	1affffec 	bne	a8cc <CTimer::InterruptHandler()+0xa8>
    a918:	eaffffe5 	b	a8b4 <CTimer::InterruptHandler()+0x90>
    a91c:	e3011354 	movw	r1, #4948	; 0x1354
    a920:	e3401005 	movt	r1, #5
    a924:	e3010424 	movw	r0, #5156	; 0x1424
    a928:	e3400005 	movt	r0, #5
    a92c:	e300216f 	movw	r2, #367	; 0x16f
    a930:	eb000714 	bl	c588 <assertion_failed>
    a934:	eaffffc1 	b	a840 <CTimer::InterruptHandler()+0x1c>

0000a938 <CTimer::InterruptHandler(void*)>:
    a938:	e92d4010 	push	{r4, lr}
    a93c:	e2504000 	subs	r4, r0, #0
    a940:	0a000002 	beq	a950 <CTimer::InterruptHandler(void*)+0x18>
    a944:	e1a00004 	mov	r0, r4
    a948:	e8bd4010 	pop	{r4, lr}
    a94c:	eaffffb4 	b	a824 <CTimer::InterruptHandler()>
    a950:	e3011354 	movw	r1, #4948	; 0x1354
    a954:	e3401005 	movt	r1, #5
    a958:	e3010448 	movw	r0, #5192	; 0x1448
    a95c:	e3400005 	movt	r0, #5
    a960:	e3002191 	movw	r2, #401	; 0x191
    a964:	eb000707 	bl	c588 <assertion_failed>
    a968:	e1a00004 	mov	r0, r4
    a96c:	e8bd4010 	pop	{r4, lr}
    a970:	eaffffab 	b	a824 <CTimer::InterruptHandler()>

0000a974 <CTimer::TuneMsDelay()>:
    a974:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a978:	e1a06000 	mov	r6, r0
    a97c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    a980:	e24dd00c 	sub	sp, sp, #12
    a984:	e3025710 	movw	r5, #10000	; 0x2710
    a988:	e5963020 	ldr	r3, [r6, #32]
    a98c:	e308451f 	movw	r4, #34079	; 0x851f
    a990:	e34541eb 	movt	r4, #20971	; 0x51eb
    a994:	e5967004 	ldr	r7, [r6, #4]
    a998:	e0000390 	mul	r0, r0, r3
    a99c:	eb000d7d 	bl	df98 <DelayLoop>
    a9a0:	e5962004 	ldr	r2, [r6, #4]
    a9a4:	e5963020 	ldr	r3, [r6, #32]
    a9a8:	e3041dd3 	movw	r1, #19923	; 0x4dd3
    a9ac:	e3411062 	movt	r1, #4194	; 0x1062
    a9b0:	e0422007 	sub	r2, r2, r7
    a9b4:	e735f215 	udiv	r5, r5, r2
    a9b8:	e0030593 	mul	r3, r3, r5
    a9bc:	e0832394 	umull	r2, r3, r4, r3
    a9c0:	e1a032a3 	lsr	r3, r3, #5
    a9c4:	e2832f7d 	add	r2, r3, #500	; 0x1f4
    a9c8:	e5863020 	str	r3, [r6, #32]
    a9cc:	e0832291 	umull	r2, r3, r1, r2
    a9d0:	e1a03323 	lsr	r3, r3, #6
    a9d4:	e5863024 	str	r3, [r6, #36]	; 0x24
    a9d8:	eb000869 	bl	cb84 <CLogger::Get()>
    a9dc:	e0832495 	umull	r2, r3, r5, r4
    a9e0:	e3a0c064 	mov	ip, #100	; 0x64
    a9e4:	e0841594 	umull	r1, r4, r4, r5
    a9e8:	e1a012a3 	lsr	r1, r3, #5
    a9ec:	e3a02003 	mov	r2, #3
    a9f0:	e1a042a4 	lsr	r4, r4, #5
    a9f4:	e3013454 	movw	r3, #5204	; 0x1454
    a9f8:	e3403005 	movt	r3, #5
    a9fc:	e065519c 	mls	r5, ip, r1, r5
    aa00:	e58d4000 	str	r4, [sp]
    aa04:	e59f100c 	ldr	r1, [pc, #12]	; aa18 <CTimer::TuneMsDelay()+0xa4>
    aa08:	e58d5004 	str	r5, [sp, #4]
    aa0c:	eb000939 	bl	cef8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    aa10:	e28dd00c 	add	sp, sp, #12
    aa14:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    aa18:	0005134c 	.word	0x0005134c

0000aa1c <CTimer::Initialize()>:
    aa1c:	e92d4010 	push	{r4, lr}
    aa20:	e1a04000 	mov	r4, r0
    aa24:	e5900000 	ldr	r0, [r0]
    aa28:	e3500000 	cmp	r0, #0
    aa2c:	0a000011 	beq	aa78 <CTimer::Initialize()+0x5c>
    aa30:	e1a03004 	mov	r3, r4
    aa34:	e3a01003 	mov	r1, #3
    aa38:	e30a2938 	movw	r2, #43320	; 0xa938
    aa3c:	e3402000 	movt	r2, #0
    aa40:	eb000e63 	bl	e3d4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    aa44:	e3a02a03 	mov	r2, #12288	; 0x3000
    aa48:	e3432f00 	movt	r2, #16128	; 0x3f00
    aa4c:	e3a03df2 	mov	r3, #15488	; 0x3c80
    aa50:	e34f3e36 	movt	r3, #65078	; 0xfe36
    aa54:	e1a00004 	mov	r0, r4
    aa58:	e5823004 	str	r3, [r2, #4]
    aa5c:	e5923004 	ldr	r3, [r2, #4]
    aa60:	e2833c27 	add	r3, r3, #9984	; 0x2700
    aa64:	e2833010 	add	r3, r3, #16
    aa68:	e5823018 	str	r3, [r2, #24]
    aa6c:	ebffffc0 	bl	a974 <CTimer::TuneMsDelay()>
    aa70:	e3a00001 	mov	r0, #1
    aa74:	e8bd8010 	pop	{r4, pc}
    aa78:	e3011354 	movw	r1, #4948	; 0x1354
    aa7c:	e3401005 	movt	r1, #5
    aa80:	e3010370 	movw	r0, #4976	; 0x1370
    aa84:	e3400005 	movt	r0, #5
    aa88:	e3a02055 	mov	r2, #85	; 0x55
    aa8c:	eb0006bd 	bl	c588 <assertion_failed>
    aa90:	e5940000 	ldr	r0, [r4]
    aa94:	eaffffe5 	b	aa30 <CTimer::Initialize()+0x14>

0000aa98 <CTimer::SimpleMsDelay(unsigned int)>:
    aa98:	e2503000 	subs	r3, r0, #0
    aa9c:	012fff1e 	bxeq	lr
    aaa0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    aaa4:	e0000390 	mul	r0, r0, r3
    aaa8:	e3500000 	cmp	r0, #0
    aaac:	012fff1e 	bxeq	lr
    aab0:	e3a03a03 	mov	r3, #12288	; 0x3000
    aab4:	e3433f00 	movt	r3, #16128	; 0x3f00
    aab8:	e2800001 	add	r0, r0, #1
    aabc:	e1a01003 	mov	r1, r3
    aac0:	e5932004 	ldr	r2, [r3, #4]
    aac4:	e5913004 	ldr	r3, [r1, #4]
    aac8:	e0433002 	sub	r3, r3, r2
    aacc:	e1500003 	cmp	r0, r3
    aad0:	8afffffb 	bhi	aac4 <CTimer::SimpleMsDelay(unsigned int)+0x2c>
    aad4:	e12fff1e 	bx	lr

0000aad8 <CTimer::SimpleusDelay(unsigned int)>:
    aad8:	e3500000 	cmp	r0, #0
    aadc:	012fff1e 	bxeq	lr
    aae0:	e3a03a03 	mov	r3, #12288	; 0x3000
    aae4:	e3433f00 	movt	r3, #16128	; 0x3f00
    aae8:	e2800001 	add	r0, r0, #1
    aaec:	e1a01003 	mov	r1, r3
    aaf0:	e5932004 	ldr	r2, [r3, #4]
    aaf4:	e5913004 	ldr	r3, [r1, #4]
    aaf8:	e0433002 	sub	r3, r3, r2
    aafc:	e1500003 	cmp	r0, r3
    ab00:	8afffffb 	bhi	aaf4 <CTimer::SimpleusDelay(unsigned int)+0x1c>
    ab04:	e12fff1e 	bx	lr

0000ab08 <CTimer::IsLeapYear(unsigned int)>:
    ab08:	e308251f 	movw	r2, #34079	; 0x851f
    ab0c:	e34521eb 	movt	r2, #20971	; 0x51eb
    ab10:	e3a01064 	mov	r1, #100	; 0x64
    ab14:	e083c092 	umull	ip, r3, r2, r0
    ab18:	e1a032a3 	lsr	r3, r3, #5
    ab1c:	e0630391 	mls	r3, r1, r3, r0
    ab20:	e3530000 	cmp	r3, #0
    ab24:	0a000003 	beq	ab38 <CTimer::IsLeapYear(unsigned int)+0x30>
    ab28:	e3100003 	tst	r0, #3
    ab2c:	03a00001 	moveq	r0, #1
    ab30:	13a00000 	movne	r0, #0
    ab34:	e12fff1e 	bx	lr
    ab38:	e0832290 	umull	r2, r3, r0, r2
    ab3c:	e3a02e19 	mov	r2, #400	; 0x190
    ab40:	e1a033a3 	lsr	r3, r3, #7
    ab44:	e0600392 	mls	r0, r2, r3, r0
    ab48:	e16f0f10 	clz	r0, r0
    ab4c:	e1a002a0 	lsr	r0, r0, #5
    ab50:	e12fff1e 	bx	lr

0000ab54 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    ab54:	e3500001 	cmp	r0, #1
    ab58:	0a000003 	beq	ab6c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    ab5c:	e301331c 	movw	r3, #4892	; 0x131c
    ab60:	e3403005 	movt	r3, #5
    ab64:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    ab68:	e12fff1e 	bx	lr
    ab6c:	e308251f 	movw	r2, #34079	; 0x851f
    ab70:	e34521eb 	movt	r2, #20971	; 0x51eb
    ab74:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ab78:	e3a0e064 	mov	lr, #100	; 0x64
    ab7c:	e0832291 	umull	r2, r3, r1, r2
    ab80:	e1a0c2a3 	lsr	ip, r3, #5
    ab84:	e06c1c9e 	mls	ip, lr, ip, r1
    ab88:	e35c0000 	cmp	ip, #0
    ab8c:	0a000008 	beq	abb4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    ab90:	e3110003 	tst	r1, #3
    ab94:	03a01001 	moveq	r1, #1
    ab98:	13a01000 	movne	r1, #0
    ab9c:	e3510000 	cmp	r1, #0
    aba0:	13a0001d 	movne	r0, #29
    aba4:	0301331c 	movweq	r3, #4892	; 0x131c
    aba8:	03403005 	movteq	r3, #5
    abac:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    abb0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    abb4:	e1a033a3 	lsr	r3, r3, #7
    abb8:	e3a02e19 	mov	r2, #400	; 0x190
    abbc:	e0611392 	mls	r1, r2, r3, r1
    abc0:	e16f1f11 	clz	r1, r1
    abc4:	e1a012a1 	lsr	r1, r1, #5
    abc8:	eafffff3 	b	ab9c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

0000abcc <CTimer::Get()>:
    abcc:	e92d4010 	push	{r4, lr}
    abd0:	e3024d80 	movw	r4, #11648	; 0x2d80
    abd4:	e3404005 	movt	r4, #5
    abd8:	e5940000 	ldr	r0, [r4]
    abdc:	e3500000 	cmp	r0, #0
    abe0:	18bd8010 	popne	{r4, pc}
    abe4:	e30021d6 	movw	r2, #470	; 0x1d6
    abe8:	e3011354 	movw	r1, #4948	; 0x1354
    abec:	e3401005 	movt	r1, #5
    abf0:	e301046c 	movw	r0, #5228	; 0x146c
    abf4:	e3400005 	movt	r0, #5
    abf8:	eb000662 	bl	c588 <assertion_failed>
    abfc:	e5940000 	ldr	r0, [r4]
    ac00:	e8bd8010 	pop	{r4, pc}

0000ac04 <memcpy>:
    ac04:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac08:	e352007f 	cmp	r2, #127	; 0x7f
    ac0c:	9a00000b 	bls	ac40 <memcpy+0x3c>
    ac10:	e3110003 	tst	r1, #3
    ac14:	1a000009 	bne	ac40 <memcpy+0x3c>
    ac18:	e3100003 	tst	r0, #3
    ac1c:	1a000007 	bne	ac40 <memcpy+0x3c>
    ac20:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    ac24:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    ac28:	e2422020 	sub	r2, r2, #32
    ac2c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    ac30:	f5d1f040 	pld	[r1, #64]	; 0x40
    ac34:	e352001f 	cmp	r2, #31
    ac38:	8afffff9 	bhi	ac24 <memcpy+0x20>
    ac3c:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    ac40:	e3520000 	cmp	r2, #0
    ac44:	0a000003 	beq	ac58 <memcpy+0x54>
    ac48:	e4d13001 	ldrb	r3, [r1], #1
    ac4c:	e2522001 	subs	r2, r2, #1
    ac50:	e4c03001 	strb	r3, [r0], #1
    ac54:	1afffffb 	bne	ac48 <memcpy+0x44>
    ac58:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    ac5c:	e12fff1e 	bx	lr

0000ac60 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    ac60:	e3a01000 	mov	r1, #0
    ac64:	e3a0c00a 	mov	ip, #10
    ac68:	ea000009 	b	ac94 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
    ac6c:	e3530009 	cmp	r3, #9
    ac70:	8a00000f 	bhi	acb4 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
    ac74:	e3720001 	cmn	r2, #1
    ac78:	13a03000 	movne	r3, #0
    ac7c:	03a03001 	moveq	r3, #1
    ac80:	e1510002 	cmp	r1, r2
    ac84:	83833001 	orrhi	r3, r3, #1
    ac88:	e1a01002 	mov	r1, r2
    ac8c:	e3530000 	cmp	r3, #0
    ac90:	1a000007 	bne	acb4 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
    ac94:	e0d020d1 	ldrsb	r2, [r0], #1
    ac98:	e3520000 	cmp	r2, #0
    ac9c:	e2423030 	sub	r3, r2, #48	; 0x30
    aca0:	e022319c 	mla	r2, ip, r1, r3
    aca4:	e6ef3073 	uxtb	r3, r3
    aca8:	1affffef 	bne	ac6c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0xc>
    acac:	e1a00001 	mov	r0, r1
    acb0:	e12fff1e 	bx	lr
    acb4:	e3e01000 	mvn	r1, #0
    acb8:	e1a00001 	mov	r0, r1
    acbc:	e12fff1e 	bx	lr

0000acc0 <CKernelOptions::~CKernelOptions()>:
    acc0:	e3023d84 	movw	r3, #11652	; 0x2d84
    acc4:	e3403005 	movt	r3, #5
    acc8:	e3a02000 	mov	r2, #0
    accc:	e5832000 	str	r2, [r3]
    acd0:	e12fff1e 	bx	lr

0000acd4 <CKernelOptions::GetWidth() const>:
    acd4:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    acd8:	e12fff1e 	bx	lr

0000acdc <CKernelOptions::GetHeight() const>:
    acdc:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    ace0:	e12fff1e 	bx	lr

0000ace4 <CKernelOptions::GetLogDevice() const>:
    ace4:	e2800e81 	add	r0, r0, #2064	; 0x810
    ace8:	e2800008 	add	r0, r0, #8
    acec:	e12fff1e 	bx	lr

0000acf0 <CKernelOptions::GetLogLevel() const>:
    acf0:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    acf4:	e12fff1e 	bx	lr

0000acf8 <CKernelOptions::GetKeyMap() const>:
    acf8:	e2800e83 	add	r0, r0, #2096	; 0x830
    acfc:	e12fff1e 	bx	lr

0000ad00 <CKernelOptions::GetUSBPowerDelay() const>:
    ad00:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    ad04:	e12fff1e 	bx	lr

0000ad08 <CKernelOptions::GetCPUSpeed() const>:
    ad08:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    ad0c:	e12fff1e 	bx	lr

0000ad10 <CKernelOptions::GetSoCMaxTemp() const>:
    ad10:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
    ad14:	e12fff1e 	bx	lr

0000ad18 <CKernelOptions::Get()>:
    ad18:	e3023d84 	movw	r3, #11652	; 0x2d84
    ad1c:	e3403005 	movt	r3, #5
    ad20:	e5930000 	ldr	r0, [r3]
    ad24:	e12fff1e 	bx	lr

0000ad28 <CKernelOptions::GetToken()>:
    ad28:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    ad2c:	e1d320d0 	ldrsb	r2, [r3]
    ad30:	e3520000 	cmp	r2, #0
    ad34:	1a000005 	bne	ad50 <CKernelOptions::GetToken()+0x28>
    ad38:	ea000016 	b	ad98 <CKernelOptions::GetToken()+0x70>
    ad3c:	e2833001 	add	r3, r3, #1
    ad40:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    ad44:	e1d320d0 	ldrsb	r2, [r3]
    ad48:	e3520000 	cmp	r2, #0
    ad4c:	0a000011 	beq	ad98 <CKernelOptions::GetToken()+0x70>
    ad50:	e3520020 	cmp	r2, #32
    ad54:	0afffff8 	beq	ad3c <CKernelOptions::GetToken()+0x14>
    ad58:	e1a02003 	mov	r2, r3
    ad5c:	ea000000 	b	ad64 <CKernelOptions::GetToken()+0x3c>
    ad60:	e1a02001 	mov	r2, r1
    ad64:	e2821001 	add	r1, r2, #1
    ad68:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    ad6c:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    ad70:	e35c0000 	cmp	ip, #0
    ad74:	0a000008 	beq	ad9c <CKernelOptions::GetToken()+0x74>
    ad78:	e35c0020 	cmp	ip, #32
    ad7c:	1afffff7 	bne	ad60 <CKernelOptions::GetToken()+0x38>
    ad80:	e2822002 	add	r2, r2, #2
    ad84:	e3a0c000 	mov	ip, #0
    ad88:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    ad8c:	e1a00003 	mov	r0, r3
    ad90:	e5c1c000 	strb	ip, [r1]
    ad94:	e12fff1e 	bx	lr
    ad98:	e3a03000 	mov	r3, #0
    ad9c:	e1a00003 	mov	r0, r3
    ada0:	e12fff1e 	bx	lr

0000ada4 <CKernelOptions::CKernelOptions()>:
    ada4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ada8:	e1a05000 	mov	r5, r0
    adac:	e2807e81 	add	r7, r0, #2064	; 0x810
    adb0:	e3a04000 	mov	r4, #0
    adb4:	e3a02004 	mov	r2, #4
    adb8:	e3a0303c 	mov	r3, #60	; 0x3c
    adbc:	e2877008 	add	r7, r7, #8
    adc0:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    adc4:	e24dd01c 	sub	sp, sp, #28
    adc8:	e585383c 	str	r3, [r5, #2108]	; 0x83c
    adcc:	e1a00007 	mov	r0, r7
    add0:	e30114ac 	movw	r1, #5292	; 0x14ac
    add4:	e3401005 	movt	r1, #5
    add8:	e5854810 	str	r4, [r5, #2064]	; 0x810
    addc:	e2859e83 	add	r9, r5, #2096	; 0x830
    ade0:	e5854814 	str	r4, [r5, #2068]	; 0x814
    ade4:	e5854834 	str	r4, [r5, #2100]	; 0x834
    ade8:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
    adec:	eb0013f3 	bl	fdc0 <strcpy>
    adf0:	e1a00009 	mov	r0, r9
    adf4:	e30114b4 	movw	r1, #5300	; 0x14b4
    adf8:	e3401005 	movt	r1, #5
    adfc:	eb0013ef 	bl	fdc0 <strcpy>
    ae00:	e3023d84 	movw	r3, #11652	; 0x2d84
    ae04:	e3403005 	movt	r3, #5
    ae08:	e28d0010 	add	r0, sp, #16
    ae0c:	e5835000 	str	r5, [r3]
    ae10:	ebfff79c 	bl	8c88 <CBcmPropertyTags::CBcmPropertyTags()>
    ae14:	e58d4000 	str	r4, [sp]
    ae18:	e1a02005 	mov	r2, r5
    ae1c:	e28d0010 	add	r0, sp, #16
    ae20:	e3a01001 	mov	r1, #1
    ae24:	e3401005 	movt	r1, #5
    ae28:	e300380c 	movw	r3, #2060	; 0x80c
    ae2c:	ebfff7dd 	bl	8da8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ae30:	e1500004 	cmp	r0, r4
    ae34:	0a000040 	beq	af3c <CKernelOptions::CKernelOptions()+0x198>
    ae38:	e5953008 	ldr	r3, [r5, #8]
    ae3c:	e3530b02 	cmp	r3, #2048	; 0x800
    ae40:	2a00003d 	bcs	af3c <CKernelOptions::CKernelOptions()+0x198>
    ae44:	e0853003 	add	r3, r5, r3
    ae48:	e285200c 	add	r2, r5, #12
    ae4c:	e3016508 	movw	r6, #5384	; 0x1508
    ae50:	e3406005 	movt	r6, #5
    ae54:	e30184b8 	movw	r8, #5304	; 0x14b8
    ae58:	e3408005 	movt	r8, #5
    ae5c:	e301a4c0 	movw	sl, #5312	; 0x14c0
    ae60:	e340a005 	movt	sl, #5
    ae64:	e5c3400c 	strb	r4, [r3, #12]
    ae68:	e585280c 	str	r2, [r5, #2060]	; 0x80c
    ae6c:	e1a00005 	mov	r0, r5
    ae70:	ebffffac 	bl	ad28 <CKernelOptions::GetToken()>
    ae74:	e250b000 	subs	fp, r0, #0
    ae78:	0a00002f 	beq	af3c <CKernelOptions::CKernelOptions()+0x198>
    ae7c:	e1db30d0 	ldrsb	r3, [fp]
    ae80:	e3530000 	cmp	r3, #0
    ae84:	0a000008 	beq	aeac <CKernelOptions::CKernelOptions()+0x108>
    ae88:	e353003d 	cmp	r3, #61	; 0x3d
    ae8c:	e1a0400b 	mov	r4, fp
    ae90:	1a000002 	bne	aea0 <CKernelOptions::CKernelOptions()+0xfc>
    ae94:	ea00002d 	b	af50 <CKernelOptions::CKernelOptions()+0x1ac>
    ae98:	e353003d 	cmp	r3, #61	; 0x3d
    ae9c:	0a00002b 	beq	af50 <CKernelOptions::CKernelOptions()+0x1ac>
    aea0:	e1f430d1 	ldrsb	r3, [r4, #1]!
    aea4:	e3530000 	cmp	r3, #0
    aea8:	1afffffa 	bne	ae98 <CKernelOptions::CKernelOptions()+0xf4>
    aeac:	e1a01006 	mov	r1, r6
    aeb0:	e1a0000b 	mov	r0, fp
    aeb4:	eb0013a6 	bl	fd54 <strcmp>
    aeb8:	e3500000 	cmp	r0, #0
    aebc:	0affffea 	beq	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    aec0:	e1a01008 	mov	r1, r8
    aec4:	e1a0000b 	mov	r0, fp
    aec8:	eb0013a1 	bl	fd54 <strcmp>
    aecc:	e3500000 	cmp	r0, #0
    aed0:	13a03000 	movne	r3, #0
    aed4:	0affffe4 	beq	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    aed8:	e1a0100a 	mov	r1, sl
    aedc:	e1a0000b 	mov	r0, fp
    aee0:	e58d300c 	str	r3, [sp, #12]
    aee4:	eb00139a 	bl	fd54 <strcmp>
    aee8:	e2504000 	subs	r4, r0, #0
    aeec:	e59d300c 	ldr	r3, [sp, #12]
    aef0:	0a00002a 	beq	afa0 <CKernelOptions::CKernelOptions()+0x1fc>
    aef4:	e30114c8 	movw	r1, #5320	; 0x14c8
    aef8:	e3401005 	movt	r1, #5
    aefc:	e1a0000b 	mov	r0, fp
    af00:	e58d300c 	str	r3, [sp, #12]
    af04:	eb001392 	bl	fd54 <strcmp>
    af08:	e3500000 	cmp	r0, #0
    af0c:	e59d300c 	ldr	r3, [sp, #12]
    af10:	1a000028 	bne	afb8 <CKernelOptions::CKernelOptions()+0x214>
    af14:	e3530000 	cmp	r3, #0
    af18:	0affffd3 	beq	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    af1c:	e1d320d0 	ldrsb	r2, [r3]
    af20:	e3520000 	cmp	r2, #0
    af24:	0affffd0 	beq	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    af28:	e1a00003 	mov	r0, r3
    af2c:	ebffff4b 	bl	ac60 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    af30:	e3500004 	cmp	r0, #4
    af34:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    af38:	eaffffcb 	b	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    af3c:	e28d0010 	add	r0, sp, #16
    af40:	ebfff756 	bl	8ca0 <CBcmPropertyTags::~CBcmPropertyTags()>
    af44:	e1a00005 	mov	r0, r5
    af48:	e28dd01c 	add	sp, sp, #28
    af4c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af50:	e3a03000 	mov	r3, #0
    af54:	e1a01006 	mov	r1, r6
    af58:	e5c43000 	strb	r3, [r4]
    af5c:	e1a0000b 	mov	r0, fp
    af60:	eb00137b 	bl	fd54 <strcmp>
    af64:	e3500000 	cmp	r0, #0
    af68:	e2843001 	add	r3, r4, #1
    af6c:	1a000058 	bne	b0d4 <CKernelOptions::CKernelOptions()+0x330>
    af70:	e3530000 	cmp	r3, #0
    af74:	0affffbc 	beq	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    af78:	e1d420d1 	ldrsb	r2, [r4, #1]
    af7c:	e3520000 	cmp	r2, #0
    af80:	0affffb9 	beq	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    af84:	e1a00003 	mov	r0, r3
    af88:	ebffff34 	bl	ac60 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    af8c:	e300353c 	movw	r3, #1340	; 0x53c
    af90:	e2402d0a 	sub	r2, r0, #640	; 0x280
    af94:	e1520003 	cmp	r2, r3
    af98:	95850810 	strls	r0, [r5, #2064]	; 0x810
    af9c:	eaffffb2 	b	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    afa0:	e1a01003 	mov	r1, r3
    afa4:	e3a02013 	mov	r2, #19
    afa8:	e1a00007 	mov	r0, r7
    afac:	eb00138e 	bl	fdec <strncpy>
    afb0:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    afb4:	eaffffac 	b	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    afb8:	e30114d4 	movw	r1, #5332	; 0x14d4
    afbc:	e3401005 	movt	r1, #5
    afc0:	e1a0000b 	mov	r0, fp
    afc4:	e58d300c 	str	r3, [sp, #12]
    afc8:	eb001361 	bl	fd54 <strcmp>
    afcc:	e2504000 	subs	r4, r0, #0
    afd0:	e59d300c 	ldr	r3, [sp, #12]
    afd4:	1a000005 	bne	aff0 <CKernelOptions::CKernelOptions()+0x24c>
    afd8:	e1a01003 	mov	r1, r3
    afdc:	e3a02002 	mov	r2, #2
    afe0:	e1a00009 	mov	r0, r9
    afe4:	eb001380 	bl	fdec <strncpy>
    afe8:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    afec:	eaffff9e 	b	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    aff0:	e30114dc 	movw	r1, #5340	; 0x14dc
    aff4:	e3401005 	movt	r1, #5
    aff8:	e1a0000b 	mov	r0, fp
    affc:	e58d300c 	str	r3, [sp, #12]
    b000:	eb001353 	bl	fd54 <strcmp>
    b004:	e3500000 	cmp	r0, #0
    b008:	e59d300c 	ldr	r3, [sp, #12]
    b00c:	1a00000b 	bne	b040 <CKernelOptions::CKernelOptions()+0x29c>
    b010:	e3530000 	cmp	r3, #0
    b014:	0affff94 	beq	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    b018:	e1d320d0 	ldrsb	r2, [r3]
    b01c:	e3520000 	cmp	r2, #0
    b020:	0affff91 	beq	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    b024:	e1a00003 	mov	r0, r3
    b028:	ebffff0c 	bl	ac60 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b02c:	e3013e78 	movw	r3, #7800	; 0x1e78
    b030:	e24020c8 	sub	r2, r0, #200	; 0xc8
    b034:	e1520003 	cmp	r2, r3
    b038:	95850834 	strls	r0, [r5, #2100]	; 0x834
    b03c:	eaffff8a 	b	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    b040:	e30114ec 	movw	r1, #5356	; 0x14ec
    b044:	e3401005 	movt	r1, #5
    b048:	e1a0000b 	mov	r0, fp
    b04c:	e58d300c 	str	r3, [sp, #12]
    b050:	eb00133f 	bl	fd54 <strcmp>
    b054:	e3500000 	cmp	r0, #0
    b058:	e59d300c 	ldr	r3, [sp, #12]
    b05c:	1a000007 	bne	b080 <CKernelOptions::CKernelOptions()+0x2dc>
    b060:	e1a00003 	mov	r0, r3
    b064:	e30114f4 	movw	r1, #5364	; 0x14f4
    b068:	e3401005 	movt	r1, #5
    b06c:	eb001338 	bl	fd54 <strcmp>
    b070:	e3500000 	cmp	r0, #0
    b074:	03a03001 	moveq	r3, #1
    b078:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    b07c:	eaffff7a 	b	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    b080:	e1a0000b 	mov	r0, fp
    b084:	e30114fc 	movw	r1, #5372	; 0x14fc
    b088:	e3401005 	movt	r1, #5
    b08c:	e58d300c 	str	r3, [sp, #12]
    b090:	eb00132f 	bl	fd54 <strcmp>
    b094:	e59d300c 	ldr	r3, [sp, #12]
    b098:	e2902000 	adds	r2, r0, #0
    b09c:	13a02001 	movne	r2, #1
    b0a0:	e3530000 	cmp	r3, #0
    b0a4:	03822001 	orreq	r2, r2, #1
    b0a8:	e3520000 	cmp	r2, #0
    b0ac:	1affff6e 	bne	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    b0b0:	e1d320d0 	ldrsb	r2, [r3]
    b0b4:	e3520000 	cmp	r2, #0
    b0b8:	0affff6b 	beq	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    b0bc:	e1a00003 	mov	r0, r3
    b0c0:	ebfffee6 	bl	ac60 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b0c4:	e2403028 	sub	r3, r0, #40	; 0x28
    b0c8:	e3530026 	cmp	r3, #38	; 0x26
    b0cc:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
    b0d0:	eaffff65 	b	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    b0d4:	e1a01008 	mov	r1, r8
    b0d8:	e1a0000b 	mov	r0, fp
    b0dc:	e58d300c 	str	r3, [sp, #12]
    b0e0:	eb00131b 	bl	fd54 <strcmp>
    b0e4:	e3500000 	cmp	r0, #0
    b0e8:	e59d300c 	ldr	r3, [sp, #12]
    b0ec:	1affff79 	bne	aed8 <CKernelOptions::CKernelOptions()+0x134>
    b0f0:	e3530000 	cmp	r3, #0
    b0f4:	0affff5c 	beq	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    b0f8:	e1d420d1 	ldrsb	r2, [r4, #1]
    b0fc:	e3520000 	cmp	r2, #0
    b100:	0affff59 	beq	ae6c <CKernelOptions::CKernelOptions()+0xc8>
    b104:	e1a00003 	mov	r0, r3
    b108:	ebfffed4 	bl	ac60 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b10c:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    b110:	e3530f96 	cmp	r3, #600	; 0x258
    b114:	95850814 	strls	r0, [r5, #2068]	; 0x814
    b118:	eaffff53 	b	ae6c <CKernelOptions::CKernelOptions()+0xc8>

0000b11c <CKernelOptions::GetOptionValue(char*)>:
    b11c:	e1d030d0 	ldrsb	r3, [r0]
    b120:	e3530000 	cmp	r3, #0
    b124:	1a000003 	bne	b138 <CKernelOptions::GetOptionValue(char*)+0x1c>
    b128:	ea000007 	b	b14c <CKernelOptions::GetOptionValue(char*)+0x30>
    b12c:	e1f030d1 	ldrsb	r3, [r0, #1]!
    b130:	e3530000 	cmp	r3, #0
    b134:	0a000004 	beq	b14c <CKernelOptions::GetOptionValue(char*)+0x30>
    b138:	e353003d 	cmp	r3, #61	; 0x3d
    b13c:	1afffffa 	bne	b12c <CKernelOptions::GetOptionValue(char*)+0x10>
    b140:	e3a02000 	mov	r2, #0
    b144:	e2803001 	add	r3, r0, #1
    b148:	e5c02000 	strb	r2, [r0]
    b14c:	e1a00003 	mov	r0, r3
    b150:	e12fff1e 	bx	lr

0000b154 <CKernelOptions::GetDecimal(char*)>:
    b154:	e2503000 	subs	r3, r0, #0
    b158:	0a000002 	beq	b168 <CKernelOptions::GetDecimal(char*)+0x14>
    b15c:	e1d330d0 	ldrsb	r3, [r3]
    b160:	e3530000 	cmp	r3, #0
    b164:	1a000001 	bne	b170 <CKernelOptions::GetDecimal(char*)+0x1c>
    b168:	e3e00000 	mvn	r0, #0
    b16c:	e12fff1e 	bx	lr
    b170:	eafffeba 	b	ac60 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000b174 <CPageTable::CPageTable()>:
    b174:	e92d4010 	push	{r4, lr}
    b178:	e1a04000 	mov	r4, r0
    b17c:	e3a01000 	mov	r1, #0
    b180:	e3a029b2 	mov	r2, #2916352	; 0x2c8000
    b184:	e1a0c001 	mov	ip, r1
    b188:	e1a03002 	mov	r3, r2
    b18c:	e3a0e002 	mov	lr, #2
    b190:	e3a00001 	mov	r0, #1
    b194:	e8840006 	stm	r4, {r1, r2}
    b198:	e5d32000 	ldrb	r2, [r3]
    b19c:	e35c0b01 	cmp	ip, #1024	; 0x400
    b1a0:	e5d31002 	ldrb	r1, [r3, #2]
    b1a4:	e2833004 	add	r3, r3, #4
    b1a8:	e7c1201e 	bfi	r2, lr, #0, #2
    b1ac:	e3811001 	orr	r1, r1, #1
    b1b0:	e6ef2072 	uxtb	r2, r2
    b1b4:	e20110f9 	and	r1, r1, #249	; 0xf9
    b1b8:	e3822004 	orr	r2, r2, #4
    b1bc:	e7c3119f 	bfc	r1, #3, #1
    b1c0:	e20220f7 	and	r2, r2, #247	; 0xf7
    b1c4:	e5431002 	strb	r1, [r3, #-2]
    b1c8:	e7c4221f 	bfc	r2, #4, #1
    b1cc:	e5432004 	strb	r2, [r3, #-4]
    b1d0:	e15310b2 	ldrh	r1, [r3, #-2]
    b1d4:	e15320b4 	ldrh	r2, [r3, #-4]
    b1d8:	e7cf121c 	bfi	r1, ip, #4, #12
    b1dc:	e28cc001 	add	ip, ip, #1
    b1e0:	e7c8229f 	bfc	r2, #5, #4
    b1e4:	e14310b2 	strh	r1, [r3, #-2]
    b1e8:	e14320b4 	strh	r2, [r3, #-4]
    b1ec:	e1a02422 	lsr	r2, r2, #8
    b1f0:	e20220fd 	and	r2, r2, #253	; 0xfd
    b1f4:	e7c32110 	bfi	r2, r0, #2, #2
    b1f8:	e202208f 	and	r2, r2, #143	; 0x8f
    b1fc:	e7c7239f 	bfc	r2, #7, #1
    b200:	e5432003 	strb	r2, [r3, #-3]
    b204:	25532004 	ldrbcs	r2, [r3, #-4]
    b208:	23822010 	orrcs	r2, r2, #16
    b20c:	25432004 	strbcs	r2, [r3, #-4]
    b210:	e35c0a01 	cmp	ip, #4096	; 0x1000
    b214:	1affffdf 	bne	b198 <CPageTable::CPageTable()+0x24>
    b218:	eb000fca 	bl	f148 <CleanDataCache>
    b21c:	e1a00004 	mov	r0, r4
    b220:	e8bd8010 	pop	{r4, pc}

0000b224 <CPageTable::CPageTable(unsigned int)>:
    b224:	e3a03001 	mov	r3, #1
    b228:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b22c:	e1a04000 	mov	r4, r0
    b230:	e5803000 	str	r3, [r0]
    b234:	e1a05001 	mov	r5, r1
    b238:	eb0011e6 	bl	f9d8 <palloc>
    b23c:	e3500000 	cmp	r0, #0
    b240:	e5840004 	str	r0, [r4, #4]
    b244:	0a00003e 	beq	b344 <CPageTable::CPageTable(unsigned int)+0x120>
    b248:	e7eb3050 	ubfx	r3, r0, #0, #12
    b24c:	e3530000 	cmp	r3, #0
    b250:	1a000033 	bne	b324 <CPageTable::CPageTable(unsigned int)+0x100>
    b254:	e3a02000 	mov	r2, #0
    b258:	e300e504 	movw	lr, #1284	; 0x504
    b25c:	e340e001 	movt	lr, #1
    b260:	e1a08002 	mov	r8, r2
    b264:	e3a07002 	mov	r7, #2
    b268:	e3a06001 	mov	r6, #1
    b26c:	ea000009 	b	b298 <CPageTable::CPageTable(unsigned int)+0x74>
    b270:	e6ef3071 	uxtb	r3, r1
    b274:	e5d01000 	ldrb	r1, [r0]
    b278:	e3833001 	orr	r3, r3, #1
    b27c:	e7c31198 	bfi	r1, r8, #3, #1
    b280:	e5c03002 	strb	r3, [r0, #2]
    b284:	e5c01000 	strb	r1, [r0]
    b288:	e2822601 	add	r2, r2, #1048576	; 0x100000
    b28c:	e2800004 	add	r0, r0, #4
    b290:	e3520101 	cmp	r2, #1073741824	; 0x40000000
    b294:	0a00001f 	beq	b318 <CPageTable::CPageTable(unsigned int)+0xf4>
    b298:	e5d03001 	ldrb	r3, [r0, #1]
    b29c:	e7e31a52 	ubfx	r1, r2, #20, #4
    b2a0:	e152000e 	cmp	r2, lr
    b2a4:	e387c00c 	orr	ip, r7, #12
    b2a8:	e20330fc 	and	r3, r3, #252	; 0xfc
    b2ac:	e1a09c22 	lsr	r9, r2, #24
    b2b0:	e7c33116 	bfi	r3, r6, #2, #2
    b2b4:	e1a01201 	lsl	r1, r1, #4
    b2b8:	e203308f 	and	r3, r3, #143	; 0x8f
    b2bc:	e5c01002 	strb	r1, [r0, #2]
    b2c0:	e7c7339f 	bfc	r3, #7, #1
    b2c4:	e5c0c000 	strb	ip, [r0]
    b2c8:	e5c03001 	strb	r3, [r0, #1]
    b2cc:	e5c09003 	strb	r9, [r0, #3]
    b2d0:	3affffec 	bcc	b288 <CPageTable::CPageTable(unsigned int)+0x64>
    b2d4:	e1520005 	cmp	r2, r5
    b2d8:	e6ef307c 	uxtb	r3, ip
    b2dc:	e3833010 	orr	r3, r3, #16
    b2e0:	e5c03000 	strb	r3, [r0]
    b2e4:	2affffe1 	bcs	b270 <CPageTable::CPageTable(unsigned int)+0x4c>
    b2e8:	e3520501 	cmp	r2, #4194304	; 0x400000
    b2ec:	1affffe5 	bne	b288 <CPageTable::CPageTable(unsigned int)+0x64>
    b2f0:	e5d03000 	ldrb	r3, [r0]
    b2f4:	e2800004 	add	r0, r0, #4
    b2f8:	e5502002 	ldrb	r2, [r0, #-2]
    b2fc:	e20330fb 	and	r3, r3, #251	; 0xfb
    b300:	e3822001 	orr	r2, r2, #1
    b304:	e7c33198 	bfi	r3, r8, #3, #1
    b308:	e5402002 	strb	r2, [r0, #-2]
    b30c:	e3a02605 	mov	r2, #5242880	; 0x500000
    b310:	e5403004 	strb	r3, [r0, #-4]
    b314:	eaffffdf 	b	b298 <CPageTable::CPageTable(unsigned int)+0x74>
    b318:	eb000f8a 	bl	f148 <CleanDataCache>
    b31c:	e1a00004 	mov	r0, r4
    b320:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b324:	e3011510 	movw	r1, #5392	; 0x1510
    b328:	e3401005 	movt	r1, #5
    b32c:	e3010530 	movw	r0, #5424	; 0x1530
    b330:	e3400005 	movt	r0, #5
    b334:	e3a02051 	mov	r2, #81	; 0x51
    b338:	eb000492 	bl	c588 <assertion_failed>
    b33c:	e5940004 	ldr	r0, [r4, #4]
    b340:	eaffffc3 	b	b254 <CPageTable::CPageTable(unsigned int)+0x30>
    b344:	e3011510 	movw	r1, #5392	; 0x1510
    b348:	e3401005 	movt	r1, #5
    b34c:	e3010520 	movw	r0, #5408	; 0x1520
    b350:	e3400005 	movt	r0, #5
    b354:	e3a02050 	mov	r2, #80	; 0x50
    b358:	eb00048a 	bl	c588 <assertion_failed>
    b35c:	e5940004 	ldr	r0, [r4, #4]
    b360:	eaffffb8 	b	b248 <CPageTable::CPageTable(unsigned int)+0x24>

0000b364 <CPageTable::~CPageTable()>:
    b364:	e5903000 	ldr	r3, [r0]
    b368:	e92d4010 	push	{r4, lr}
    b36c:	e1a04000 	mov	r4, r0
    b370:	e3530000 	cmp	r3, #0
    b374:	0a000001 	beq	b380 <CPageTable::~CPageTable()+0x1c>
    b378:	e5900004 	ldr	r0, [r0, #4]
    b37c:	eb0011cf 	bl	fac0 <pfree>
    b380:	e1a00004 	mov	r0, r4
    b384:	e8bd8010 	pop	{r4, pc}

0000b388 <CPageTable::GetBaseAddress() const>:
    b388:	e5900004 	ldr	r0, [r0, #4]
    b38c:	e3800059 	orr	r0, r0, #89	; 0x59
    b390:	e12fff1e 	bx	lr

0000b394 <CScreenDevice::~CScreenDevice()>:
    b394:	e590300c 	ldr	r3, [r0, #12]
    b398:	e59f2064 	ldr	r2, [pc, #100]	; b404 <CScreenDevice::~CScreenDevice()+0x70>
    b39c:	e3530000 	cmp	r3, #0
    b3a0:	e92d4070 	push	{r4, r5, r6, lr}
    b3a4:	e1a04000 	mov	r4, r0
    b3a8:	e5802000 	str	r2, [r0]
    b3ac:	0a000003 	beq	b3c0 <CScreenDevice::~CScreenDevice()+0x2c>
    b3b0:	e5900018 	ldr	r0, [r0, #24]
    b3b4:	e3500000 	cmp	r0, #0
    b3b8:	0a000000 	beq	b3c0 <CScreenDevice::~CScreenDevice()+0x2c>
    b3bc:	ebfffac7 	bl	9ee0 <operator delete[](void*)>
    b3c0:	e5945010 	ldr	r5, [r4, #16]
    b3c4:	e3a03000 	mov	r3, #0
    b3c8:	e5843018 	str	r3, [r4, #24]
    b3cc:	e1550003 	cmp	r5, r3
    b3d0:	0a000003 	beq	b3e4 <CScreenDevice::~CScreenDevice()+0x50>
    b3d4:	e1a00005 	mov	r0, r5
    b3d8:	eb0013ba 	bl	102c8 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    b3dc:	e1a00005 	mov	r0, r5
    b3e0:	ebfffabd 	bl	9edc <operator delete(void*)>
    b3e4:	e3a03000 	mov	r3, #0
    b3e8:	e2840014 	add	r0, r4, #20
    b3ec:	e5843010 	str	r3, [r4, #16]
    b3f0:	eb000489 	bl	c61c <CCharGenerator::~CCharGenerator()>
    b3f4:	e1a00004 	mov	r0, r4
    b3f8:	eb001432 	bl	104c8 <CDevice::~CDevice()>
    b3fc:	e1a00004 	mov	r0, r4
    b400:	e8bd8070 	pop	{r4, r5, r6, pc}
    b404:	00051558 	.word	0x00051558

0000b408 <CScreenDevice::~CScreenDevice()>:
    b408:	e92d4010 	push	{r4, lr}
    b40c:	e1a04000 	mov	r4, r0
    b410:	ebffffdf 	bl	b394 <CScreenDevice::~CScreenDevice()>
    b414:	e1a00004 	mov	r0, r4
    b418:	ebfffaaf 	bl	9edc <operator delete(void*)>
    b41c:	e1a00004 	mov	r0, r4
    b420:	e8bd8010 	pop	{r4, pc}

0000b424 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>:
    b424:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    b428:	e15c0002 	cmp	ip, r2
    b42c:	8590c020 	ldrhi	ip, [r0, #32]
    b430:	85900018 	ldrhi	r0, [r0, #24]
    b434:	8022029c 	mlahi	r2, ip, r2, r0
    b438:	87c23001 	strbhi	r3, [r2, r1]
    b43c:	e12fff1e 	bx	lr

0000b440 <CScreenDevice::InvertCursor() [clone .part.6]>:
    b440:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b444:	e2806014 	add	r6, r0, #20
    b448:	e1a04000 	mov	r4, r0
    b44c:	e1a00006 	mov	r0, r6
    b450:	eb000476 	bl	c630 <CCharGenerator::GetUnderline() const>
    b454:	e1a07000 	mov	r7, r0
    b458:	e1a00006 	mov	r0, r6
    b45c:	eb000471 	bl	c628 <CCharGenerator::GetCharHeight() const>
    b460:	e1500007 	cmp	r0, r7
    b464:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
    b468:	e3a05000 	mov	r5, #0
    b46c:	ea000008 	b	b494 <CScreenDevice::InvertCursor() [clone .part.6]+0x54>
    b470:	e5948020 	ldr	r8, [r4, #32]
    b474:	e3a03000 	mov	r3, #0
    b478:	e5949018 	ldr	r9, [r4, #24]
    b47c:	e0289e98 	mla	r8, r8, lr, r9
    b480:	e7d8800c 	ldrb	r8, [r8, ip]
    b484:	e1580003 	cmp	r8, r3
    b488:	0a000012 	beq	b4d8 <CScreenDevice::InvertCursor() [clone .part.6]+0x98>
    b48c:	ebffffe4 	bl	b424 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    b490:	e2855001 	add	r5, r5, #1
    b494:	e1a00006 	mov	r0, r6
    b498:	eb000460 	bl	c620 <CCharGenerator::GetCharWidth() const>
    b49c:	e1500005 	cmp	r0, r5
    b4a0:	9a00000f 	bls	b4e4 <CScreenDevice::InvertCursor() [clone .part.6]+0xa4>
    b4a4:	e594c03c 	ldr	ip, [r4, #60]	; 0x3c
    b4a8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b4ac:	e085c00c 	add	ip, r5, ip
    b4b0:	e15c0003 	cmp	ip, r3
    b4b4:	2afffff5 	bcs	b490 <CScreenDevice::InvertCursor() [clone .part.6]+0x50>
    b4b8:	e594e040 	ldr	lr, [r4, #64]	; 0x40
    b4bc:	e1a0100c 	mov	r1, ip
    b4c0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b4c4:	e1a00004 	mov	r0, r4
    b4c8:	e087e00e 	add	lr, r7, lr
    b4cc:	e15e0003 	cmp	lr, r3
    b4d0:	e1a0200e 	mov	r2, lr
    b4d4:	3affffe5 	bcc	b470 <CScreenDevice::InvertCursor() [clone .part.6]+0x30>
    b4d8:	e5d43048 	ldrb	r3, [r4, #72]	; 0x48
    b4dc:	ebffffd0 	bl	b424 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    b4e0:	eaffffea 	b	b490 <CScreenDevice::InvertCursor() [clone .part.6]+0x50>
    b4e4:	e2877001 	add	r7, r7, #1
    b4e8:	eaffffda 	b	b458 <CScreenDevice::InvertCursor() [clone .part.6]+0x18>

0000b4ec <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
    b4ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b4f0:	e1a04000 	mov	r4, r0
    b4f4:	e1a06003 	mov	r6, r3
    b4f8:	e1a08001 	mov	r8, r1
    b4fc:	e1a07002 	mov	r7, r2
    b500:	eb0013fb 	bl	104f4 <CDevice::CDevice()>
    b504:	e59fc050 	ldr	ip, [pc, #80]	; b55c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)+0x70>
    b508:	e3a05000 	mov	r5, #0
    b50c:	e5848004 	str	r8, [r4, #4]
    b510:	e5847008 	str	r7, [r4, #8]
    b514:	e2840014 	add	r0, r4, #20
    b518:	e584600c 	str	r6, [r4, #12]
    b51c:	e584c000 	str	ip, [r4]
    b520:	e5845010 	str	r5, [r4, #16]
    b524:	eb000439 	bl	c610 <CCharGenerator::CCharGenerator()>
    b528:	e3a03001 	mov	r3, #1
    b52c:	e5845018 	str	r5, [r4, #24]
    b530:	e1a00004 	mov	r0, r4
    b534:	e5845030 	str	r5, [r4, #48]	; 0x30
    b538:	e5845034 	str	r5, [r4, #52]	; 0x34
    b53c:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b540:	e5845040 	str	r5, [r4, #64]	; 0x40
    b544:	e584504c 	str	r5, [r4, #76]	; 0x4c
    b548:	e5845058 	str	r5, [r4, #88]	; 0x58
    b54c:	e5843044 	str	r3, [r4, #68]	; 0x44
    b550:	e5c43048 	strb	r3, [r4, #72]	; 0x48
    b554:	e584305c 	str	r3, [r4, #92]	; 0x5c
    b558:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b55c:	00051558 	.word	0x00051558

0000b560 <CScreenDevice::GetWidth() const>:
    b560:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    b564:	e12fff1e 	bx	lr

0000b568 <CScreenDevice::GetHeight() const>:
    b568:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    b56c:	e12fff1e 	bx	lr

0000b570 <CScreenDevice::GetColumns() const>:
    b570:	e1a03000 	mov	r3, r0
    b574:	e92d4010 	push	{r4, lr}
    b578:	e2800014 	add	r0, r0, #20
    b57c:	e5934024 	ldr	r4, [r3, #36]	; 0x24
    b580:	eb000426 	bl	c620 <CCharGenerator::GetCharWidth() const>
    b584:	e730f014 	udiv	r0, r4, r0
    b588:	e8bd8010 	pop	{r4, pc}

0000b58c <CScreenDevice::GetRows() const>:
    b58c:	e1a03000 	mov	r3, r0
    b590:	e92d4010 	push	{r4, lr}
    b594:	e2800014 	add	r0, r0, #20
    b598:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
    b59c:	eb000421 	bl	c628 <CCharGenerator::GetCharHeight() const>
    b5a0:	e730f014 	udiv	r0, r4, r0
    b5a4:	e8bd8010 	pop	{r4, pc}

0000b5a8 <CScreenDevice::GetStatus()>:
    b5a8:	e591c018 	ldr	ip, [r1, #24]
    b5ac:	e591201c 	ldr	r2, [r1, #28]
    b5b0:	e92d4070 	push	{r4, r5, r6, lr}
    b5b4:	e5915030 	ldr	r5, [r1, #48]	; 0x30
    b5b8:	e5914034 	ldr	r4, [r1, #52]	; 0x34
    b5bc:	e591e038 	ldr	lr, [r1, #56]	; 0x38
    b5c0:	e580c000 	str	ip, [r0]
    b5c4:	e5802004 	str	r2, [r0, #4]
    b5c8:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    b5cc:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    b5d0:	e5805008 	str	r5, [r0, #8]
    b5d4:	e5916044 	ldr	r6, [r1, #68]	; 0x44
    b5d8:	e580400c 	str	r4, [r0, #12]
    b5dc:	e5d15048 	ldrb	r5, [r1, #72]	; 0x48
    b5e0:	e580e010 	str	lr, [r0, #16]
    b5e4:	e591404c 	ldr	r4, [r1, #76]	; 0x4c
    b5e8:	e580c014 	str	ip, [r0, #20]
    b5ec:	e591e050 	ldr	lr, [r1, #80]	; 0x50
    b5f0:	e5802018 	str	r2, [r0, #24]
    b5f4:	e591c054 	ldr	ip, [r1, #84]	; 0x54
    b5f8:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    b5fc:	e580601c 	str	r6, [r0, #28]
    b600:	e5c05020 	strb	r5, [r0, #32]
    b604:	e5804024 	str	r4, [r0, #36]	; 0x24
    b608:	e580e028 	str	lr, [r0, #40]	; 0x28
    b60c:	e580c02c 	str	ip, [r0, #44]	; 0x2c
    b610:	e5802030 	str	r2, [r0, #48]	; 0x30
    b614:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b618 <CScreenDevice::SetStatus(TScreenStatus)>:
    b618:	e24dd010 	sub	sp, sp, #16
    b61c:	e92d4070 	push	{r4, r5, r6, lr}
    b620:	e28dc014 	add	ip, sp, #20
    b624:	e88c000e 	stm	ip, {r1, r2, r3}
    b628:	e590201c 	ldr	r2, [r0, #28]
    b62c:	e59d3018 	ldr	r3, [sp, #24]
    b630:	e1520003 	cmp	r2, r3
    b634:	0a000003 	beq	b648 <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    b638:	e3a00000 	mov	r0, #0
    b63c:	e8bd4070 	pop	{r4, r5, r6, lr}
    b640:	e28dd010 	add	sp, sp, #16
    b644:	e12fff1e 	bx	lr
    b648:	e5901020 	ldr	r1, [r0, #32]
    b64c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b650:	e1510003 	cmp	r1, r3
    b654:	1afffff7 	bne	b638 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b658:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    b65c:	e1a04000 	mov	r4, r0
    b660:	e3530000 	cmp	r3, #0
    b664:	1a000020 	bne	b6ec <CScreenDevice::SetStatus(TScreenStatus)+0xd4>
    b668:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    b66c:	e3530000 	cmp	r3, #0
    b670:	1afffff0 	bne	b638 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b674:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    b678:	e3530000 	cmp	r3, #0
    b67c:	1affffed 	bne	b638 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b680:	e59d1014 	ldr	r1, [sp, #20]
    b684:	e5940018 	ldr	r0, [r4, #24]
    b688:	ebfffd5d 	bl	ac04 <memcpy>
    b68c:	e28d2020 	add	r2, sp, #32
    b690:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    b694:	e59d101c 	ldr	r1, [sp, #28]
    b698:	e3530000 	cmp	r3, #0
    b69c:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
    b6a0:	e892402c 	ldm	r2, {r2, r3, r5, lr}
    b6a4:	e5841030 	str	r1, [r4, #48]	; 0x30
    b6a8:	e5dd0034 	ldrb	r0, [sp, #52]	; 0x34
    b6ac:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    b6b0:	e5842034 	str	r2, [r4, #52]	; 0x34
    b6b4:	e5843038 	str	r3, [r4, #56]	; 0x38
    b6b8:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    b6bc:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    b6c0:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b6c4:	e584e040 	str	lr, [r4, #64]	; 0x40
    b6c8:	e584c044 	str	ip, [r4, #68]	; 0x44
    b6cc:	e5c40048 	strb	r0, [r4, #72]	; 0x48
    b6d0:	e584104c 	str	r1, [r4, #76]	; 0x4c
    b6d4:	e5842050 	str	r2, [r4, #80]	; 0x50
    b6d8:	e5843054 	str	r3, [r4, #84]	; 0x54
    b6dc:	1a00000f 	bne	b720 <CScreenDevice::SetStatus(TScreenStatus)+0x108>
    b6e0:	f57ff05f 	dmb	sy
    b6e4:	e3a00001 	mov	r0, #1
    b6e8:	eaffffd3 	b	b63c <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    b6ec:	ebfff9fc 	bl	9ee4 <EnterCritical>
    b6f0:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    b6f4:	e3530000 	cmp	r3, #0
    b6f8:	1a000003 	bne	b70c <CScreenDevice::SetStatus(TScreenStatus)+0xf4>
    b6fc:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    b700:	e3530000 	cmp	r3, #0
    b704:	0594201c 	ldreq	r2, [r4, #28]
    b708:	0affffdc 	beq	b680 <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    b70c:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    b710:	e3530000 	cmp	r3, #0
    b714:	0affffc7 	beq	b638 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b718:	ebfff9fe 	bl	9f18 <LeaveCritical>
    b71c:	eaffffc5 	b	b638 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b720:	ebfff9fc 	bl	9f18 <LeaveCritical>
    b724:	eaffffed 	b	b6e0 <CScreenDevice::SetStatus(TScreenStatus)+0xc8>

0000b728 <CScreenDevice::CarriageReturn()>:
    b728:	e3a03000 	mov	r3, #0
    b72c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b730:	e12fff1e 	bx	lr

0000b734 <CScreenDevice::CursorHome()>:
    b734:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b738:	e3a02000 	mov	r2, #0
    b73c:	e580203c 	str	r2, [r0, #60]	; 0x3c
    b740:	e5803040 	str	r3, [r0, #64]	; 0x40
    b744:	e12fff1e 	bx	lr

0000b748 <CScreenDevice::CursorLeft()>:
    b748:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    b74c:	e92d4070 	push	{r4, r5, r6, lr}
    b750:	e1a04000 	mov	r4, r0
    b754:	e3530000 	cmp	r3, #0
    b758:	1a00000f 	bne	b79c <CScreenDevice::CursorLeft()+0x54>
    b75c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b760:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b764:	e1520003 	cmp	r2, r3
    b768:	98bd8070 	popls	{r4, r5, r6, pc}
    b76c:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    b770:	e2806014 	add	r6, r0, #20
    b774:	e1a00006 	mov	r0, r6
    b778:	eb0003a8 	bl	c620 <CCharGenerator::GetCharWidth() const>
    b77c:	e0450000 	sub	r0, r5, r0
    b780:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b784:	e1a00006 	mov	r0, r6
    b788:	eb0003a6 	bl	c628 <CCharGenerator::GetCharHeight() const>
    b78c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b790:	e0430000 	sub	r0, r3, r0
    b794:	e5840040 	str	r0, [r4, #64]	; 0x40
    b798:	e8bd8070 	pop	{r4, r5, r6, pc}
    b79c:	e2800014 	add	r0, r0, #20
    b7a0:	eb00039e 	bl	c620 <CCharGenerator::GetCharWidth() const>
    b7a4:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    b7a8:	e0430000 	sub	r0, r3, r0
    b7ac:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b7b0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b7b4 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    b7b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b7b8:	e1a04002 	mov	r4, r2
    b7bc:	e2444001 	sub	r4, r4, #1
    b7c0:	e1a05000 	mov	r5, r0
    b7c4:	e2806014 	add	r6, r0, #20
    b7c8:	e1a00006 	mov	r0, r6
    b7cc:	e1a07001 	mov	r7, r1
    b7d0:	eb000392 	bl	c620 <CCharGenerator::GetCharWidth() const>
    b7d4:	e0040490 	mul	r4, r0, r4
    b7d8:	e1a00006 	mov	r0, r6
    b7dc:	eb000391 	bl	c628 <CCharGenerator::GetCharHeight() const>
    b7e0:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    b7e4:	e1540003 	cmp	r4, r3
    b7e8:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    b7ec:	e2477001 	sub	r7, r7, #1
    b7f0:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    b7f4:	e0000790 	mul	r0, r0, r7
    b7f8:	e1500003 	cmp	r0, r3
    b7fc:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    b800:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    b804:	e1500003 	cmp	r0, r3
    b808:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    b80c:	35850040 	strcc	r0, [r5, #64]	; 0x40
    b810:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b814 <CScreenDevice::CursorUp()>:
    b814:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b818:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b81c:	e1520003 	cmp	r2, r3
    b820:	912fff1e 	bxls	lr
    b824:	e92d4010 	push	{r4, lr}
    b828:	e1a04000 	mov	r4, r0
    b82c:	e2800014 	add	r0, r0, #20
    b830:	eb00037c 	bl	c628 <CCharGenerator::GetCharHeight() const>
    b834:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b838:	e0430000 	sub	r0, r3, r0
    b83c:	e5840040 	str	r0, [r4, #64]	; 0x40
    b840:	e8bd8010 	pop	{r4, pc}

0000b844 <CScreenDevice::DeleteChars(unsigned int)>:
    b844:	e12fff1e 	bx	lr

0000b848 <CScreenDevice::DeleteLines(unsigned int)>:
    b848:	e12fff1e 	bx	lr

0000b84c <CScreenDevice::InsertLines(unsigned int)>:
    b84c:	e12fff1e 	bx	lr

0000b850 <CScreenDevice::InsertMode(int)>:
    b850:	e580104c 	str	r1, [r0, #76]	; 0x4c
    b854:	e12fff1e 	bx	lr

0000b858 <CScreenDevice::ReverseScroll()>:
    b858:	e12fff1e 	bx	lr

0000b85c <CScreenDevice::SetCursorMode(int)>:
    b85c:	e5801044 	str	r1, [r0, #68]	; 0x44
    b860:	e12fff1e 	bx	lr

0000b864 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    b864:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b868:	e1a04001 	mov	r4, r1
    b86c:	e2444001 	sub	r4, r4, #1
    b870:	e1a06000 	mov	r6, r0
    b874:	e1a05002 	mov	r5, r2
    b878:	e2807014 	add	r7, r0, #20
    b87c:	e1a00007 	mov	r0, r7
    b880:	eb000368 	bl	c628 <CCharGenerator::GetCharHeight() const>
    b884:	e0040490 	mul	r4, r0, r4
    b888:	e1a00007 	mov	r0, r7
    b88c:	eb000365 	bl	c628 <CCharGenerator::GetCharHeight() const>
    b890:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    b894:	e0000095 	mul	r0, r5, r0
    b898:	e3500000 	cmp	r0, #0
    b89c:	11540002 	cmpne	r4, r2
    b8a0:	33a03001 	movcc	r3, #1
    b8a4:	23a03000 	movcs	r3, #0
    b8a8:	e1500002 	cmp	r0, r2
    b8ac:	83a03000 	movhi	r3, #0
    b8b0:	92033001 	andls	r3, r3, #1
    b8b4:	e1540000 	cmp	r4, r0
    b8b8:	23a03000 	movcs	r3, #0
    b8bc:	32033001 	andcc	r3, r3, #1
    b8c0:	e3530000 	cmp	r3, #0
    b8c4:	e3a03000 	mov	r3, #0
    b8c8:	15864034 	strne	r4, [r6, #52]	; 0x34
    b8cc:	15860038 	strne	r0, [r6, #56]	; 0x38
    b8d0:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    b8d4:	e586303c 	str	r3, [r6, #60]	; 0x3c
    b8d8:	e5864040 	str	r4, [r6, #64]	; 0x40
    b8dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b8e0 <CScreenDevice::SetStandoutMode(unsigned int)>:
    b8e0:	e351001b 	cmp	r1, #27
    b8e4:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    b8e8:	ea00001d 	b	b964 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    b8ec:	0000b974 	.word	0x0000b974
    b8f0:	0000b968 	.word	0x0000b968
    b8f4:	0000b95c 	.word	0x0000b95c
    b8f8:	0000b964 	.word	0x0000b964
    b8fc:	0000b964 	.word	0x0000b964
    b900:	0000b964 	.word	0x0000b964
    b904:	0000b964 	.word	0x0000b964
    b908:	0000b964 	.word	0x0000b964
    b90c:	0000b964 	.word	0x0000b964
    b910:	0000b964 	.word	0x0000b964
    b914:	0000b964 	.word	0x0000b964
    b918:	0000b964 	.word	0x0000b964
    b91c:	0000b964 	.word	0x0000b964
    b920:	0000b964 	.word	0x0000b964
    b924:	0000b964 	.word	0x0000b964
    b928:	0000b964 	.word	0x0000b964
    b92c:	0000b964 	.word	0x0000b964
    b930:	0000b964 	.word	0x0000b964
    b934:	0000b964 	.word	0x0000b964
    b938:	0000b964 	.word	0x0000b964
    b93c:	0000b964 	.word	0x0000b964
    b940:	0000b964 	.word	0x0000b964
    b944:	0000b964 	.word	0x0000b964
    b948:	0000b964 	.word	0x0000b964
    b94c:	0000b964 	.word	0x0000b964
    b950:	0000b964 	.word	0x0000b964
    b954:	0000b964 	.word	0x0000b964
    b958:	0000b974 	.word	0x0000b974
    b95c:	e3a03003 	mov	r3, #3
    b960:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    b964:	e12fff1e 	bx	lr
    b968:	e3a03002 	mov	r3, #2
    b96c:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    b970:	e12fff1e 	bx	lr
    b974:	e3a03001 	mov	r3, #1
    b978:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    b97c:	e12fff1e 	bx	lr

0000b980 <CScreenDevice::Scroll()>:
    b980:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b984:	e1a05000 	mov	r5, r0
    b988:	e2800014 	add	r0, r0, #20
    b98c:	eb000325 	bl	c628 <CCharGenerator::GetCharHeight() const>
    b990:	e1a06000 	mov	r6, r0
    b994:	e5952034 	ldr	r2, [r5, #52]	; 0x34
    b998:	e5954038 	ldr	r4, [r5, #56]	; 0x38
    b99c:	e5953020 	ldr	r3, [r5, #32]
    b9a0:	e0444002 	sub	r4, r4, r2
    b9a4:	e5951018 	ldr	r1, [r5, #24]
    b9a8:	e0444000 	sub	r4, r4, r0
    b9ac:	e0271293 	mla	r7, r3, r2, r1
    b9b0:	e0040493 	mul	r4, r3, r4
    b9b4:	e3540000 	cmp	r4, #0
    b9b8:	1a000007 	bne	b9dc <CScreenDevice::Scroll()+0x5c>
    b9bc:	e0030693 	mul	r3, r3, r6
    b9c0:	e1b03123 	lsrs	r3, r3, #2
    b9c4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    b9c8:	e1a00007 	mov	r0, r7
    b9cc:	e1a02103 	lsl	r2, r3, #2
    b9d0:	e3a01000 	mov	r1, #0
    b9d4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    b9d8:	ea0010b3 	b	fcac <memset>
    b9dc:	e0808002 	add	r8, r0, r2
    b9e0:	e3c4900f 	bic	r9, r4, #15
    b9e4:	e1a02009 	mov	r2, r9
    b9e8:	e1a00007 	mov	r0, r7
    b9ec:	e0281893 	mla	r8, r3, r8, r1
    b9f0:	e1a01008 	mov	r1, r8
    b9f4:	ebfffc82 	bl	ac04 <memcpy>
    b9f8:	e0870009 	add	r0, r7, r9
    b9fc:	e204200f 	and	r2, r4, #15
    ba00:	e0881009 	add	r1, r8, r9
    ba04:	e3c44003 	bic	r4, r4, #3
    ba08:	ebfffc7d 	bl	ac04 <memcpy>
    ba0c:	e0877004 	add	r7, r7, r4
    ba10:	e5953020 	ldr	r3, [r5, #32]
    ba14:	eaffffe8 	b	b9bc <CScreenDevice::Scroll()+0x3c>

0000ba18 <CScreenDevice::CursorDown()>:
    ba18:	e92d4070 	push	{r4, r5, r6, lr}
    ba1c:	e1a04000 	mov	r4, r0
    ba20:	e2805014 	add	r5, r0, #20
    ba24:	e1a00005 	mov	r0, r5
    ba28:	eb0002fe 	bl	c628 <CCharGenerator::GetCharHeight() const>
    ba2c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ba30:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    ba34:	e0800003 	add	r0, r0, r3
    ba38:	e1500002 	cmp	r0, r2
    ba3c:	e5840040 	str	r0, [r4, #64]	; 0x40
    ba40:	38bd8070 	popcc	{r4, r5, r6, pc}
    ba44:	e1a00004 	mov	r0, r4
    ba48:	ebffffcc 	bl	b980 <CScreenDevice::Scroll()>
    ba4c:	e1a00005 	mov	r0, r5
    ba50:	eb0002f4 	bl	c628 <CCharGenerator::GetCharHeight() const>
    ba54:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ba58:	e0430000 	sub	r0, r3, r0
    ba5c:	e5840040 	str	r0, [r4, #64]	; 0x40
    ba60:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ba64 <CScreenDevice::NewLine()>:
    ba64:	e3a02000 	mov	r2, #0
    ba68:	e580203c 	str	r2, [r0, #60]	; 0x3c
    ba6c:	eaffffe9 	b	ba18 <CScreenDevice::CursorDown()>

0000ba70 <CScreenDevice::CursorRight()>:
    ba70:	e92d4010 	push	{r4, lr}
    ba74:	e1a04000 	mov	r4, r0
    ba78:	e2800014 	add	r0, r0, #20
    ba7c:	eb0002e7 	bl	c620 <CCharGenerator::GetCharWidth() const>
    ba80:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    ba84:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    ba88:	e0800003 	add	r0, r0, r3
    ba8c:	e1500002 	cmp	r0, r2
    ba90:	e584003c 	str	r0, [r4, #60]	; 0x3c
    ba94:	38bd8010 	popcc	{r4, pc}
    ba98:	e3a03000 	mov	r3, #0
    ba9c:	e1a00004 	mov	r0, r4
    baa0:	e584303c 	str	r3, [r4, #60]	; 0x3c
    baa4:	e8bd4010 	pop	{r4, lr}
    baa8:	eaffffda 	b	ba18 <CScreenDevice::CursorDown()>

0000baac <CScreenDevice::Tabulator()>:
    baac:	e92d4010 	push	{r4, lr}
    bab0:	e1a04000 	mov	r4, r0
    bab4:	e2800014 	add	r0, r0, #20
    bab8:	eb0002d8 	bl	c620 <CCharGenerator::GetCharWidth() const>
    babc:	e1a00180 	lsl	r0, r0, #3
    bac0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    bac4:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    bac8:	e0803003 	add	r3, r0, r3
    bacc:	e733f013 	udiv	r3, r3, r0
    bad0:	e0000390 	mul	r0, r0, r3
    bad4:	e1500002 	cmp	r0, r2
    bad8:	e584003c 	str	r0, [r4, #60]	; 0x3c
    badc:	38bd8010 	popcc	{r4, pc}
    bae0:	e3a03000 	mov	r3, #0
    bae4:	e1a00004 	mov	r0, r4
    bae8:	e584303c 	str	r3, [r4, #60]	; 0x3c
    baec:	e8bd4010 	pop	{r4, lr}
    baf0:	eaffffc8 	b	ba18 <CScreenDevice::CursorDown()>

0000baf4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>:
    baf4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    baf8:	e2806014 	add	r6, r0, #20
    bafc:	e1a08000 	mov	r8, r0
    bb00:	e24dd00c 	sub	sp, sp, #12
    bb04:	e3a07000 	mov	r7, #0
    bb08:	e1a00006 	mov	r0, r6
    bb0c:	e1a0a001 	mov	sl, r1
    bb10:	e1a09002 	mov	r9, r2
    bb14:	e5ddb030 	ldrb	fp, [sp, #48]	; 0x30
    bb18:	e58d3004 	str	r3, [sp, #4]
    bb1c:	eb0002c1 	bl	c628 <CCharGenerator::GetCharHeight() const>
    bb20:	e1570000 	cmp	r7, r0
    bb24:	2a00001e 	bcs	bba4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0xb0>
    bb28:	e59d3004 	ldr	r3, [sp, #4]
    bb2c:	e3a04000 	mov	r4, #0
    bb30:	e0873003 	add	r3, r7, r3
    bb34:	e58d3000 	str	r3, [sp]
    bb38:	e1a00006 	mov	r0, r6
    bb3c:	e0845009 	add	r5, r4, r9
    bb40:	eb0002b6 	bl	c620 <CCharGenerator::GetCharWidth() const>
    bb44:	e1540000 	cmp	r4, r0
    bb48:	e1a02004 	mov	r2, r4
    bb4c:	e1a03007 	mov	r3, r7
    bb50:	e1a0100a 	mov	r1, sl
    bb54:	e1a00006 	mov	r0, r6
    bb58:	e2844001 	add	r4, r4, #1
    bb5c:	2a00000b 	bcs	bb90 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x9c>
    bb60:	eb0002b4 	bl	c638 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    bb64:	e5982024 	ldr	r2, [r8, #36]	; 0x24
    bb68:	e3500000 	cmp	r0, #0
    bb6c:	11a0300b 	movne	r3, fp
    bb70:	03a03000 	moveq	r3, #0
    bb74:	e1550002 	cmp	r5, r2
    bb78:	2affffee 	bcs	bb38 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x44>
    bb7c:	e1a01005 	mov	r1, r5
    bb80:	e59d2000 	ldr	r2, [sp]
    bb84:	e1a00008 	mov	r0, r8
    bb88:	ebfffe25 	bl	b424 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    bb8c:	eaffffe9 	b	bb38 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x44>
    bb90:	e2877001 	add	r7, r7, #1
    bb94:	e1a00006 	mov	r0, r6
    bb98:	eb0002a2 	bl	c628 <CCharGenerator::GetCharHeight() const>
    bb9c:	e1570000 	cmp	r7, r0
    bba0:	3affffe0 	bcc	bb28 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x34>
    bba4:	e28dd00c 	add	sp, sp, #12
    bba8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bbac <CScreenDevice::DisplayChar(char)>:
    bbac:	e6ef3071 	uxtb	r3, r1
    bbb0:	e353001f 	cmp	r3, #31
    bbb4:	912fff1e 	bxls	lr
    bbb8:	e92d4010 	push	{r4, lr}
    bbbc:	e1a04000 	mov	r4, r0
    bbc0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    bbc4:	e24dd008 	sub	sp, sp, #8
    bbc8:	e5d0c048 	ldrb	ip, [r0, #72]	; 0x48
    bbcc:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    bbd0:	e58dc000 	str	ip, [sp]
    bbd4:	ebffffc6 	bl	baf4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    bbd8:	e1a00004 	mov	r0, r4
    bbdc:	e28dd008 	add	sp, sp, #8
    bbe0:	e8bd4010 	pop	{r4, lr}
    bbe4:	eaffffa1 	b	ba70 <CScreenDevice::CursorRight()>

0000bbe8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    bbe8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    bbec:	e1a05000 	mov	r5, r0
    bbf0:	e1a07001 	mov	r7, r1
    bbf4:	e1a0a002 	mov	sl, r2
    bbf8:	e2806014 	add	r6, r0, #20
    bbfc:	e3a08000 	mov	r8, #0
    bc00:	e1a00006 	mov	r0, r6
    bc04:	eb000287 	bl	c628 <CCharGenerator::GetCharHeight() const>
    bc08:	e1580000 	cmp	r8, r0
    bc0c:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
    bc10:	e3a04000 	mov	r4, #0
    bc14:	e088900a 	add	r9, r8, sl
    bc18:	e1a00006 	mov	r0, r6
    bc1c:	eb00027f 	bl	c620 <CCharGenerator::GetCharWidth() const>
    bc20:	e1540000 	cmp	r4, r0
    bc24:	e0841007 	add	r1, r4, r7
    bc28:	e2844001 	add	r4, r4, #1
    bc2c:	2a000007 	bcs	bc50 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x68>
    bc30:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bc34:	e1510003 	cmp	r1, r3
    bc38:	2afffff6 	bcs	bc18 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    bc3c:	e3a03000 	mov	r3, #0
    bc40:	e1a02009 	mov	r2, r9
    bc44:	e1a00005 	mov	r0, r5
    bc48:	ebfffdf5 	bl	b424 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    bc4c:	eafffff1 	b	bc18 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    bc50:	e2888001 	add	r8, r8, #1
    bc54:	eaffffe9 	b	bc00 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x18>

0000bc58 <CScreenDevice::ClearLineEnd()>:
    bc58:	e92d4070 	push	{r4, r5, r6, lr}
    bc5c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bc60:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    bc64:	e1540003 	cmp	r4, r3
    bc68:	28bd8070 	popcs	{r4, r5, r6, pc}
    bc6c:	e1a05000 	mov	r5, r0
    bc70:	e2806014 	add	r6, r0, #20
    bc74:	e1a01004 	mov	r1, r4
    bc78:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bc7c:	e1a00005 	mov	r0, r5
    bc80:	ebffffd8 	bl	bbe8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bc84:	e1a00006 	mov	r0, r6
    bc88:	eb000264 	bl	c620 <CCharGenerator::GetCharWidth() const>
    bc8c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bc90:	e0844000 	add	r4, r4, r0
    bc94:	e1530004 	cmp	r3, r4
    bc98:	8afffff5 	bhi	bc74 <CScreenDevice::ClearLineEnd()+0x1c>
    bc9c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bca0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    bca0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bca4:	e1a05000 	mov	r5, r0
    bca8:	e1a06001 	mov	r6, r1
    bcac:	e2807014 	add	r7, r0, #20
    bcb0:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    bcb4:	e1a00007 	mov	r0, r7
    bcb8:	eb000258 	bl	c620 <CCharGenerator::GetCharWidth() const>
    bcbc:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bcc0:	e0264096 	mla	r6, r6, r0, r4
    bcc4:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    bcc8:	e1560003 	cmp	r6, r3
    bccc:	21a06003 	movcs	r6, r3
    bcd0:	e1540006 	cmp	r4, r6
    bcd4:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    bcd8:	e1a01004 	mov	r1, r4
    bcdc:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bce0:	e1a00005 	mov	r0, r5
    bce4:	ebffffbf 	bl	bbe8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bce8:	e1a00007 	mov	r0, r7
    bcec:	eb00024b 	bl	c620 <CCharGenerator::GetCharWidth() const>
    bcf0:	e0844000 	add	r4, r4, r0
    bcf4:	e1540006 	cmp	r4, r6
    bcf8:	3afffff6 	bcc	bcd8 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    bcfc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000bd00 <CScreenDevice::EraseChars(unsigned int)>:
    bd00:	e3510000 	cmp	r1, #0
    bd04:	012fff1e 	bxeq	lr
    bd08:	eaffffe4 	b	bca0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000bd0c <CScreenDevice::ClearDisplayEnd()>:
    bd0c:	e92d4070 	push	{r4, r5, r6, lr}
    bd10:	e1a05000 	mov	r5, r0
    bd14:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    bd18:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bd1c:	e2806014 	add	r6, r0, #20
    bd20:	e1540003 	cmp	r4, r3
    bd24:	2a000009 	bcs	bd50 <CScreenDevice::ClearDisplayEnd()+0x44>
    bd28:	e1a01004 	mov	r1, r4
    bd2c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bd30:	e1a00005 	mov	r0, r5
    bd34:	ebffffab 	bl	bbe8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bd38:	e1a00006 	mov	r0, r6
    bd3c:	eb000237 	bl	c620 <CCharGenerator::GetCharWidth() const>
    bd40:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bd44:	e0844000 	add	r4, r4, r0
    bd48:	e1530004 	cmp	r3, r4
    bd4c:	8afffff5 	bhi	bd28 <CScreenDevice::ClearDisplayEnd()+0x1c>
    bd50:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    bd54:	e1a00006 	mov	r0, r6
    bd58:	eb000232 	bl	c628 <CCharGenerator::GetCharHeight() const>
    bd5c:	e5953020 	ldr	r3, [r5, #32]
    bd60:	e0840000 	add	r0, r4, r0
    bd64:	e595201c 	ldr	r2, [r5, #28]
    bd68:	e5951018 	ldr	r1, [r5, #24]
    bd6c:	e0000093 	mul	r0, r3, r0
    bd70:	e0522000 	subs	r2, r2, r0
    bd74:	0a000003 	beq	bd88 <CScreenDevice::ClearDisplayEnd()+0x7c>
    bd78:	e0810000 	add	r0, r1, r0
    bd7c:	e3a01000 	mov	r1, #0
    bd80:	e8bd4070 	pop	{r4, r5, r6, lr}
    bd84:	ea000fc8 	b	fcac <memset>
    bd88:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bd8c <CScreenDevice::Write(char)>:
    bd8c:	e92d4010 	push	{r4, lr}
    bd90:	e1a04000 	mov	r4, r0
    bd94:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    bd98:	e24dd008 	sub	sp, sp, #8
    bd9c:	e3530007 	cmp	r3, #7
    bda0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bda4:	ea000010 	b	bdec <CScreenDevice::Write(char)+0x60>
    bda8:	0000be38 	.word	0x0000be38
    bdac:	0000be98 	.word	0x0000be98
    bdb0:	0000beb4 	.word	0x0000beb4
    bdb4:	0000bf0c 	.word	0x0000bf0c
    bdb8:	0000bfe8 	.word	0x0000bfe8
    bdbc:	0000c008 	.word	0x0000c008
    bdc0:	0000c028 	.word	0x0000c028
    bdc4:	0000bdfc 	.word	0x0000bdfc
    bdc8:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    bdcc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    bdd0:	e1520003 	cmp	r2, r3
    bdd4:	2a000004 	bcs	bdec <CScreenDevice::Write(char)+0x60>
    bdd8:	e2800014 	add	r0, r0, #20
    bddc:	eb000211 	bl	c628 <CCharGenerator::GetCharHeight() const>
    bde0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bde4:	e0433000 	sub	r3, r3, r0
    bde8:	e5843040 	str	r3, [r4, #64]	; 0x40
    bdec:	e3a03000 	mov	r3, #0
    bdf0:	e5843030 	str	r3, [r4, #48]	; 0x30
    bdf4:	e28dd008 	add	sp, sp, #8
    bdf8:	e8bd8010 	pop	{r4, pc}
    bdfc:	e3510068 	cmp	r1, #104	; 0x68
    be00:	0a000097 	beq	c064 <CScreenDevice::Write(char)+0x2d8>
    be04:	e351006c 	cmp	r1, #108	; 0x6c
    be08:	0a000095 	beq	c064 <CScreenDevice::Write(char)+0x2d8>
    be0c:	e2411030 	sub	r1, r1, #48	; 0x30
    be10:	e6ef3071 	uxtb	r3, r1
    be14:	e3530009 	cmp	r3, #9
    be18:	8afffff3 	bhi	bdec <CScreenDevice::Write(char)+0x60>
    be1c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    be20:	e3a0200a 	mov	r2, #10
    be24:	e0211392 	mla	r1, r2, r3, r1
    be28:	e3510063 	cmp	r1, #99	; 0x63
    be2c:	e5841050 	str	r1, [r4, #80]	; 0x50
    be30:	8affffed 	bhi	bdec <CScreenDevice::Write(char)+0x60>
    be34:	eaffffee 	b	bdf4 <CScreenDevice::Write(char)+0x68>
    be38:	e2413008 	sub	r3, r1, #8
    be3c:	e3530013 	cmp	r3, #19
    be40:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    be44:	ea0000ec 	b	c1fc <CScreenDevice::Write(char)+0x470>
    be48:	0000c0d0 	.word	0x0000c0d0
    be4c:	0000c0c4 	.word	0x0000c0c4
    be50:	0000c0b0 	.word	0x0000c0b0
    be54:	0000c1fc 	.word	0x0000c1fc
    be58:	0000c1fc 	.word	0x0000c1fc
    be5c:	0000c0a4 	.word	0x0000c0a4
    be60:	0000c1fc 	.word	0x0000c1fc
    be64:	0000c1fc 	.word	0x0000c1fc
    be68:	0000c1fc 	.word	0x0000c1fc
    be6c:	0000c1fc 	.word	0x0000c1fc
    be70:	0000c1fc 	.word	0x0000c1fc
    be74:	0000c1fc 	.word	0x0000c1fc
    be78:	0000c1fc 	.word	0x0000c1fc
    be7c:	0000c1fc 	.word	0x0000c1fc
    be80:	0000c1fc 	.word	0x0000c1fc
    be84:	0000c1fc 	.word	0x0000c1fc
    be88:	0000c1fc 	.word	0x0000c1fc
    be8c:	0000c1fc 	.word	0x0000c1fc
    be90:	0000c1fc 	.word	0x0000c1fc
    be94:	0000c098 	.word	0x0000c098
    be98:	e351004d 	cmp	r1, #77	; 0x4d
    be9c:	0affffd2 	beq	bdec <CScreenDevice::Write(char)+0x60>
    bea0:	e351005b 	cmp	r1, #91	; 0x5b
    bea4:	03a03002 	moveq	r3, #2
    bea8:	05803030 	streq	r3, [r0, #48]	; 0x30
    beac:	0affffd0 	beq	bdf4 <CScreenDevice::Write(char)+0x68>
    beb0:	eaffffcd 	b	bdec <CScreenDevice::Write(char)+0x60>
    beb4:	e241303f 	sub	r3, r1, #63	; 0x3f
    beb8:	e3530011 	cmp	r3, #17
    bebc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bec0:	ea0000d9 	b	c22c <CScreenDevice::Write(char)+0x4a0>
    bec4:	0000c1b8 	.word	0x0000c1b8
    bec8:	0000c22c 	.word	0x0000c22c
    becc:	0000bdc8 	.word	0x0000bdc8
    bed0:	0000c1ec 	.word	0x0000c1ec
    bed4:	0000c1dc 	.word	0x0000c1dc
    bed8:	0000c22c 	.word	0x0000c22c
    bedc:	0000c22c 	.word	0x0000c22c
    bee0:	0000c22c 	.word	0x0000c22c
    bee4:	0000c22c 	.word	0x0000c22c
    bee8:	0000c1c4 	.word	0x0000c1c4
    beec:	0000c22c 	.word	0x0000c22c
    bef0:	0000c1a8 	.word	0x0000c1a8
    bef4:	0000c198 	.word	0x0000c198
    bef8:	0000bdec 	.word	0x0000bdec
    befc:	0000bdec 	.word	0x0000bdec
    bf00:	0000c22c 	.word	0x0000c22c
    bf04:	0000c22c 	.word	0x0000c22c
    bf08:	0000bdec 	.word	0x0000bdec
    bf0c:	e241303b 	sub	r3, r1, #59	; 0x3b
    bf10:	e3530032 	cmp	r3, #50	; 0x32
    bf14:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bf18:	eaffffbb 	b	be0c <CScreenDevice::Write(char)+0x80>
    bf1c:	0000c18c 	.word	0x0000c18c
    bf20:	0000be0c 	.word	0x0000be0c
    bf24:	0000be0c 	.word	0x0000be0c
    bf28:	0000be0c 	.word	0x0000be0c
    bf2c:	0000be0c 	.word	0x0000be0c
    bf30:	0000be0c 	.word	0x0000be0c
    bf34:	0000be0c 	.word	0x0000be0c
    bf38:	0000be0c 	.word	0x0000be0c
    bf3c:	0000be0c 	.word	0x0000be0c
    bf40:	0000be0c 	.word	0x0000be0c
    bf44:	0000be0c 	.word	0x0000be0c
    bf48:	0000be0c 	.word	0x0000be0c
    bf4c:	0000be0c 	.word	0x0000be0c
    bf50:	0000be0c 	.word	0x0000be0c
    bf54:	0000be0c 	.word	0x0000be0c
    bf58:	0000be0c 	.word	0x0000be0c
    bf5c:	0000be0c 	.word	0x0000be0c
    bf60:	0000bdec 	.word	0x0000bdec
    bf64:	0000bdec 	.word	0x0000bdec
    bf68:	0000be0c 	.word	0x0000be0c
    bf6c:	0000be0c 	.word	0x0000be0c
    bf70:	0000bdec 	.word	0x0000bdec
    bf74:	0000be0c 	.word	0x0000be0c
    bf78:	0000be0c 	.word	0x0000be0c
    bf7c:	0000be0c 	.word	0x0000be0c
    bf80:	0000be0c 	.word	0x0000be0c
    bf84:	0000be0c 	.word	0x0000be0c
    bf88:	0000be0c 	.word	0x0000be0c
    bf8c:	0000be0c 	.word	0x0000be0c
    bf90:	0000c0dc 	.word	0x0000c0dc
    bf94:	0000be0c 	.word	0x0000be0c
    bf98:	0000be0c 	.word	0x0000be0c
    bf9c:	0000be0c 	.word	0x0000be0c
    bfa0:	0000be0c 	.word	0x0000be0c
    bfa4:	0000be0c 	.word	0x0000be0c
    bfa8:	0000be0c 	.word	0x0000be0c
    bfac:	0000be0c 	.word	0x0000be0c
    bfb0:	0000be0c 	.word	0x0000be0c
    bfb4:	0000be0c 	.word	0x0000be0c
    bfb8:	0000be0c 	.word	0x0000be0c
    bfbc:	0000be0c 	.word	0x0000be0c
    bfc0:	0000be0c 	.word	0x0000be0c
    bfc4:	0000be0c 	.word	0x0000be0c
    bfc8:	0000be0c 	.word	0x0000be0c
    bfcc:	0000be0c 	.word	0x0000be0c
    bfd0:	0000c0f0 	.word	0x0000c0f0
    bfd4:	0000be0c 	.word	0x0000be0c
    bfd8:	0000be0c 	.word	0x0000be0c
    bfdc:	0000be0c 	.word	0x0000be0c
    bfe0:	0000c0f0 	.word	0x0000c0f0
    bfe4:	0000c10c 	.word	0x0000c10c
    bfe8:	e2411030 	sub	r1, r1, #48	; 0x30
    bfec:	e6ef3071 	uxtb	r3, r1
    bff0:	e3530009 	cmp	r3, #9
    bff4:	8affff7c 	bhi	bdec <CScreenDevice::Write(char)+0x60>
    bff8:	e3a03007 	mov	r3, #7
    bffc:	e5801050 	str	r1, [r0, #80]	; 0x50
    c000:	e5803030 	str	r3, [r0, #48]	; 0x30
    c004:	eaffff7a 	b	bdf4 <CScreenDevice::Write(char)+0x68>
    c008:	e2411030 	sub	r1, r1, #48	; 0x30
    c00c:	e6ef3071 	uxtb	r3, r1
    c010:	e3530009 	cmp	r3, #9
    c014:	8affff74 	bhi	bdec <CScreenDevice::Write(char)+0x60>
    c018:	e3a03006 	mov	r3, #6
    c01c:	e5801054 	str	r1, [r0, #84]	; 0x54
    c020:	e5803030 	str	r3, [r0, #48]	; 0x30
    c024:	eaffff72 	b	bdf4 <CScreenDevice::Write(char)+0x68>
    c028:	e3510048 	cmp	r1, #72	; 0x48
    c02c:	0a00008f 	beq	c270 <CScreenDevice::Write(char)+0x4e4>
    c030:	e3510072 	cmp	r1, #114	; 0x72
    c034:	0a000011 	beq	c080 <CScreenDevice::Write(char)+0x2f4>
    c038:	e2411030 	sub	r1, r1, #48	; 0x30
    c03c:	e6ef3071 	uxtb	r3, r1
    c040:	e3530009 	cmp	r3, #9
    c044:	8affff68 	bhi	bdec <CScreenDevice::Write(char)+0x60>
    c048:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    c04c:	e3a0200a 	mov	r2, #10
    c050:	e0211392 	mla	r1, r2, r3, r1
    c054:	e35100c7 	cmp	r1, #199	; 0xc7
    c058:	e5801054 	str	r1, [r0, #84]	; 0x54
    c05c:	8affff62 	bhi	bdec <CScreenDevice::Write(char)+0x60>
    c060:	eaffff63 	b	bdf4 <CScreenDevice::Write(char)+0x68>
    c064:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    c068:	e3530019 	cmp	r3, #25
    c06c:	02411068 	subeq	r1, r1, #104	; 0x68
    c070:	016f1f11 	clzeq	r1, r1
    c074:	01a012a1 	lsreq	r1, r1, #5
    c078:	05841044 	streq	r1, [r4, #68]	; 0x44
    c07c:	eaffff5a 	b	bdec <CScreenDevice::Write(char)+0x60>
    c080:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    c084:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c088:	ebfffdf5 	bl	b864 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    c08c:	e3a03000 	mov	r3, #0
    c090:	e5843030 	str	r3, [r4, #48]	; 0x30
    c094:	eaffff56 	b	bdf4 <CScreenDevice::Write(char)+0x68>
    c098:	e3a03001 	mov	r3, #1
    c09c:	e5803030 	str	r3, [r0, #48]	; 0x30
    c0a0:	eaffff53 	b	bdf4 <CScreenDevice::Write(char)+0x68>
    c0a4:	e3a03000 	mov	r3, #0
    c0a8:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c0ac:	eaffff50 	b	bdf4 <CScreenDevice::Write(char)+0x68>
    c0b0:	e3a03000 	mov	r3, #0
    c0b4:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c0b8:	e28dd008 	add	sp, sp, #8
    c0bc:	e8bd4010 	pop	{r4, lr}
    c0c0:	eafffe54 	b	ba18 <CScreenDevice::CursorDown()>
    c0c4:	e28dd008 	add	sp, sp, #8
    c0c8:	e8bd4010 	pop	{r4, lr}
    c0cc:	eafffe76 	b	baac <CScreenDevice::Tabulator()>
    c0d0:	e28dd008 	add	sp, sp, #8
    c0d4:	e8bd4010 	pop	{r4, lr}
    c0d8:	eafffd9a 	b	b748 <CScreenDevice::CursorLeft()>
    c0dc:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c0e0:	e3510000 	cmp	r1, #0
    c0e4:	0affff40 	beq	bdec <CScreenDevice::Write(char)+0x60>
    c0e8:	ebfffeec 	bl	bca0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    c0ec:	eaffff3e 	b	bdec <CScreenDevice::Write(char)+0x60>
    c0f0:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    c0f4:	e3530004 	cmp	r3, #4
    c0f8:	02411068 	subeq	r1, r1, #104	; 0x68
    c0fc:	016f1f11 	clzeq	r1, r1
    c100:	01a012a1 	lsreq	r1, r1, #5
    c104:	0580104c 	streq	r1, [r0, #76]	; 0x4c
    c108:	eaffff37 	b	bdec <CScreenDevice::Write(char)+0x60>
    c10c:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    c110:	e353001b 	cmp	r3, #27
    c114:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c118:	eaffff33 	b	bdec <CScreenDevice::Write(char)+0x60>
    c11c:	0000c264 	.word	0x0000c264
    c120:	0000c258 	.word	0x0000c258
    c124:	0000c24c 	.word	0x0000c24c
    c128:	0000bdec 	.word	0x0000bdec
    c12c:	0000bdec 	.word	0x0000bdec
    c130:	0000bdec 	.word	0x0000bdec
    c134:	0000bdec 	.word	0x0000bdec
    c138:	0000bdec 	.word	0x0000bdec
    c13c:	0000bdec 	.word	0x0000bdec
    c140:	0000bdec 	.word	0x0000bdec
    c144:	0000bdec 	.word	0x0000bdec
    c148:	0000bdec 	.word	0x0000bdec
    c14c:	0000bdec 	.word	0x0000bdec
    c150:	0000bdec 	.word	0x0000bdec
    c154:	0000bdec 	.word	0x0000bdec
    c158:	0000bdec 	.word	0x0000bdec
    c15c:	0000bdec 	.word	0x0000bdec
    c160:	0000bdec 	.word	0x0000bdec
    c164:	0000bdec 	.word	0x0000bdec
    c168:	0000bdec 	.word	0x0000bdec
    c16c:	0000bdec 	.word	0x0000bdec
    c170:	0000bdec 	.word	0x0000bdec
    c174:	0000bdec 	.word	0x0000bdec
    c178:	0000bdec 	.word	0x0000bdec
    c17c:	0000bdec 	.word	0x0000bdec
    c180:	0000bdec 	.word	0x0000bdec
    c184:	0000bdec 	.word	0x0000bdec
    c188:	0000c264 	.word	0x0000c264
    c18c:	e3a03005 	mov	r3, #5
    c190:	e5803030 	str	r3, [r0, #48]	; 0x30
    c194:	eaffff16 	b	bdf4 <CScreenDevice::Write(char)+0x68>
    c198:	ebfffeae 	bl	bc58 <CScreenDevice::ClearLineEnd()>
    c19c:	e3a03000 	mov	r3, #0
    c1a0:	e5843030 	str	r3, [r4, #48]	; 0x30
    c1a4:	eaffff12 	b	bdf4 <CScreenDevice::Write(char)+0x68>
    c1a8:	ebfffed7 	bl	bd0c <CScreenDevice::ClearDisplayEnd()>
    c1ac:	e3a03000 	mov	r3, #0
    c1b0:	e5843030 	str	r3, [r4, #48]	; 0x30
    c1b4:	eaffff0e 	b	bdf4 <CScreenDevice::Write(char)+0x68>
    c1b8:	e3a03004 	mov	r3, #4
    c1bc:	e5803030 	str	r3, [r0, #48]	; 0x30
    c1c0:	eaffff0b 	b	bdf4 <CScreenDevice::Write(char)+0x68>
    c1c4:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    c1c8:	e3a03000 	mov	r3, #0
    c1cc:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c1d0:	e5802040 	str	r2, [r0, #64]	; 0x40
    c1d4:	e5803030 	str	r3, [r0, #48]	; 0x30
    c1d8:	eaffff05 	b	bdf4 <CScreenDevice::Write(char)+0x68>
    c1dc:	ebfffe23 	bl	ba70 <CScreenDevice::CursorRight()>
    c1e0:	e3a03000 	mov	r3, #0
    c1e4:	e5843030 	str	r3, [r4, #48]	; 0x30
    c1e8:	eaffff01 	b	bdf4 <CScreenDevice::Write(char)+0x68>
    c1ec:	ebfffe09 	bl	ba18 <CScreenDevice::CursorDown()>
    c1f0:	e3a03000 	mov	r3, #0
    c1f4:	e5843030 	str	r3, [r4, #48]	; 0x30
    c1f8:	eafffefd 	b	bdf4 <CScreenDevice::Write(char)+0x68>
    c1fc:	e6ef3071 	uxtb	r3, r1
    c200:	e353001f 	cmp	r3, #31
    c204:	9afffefa 	bls	bdf4 <CScreenDevice::Write(char)+0x68>
    c208:	e5d0c048 	ldrb	ip, [r0, #72]	; 0x48
    c20c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c210:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    c214:	e58dc000 	str	ip, [sp]
    c218:	ebfffe35 	bl	baf4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    c21c:	e1a00004 	mov	r0, r4
    c220:	e28dd008 	add	sp, sp, #8
    c224:	e8bd4010 	pop	{r4, lr}
    c228:	eafffe10 	b	ba70 <CScreenDevice::CursorRight()>
    c22c:	e2411030 	sub	r1, r1, #48	; 0x30
    c230:	e6ef3071 	uxtb	r3, r1
    c234:	e3530009 	cmp	r3, #9
    c238:	8afffeeb 	bhi	bdec <CScreenDevice::Write(char)+0x60>
    c23c:	e3a03003 	mov	r3, #3
    c240:	e5801050 	str	r1, [r0, #80]	; 0x50
    c244:	e5803030 	str	r3, [r0, #48]	; 0x30
    c248:	eafffee9 	b	bdf4 <CScreenDevice::Write(char)+0x68>
    c24c:	e3a03003 	mov	r3, #3
    c250:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    c254:	eafffee4 	b	bdec <CScreenDevice::Write(char)+0x60>
    c258:	e3a03002 	mov	r3, #2
    c25c:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    c260:	eafffee1 	b	bdec <CScreenDevice::Write(char)+0x60>
    c264:	e3a03001 	mov	r3, #1
    c268:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    c26c:	eafffede 	b	bdec <CScreenDevice::Write(char)+0x60>
    c270:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    c274:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c278:	ebfffd4d 	bl	b7b4 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    c27c:	e3a03000 	mov	r3, #0
    c280:	e5843030 	str	r3, [r4, #48]	; 0x30
    c284:	eafffeda 	b	bdf4 <CScreenDevice::Write(char)+0x68>

0000c288 <CScreenDevice::Write(void const*, unsigned int)>:
    c288:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    c28c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c290:	e1a05000 	mov	r5, r0
    c294:	e3530000 	cmp	r3, #0
    c298:	e1a06001 	mov	r6, r1
    c29c:	e1a08002 	mov	r8, r2
    c2a0:	1a000026 	bne	c340 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    c2a4:	e5954044 	ldr	r4, [r5, #68]	; 0x44
    c2a8:	e3a03001 	mov	r3, #1
    c2ac:	e5853058 	str	r3, [r5, #88]	; 0x58
    c2b0:	e3540000 	cmp	r4, #0
    c2b4:	1a00001a 	bne	c324 <CScreenDevice::Write(void const*, unsigned int)+0x9c>
    c2b8:	e3580000 	cmp	r8, #0
    c2bc:	e2487001 	sub	r7, r8, #1
    c2c0:	0a00000b 	beq	c2f4 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    c2c4:	e1a04006 	mov	r4, r6
    c2c8:	e0d410d1 	ldrsb	r1, [r4], #1
    c2cc:	e1a00005 	mov	r0, r5
    c2d0:	ebfffead 	bl	bd8c <CScreenDevice::Write(char)>
    c2d4:	e2643001 	rsb	r3, r4, #1
    c2d8:	e0833007 	add	r3, r3, r7
    c2dc:	e1760003 	cmn	r6, r3
    c2e0:	1afffff8 	bne	c2c8 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    c2e4:	e2874001 	add	r4, r7, #1
    c2e8:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    c2ec:	e3530000 	cmp	r3, #0
    c2f0:	1a000008 	bne	c318 <CScreenDevice::Write(void const*, unsigned int)+0x90>
    c2f4:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
    c2f8:	e3a02000 	mov	r2, #0
    c2fc:	e5852058 	str	r2, [r5, #88]	; 0x58
    c300:	e1530002 	cmp	r3, r2
    c304:	0a000000 	beq	c30c <CScreenDevice::Write(void const*, unsigned int)+0x84>
    c308:	ebfff702 	bl	9f18 <LeaveCritical>
    c30c:	f57ff05f 	dmb	sy
    c310:	e1a00004 	mov	r0, r4
    c314:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c318:	e1a00005 	mov	r0, r5
    c31c:	ebfffc47 	bl	b440 <CScreenDevice::InvertCursor() [clone .part.6]>
    c320:	eafffff3 	b	c2f4 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    c324:	e1a00005 	mov	r0, r5
    c328:	e2487001 	sub	r7, r8, #1
    c32c:	ebfffc43 	bl	b440 <CScreenDevice::InvertCursor() [clone .part.6]>
    c330:	e3580000 	cmp	r8, #0
    c334:	1affffe2 	bne	c2c4 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    c338:	e1a04008 	mov	r4, r8
    c33c:	eaffffe9 	b	c2e8 <CScreenDevice::Write(void const*, unsigned int)+0x60>
    c340:	ebfff6e7 	bl	9ee4 <EnterCritical>
    c344:	eaffffd6 	b	c2a4 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000c348 <CScreenDevice::Initialize()>:
    c348:	e92d4070 	push	{r4, r5, r6, lr}
    c34c:	e1a04000 	mov	r4, r0
    c350:	e590500c 	ldr	r5, [r0, #12]
    c354:	e24dd008 	sub	sp, sp, #8
    c358:	e3550000 	cmp	r5, #0
    c35c:	1a00001c 	bne	c3d4 <CScreenDevice::Initialize()+0x8c>
    c360:	e3a00024 	mov	r0, #36	; 0x24
    c364:	ebfff6da 	bl	9ed4 <operator new(unsigned int)>
    c368:	e3a03008 	mov	r3, #8
    c36c:	e5942008 	ldr	r2, [r4, #8]
    c370:	e1a06000 	mov	r6, r0
    c374:	e5941004 	ldr	r1, [r4, #4]
    c378:	e58d5004 	str	r5, [sp, #4]
    c37c:	e58d5000 	str	r5, [sp]
    c380:	eb000f82 	bl	10190 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    c384:	e1a00006 	mov	r0, r6
    c388:	e30f2fdf 	movw	r2, #65503	; 0xffdf
    c38c:	e3a01001 	mov	r1, #1
    c390:	e5846010 	str	r6, [r4, #16]
    c394:	eb000fd1 	bl	102e0 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    c398:	e3a02b3e 	mov	r2, #63488	; 0xf800
    c39c:	e3a01002 	mov	r1, #2
    c3a0:	e5940010 	ldr	r0, [r4, #16]
    c3a4:	eb000fcd 	bl	102e0 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    c3a8:	e3a0201f 	mov	r2, #31
    c3ac:	e3a01003 	mov	r1, #3
    c3b0:	e5940010 	ldr	r0, [r4, #16]
    c3b4:	eb000fc9 	bl	102e0 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    c3b8:	e5940010 	ldr	r0, [r4, #16]
    c3bc:	eb000fdc 	bl	10334 <CBcmFrameBuffer::Initialize()>
    c3c0:	e3500000 	cmp	r0, #0
    c3c4:	1a000028 	bne	c46c <CScreenDevice::Initialize()+0x124>
    c3c8:	e1a00005 	mov	r0, r5
    c3cc:	e28dd008 	add	sp, sp, #8
    c3d0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c3d4:	e5903004 	ldr	r3, [r0, #4]
    c3d8:	e5900008 	ldr	r0, [r0, #8]
    c3dc:	e5843024 	str	r3, [r4, #36]	; 0x24
    c3e0:	e5840028 	str	r0, [r4, #40]	; 0x28
    c3e4:	e5843020 	str	r3, [r4, #32]
    c3e8:	e0000390 	mul	r0, r0, r3
    c3ec:	e584001c 	str	r0, [r4, #28]
    c3f0:	ebfff6b8 	bl	9ed8 <operator new[](unsigned int)>
    c3f4:	e5946028 	ldr	r6, [r4, #40]	; 0x28
    c3f8:	e5840018 	str	r0, [r4, #24]
    c3fc:	e2845014 	add	r5, r4, #20
    c400:	e1a00005 	mov	r0, r5
    c404:	eb000087 	bl	c628 <CCharGenerator::GetCharHeight() const>
    c408:	e736f016 	udiv	r6, r6, r0
    c40c:	e1a00005 	mov	r0, r5
    c410:	eb000084 	bl	c628 <CCharGenerator::GetCharHeight() const>
    c414:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    c418:	e3a02000 	mov	r2, #0
    c41c:	e5843040 	str	r3, [r4, #64]	; 0x40
    c420:	e0060690 	mul	r6, r0, r6
    c424:	e584203c 	str	r2, [r4, #60]	; 0x3c
    c428:	e1a00004 	mov	r0, r4
    c42c:	e584602c 	str	r6, [r4, #44]	; 0x2c
    c430:	e5846038 	str	r6, [r4, #56]	; 0x38
    c434:	ebfffe34 	bl	bd0c <CScreenDevice::ClearDisplayEnd()>
    c438:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c43c:	e3530000 	cmp	r3, #0
    c440:	1a000021 	bne	c4cc <CScreenDevice::Initialize()+0x184>
    c444:	eb0001a2 	bl	cad4 <CDeviceNameService::Get()>
    c448:	e3a05001 	mov	r5, #1
    c44c:	e1a02004 	mov	r2, r4
    c450:	e3a03000 	mov	r3, #0
    c454:	e30114ac 	movw	r1, #5292	; 0x14ac
    c458:	e3401005 	movt	r1, #5
    c45c:	eb000128 	bl	c904 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    c460:	e1a00005 	mov	r0, r5
    c464:	e28dd008 	add	sp, sp, #8
    c468:	e8bd8070 	pop	{r4, r5, r6, pc}
    c46c:	e5940010 	ldr	r0, [r4, #16]
    c470:	eb000fea 	bl	10420 <CBcmFrameBuffer::GetDepth() const>
    c474:	e3500008 	cmp	r0, #8
    c478:	1affffd2 	bne	c3c8 <CScreenDevice::Initialize()+0x80>
    c47c:	e5940010 	ldr	r0, [r4, #16]
    c480:	eb000fe8 	bl	10428 <CBcmFrameBuffer::GetBuffer() const>
    c484:	e5840018 	str	r0, [r4, #24]
    c488:	e5940010 	ldr	r0, [r4, #16]
    c48c:	eb000fe7 	bl	10430 <CBcmFrameBuffer::GetSize() const>
    c490:	e584001c 	str	r0, [r4, #28]
    c494:	e5940010 	ldr	r0, [r4, #16]
    c498:	eb000fde 	bl	10418 <CBcmFrameBuffer::GetPitch() const>
    c49c:	e5840020 	str	r0, [r4, #32]
    c4a0:	e5940010 	ldr	r0, [r4, #16]
    c4a4:	eb000fd3 	bl	103f8 <CBcmFrameBuffer::GetWidth() const>
    c4a8:	e5840024 	str	r0, [r4, #36]	; 0x24
    c4ac:	e5940010 	ldr	r0, [r4, #16]
    c4b0:	eb000fd2 	bl	10400 <CBcmFrameBuffer::GetHeight() const>
    c4b4:	e5943020 	ldr	r3, [r4, #32]
    c4b8:	e1a06000 	mov	r6, r0
    c4bc:	e5840028 	str	r0, [r4, #40]	; 0x28
    c4c0:	e3130003 	tst	r3, #3
    c4c4:	0affffcc 	beq	c3fc <CScreenDevice::Initialize()+0xb4>
    c4c8:	eaffffbe 	b	c3c8 <CScreenDevice::Initialize()+0x80>
    c4cc:	e1a00004 	mov	r0, r4
    c4d0:	ebfffbda 	bl	b440 <CScreenDevice::InvertCursor() [clone .part.6]>
    c4d4:	eaffffda 	b	c444 <CScreenDevice::Initialize()+0xfc>

0000c4d8 <CScreenDevice::InvertCursor()>:
    c4d8:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    c4dc:	e3530000 	cmp	r3, #0
    c4e0:	012fff1e 	bxeq	lr
    c4e4:	eafffbd5 	b	b440 <CScreenDevice::InvertCursor() [clone .part.6]>

0000c4e8 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char)>:
    c4e8:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    c4ec:	e15c0001 	cmp	ip, r1
    c4f0:	912fff1e 	bxls	lr
    c4f4:	eafffbca 	b	b424 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>

0000c4f8 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    c4f8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c4fc:	e1530001 	cmp	r3, r1
    c500:	9a000007 	bls	c524 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x2c>
    c504:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    c508:	e1530002 	cmp	r3, r2
    c50c:	9a000004 	bls	c524 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x2c>
    c510:	e590c020 	ldr	ip, [r0, #32]
    c514:	e5903018 	ldr	r3, [r0, #24]
    c518:	e022329c 	mla	r2, ip, r2, r3
    c51c:	e7d20001 	ldrb	r0, [r2, r1]
    c520:	e12fff1e 	bx	lr
    c524:	e3a00000 	mov	r0, #0
    c528:	e12fff1e 	bx	lr

0000c52c <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    c52c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c530:	e1a05000 	mov	r5, r0
    c534:	e1a04001 	mov	r4, r1
    c538:	e24dd00c 	sub	sp, sp, #12
    c53c:	e1a06002 	mov	r6, r2
    c540:	e2800014 	add	r0, r0, #20
    c544:	e2044003 	and	r4, r4, #3
    c548:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    c54c:	eb000033 	bl	c620 <CCharGenerator::GetCharWidth() const>
    c550:	e2061003 	and	r1, r6, #3
    c554:	e3013550 	movw	r3, #5456	; 0x1550
    c558:	e3403005 	movt	r3, #5
    c55c:	e0831001 	add	r1, r3, r1
    c560:	e0240094 	mla	r4, r4, r0, r0
    c564:	e3a02002 	mov	r2, #2
    c568:	e3a03000 	mov	r3, #0
    c56c:	e58d2000 	str	r2, [sp]
    c570:	e1a00005 	mov	r0, r5
    c574:	e1d111dc 	ldrsb	r1, [r1, #28]
    c578:	e0472004 	sub	r2, r7, r4
    c57c:	ebfffd5c 	bl	baf4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    c580:	e28dd00c 	add	sp, sp, #12
    c584:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c588 <assertion_failed>:
    c588:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c58c:	e1a05000 	mov	r5, r0
    c590:	e1a06001 	mov	r6, r1
    c594:	e24dd01c 	sub	sp, sp, #28
    c598:	e1a07002 	mov	r7, r2
    c59c:	e1a0400d 	mov	r4, sp
    c5a0:	e28d0008 	add	r0, sp, #8
    c5a4:	eb00035b 	bl	d318 <CString::CString()>
    c5a8:	e1a03007 	mov	r3, r7
    c5ac:	e1a02006 	mov	r2, r6
    c5b0:	e28d0008 	add	r0, sp, #8
    c5b4:	e3011574 	movw	r1, #5492	; 0x1574
    c5b8:	e3401005 	movt	r1, #5
    c5bc:	eb000668 	bl	df64 <CString::Format(char const*, ...)>
    c5c0:	e28d0008 	add	r0, sp, #8
    c5c4:	eb000369 	bl	d370 <CString::operator char const*() const>
    c5c8:	e1a01000 	mov	r1, r0
    c5cc:	e1a00004 	mov	r0, r4
    c5d0:	eb00007b 	bl	c7c4 <debug_stacktrace(unsigned int const*, char const*)>
    c5d4:	eb00016a 	bl	cb84 <CLogger::Get()>
    c5d8:	e1a04000 	mov	r4, r0
    c5dc:	e28d0008 	add	r0, sp, #8
    c5e0:	eb000362 	bl	d370 <CString::operator char const*() const>
    c5e4:	e3a02000 	mov	r2, #0
    c5e8:	e1a01000 	mov	r1, r0
    c5ec:	e58d5000 	str	r5, [sp]
    c5f0:	e1a00004 	mov	r0, r4
    c5f4:	e301357c 	movw	r3, #5500	; 0x157c
    c5f8:	e3403005 	movt	r3, #5
    c5fc:	eb00023d 	bl	cef8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c600:	e28d0008 	add	r0, sp, #8
    c604:	eb000311 	bl	d250 <CString::~CString()>
    c608:	e28dd01c 	add	sp, sp, #28
    c60c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c610 <CCharGenerator::CCharGenerator()>:
    c610:	e3a03008 	mov	r3, #8
    c614:	e5803000 	str	r3, [r0]
    c618:	e12fff1e 	bx	lr

0000c61c <CCharGenerator::~CCharGenerator()>:
    c61c:	e12fff1e 	bx	lr

0000c620 <CCharGenerator::GetCharWidth() const>:
    c620:	e5900000 	ldr	r0, [r0]
    c624:	e12fff1e 	bx	lr

0000c628 <CCharGenerator::GetCharHeight() const>:
    c628:	e3a00013 	mov	r0, #19
    c62c:	e12fff1e 	bx	lr

0000c630 <CCharGenerator::GetUnderline() const>:
    c630:	e3a00010 	mov	r0, #16
    c634:	e12fff1e 	bx	lr

0000c638 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    c638:	e6ef1071 	uxtb	r1, r1
    c63c:	e92d4070 	push	{r4, r5, r6, lr}
    c640:	e2414021 	sub	r4, r1, #33	; 0x21
    c644:	e35400de 	cmp	r4, #222	; 0xde
    c648:	8a00000f 	bhi	c68c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    c64c:	e1a06003 	mov	r6, r3
    c650:	e5903000 	ldr	r3, [r0]
    c654:	e1a05002 	mov	r5, r2
    c658:	e1530002 	cmp	r3, r2
    c65c:	9a00000c 	bls	c694 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x5c>
    c660:	e356000f 	cmp	r6, #15
    c664:	8a000008 	bhi	c68c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    c668:	e3011594 	movw	r1, #5524	; 0x1594
    c66c:	e3401005 	movt	r1, #5
    c670:	e3a02080 	mov	r2, #128	; 0x80
    c674:	e0811204 	add	r1, r1, r4, lsl #4
    c678:	e7d13006 	ldrb	r3, [r1, r6]
    c67c:	e0133552 	ands	r3, r3, r2, asr r5
    c680:	13a00001 	movne	r0, #1
    c684:	03a00000 	moveq	r0, #0
    c688:	e8bd8070 	pop	{r4, r5, r6, pc}
    c68c:	e3a00000 	mov	r0, #0
    c690:	e8bd8070 	pop	{r4, r5, r6, pc}
    c694:	e3021384 	movw	r1, #9092	; 0x2384
    c698:	e3401005 	movt	r1, #5
    c69c:	e3020398 	movw	r0, #9112	; 0x2398
    c6a0:	e3400005 	movt	r0, #5
    c6a4:	e3a0204e 	mov	r2, #78	; 0x4e
    c6a8:	ebffffb6 	bl	c588 <assertion_failed>
    c6ac:	e356000f 	cmp	r6, #15
    c6b0:	9affffec 	bls	c668 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
    c6b4:	eafffff4 	b	c68c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>

0000c6b8 <debug_hexdump(void const*, unsigned int, char const*)>:
    c6b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c6bc:	e3520000 	cmp	r2, #0
    c6c0:	e1a05001 	mov	r5, r1
    c6c4:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    c6c8:	e1a04000 	mov	r4, r0
    c6cc:	e30273b0 	movw	r7, #9136	; 0x23b0
    c6d0:	e3407005 	movt	r7, #5
    c6d4:	11a07002 	movne	r7, r2
    c6d8:	eb000129 	bl	cb84 <CLogger::Get()>
    c6dc:	e58d4004 	str	r4, [sp, #4]
    c6e0:	e1a01007 	mov	r1, r7
    c6e4:	e58d5000 	str	r5, [sp]
    c6e8:	e30233b8 	movw	r3, #9144	; 0x23b8
    c6ec:	e3403005 	movt	r3, #5
    c6f0:	e3a02004 	mov	r2, #4
    c6f4:	eb0001ff 	bl	cef8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c6f8:	e3550000 	cmp	r5, #0
    c6fc:	0a00002a 	beq	c7ac <debug_hexdump(void const*, unsigned int, char const*)+0xf4>
    c700:	e30283dc 	movw	r8, #9180	; 0x23dc
    c704:	e3408005 	movt	r8, #5
    c708:	eb00011d 	bl	cb84 <CLogger::Get()>
    c70c:	e5d4e00f 	ldrb	lr, [r4, #15]
    c710:	e5d4b00e 	ldrb	fp, [r4, #14]
    c714:	e6ffc074 	uxth	ip, r4
    c718:	e5d4a00d 	ldrb	sl, [r4, #13]
    c71c:	e1a03008 	mov	r3, r8
    c720:	e5d4900c 	ldrb	r9, [r4, #12]
    c724:	e3a02004 	mov	r2, #4
    c728:	e5d4600b 	ldrb	r6, [r4, #11]
    c72c:	e1a01007 	mov	r1, r7
    c730:	e58de040 	str	lr, [sp, #64]	; 0x40
    c734:	e2844010 	add	r4, r4, #16
    c738:	e554e006 	ldrb	lr, [r4, #-6]
    c73c:	e58db03c 	str	fp, [sp, #60]	; 0x3c
    c740:	e554b007 	ldrb	fp, [r4, #-7]
    c744:	e58da038 	str	sl, [sp, #56]	; 0x38
    c748:	e554a008 	ldrb	sl, [r4, #-8]
    c74c:	e58d9034 	str	r9, [sp, #52]	; 0x34
    c750:	e5549009 	ldrb	r9, [r4, #-9]
    c754:	e58d6030 	str	r6, [sp, #48]	; 0x30
    c758:	e554600a 	ldrb	r6, [r4, #-10]
    c75c:	e58de02c 	str	lr, [sp, #44]	; 0x2c
    c760:	e554e00b 	ldrb	lr, [r4, #-11]
    c764:	e58db028 	str	fp, [sp, #40]	; 0x28
    c768:	e554b00c 	ldrb	fp, [r4, #-12]
    c76c:	e58da024 	str	sl, [sp, #36]	; 0x24
    c770:	e554a00d 	ldrb	sl, [r4, #-13]
    c774:	e58d9020 	str	r9, [sp, #32]
    c778:	e554900e 	ldrb	r9, [r4, #-14]
    c77c:	e58d601c 	str	r6, [sp, #28]
    c780:	e554600f 	ldrb	r6, [r4, #-15]
    c784:	e58de018 	str	lr, [sp, #24]
    c788:	e554e010 	ldrb	lr, [r4, #-16]
    c78c:	e58db014 	str	fp, [sp, #20]
    c790:	e58da010 	str	sl, [sp, #16]
    c794:	e58d900c 	str	r9, [sp, #12]
    c798:	e58d6008 	str	r6, [sp, #8]
    c79c:	e88d5000 	stm	sp, {ip, lr}
    c7a0:	eb0001d4 	bl	cef8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c7a4:	e355000f 	cmp	r5, #15
    c7a8:	8a000001 	bhi	c7b4 <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
    c7ac:	e28dd04c 	add	sp, sp, #76	; 0x4c
    c7b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c7b4:	e2555010 	subs	r5, r5, #16
    c7b8:	1affffd2 	bne	c708 <debug_hexdump(void const*, unsigned int, char const*)+0x50>
    c7bc:	e28dd04c 	add	sp, sp, #76	; 0x4c
    c7c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c7c4 <debug_stacktrace(unsigned int const*, char const*)>:
    c7c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c7c8:	e3510000 	cmp	r1, #0
    c7cc:	e30273b0 	movw	r7, #9136	; 0x23b0
    c7d0:	e3407005 	movt	r7, #5
    c7d4:	11a07001 	movne	r7, r1
    c7d8:	e3006504 	movw	r6, #1284	; 0x504
    c7dc:	e3406001 	movt	r6, #1
    c7e0:	e3028434 	movw	r8, #9268	; 0x2434
    c7e4:	e3408005 	movt	r8, #5
    c7e8:	e24dd008 	sub	sp, sp, #8
    c7ec:	e1a05000 	mov	r5, r0
    c7f0:	e3a04000 	mov	r4, #0
    c7f4:	ea000003 	b	c808 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    c7f8:	e2844001 	add	r4, r4, #1
    c7fc:	e2855004 	add	r5, r5, #4
    c800:	e3540040 	cmp	r4, #64	; 0x40
    c804:	0a000010 	beq	c84c <debug_stacktrace(unsigned int const*, char const*)+0x88>
    c808:	e5953000 	ldr	r3, [r5]
    c80c:	e3530902 	cmp	r3, #32768	; 0x8000
    c810:	3afffff8 	bcc	c7f8 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    c814:	e1530006 	cmp	r3, r6
    c818:	2afffff6 	bcs	c7f8 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    c81c:	eb0000d8 	bl	cb84 <CLogger::Get()>
    c820:	e5952000 	ldr	r2, [r5]
    c824:	e1a03008 	mov	r3, r8
    c828:	e58d4000 	str	r4, [sp]
    c82c:	e58d2004 	str	r2, [sp, #4]
    c830:	e1a01007 	mov	r1, r7
    c834:	e3a02004 	mov	r2, #4
    c838:	e2844001 	add	r4, r4, #1
    c83c:	eb0001ad 	bl	cef8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c840:	e3540040 	cmp	r4, #64	; 0x40
    c844:	e2855004 	add	r5, r5, #4
    c848:	1affffee 	bne	c808 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    c84c:	e28dd008 	add	sp, sp, #8
    c850:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c854 <CDeviceNameService::CDeviceNameService()>:
    c854:	e92d4070 	push	{r4, r5, r6, lr}
    c858:	e3025d88 	movw	r5, #11656	; 0x2d88
    c85c:	e3405005 	movt	r5, #5
    c860:	e3a03000 	mov	r3, #0
    c864:	e1a04000 	mov	r4, r0
    c868:	e5803004 	str	r3, [r0, #4]
    c86c:	e5952000 	ldr	r2, [r5]
    c870:	e5803000 	str	r3, [r0]
    c874:	e1520003 	cmp	r2, r3
    c878:	0a000005 	beq	c894 <CDeviceNameService::CDeviceNameService()+0x40>
    c87c:	e3021448 	movw	r1, #9288	; 0x2448
    c880:	e3401005 	movt	r1, #5
    c884:	e3020460 	movw	r0, #9312	; 0x2460
    c888:	e3400005 	movt	r0, #5
    c88c:	e3a0201e 	mov	r2, #30
    c890:	ebffff3c 	bl	c588 <assertion_failed>
    c894:	e5854000 	str	r4, [r5]
    c898:	e1a00004 	mov	r0, r4
    c89c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c8a0 <CDeviceNameService::~CDeviceNameService()>:
    c8a0:	e5903000 	ldr	r3, [r0]
    c8a4:	e92d4070 	push	{r4, r5, r6, lr}
    c8a8:	e1a05000 	mov	r5, r0
    c8ac:	e3530000 	cmp	r3, #0
    c8b0:	0a00000d 	beq	c8ec <CDeviceNameService::~CDeviceNameService()+0x4c>
    c8b4:	e3a06000 	mov	r6, #0
    c8b8:	e5930004 	ldr	r0, [r3, #4]
    c8bc:	e5934000 	ldr	r4, [r3]
    c8c0:	e3500000 	cmp	r0, #0
    c8c4:	0a000000 	beq	c8cc <CDeviceNameService::~CDeviceNameService()+0x2c>
    c8c8:	ebfff584 	bl	9ee0 <operator delete[](void*)>
    c8cc:	e5953000 	ldr	r3, [r5]
    c8d0:	e1a00003 	mov	r0, r3
    c8d4:	e5836004 	str	r6, [r3, #4]
    c8d8:	e5836008 	str	r6, [r3, #8]
    c8dc:	ebfff57e 	bl	9edc <operator delete(void*)>
    c8e0:	e2543000 	subs	r3, r4, #0
    c8e4:	e5854000 	str	r4, [r5]
    c8e8:	1afffff2 	bne	c8b8 <CDeviceNameService::~CDeviceNameService()+0x18>
    c8ec:	e3023d88 	movw	r3, #11656	; 0x2d88
    c8f0:	e3403005 	movt	r3, #5
    c8f4:	e3a02000 	mov	r2, #0
    c8f8:	e1a00005 	mov	r0, r5
    c8fc:	e5832000 	str	r2, [r3]
    c900:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c904 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
    c904:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c908:	e1a08003 	mov	r8, r3
    c90c:	e5903004 	ldr	r3, [r0, #4]
    c910:	e1a05000 	mov	r5, r0
    c914:	e1a06001 	mov	r6, r1
    c918:	e3530000 	cmp	r3, #0
    c91c:	e1a07002 	mov	r7, r2
    c920:	1a000017 	bne	c984 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x80>
    c924:	e3a00010 	mov	r0, #16
    c928:	ebfff569 	bl	9ed4 <operator new(unsigned int)>
    c92c:	e3560000 	cmp	r6, #0
    c930:	e1a04000 	mov	r4, r0
    c934:	0a00001b 	beq	c9a8 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xa4>
    c938:	e1a00006 	mov	r0, r6
    c93c:	eb000cfa 	bl	fd2c <strlen>
    c940:	e2800001 	add	r0, r0, #1
    c944:	ebfff563 	bl	9ed8 <operator new[](unsigned int)>
    c948:	e1a01006 	mov	r1, r6
    c94c:	e5840004 	str	r0, [r4, #4]
    c950:	eb000d1a 	bl	fdc0 <strcpy>
    c954:	e3570000 	cmp	r7, #0
    c958:	0a00000b 	beq	c98c <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x88>
    c95c:	e5952004 	ldr	r2, [r5, #4]
    c960:	e5953000 	ldr	r3, [r5]
    c964:	e3520000 	cmp	r2, #0
    c968:	e5847008 	str	r7, [r4, #8]
    c96c:	e584800c 	str	r8, [r4, #12]
    c970:	e5843000 	str	r3, [r4]
    c974:	e5854000 	str	r4, [r5]
    c978:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    c97c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    c980:	eafff564 	b	9f18 <LeaveCritical>
    c984:	ebfff556 	bl	9ee4 <EnterCritical>
    c988:	eaffffe5 	b	c924 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x20>
    c98c:	e3021448 	movw	r1, #9288	; 0x2448
    c990:	e3401005 	movt	r1, #5
    c994:	e3020478 	movw	r0, #9336	; 0x2478
    c998:	e3400005 	movt	r0, #5
    c99c:	e3a0203f 	mov	r2, #63	; 0x3f
    c9a0:	ebfffef8 	bl	c588 <assertion_failed>
    c9a4:	eaffffec 	b	c95c <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x58>
    c9a8:	e3021448 	movw	r1, #9288	; 0x2448
    c9ac:	e3401005 	movt	r1, #5
    c9b0:	e302046c 	movw	r0, #9324	; 0x246c
    c9b4:	e3400005 	movt	r0, #5
    c9b8:	e3a0203a 	mov	r2, #58	; 0x3a
    c9bc:	ebfffef1 	bl	c588 <assertion_failed>
    c9c0:	eaffffdc 	b	c938 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x34>

0000c9c4 <CDeviceNameService::GetDevice(char const*, int)>:
    c9c4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c9c8:	e2515000 	subs	r5, r1, #0
    c9cc:	e1a07000 	mov	r7, r0
    c9d0:	e1a06002 	mov	r6, r2
    c9d4:	0a000037 	beq	cab8 <CDeviceNameService::GetDevice(char const*, int)+0xf4>
    c9d8:	e5973004 	ldr	r3, [r7, #4]
    c9dc:	e3530000 	cmp	r3, #0
    c9e0:	1a00001a 	bne	ca50 <CDeviceNameService::GetDevice(char const*, int)+0x8c>
    c9e4:	e5974000 	ldr	r4, [r7]
    c9e8:	e3540000 	cmp	r4, #0
    c9ec:	0a00001f 	beq	ca70 <CDeviceNameService::GetDevice(char const*, int)+0xac>
    c9f0:	e3029448 	movw	r9, #9288	; 0x2448
    c9f4:	e3409005 	movt	r9, #5
    c9f8:	e3028488 	movw	r8, #9352	; 0x2488
    c9fc:	e3408005 	movt	r8, #5
    ca00:	ea000009 	b	ca2c <CDeviceNameService::GetDevice(char const*, int)+0x68>
    ca04:	e1a00005 	mov	r0, r5
    ca08:	eb000cd1 	bl	fd54 <strcmp>
    ca0c:	e3500000 	cmp	r0, #0
    ca10:	1a000002 	bne	ca20 <CDeviceNameService::GetDevice(char const*, int)+0x5c>
    ca14:	e594300c 	ldr	r3, [r4, #12]
    ca18:	e1530006 	cmp	r3, r6
    ca1c:	0a000016 	beq	ca7c <CDeviceNameService::GetDevice(char const*, int)+0xb8>
    ca20:	e5944000 	ldr	r4, [r4]
    ca24:	e3540000 	cmp	r4, #0
    ca28:	0a00000c 	beq	ca60 <CDeviceNameService::GetDevice(char const*, int)+0x9c>
    ca2c:	e5941004 	ldr	r1, [r4, #4]
    ca30:	e3510000 	cmp	r1, #0
    ca34:	1afffff2 	bne	ca04 <CDeviceNameService::GetDevice(char const*, int)+0x40>
    ca38:	e1a01009 	mov	r1, r9
    ca3c:	e3a02053 	mov	r2, #83	; 0x53
    ca40:	e1a00008 	mov	r0, r8
    ca44:	ebfffecf 	bl	c588 <assertion_failed>
    ca48:	e5941004 	ldr	r1, [r4, #4]
    ca4c:	eaffffec 	b	ca04 <CDeviceNameService::GetDevice(char const*, int)+0x40>
    ca50:	ebfff523 	bl	9ee4 <EnterCritical>
    ca54:	e5974000 	ldr	r4, [r7]
    ca58:	e3540000 	cmp	r4, #0
    ca5c:	1affffe3 	bne	c9f0 <CDeviceNameService::GetDevice(char const*, int)+0x2c>
    ca60:	e5973004 	ldr	r3, [r7, #4]
    ca64:	e3530000 	cmp	r3, #0
    ca68:	0a000000 	beq	ca70 <CDeviceNameService::GetDevice(char const*, int)+0xac>
    ca6c:	ebfff529 	bl	9f18 <LeaveCritical>
    ca70:	e3a04000 	mov	r4, #0
    ca74:	e1a00004 	mov	r0, r4
    ca78:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ca7c:	e5973004 	ldr	r3, [r7, #4]
    ca80:	e5944008 	ldr	r4, [r4, #8]
    ca84:	e3530000 	cmp	r3, #0
    ca88:	1a000008 	bne	cab0 <CDeviceNameService::GetDevice(char const*, int)+0xec>
    ca8c:	e3540000 	cmp	r4, #0
    ca90:	1afffff7 	bne	ca74 <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    ca94:	e3021448 	movw	r1, #9288	; 0x2448
    ca98:	e3401005 	movt	r1, #5
    ca9c:	e302049c 	movw	r0, #9372	; 0x249c
    caa0:	e3400005 	movt	r0, #5
    caa4:	e3a0205b 	mov	r2, #91	; 0x5b
    caa8:	ebfffeb6 	bl	c588 <assertion_failed>
    caac:	eafffff0 	b	ca74 <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    cab0:	ebfff518 	bl	9f18 <LeaveCritical>
    cab4:	eafffff4 	b	ca8c <CDeviceNameService::GetDevice(char const*, int)+0xc8>
    cab8:	e3021448 	movw	r1, #9288	; 0x2448
    cabc:	e3401005 	movt	r1, #5
    cac0:	e302046c 	movw	r0, #9324	; 0x246c
    cac4:	e3400005 	movt	r0, #5
    cac8:	e3a0204c 	mov	r2, #76	; 0x4c
    cacc:	ebfffead 	bl	c588 <assertion_failed>
    cad0:	eaffffc0 	b	c9d8 <CDeviceNameService::GetDevice(char const*, int)+0x14>

0000cad4 <CDeviceNameService::Get()>:
    cad4:	e92d4010 	push	{r4, lr}
    cad8:	e3024d88 	movw	r4, #11656	; 0x2d88
    cadc:	e3404005 	movt	r4, #5
    cae0:	e5940000 	ldr	r0, [r4]
    cae4:	e3500000 	cmp	r0, #0
    cae8:	18bd8010 	popne	{r4, pc}
    caec:	e3a02069 	mov	r2, #105	; 0x69
    caf0:	e3021448 	movw	r1, #9288	; 0x2448
    caf4:	e3401005 	movt	r1, #5
    caf8:	e30204ac 	movw	r0, #9388	; 0x24ac
    cafc:	e3400005 	movt	r0, #5
    cb00:	ebfffea0 	bl	c588 <assertion_failed>
    cb04:	e5940000 	ldr	r0, [r4]
    cb08:	e8bd8010 	pop	{r4, pc}

0000cb0c <CLogger::CLogger(unsigned int, CTimer*)>:
    cb0c:	e92d4010 	push	{r4, lr}
    cb10:	e1a04000 	mov	r4, r0
    cb14:	e3a03000 	mov	r3, #0
    cb18:	e3a0c001 	mov	ip, #1
    cb1c:	e3a00901 	mov	r0, #16384	; 0x4000
    cb20:	e5843008 	str	r3, [r4, #8]
    cb24:	e584300c 	str	r3, [r4, #12]
    cb28:	e5843010 	str	r3, [r4, #16]
    cb2c:	e5843014 	str	r3, [r4, #20]
    cb30:	e8840006 	stm	r4, {r1, r2}
    cb34:	e584c018 	str	ip, [r4, #24]
    cb38:	ebfff4e6 	bl	9ed8 <operator new[](unsigned int)>
    cb3c:	e3023d8c 	movw	r3, #11660	; 0x2d8c
    cb40:	e3403005 	movt	r3, #5
    cb44:	e584000c 	str	r0, [r4, #12]
    cb48:	e1a00004 	mov	r0, r4
    cb4c:	e5834000 	str	r4, [r3]
    cb50:	e8bd8010 	pop	{r4, pc}

0000cb54 <CLogger::~CLogger()>:
    cb54:	e92d4010 	push	{r4, lr}
    cb58:	e1a04000 	mov	r4, r0
    cb5c:	e590000c 	ldr	r0, [r0, #12]
    cb60:	e3a02000 	mov	r2, #0
    cb64:	e3023d8c 	movw	r3, #11660	; 0x2d8c
    cb68:	e3403005 	movt	r3, #5
    cb6c:	e1500002 	cmp	r0, r2
    cb70:	e5832000 	str	r2, [r3]
    cb74:	0a000000 	beq	cb7c <CLogger::~CLogger()+0x28>
    cb78:	ebfff4d8 	bl	9ee0 <operator delete[](void*)>
    cb7c:	e1a00004 	mov	r0, r4
    cb80:	e8bd8010 	pop	{r4, pc}

0000cb84 <CLogger::Get()>:
    cb84:	e3023d8c 	movw	r3, #11660	; 0x2d8c
    cb88:	e3403005 	movt	r3, #5
    cb8c:	e5930000 	ldr	r0, [r3]
    cb90:	e12fff1e 	bx	lr

0000cb94 <CLogger::Write(char const*)>:
    cb94:	e92d4070 	push	{r4, r5, r6, lr}
    cb98:	e1a04000 	mov	r4, r0
    cb9c:	e1a00001 	mov	r0, r1
    cba0:	e1a05001 	mov	r5, r1
    cba4:	eb000c60 	bl	fd2c <strlen>
    cba8:	e5943008 	ldr	r3, [r4, #8]
    cbac:	e1a02000 	mov	r2, r0
    cbb0:	e1a06000 	mov	r6, r0
    cbb4:	e1a01005 	mov	r1, r5
    cbb8:	e1a00003 	mov	r0, r3
    cbbc:	e5933000 	ldr	r3, [r3]
    cbc0:	e593300c 	ldr	r3, [r3, #12]
    cbc4:	e12fff33 	blx	r3
    cbc8:	e5943018 	ldr	r3, [r4, #24]
    cbcc:	e3530000 	cmp	r3, #0
    cbd0:	1a000017 	bne	cc34 <CLogger::Write(char const*)+0xa0>
    cbd4:	e0850006 	add	r0, r5, r6
    cbd8:	e1550000 	cmp	r5, r0
    cbdc:	0a00000f 	beq	cc20 <CLogger::Write(char const*)+0x8c>
    cbe0:	e0d530d1 	ldrsb	r3, [r5], #1
    cbe4:	e353000d 	cmp	r3, #13
    cbe8:	0afffffa 	beq	cbd8 <CLogger::Write(char const*)+0x44>
    cbec:	e5941010 	ldr	r1, [r4, #16]
    cbf0:	e594c00c 	ldr	ip, [r4, #12]
    cbf4:	e7cc3001 	strb	r3, [ip, r1]
    cbf8:	e5943010 	ldr	r3, [r4, #16]
    cbfc:	e5941014 	ldr	r1, [r4, #20]
    cc00:	e2833001 	add	r3, r3, #1
    cc04:	e7ed3053 	ubfx	r3, r3, #0, #14
    cc08:	e1530001 	cmp	r3, r1
    cc0c:	e5843010 	str	r3, [r4, #16]
    cc10:	1afffff0 	bne	cbd8 <CLogger::Write(char const*)+0x44>
    cc14:	e2433001 	sub	r3, r3, #1
    cc18:	e7ed3053 	ubfx	r3, r3, #0, #14
    cc1c:	e5843010 	str	r3, [r4, #16]
    cc20:	e5943018 	ldr	r3, [r4, #24]
    cc24:	e3530000 	cmp	r3, #0
    cc28:	08bd8070 	popeq	{r4, r5, r6, pc}
    cc2c:	e8bd4070 	pop	{r4, r5, r6, lr}
    cc30:	eafff4b8 	b	9f18 <LeaveCritical>
    cc34:	ebfff4aa 	bl	9ee4 <EnterCritical>
    cc38:	eaffffe5 	b	cbd4 <CLogger::Write(char const*)+0x40>

0000cc3c <CLogger::Read(void*, unsigned int)>:
    cc3c:	e5903018 	ldr	r3, [r0, #24]
    cc40:	e92d4070 	push	{r4, r5, r6, lr}
    cc44:	e1a04000 	mov	r4, r0
    cc48:	e3530000 	cmp	r3, #0
    cc4c:	e1a05001 	mov	r5, r1
    cc50:	e1a06002 	mov	r6, r2
    cc54:	1a00001b 	bne	ccc8 <CLogger::Read(void*, unsigned int)+0x8c>
    cc58:	e5902010 	ldr	r2, [r0, #16]
    cc5c:	e5903014 	ldr	r3, [r0, #20]
    cc60:	e1520003 	cmp	r2, r3
    cc64:	0a000020 	beq	ccec <CLogger::Read(void*, unsigned int)+0xb0>
    cc68:	e1a01005 	mov	r1, r5
    cc6c:	e3a05000 	mov	r5, #0
    cc70:	ea00000a 	b	cca0 <CLogger::Read(void*, unsigned int)+0x64>
    cc74:	e594000c 	ldr	r0, [r4, #12]
    cc78:	e2855001 	add	r5, r5, #1
    cc7c:	e19030d3 	ldrsb	r3, [r0, r3]
    cc80:	e4c13001 	strb	r3, [r1], #1
    cc84:	e5943014 	ldr	r3, [r4, #20]
    cc88:	e5940010 	ldr	r0, [r4, #16]
    cc8c:	e2833001 	add	r3, r3, #1
    cc90:	e7ed3053 	ubfx	r3, r3, #0, #14
    cc94:	e1530000 	cmp	r3, r0
    cc98:	e5843014 	str	r3, [r4, #20]
    cc9c:	0a000001 	beq	cca8 <CLogger::Read(void*, unsigned int)+0x6c>
    cca0:	e1550006 	cmp	r5, r6
    cca4:	1afffff2 	bne	cc74 <CLogger::Read(void*, unsigned int)+0x38>
    cca8:	e5943018 	ldr	r3, [r4, #24]
    ccac:	e3530000 	cmp	r3, #0
    ccb0:	1a000001 	bne	ccbc <CLogger::Read(void*, unsigned int)+0x80>
    ccb4:	e1a00005 	mov	r0, r5
    ccb8:	e8bd8070 	pop	{r4, r5, r6, pc}
    ccbc:	ebfff495 	bl	9f18 <LeaveCritical>
    ccc0:	e1a00005 	mov	r0, r5
    ccc4:	e8bd8070 	pop	{r4, r5, r6, pc}
    ccc8:	ebfff485 	bl	9ee4 <EnterCritical>
    cccc:	e5942010 	ldr	r2, [r4, #16]
    ccd0:	e5943014 	ldr	r3, [r4, #20]
    ccd4:	e1520003 	cmp	r2, r3
    ccd8:	1affffe2 	bne	cc68 <CLogger::Read(void*, unsigned int)+0x2c>
    ccdc:	e5943018 	ldr	r3, [r4, #24]
    cce0:	e3530000 	cmp	r3, #0
    cce4:	0a000000 	beq	ccec <CLogger::Read(void*, unsigned int)+0xb0>
    cce8:	ebfff48a 	bl	9f18 <LeaveCritical>
    ccec:	e3e05000 	mvn	r5, #0
    ccf0:	e1a00005 	mov	r0, r5
    ccf4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ccf8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    ccf8:	e590c000 	ldr	ip, [r0]
    ccfc:	e152000c 	cmp	r2, ip
    cd00:	812fff1e 	bxhi	lr
    cd04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cd08:	e1a05002 	mov	r5, r2
    cd0c:	e1a04000 	mov	r4, r0
    cd10:	e24dd020 	sub	sp, sp, #32
    cd14:	e1a07003 	mov	r7, r3
    cd18:	e1a0000d 	mov	r0, sp
    cd1c:	e1a06001 	mov	r6, r1
    cd20:	eb00017c 	bl	d318 <CString::CString()>
    cd24:	e3550000 	cmp	r5, #0
    cd28:	0a000049 	beq	ce54 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
    cd2c:	e5940004 	ldr	r0, [r4, #4]
    cd30:	e3500000 	cmp	r0, #0
    cd34:	0a000032 	beq	ce04 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    cd38:	ebfff563 	bl	a2cc <CTimer::GetTimeString()>
    cd3c:	e2508000 	subs	r8, r0, #0
    cd40:	0a00000b 	beq	cd74 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
    cd44:	eb000189 	bl	d370 <CString::operator char const*() const>
    cd48:	e1a01000 	mov	r1, r0
    cd4c:	e1a0000d 	mov	r0, sp
    cd50:	eb0001a1 	bl	d3dc <CString::Append(char const*)>
    cd54:	e1a0000d 	mov	r0, sp
    cd58:	e30214c0 	movw	r1, #9408	; 0x24c0
    cd5c:	e3401005 	movt	r1, #5
    cd60:	eb00019d 	bl	d3dc <CString::Append(char const*)>
    cd64:	e5983000 	ldr	r3, [r8]
    cd68:	e1a00008 	mov	r0, r8
    cd6c:	e5933004 	ldr	r3, [r3, #4]
    cd70:	e12fff33 	blx	r3
    cd74:	e1a01006 	mov	r1, r6
    cd78:	e1a0000d 	mov	r0, sp
    cd7c:	eb000196 	bl	d3dc <CString::Append(char const*)>
    cd80:	e28d6010 	add	r6, sp, #16
    cd84:	e1a0000d 	mov	r0, sp
    cd88:	e30214c4 	movw	r1, #9412	; 0x24c4
    cd8c:	e3401005 	movt	r1, #5
    cd90:	eb000191 	bl	d3dc <CString::Append(char const*)>
    cd94:	e1a00006 	mov	r0, r6
    cd98:	eb00015e 	bl	d318 <CString::CString()>
    cd9c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    cda0:	e1a01007 	mov	r1, r7
    cda4:	e1a00006 	mov	r0, r6
    cda8:	eb000292 	bl	d7f8 <CString::FormatV(char const*, std::__va_list)>
    cdac:	e1a00006 	mov	r0, r6
    cdb0:	eb00016e 	bl	d370 <CString::operator char const*() const>
    cdb4:	e1a01000 	mov	r1, r0
    cdb8:	e1a0000d 	mov	r0, sp
    cdbc:	eb000186 	bl	d3dc <CString::Append(char const*)>
    cdc0:	e3550000 	cmp	r5, #0
    cdc4:	0a00003c 	beq	cebc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    cdc8:	e1a0000d 	mov	r0, sp
    cdcc:	e30214d0 	movw	r1, #9424	; 0x24d0
    cdd0:	e3401005 	movt	r1, #5
    cdd4:	eb000180 	bl	d3dc <CString::Append(char const*)>
    cdd8:	e1a0000d 	mov	r0, sp
    cddc:	eb000163 	bl	d370 <CString::operator char const*() const>
    cde0:	e1a01000 	mov	r1, r0
    cde4:	e1a00004 	mov	r0, r4
    cde8:	ebffff69 	bl	cb94 <CLogger::Write(char const*)>
    cdec:	e1a00006 	mov	r0, r6
    cdf0:	eb000116 	bl	d250 <CString::~CString()>
    cdf4:	e1a0000d 	mov	r0, sp
    cdf8:	eb000114 	bl	d250 <CString::~CString()>
    cdfc:	e28dd020 	add	sp, sp, #32
    ce00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ce04:	e1a01006 	mov	r1, r6
    ce08:	e1a0000d 	mov	r0, sp
    ce0c:	eb000172 	bl	d3dc <CString::Append(char const*)>
    ce10:	e28d6010 	add	r6, sp, #16
    ce14:	e1a0000d 	mov	r0, sp
    ce18:	e30214c4 	movw	r1, #9412	; 0x24c4
    ce1c:	e3401005 	movt	r1, #5
    ce20:	eb00016d 	bl	d3dc <CString::Append(char const*)>
    ce24:	e1a00006 	mov	r0, r6
    ce28:	eb00013a 	bl	d318 <CString::CString()>
    ce2c:	e1a01007 	mov	r1, r7
    ce30:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    ce34:	e1a00006 	mov	r0, r6
    ce38:	eb00026e 	bl	d7f8 <CString::FormatV(char const*, std::__va_list)>
    ce3c:	e1a00006 	mov	r0, r6
    ce40:	eb00014a 	bl	d370 <CString::operator char const*() const>
    ce44:	e1a01000 	mov	r1, r0
    ce48:	e1a0000d 	mov	r0, sp
    ce4c:	eb000162 	bl	d3dc <CString::Append(char const*)>
    ce50:	eaffffdc 	b	cdc8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
    ce54:	e30214b8 	movw	r1, #9400	; 0x24b8
    ce58:	e3401005 	movt	r1, #5
    ce5c:	e1a0000d 	mov	r0, sp
    ce60:	eb000148 	bl	d388 <CString::operator=(char const*)>
    ce64:	e5940004 	ldr	r0, [r4, #4]
    ce68:	e3500000 	cmp	r0, #0
    ce6c:	1affffb1 	bne	cd38 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    ce70:	e1a01006 	mov	r1, r6
    ce74:	e1a0000d 	mov	r0, sp
    ce78:	eb000157 	bl	d3dc <CString::Append(char const*)>
    ce7c:	e28d6010 	add	r6, sp, #16
    ce80:	e1a0000d 	mov	r0, sp
    ce84:	e30214c4 	movw	r1, #9412	; 0x24c4
    ce88:	e3401005 	movt	r1, #5
    ce8c:	eb000152 	bl	d3dc <CString::Append(char const*)>
    ce90:	e1a00006 	mov	r0, r6
    ce94:	eb00011f 	bl	d318 <CString::CString()>
    ce98:	e1a01007 	mov	r1, r7
    ce9c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    cea0:	e1a00006 	mov	r0, r6
    cea4:	eb000253 	bl	d7f8 <CString::FormatV(char const*, std::__va_list)>
    cea8:	e1a00006 	mov	r0, r6
    ceac:	eb00012f 	bl	d370 <CString::operator char const*() const>
    ceb0:	e1a01000 	mov	r1, r0
    ceb4:	e1a0000d 	mov	r0, sp
    ceb8:	eb000147 	bl	d3dc <CString::Append(char const*)>
    cebc:	e1a0000d 	mov	r0, sp
    cec0:	e30214c8 	movw	r1, #9416	; 0x24c8
    cec4:	e3401005 	movt	r1, #5
    cec8:	eb000143 	bl	d3dc <CString::Append(char const*)>
    cecc:	e1a0000d 	mov	r0, sp
    ced0:	e30214d0 	movw	r1, #9424	; 0x24d0
    ced4:	e3401005 	movt	r1, #5
    ced8:	eb00013f 	bl	d3dc <CString::Append(char const*)>
    cedc:	e1a0000d 	mov	r0, sp
    cee0:	eb000122 	bl	d370 <CString::operator char const*() const>
    cee4:	e1a01000 	mov	r1, r0
    cee8:	e1a00004 	mov	r0, r4
    ceec:	ebffff28 	bl	cb94 <CLogger::Write(char const*)>
    cef0:	ebfff429 	bl	9f9c <halt>
    cef4:	eaffffbc 	b	cdec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

0000cef8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    cef8:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    cefc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    cf00:	e24dd010 	sub	sp, sp, #16
    cf04:	e28dc018 	add	ip, sp, #24
    cf08:	e59d3014 	ldr	r3, [sp, #20]
    cf0c:	e58dc000 	str	ip, [sp]
    cf10:	e58dc00c 	str	ip, [sp, #12]
    cf14:	ebffff77 	bl	ccf8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    cf18:	e28dd010 	add	sp, sp, #16
    cf1c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    cf20:	e28dd004 	add	sp, sp, #4
    cf24:	e12fff1e 	bx	lr

0000cf28 <CLogger::Initialize(CDevice*)>:
    cf28:	e92d4010 	push	{r4, lr}
    cf2c:	e1a04000 	mov	r4, r0
    cf30:	e24dd008 	sub	sp, sp, #8
    cf34:	e5801008 	str	r1, [r0, #8]
    cf38:	eb00082f 	bl	effc <CMachineInfo::Get()>
    cf3c:	eb0007bc 	bl	ee34 <CMachineInfo::GetMachineName() const>
    cf40:	e3a02003 	mov	r2, #3
    cf44:	e58d0000 	str	r0, [sp]
    cf48:	e30234d4 	movw	r3, #9428	; 0x24d4
    cf4c:	e3403005 	movt	r3, #5
    cf50:	e1a00004 	mov	r0, r4
    cf54:	e30214ec 	movw	r1, #9452	; 0x24ec
    cf58:	e3401005 	movt	r1, #5
    cf5c:	ebffffe5 	bl	cef8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cf60:	e3a00001 	mov	r0, #1
    cf64:	e28dd008 	add	sp, sp, #8
    cf68:	e8bd8010 	pop	{r4, pc}

0000cf6c <CSerialDevice::Write(void const*, unsigned int)>:
    cf6c:	e5903084 	ldr	r3, [r0, #132]	; 0x84
    cf70:	e92d4070 	push	{r4, r5, r6, lr}
    cf74:	e1a06000 	mov	r6, r0
    cf78:	e3530000 	cmp	r3, #0
    cf7c:	e1a04001 	mov	r4, r1
    cf80:	e1a05002 	mov	r5, r2
    cf84:	1a00001d 	bne	d000 <CSerialDevice::Write(void const*, unsigned int)+0x94>
    cf88:	e3540000 	cmp	r4, #0
    cf8c:	0a00001d 	beq	d008 <CSerialDevice::Write(void const*, unsigned int)+0x9c>
    cf90:	e3550000 	cmp	r5, #0
    cf94:	0a00000e 	beq	cfd4 <CSerialDevice::Write(void const*, unsigned int)+0x68>
    cf98:	e3a02a01 	mov	r2, #4096	; 0x1000
    cf9c:	e3432f20 	movt	r2, #16160	; 0x3f20
    cfa0:	e084c005 	add	ip, r4, r5
    cfa4:	e1a01004 	mov	r1, r4
    cfa8:	e3a0e00d 	mov	lr, #13
    cfac:	e5d10000 	ldrb	r0, [r1]
    cfb0:	e5923018 	ldr	r3, [r2, #24]
    cfb4:	e3130020 	tst	r3, #32
    cfb8:	1afffffc 	bne	cfb0 <CSerialDevice::Write(void const*, unsigned int)+0x44>
    cfbc:	e5820000 	str	r0, [r2]
    cfc0:	e4d13001 	ldrb	r3, [r1], #1
    cfc4:	e353000a 	cmp	r3, #10
    cfc8:	0a000007 	beq	cfec <CSerialDevice::Write(void const*, unsigned int)+0x80>
    cfcc:	e15c0001 	cmp	ip, r1
    cfd0:	1afffff5 	bne	cfac <CSerialDevice::Write(void const*, unsigned int)+0x40>
    cfd4:	e5963084 	ldr	r3, [r6, #132]	; 0x84
    cfd8:	e3530000 	cmp	r3, #0
    cfdc:	0a000000 	beq	cfe4 <CSerialDevice::Write(void const*, unsigned int)+0x78>
    cfe0:	ebfff3cc 	bl	9f18 <LeaveCritical>
    cfe4:	e1a00005 	mov	r0, r5
    cfe8:	e8bd8070 	pop	{r4, r5, r6, pc}
    cfec:	e5923018 	ldr	r3, [r2, #24]
    cff0:	e3130020 	tst	r3, #32
    cff4:	1afffffc 	bne	cfec <CSerialDevice::Write(void const*, unsigned int)+0x80>
    cff8:	e582e000 	str	lr, [r2]
    cffc:	eafffff2 	b	cfcc <CSerialDevice::Write(void const*, unsigned int)+0x60>
    d000:	ebfff3b7 	bl	9ee4 <EnterCritical>
    d004:	eaffffdf 	b	cf88 <CSerialDevice::Write(void const*, unsigned int)+0x1c>
    d008:	e3021510 	movw	r1, #9488	; 0x2510
    d00c:	e3401005 	movt	r1, #5
    d010:	e302051c 	movw	r0, #9500	; 0x251c
    d014:	e3400005 	movt	r0, #5
    d018:	e3a02090 	mov	r2, #144	; 0x90
    d01c:	ebfffd59 	bl	c588 <assertion_failed>
    d020:	eaffffda 	b	cf90 <CSerialDevice::Write(void const*, unsigned int)+0x24>

0000d024 <CSerialDevice::CSerialDevice()>:
    d024:	e92d4010 	push	{r4, lr}
    d028:	e1a04000 	mov	r4, r0
    d02c:	eb000d30 	bl	104f4 <CDevice::CDevice()>
    d030:	e1a00004 	mov	r0, r4
    d034:	e59fc05c 	ldr	ip, [pc, #92]	; d098 <CSerialDevice::CSerialDevice()+0x74>
    d038:	e3a03000 	mov	r3, #0
    d03c:	e3a01020 	mov	r1, #32
    d040:	e1a02003 	mov	r2, r3
    d044:	e480c004 	str	ip, [r0], #4
    d048:	ebfff281 	bl	9a54 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    d04c:	e3a03000 	mov	r3, #0
    d050:	e1a02003 	mov	r2, r3
    d054:	e2840024 	add	r0, r4, #36	; 0x24
    d058:	e3a01021 	mov	r1, #33	; 0x21
    d05c:	ebfff27c 	bl	9a54 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    d060:	e2840044 	add	r0, r4, #68	; 0x44
    d064:	e3a03000 	mov	r3, #0
    d068:	e3a02004 	mov	r2, #4
    d06c:	e3a0100e 	mov	r1, #14
    d070:	ebfff277 	bl	9a54 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    d074:	e2840064 	add	r0, r4, #100	; 0x64
    d078:	e3a03000 	mov	r3, #0
    d07c:	e3a02004 	mov	r2, #4
    d080:	e3a0100f 	mov	r1, #15
    d084:	ebfff272 	bl	9a54 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    d088:	e3a03001 	mov	r3, #1
    d08c:	e5843084 	str	r3, [r4, #132]	; 0x84
    d090:	e1a00004 	mov	r0, r4
    d094:	e8bd8010 	pop	{r4, pc}
    d098:	000524fc 	.word	0x000524fc

0000d09c <CSerialDevice::Initialize(unsigned int)>:
    d09c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d0a0:	e1a07001 	mov	r7, r1
    d0a4:	e1a05000 	mov	r5, r0
    d0a8:	eb0007d3 	bl	effc <CMachineInfo::Get()>
    d0ac:	e3a01002 	mov	r1, #2
    d0b0:	eb000775 	bl	ee8c <CMachineInfo::GetClockRate(unsigned int) const>
    d0b4:	e2508000 	subs	r8, r0, #0
    d0b8:	0a00003a 	beq	d1a8 <CSerialDevice::Initialize(unsigned int)+0x10c>
    d0bc:	e30c3594 	movw	r3, #50580	; 0xc594
    d0c0:	e340302d 	movt	r3, #45	; 0x2d
    d0c4:	e2472f4b 	sub	r2, r7, #300	; 0x12c
    d0c8:	e1520003 	cmp	r2, r3
    d0cc:	8a00002e 	bhi	d18c <CSerialDevice::Initialize(unsigned int)+0xf0>
    d0d0:	e1a04207 	lsl	r4, r7, #4
    d0d4:	e30f3ffe 	movw	r3, #65534	; 0xfffe
    d0d8:	e736f418 	udiv	r6, r8, r4
    d0dc:	e2462001 	sub	r2, r6, #1
    d0e0:	e1520003 	cmp	r2, r3
    d0e4:	8a000021 	bhi	d170 <CSerialDevice::Initialize(unsigned int)+0xd4>
    d0e8:	e0618694 	mls	r1, r4, r6, r8
    d0ec:	e1a01181 	lsl	r1, r1, #3
    d0f0:	e731f711 	udiv	r1, r1, r7
    d0f4:	e2014001 	and	r4, r1, #1
    d0f8:	e08440a1 	add	r4, r4, r1, lsr #1
    d0fc:	e354003f 	cmp	r4, #63	; 0x3f
    d100:	9a000005 	bls	d11c <CSerialDevice::Initialize(unsigned int)+0x80>
    d104:	e3021510 	movw	r1, #9488	; 0x2510
    d108:	e3401005 	movt	r1, #5
    d10c:	e3020588 	movw	r0, #9608	; 0x2588
    d110:	e3400005 	movt	r0, #5
    d114:	e3a02076 	mov	r2, #118	; 0x76
    d118:	ebfffd1a 	bl	c588 <assertion_failed>
    d11c:	e3a02a01 	mov	r2, #4096	; 0x1000
    d120:	e3432f20 	movt	r2, #16160	; 0x3f20
    d124:	e3003301 	movw	r3, #769	; 0x301
    d128:	e30007ff 	movw	r0, #2047	; 0x7ff
    d12c:	e3a07000 	mov	r7, #0
    d130:	e3a01060 	mov	r1, #96	; 0x60
    d134:	e5827038 	str	r7, [r2, #56]	; 0x38
    d138:	e5820044 	str	r0, [r2, #68]	; 0x44
    d13c:	e5826024 	str	r6, [r2, #36]	; 0x24
    d140:	e5824028 	str	r4, [r2, #40]	; 0x28
    d144:	e582102c 	str	r1, [r2, #44]	; 0x2c
    d148:	e5827034 	str	r7, [r2, #52]	; 0x34
    d14c:	e5823030 	str	r3, [r2, #48]	; 0x30
    d150:	ebfffe5f 	bl	cad4 <CDeviceNameService::Get()>
    d154:	e1a03007 	mov	r3, r7
    d158:	e1a02005 	mov	r2, r5
    d15c:	e302159c 	movw	r1, #9628	; 0x259c
    d160:	e3401005 	movt	r1, #5
    d164:	ebfffde6 	bl	c904 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    d168:	e3a00001 	mov	r0, #1
    d16c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d170:	e3021510 	movw	r1, #9488	; 0x2510
    d174:	e3401005 	movt	r1, #5
    d178:	e3020564 	movw	r0, #9572	; 0x2564
    d17c:	e3400005 	movt	r0, #5
    d180:	e3a02073 	mov	r2, #115	; 0x73
    d184:	ebfffcff 	bl	c588 <assertion_failed>
    d188:	eaffffd6 	b	d0e8 <CSerialDevice::Initialize(unsigned int)+0x4c>
    d18c:	e3021510 	movw	r1, #9488	; 0x2510
    d190:	e3401005 	movt	r1, #5
    d194:	e3020538 	movw	r0, #9528	; 0x2538
    d198:	e3400005 	movt	r0, #5
    d19c:	e3a02070 	mov	r2, #112	; 0x70
    d1a0:	ebfffcf8 	bl	c588 <assertion_failed>
    d1a4:	eaffffc9 	b	d0d0 <CSerialDevice::Initialize(unsigned int)+0x34>
    d1a8:	e3021510 	movw	r1, #9488	; 0x2510
    d1ac:	e3401005 	movt	r1, #5
    d1b0:	e3020528 	movw	r0, #9512	; 0x2528
    d1b4:	e3400005 	movt	r0, #5
    d1b8:	e3a0206e 	mov	r2, #110	; 0x6e
    d1bc:	ebfffcf1 	bl	c588 <assertion_failed>
    d1c0:	eaffffbd 	b	d0bc <CSerialDevice::Initialize(unsigned int)+0x20>

0000d1c4 <CSerialDevice::Write(unsigned char)>:
    d1c4:	e3a02a01 	mov	r2, #4096	; 0x1000
    d1c8:	e3432f20 	movt	r2, #16160	; 0x3f20
    d1cc:	e5923018 	ldr	r3, [r2, #24]
    d1d0:	e3130020 	tst	r3, #32
    d1d4:	1afffffc 	bne	d1cc <CSerialDevice::Write(unsigned char)+0x8>
    d1d8:	e5821000 	str	r1, [r2]
    d1dc:	e12fff1e 	bx	lr

0000d1e0 <CSerialDevice::~CSerialDevice()>:
    d1e0:	e3a03a01 	mov	r3, #4096	; 0x1000
    d1e4:	e3433f20 	movt	r3, #16160	; 0x3f20
    d1e8:	e59f1040 	ldr	r1, [pc, #64]	; d230 <CSerialDevice::~CSerialDevice()+0x50>
    d1ec:	e3a02000 	mov	r2, #0
    d1f0:	e92d4010 	push	{r4, lr}
    d1f4:	e1a04000 	mov	r4, r0
    d1f8:	e4801064 	str	r1, [r0], #100	; 0x64
    d1fc:	e5832038 	str	r2, [r3, #56]	; 0x38
    d200:	e5832030 	str	r2, [r3, #48]	; 0x30
    d204:	ebffef13 	bl	8e58 <CGPIOPin::~CGPIOPin()>
    d208:	e2840044 	add	r0, r4, #68	; 0x44
    d20c:	ebffef11 	bl	8e58 <CGPIOPin::~CGPIOPin()>
    d210:	e2840024 	add	r0, r4, #36	; 0x24
    d214:	ebffef0f 	bl	8e58 <CGPIOPin::~CGPIOPin()>
    d218:	e2840004 	add	r0, r4, #4
    d21c:	ebffef0d 	bl	8e58 <CGPIOPin::~CGPIOPin()>
    d220:	e1a00004 	mov	r0, r4
    d224:	eb000ca7 	bl	104c8 <CDevice::~CDevice()>
    d228:	e1a00004 	mov	r0, r4
    d22c:	e8bd8010 	pop	{r4, pc}
    d230:	000524fc 	.word	0x000524fc

0000d234 <CSerialDevice::~CSerialDevice()>:
    d234:	e92d4010 	push	{r4, lr}
    d238:	e1a04000 	mov	r4, r0
    d23c:	ebffffe7 	bl	d1e0 <CSerialDevice::~CSerialDevice()>
    d240:	e1a00004 	mov	r0, r4
    d244:	ebfff324 	bl	9edc <operator delete(void*)>
    d248:	e1a00004 	mov	r0, r4
    d24c:	e8bd8010 	pop	{r4, pc}

0000d250 <CString::~CString()>:
    d250:	e92d4010 	push	{r4, lr}
    d254:	e1a04000 	mov	r4, r0
    d258:	e5900004 	ldr	r0, [r0, #4]
    d25c:	e59f3014 	ldr	r3, [pc, #20]	; d278 <CString::~CString()+0x28>
    d260:	e3500000 	cmp	r0, #0
    d264:	e5843000 	str	r3, [r4]
    d268:	0a000000 	beq	d270 <CString::~CString()+0x20>
    d26c:	ebfff31b 	bl	9ee0 <operator delete[](void*)>
    d270:	e1a00004 	mov	r0, r4
    d274:	e8bd8010 	pop	{r4, pc}
    d278:	000525ac 	.word	0x000525ac

0000d27c <CString::~CString()>:
    d27c:	e92d4010 	push	{r4, lr}
    d280:	e1a04000 	mov	r4, r0
    d284:	e5900004 	ldr	r0, [r0, #4]
    d288:	e59f301c 	ldr	r3, [pc, #28]	; d2ac <CString::~CString()+0x30>
    d28c:	e3500000 	cmp	r0, #0
    d290:	e5843000 	str	r3, [r4]
    d294:	0a000000 	beq	d29c <CString::~CString()+0x20>
    d298:	ebfff310 	bl	9ee0 <operator delete[](void*)>
    d29c:	e1a00004 	mov	r0, r4
    d2a0:	ebfff30d 	bl	9edc <operator delete(void*)>
    d2a4:	e1a00004 	mov	r0, r4
    d2a8:	e8bd8010 	pop	{r4, pc}
    d2ac:	000525ac 	.word	0x000525ac

0000d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    d2b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d2b4:	e990002c 	ldmib	r0, {r2, r3, r5}
    d2b8:	e0455002 	sub	r5, r5, r2
    d2bc:	e0851001 	add	r1, r5, r1
    d2c0:	e2812001 	add	r2, r1, #1
    d2c4:	e1520003 	cmp	r2, r3
    d2c8:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    d2cc:	e1a04000 	mov	r4, r0
    d2d0:	e2816041 	add	r6, r1, #65	; 0x41
    d2d4:	e1a00006 	mov	r0, r6
    d2d8:	ebfff2fe 	bl	9ed8 <operator new[](unsigned int)>
    d2dc:	e3a02000 	mov	r2, #0
    d2e0:	e594300c 	ldr	r3, [r4, #12]
    d2e4:	e1a07000 	mov	r7, r0
    d2e8:	e5c32000 	strb	r2, [r3]
    d2ec:	e5941004 	ldr	r1, [r4, #4]
    d2f0:	eb000ab2 	bl	fdc0 <strcpy>
    d2f4:	e5940004 	ldr	r0, [r4, #4]
    d2f8:	e3500000 	cmp	r0, #0
    d2fc:	0a000000 	beq	d304 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    d300:	ebfff2f6 	bl	9ee0 <operator delete[](void*)>
    d304:	e0875005 	add	r5, r7, r5
    d308:	e5847004 	str	r7, [r4, #4]
    d30c:	e584500c 	str	r5, [r4, #12]
    d310:	e5846008 	str	r6, [r4, #8]
    d314:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d318 <CString::CString()>:
    d318:	e59f100c 	ldr	r1, [pc, #12]	; d32c <CString::CString()+0x14>
    d31c:	e3a02000 	mov	r2, #0
    d320:	e5802008 	str	r2, [r0, #8]
    d324:	e8800006 	stm	r0, {r1, r2}
    d328:	e12fff1e 	bx	lr
    d32c:	000525ac 	.word	0x000525ac

0000d330 <CString::CString(char const*)>:
    d330:	e92d4070 	push	{r4, r5, r6, lr}
    d334:	e1a04000 	mov	r4, r0
    d338:	e59f302c 	ldr	r3, [pc, #44]	; d36c <CString::CString(char const*)+0x3c>
    d33c:	e1a00001 	mov	r0, r1
    d340:	e1a05001 	mov	r5, r1
    d344:	e5843000 	str	r3, [r4]
    d348:	eb000a77 	bl	fd2c <strlen>
    d34c:	e2800001 	add	r0, r0, #1
    d350:	e5840008 	str	r0, [r4, #8]
    d354:	ebfff2df 	bl	9ed8 <operator new[](unsigned int)>
    d358:	e1a01005 	mov	r1, r5
    d35c:	e5840004 	str	r0, [r4, #4]
    d360:	eb000a96 	bl	fdc0 <strcpy>
    d364:	e1a00004 	mov	r0, r4
    d368:	e8bd8070 	pop	{r4, r5, r6, pc}
    d36c:	000525ac 	.word	0x000525ac

0000d370 <CString::operator char const*() const>:
    d370:	e5900004 	ldr	r0, [r0, #4]
    d374:	e30132a4 	movw	r3, #4772	; 0x12a4
    d378:	e3403005 	movt	r3, #5
    d37c:	e3500000 	cmp	r0, #0
    d380:	01a00003 	moveq	r0, r3
    d384:	e12fff1e 	bx	lr

0000d388 <CString::operator=(char const*)>:
    d388:	e92d4070 	push	{r4, r5, r6, lr}
    d38c:	e1a04000 	mov	r4, r0
    d390:	e5900004 	ldr	r0, [r0, #4]
    d394:	e1a05001 	mov	r5, r1
    d398:	e3500000 	cmp	r0, #0
    d39c:	0a000000 	beq	d3a4 <CString::operator=(char const*)+0x1c>
    d3a0:	ebfff2ce 	bl	9ee0 <operator delete[](void*)>
    d3a4:	e1a00005 	mov	r0, r5
    d3a8:	eb000a5f 	bl	fd2c <strlen>
    d3ac:	e2800001 	add	r0, r0, #1
    d3b0:	e5840008 	str	r0, [r4, #8]
    d3b4:	ebfff2c7 	bl	9ed8 <operator new[](unsigned int)>
    d3b8:	e1a01005 	mov	r1, r5
    d3bc:	e5840004 	str	r0, [r4, #4]
    d3c0:	eb000a7e 	bl	fdc0 <strcpy>
    d3c4:	e5940004 	ldr	r0, [r4, #4]
    d3c8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d3cc <CString::GetLength() const>:
    d3cc:	e5900004 	ldr	r0, [r0, #4]
    d3d0:	e3500000 	cmp	r0, #0
    d3d4:	012fff1e 	bxeq	lr
    d3d8:	ea000a53 	b	fd2c <strlen>

0000d3dc <CString::Append(char const*)>:
    d3dc:	e92d4070 	push	{r4, r5, r6, lr}
    d3e0:	e1a04000 	mov	r4, r0
    d3e4:	e5900004 	ldr	r0, [r0, #4]
    d3e8:	e3a03001 	mov	r3, #1
    d3ec:	e1a06001 	mov	r6, r1
    d3f0:	e3500000 	cmp	r0, #0
    d3f4:	e5843008 	str	r3, [r4, #8]
    d3f8:	0a000003 	beq	d40c <CString::Append(char const*)+0x30>
    d3fc:	eb000a4a 	bl	fd2c <strlen>
    d400:	e5943008 	ldr	r3, [r4, #8]
    d404:	e0830000 	add	r0, r3, r0
    d408:	e5840008 	str	r0, [r4, #8]
    d40c:	e1a00006 	mov	r0, r6
    d410:	eb000a45 	bl	fd2c <strlen>
    d414:	e5943008 	ldr	r3, [r4, #8]
    d418:	e0800003 	add	r0, r0, r3
    d41c:	e5840008 	str	r0, [r4, #8]
    d420:	ebfff2ac 	bl	9ed8 <operator new[](unsigned int)>
    d424:	e5941004 	ldr	r1, [r4, #4]
    d428:	e1a05000 	mov	r5, r0
    d42c:	e3510000 	cmp	r1, #0
    d430:	05c01000 	strbeq	r1, [r0]
    d434:	0a000004 	beq	d44c <CString::Append(char const*)+0x70>
    d438:	eb000a60 	bl	fdc0 <strcpy>
    d43c:	e5940004 	ldr	r0, [r4, #4]
    d440:	e3500000 	cmp	r0, #0
    d444:	0a000000 	beq	d44c <CString::Append(char const*)+0x70>
    d448:	ebfff2a4 	bl	9ee0 <operator delete[](void*)>
    d44c:	e1a01006 	mov	r1, r6
    d450:	e1a00005 	mov	r0, r5
    d454:	eb000a77 	bl	fe38 <strcat>
    d458:	e5845004 	str	r5, [r4, #4]
    d45c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d460 <CString::Compare(char const*) const>:
    d460:	e5900004 	ldr	r0, [r0, #4]
    d464:	ea000a3a 	b	fd54 <strcmp>

0000d468 <CString::Find(char) const>:
    d468:	e5902004 	ldr	r2, [r0, #4]
    d46c:	e1d230d0 	ldrsb	r3, [r2]
    d470:	e3530000 	cmp	r3, #0
    d474:	0a000009 	beq	d4a0 <CString::Find(char) const+0x38>
    d478:	e1510003 	cmp	r1, r3
    d47c:	e3a00000 	mov	r0, #0
    d480:	1a000002 	bne	d490 <CString::Find(char) const+0x28>
    d484:	ea000007 	b	d4a8 <CString::Find(char) const+0x40>
    d488:	e1530001 	cmp	r3, r1
    d48c:	012fff1e 	bxeq	lr
    d490:	e1f230d1 	ldrsb	r3, [r2, #1]!
    d494:	e2800001 	add	r0, r0, #1
    d498:	e3530000 	cmp	r3, #0
    d49c:	1afffff9 	bne	d488 <CString::Find(char) const+0x20>
    d4a0:	e3e00000 	mvn	r0, #0
    d4a4:	e12fff1e 	bx	lr
    d4a8:	e12fff1e 	bx	lr

0000d4ac <CString::PutChar(char, unsigned int)>:
    d4ac:	e92d4070 	push	{r4, r5, r6, lr}
    d4b0:	e2524000 	subs	r4, r2, #0
    d4b4:	08bd8070 	popeq	{r4, r5, r6, pc}
    d4b8:	e1a06001 	mov	r6, r1
    d4bc:	e1a01004 	mov	r1, r4
    d4c0:	e1a05000 	mov	r5, r0
    d4c4:	ebffff79 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d4c8:	e2443001 	sub	r3, r4, #1
    d4cc:	e595200c 	ldr	r2, [r5, #12]
    d4d0:	e2433001 	sub	r3, r3, #1
    d4d4:	e3730001 	cmn	r3, #1
    d4d8:	e2820001 	add	r0, r2, #1
    d4dc:	e585000c 	str	r0, [r5, #12]
    d4e0:	e5c26000 	strb	r6, [r2]
    d4e4:	1afffff8 	bne	d4cc <CString::PutChar(char, unsigned int)+0x20>
    d4e8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d4ec <CString::PutString(char const*)>:
    d4ec:	e92d4070 	push	{r4, r5, r6, lr}
    d4f0:	e1a04000 	mov	r4, r0
    d4f4:	e1a00001 	mov	r0, r1
    d4f8:	e1a05001 	mov	r5, r1
    d4fc:	eb000a0a 	bl	fd2c <strlen>
    d500:	e2506000 	subs	r6, r0, #0
    d504:	0a000002 	beq	d514 <CString::PutString(char const*)+0x28>
    d508:	e1a01006 	mov	r1, r6
    d50c:	e1a00004 	mov	r0, r4
    d510:	ebffff66 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d514:	e1a01005 	mov	r1, r5
    d518:	e594000c 	ldr	r0, [r4, #12]
    d51c:	eb000a27 	bl	fdc0 <strcpy>
    d520:	e594100c 	ldr	r1, [r4, #12]
    d524:	e0811006 	add	r1, r1, r6
    d528:	e584100c 	str	r1, [r4, #12]
    d52c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d530 <CString::ReserveSpace(unsigned int)>:
    d530:	e3510000 	cmp	r1, #0
    d534:	012fff1e 	bxeq	lr
    d538:	eaffff5c 	b	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000d53c <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    d53c:	e1510002 	cmp	r1, r2
    d540:	e92d4070 	push	{r4, r5, r6, lr}
    d544:	23a0c001 	movcs	ip, #1
    d548:	3a000018 	bcc	d5b0 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x74>
    d54c:	e00c0c92 	mul	ip, r2, ip
    d550:	e734fc11 	udiv	r4, r1, ip
    d554:	e1540002 	cmp	r4, r2
    d558:	e1a0e004 	mov	lr, r4
    d55c:	2afffffa 	bcs	d54c <CString::ntoa(char*, unsigned long, unsigned int, int)+0x10>
    d560:	e3530000 	cmp	r3, #0
    d564:	e1a05000 	mov	r5, r0
    d568:	13a06037 	movne	r6, #55	; 0x37
    d56c:	03a06057 	moveq	r6, #87	; 0x57
    d570:	ea000001 	b	d57c <CString::ntoa(char*, unsigned long, unsigned int, int)+0x40>
    d574:	e734fc11 	udiv	r4, r1, ip
    d578:	e1a0e004 	mov	lr, r4
    d57c:	e061149c 	mls	r1, ip, r4, r1
    d580:	e35e0009 	cmp	lr, #9
    d584:	e73cf21c 	udiv	ip, ip, r2
    d588:	e086300e 	add	r3, r6, lr
    d58c:	e28ee030 	add	lr, lr, #48	; 0x30
    d590:	e2855001 	add	r5, r5, #1
    d594:	e6af3073 	sxtb	r3, r3
    d598:	96af307e 	sxtbls	r3, lr
    d59c:	e35c0000 	cmp	ip, #0
    d5a0:	e5453001 	strb	r3, [r5, #-1]
    d5a4:	1afffff2 	bne	d574 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x38>
    d5a8:	e5c5c000 	strb	ip, [r5]
    d5ac:	e8bd8070 	pop	{r4, r5, r6, pc}
    d5b0:	e1a0e001 	mov	lr, r1
    d5b4:	e3a0c001 	mov	ip, #1
    d5b8:	e1a04001 	mov	r4, r1
    d5bc:	eaffffe7 	b	d560 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x24>

0000d5c0 <CString::ftoa(char*, double, unsigned int)>:
    d5c0:	eeb50bc0 	vcmpe.f64	d0, #0.0
    d5c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d5c8:	eddf0b88 	vldr	d16, [pc, #544]	; d7f0 <CString::ftoa(char*, double, unsigned int)+0x230>
    d5cc:	ed2d8b02 	vpush	{d8}
    d5d0:	eeb08b40 	vmov.f64	d8, d0
    d5d4:	e24dd010 	sub	sp, sp, #16
    d5d8:	e1a05000 	mov	r5, r0
    d5dc:	e1a06001 	mov	r6, r1
    d5e0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    d5e4:	4eb18b40 	vnegmi.f64	d8, d0
    d5e8:	43a0302d 	movmi	r3, #45	; 0x2d
    d5ec:	45c03000 	strbmi	r3, [r0]
    d5f0:	42807001 	addmi	r7, r0, #1
    d5f4:	51a07000 	movpl	r7, r0
    d5f8:	eeb48be0 	vcmpe.f64	d8, d16
    d5fc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    d600:	ca000068 	bgt	d7a8 <CString::ftoa(char*, double, unsigned int)+0x1e8>
    d604:	eefc7bc8 	vcvt.u32.f64	s15, d8
    d608:	ee174a90 	vmov	r4, s15
    d60c:	e3540009 	cmp	r4, #9
    d610:	83a03001 	movhi	r3, #1
    d614:	83a0100a 	movhi	r1, #10
    d618:	9a00006a 	bls	d7c8 <CString::ftoa(char*, double, unsigned int)+0x208>
    d61c:	e0030391 	mul	r3, r1, r3
    d620:	e732f314 	udiv	r2, r4, r3
    d624:	e3520009 	cmp	r2, #9
    d628:	8afffffb 	bhi	d61c <CString::ftoa(char*, double, unsigned int)+0x5c>
    d62c:	e30c8ccd 	movw	r8, #52429	; 0xcccd
    d630:	e34c8ccc 	movt	r8, #52428	; 0xcccc
    d634:	e1a0c007 	mov	ip, r7
    d638:	e1a01004 	mov	r1, r4
    d63c:	e73ef314 	udiv	lr, r4, r3
    d640:	ea000001 	b	d64c <CString::ftoa(char*, double, unsigned int)+0x8c>
    d644:	e73ef311 	udiv	lr, r1, r3
    d648:	e1a0200e 	mov	r2, lr
    d64c:	e3520009 	cmp	r2, #9
    d650:	e2820057 	add	r0, r2, #87	; 0x57
    d654:	e2822030 	add	r2, r2, #48	; 0x30
    d658:	e0611e93 	mls	r1, r3, lr, r1
    d65c:	e6af0070 	sxtb	r0, r0
    d660:	e28cc001 	add	ip, ip, #1
    d664:	96af0072 	sxtbls	r0, r2
    d668:	e0832398 	umull	r2, r3, r8, r3
    d66c:	e1b031a3 	lsrs	r3, r3, #3
    d670:	e54c0001 	strb	r0, [ip, #-1]
    d674:	1afffff2 	bne	d644 <CString::ftoa(char*, double, unsigned int)+0x84>
    d678:	e3560000 	cmp	r6, #0
    d67c:	e5cc3000 	strb	r3, [ip]
    d680:	1a000003 	bne	d694 <CString::ftoa(char*, double, unsigned int)+0xd4>
    d684:	e1a00005 	mov	r0, r5
    d688:	e28dd010 	add	sp, sp, #16
    d68c:	ecbd8b02 	vpop	{d8}
    d690:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d694:	e1a00007 	mov	r0, r7
    d698:	eb0009a3 	bl	fd2c <strlen>
    d69c:	e3560009 	cmp	r6, #9
    d6a0:	23a06009 	movcs	r6, #9
    d6a4:	e3a0302e 	mov	r3, #46	; 0x2e
    d6a8:	e3560001 	cmp	r6, #1
    d6ac:	e0878000 	add	r8, r7, r0
    d6b0:	e7c73000 	strb	r3, [r7, r0]
    d6b4:	e2887001 	add	r7, r8, #1
    d6b8:	0a000049 	beq	d7e4 <CString::ftoa(char*, double, unsigned int)+0x224>
    d6bc:	e3a0200a 	mov	r2, #10
    d6c0:	e3a03002 	mov	r3, #2
    d6c4:	e1a01002 	mov	r1, r2
    d6c8:	e2833001 	add	r3, r3, #1
    d6cc:	e0020291 	mul	r2, r1, r2
    d6d0:	e1530006 	cmp	r3, r6
    d6d4:	9afffffb 	bls	d6c8 <CString::ftoa(char*, double, unsigned int)+0x108>
    d6d8:	ee072a90 	vmov	s15, r2
    d6dc:	eef81b67 	vcvt.f64.u32	d17, s15
    d6e0:	ee074a90 	vmov	s15, r4
    d6e4:	eef80b67 	vcvt.f64.u32	d16, s15
    d6e8:	ee388b60 	vsub.f64	d8, d8, d16
    d6ec:	ee288b21 	vmul.f64	d8, d8, d17
    d6f0:	eefc7bc8 	vcvt.u32.f64	s15, d8
    d6f4:	ee17ca90 	vmov	ip, s15
    d6f8:	e35c0009 	cmp	ip, #9
    d6fc:	83a03001 	movhi	r3, #1
    d700:	83a0000a 	movhi	r0, #10
    d704:	9a000032 	bls	d7d4 <CString::ftoa(char*, double, unsigned int)+0x214>
    d708:	e0030390 	mul	r3, r0, r3
    d70c:	e731f31c 	udiv	r1, ip, r3
    d710:	e3510009 	cmp	r1, #9
    d714:	e1a02001 	mov	r2, r1
    d718:	8afffffa 	bhi	d708 <CString::ftoa(char*, double, unsigned int)+0x148>
    d71c:	e30c4ccd 	movw	r4, #52429	; 0xcccd
    d720:	e34c4ccc 	movt	r4, #52428	; 0xcccc
    d724:	e28de004 	add	lr, sp, #4
    d728:	ea000001 	b	d734 <CString::ftoa(char*, double, unsigned int)+0x174>
    d72c:	e731f31c 	udiv	r1, ip, r3
    d730:	e1a02001 	mov	r2, r1
    d734:	e3520009 	cmp	r2, #9
    d738:	e2820057 	add	r0, r2, #87	; 0x57
    d73c:	e2822030 	add	r2, r2, #48	; 0x30
    d740:	e06cc193 	mls	ip, r3, r1, ip
    d744:	e6af1070 	sxtb	r1, r0
    d748:	e28ee001 	add	lr, lr, #1
    d74c:	96af1072 	sxtbls	r1, r2
    d750:	e0832394 	umull	r2, r3, r4, r3
    d754:	e1b031a3 	lsrs	r3, r3, #3
    d758:	e54e1001 	strb	r1, [lr, #-1]
    d75c:	1afffff2 	bne	d72c <CString::ftoa(char*, double, unsigned int)+0x16c>
    d760:	e28d0004 	add	r0, sp, #4
    d764:	e5ce3000 	strb	r3, [lr]
    d768:	eb00096f 	bl	fd2c <strlen>
    d76c:	e0566000 	subs	r6, r6, r0
    d770:	0a000005 	beq	d78c <CString::ftoa(char*, double, unsigned int)+0x1cc>
    d774:	e3a02030 	mov	r2, #48	; 0x30
    d778:	e0883006 	add	r3, r8, r6
    d77c:	e5e82001 	strb	r2, [r8, #1]!
    d780:	e1580003 	cmp	r8, r3
    d784:	1afffffc 	bne	d77c <CString::ftoa(char*, double, unsigned int)+0x1bc>
    d788:	e0877006 	add	r7, r7, r6
    d78c:	e28d1004 	add	r1, sp, #4
    d790:	e1a00007 	mov	r0, r7
    d794:	eb000989 	bl	fdc0 <strcpy>
    d798:	e1a00005 	mov	r0, r5
    d79c:	e28dd010 	add	sp, sp, #16
    d7a0:	ecbd8b02 	vpop	{d8}
    d7a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d7a8:	e1a00007 	mov	r0, r7
    d7ac:	e30215b4 	movw	r1, #9652	; 0x25b4
    d7b0:	e3401005 	movt	r1, #5
    d7b4:	eb000981 	bl	fdc0 <strcpy>
    d7b8:	e1a00005 	mov	r0, r5
    d7bc:	e28dd010 	add	sp, sp, #16
    d7c0:	ecbd8b02 	vpop	{d8}
    d7c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d7c8:	ee172a90 	vmov	r2, s15
    d7cc:	e3a03001 	mov	r3, #1
    d7d0:	eaffff95 	b	d62c <CString::ftoa(char*, double, unsigned int)+0x6c>
    d7d4:	ee172a90 	vmov	r2, s15
    d7d8:	e3a03001 	mov	r3, #1
    d7dc:	ee171a90 	vmov	r1, s15
    d7e0:	eaffffcd 	b	d71c <CString::ftoa(char*, double, unsigned int)+0x15c>
    d7e4:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    d7e8:	eaffffbc 	b	d6e0 <CString::ftoa(char*, double, unsigned int)+0x120>
    d7ec:	e320f000 	nop	{0}
    d7f0:	ffe00000 	.word	0xffe00000
    d7f4:	41efffff 	.word	0x41efffff

0000d7f8 <CString::FormatV(char const*, std::__va_list)>:
    d7f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7fc:	e1a06000 	mov	r6, r0
    d800:	e5900004 	ldr	r0, [r0, #4]
    d804:	e24dd024 	sub	sp, sp, #36	; 0x24
    d808:	e1a05001 	mov	r5, r1
    d80c:	e3500000 	cmp	r0, #0
    d810:	e1a09002 	mov	r9, r2
    d814:	0a000000 	beq	d81c <CString::FormatV(char const*, std::__va_list)+0x24>
    d818:	ebfff1b0 	bl	9ee0 <operator delete[](void*)>
    d81c:	e3a00040 	mov	r0, #64	; 0x40
    d820:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    d824:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    d828:	e5860008 	str	r0, [r6, #8]
    d82c:	e58d3004 	str	r3, [sp, #4]
    d830:	ebfff1a8 	bl	9ed8 <operator new[](unsigned int)>
    d834:	e5860004 	str	r0, [r6, #4]
    d838:	e586000c 	str	r0, [r6, #12]
    d83c:	e1d540d0 	ldrsb	r4, [r5]
    d840:	e3540000 	cmp	r4, #0
    d844:	0a00008a 	beq	da74 <CString::FormatV(char const*, std::__va_list)+0x27c>
    d848:	e3540025 	cmp	r4, #37	; 0x25
    d84c:	13a01001 	movne	r1, #1
    d850:	11a00006 	movne	r0, r6
    d854:	1a000129 	bne	dd00 <CString::FormatV(char const*, std::__va_list)+0x508>
    d858:	e1d570d1 	ldrsb	r7, [r5, #1]
    d85c:	e3570025 	cmp	r7, #37	; 0x25
    d860:	0a00013c 	beq	dd58 <CString::FormatV(char const*, std::__va_list)+0x560>
    d864:	e357002d 	cmp	r7, #45	; 0x2d
    d868:	e3a04000 	mov	r4, #0
    d86c:	12855001 	addne	r5, r5, #1
    d870:	13a08000 	movne	r8, #0
    d874:	03a08001 	moveq	r8, #1
    d878:	01d570d2 	ldrsbeq	r7, [r5, #2]
    d87c:	02855002 	addeq	r5, r5, #2
    d880:	e3570030 	cmp	r7, #48	; 0x30
    d884:	03a03001 	moveq	r3, #1
    d888:	13a03000 	movne	r3, #0
    d88c:	058d3000 	streq	r3, [sp]
    d890:	01d570d1 	ldrsbeq	r7, [r5, #1]
    d894:	00855003 	addeq	r5, r5, r3
    d898:	158d3000 	strne	r3, [sp]
    d89c:	e2473030 	sub	r3, r7, #48	; 0x30
    d8a0:	e6ef3073 	uxtb	r3, r3
    d8a4:	e3530009 	cmp	r3, #9
    d8a8:	8a000007 	bhi	d8cc <CString::FormatV(char const*, std::__va_list)+0xd4>
    d8ac:	e3a0200a 	mov	r2, #10
    d8b0:	e0247492 	mla	r4, r2, r4, r7
    d8b4:	e1f570d1 	ldrsb	r7, [r5, #1]!
    d8b8:	e2473030 	sub	r3, r7, #48	; 0x30
    d8bc:	e2444030 	sub	r4, r4, #48	; 0x30
    d8c0:	e6ef3073 	uxtb	r3, r3
    d8c4:	e3530009 	cmp	r3, #9
    d8c8:	9afffff8 	bls	d8b0 <CString::FormatV(char const*, std::__va_list)+0xb8>
    d8cc:	e357002e 	cmp	r7, #46	; 0x2e
    d8d0:	0a000110 	beq	dd18 <CString::FormatV(char const*, std::__va_list)+0x520>
    d8d4:	e1d500d0 	ldrsb	r0, [r5]
    d8d8:	e3a01006 	mov	r1, #6
    d8dc:	e350006c 	cmp	r0, #108	; 0x6c
    d8e0:	03a02001 	moveq	r2, #1
    d8e4:	01d500d1 	ldrsbeq	r0, [r5, #1]
    d8e8:	00855002 	addeq	r5, r5, r2
    d8ec:	e2403058 	sub	r3, r0, #88	; 0x58
    d8f0:	e3530020 	cmp	r3, #32
    d8f4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    d8f8:	ea0000f5 	b	dcd4 <CString::FormatV(char const*, std::__va_list)+0x4dc>
    d8fc:	0000dc5c 	.word	0x0000dc5c
    d900:	0000dcd4 	.word	0x0000dcd4
    d904:	0000dcd4 	.word	0x0000dcd4
    d908:	0000dcd4 	.word	0x0000dcd4
    d90c:	0000dcd4 	.word	0x0000dcd4
    d910:	0000dcd4 	.word	0x0000dcd4
    d914:	0000dcd4 	.word	0x0000dcd4
    d918:	0000dcd4 	.word	0x0000dcd4
    d91c:	0000dcd4 	.word	0x0000dcd4
    d920:	0000dcd4 	.word	0x0000dcd4
    d924:	0000dcd4 	.word	0x0000dcd4
    d928:	0000dbf0 	.word	0x0000dbf0
    d92c:	0000daf4 	.word	0x0000daf4
    d930:	0000dcd4 	.word	0x0000dcd4
    d934:	0000da84 	.word	0x0000da84
    d938:	0000dcd4 	.word	0x0000dcd4
    d93c:	0000dcd4 	.word	0x0000dcd4
    d940:	0000dcd4 	.word	0x0000dcd4
    d944:	0000dcd4 	.word	0x0000dcd4
    d948:	0000dcd4 	.word	0x0000dcd4
    d94c:	0000dcd4 	.word	0x0000dcd4
    d950:	0000dcd4 	.word	0x0000dcd4
    d954:	0000dcd4 	.word	0x0000dcd4
    d958:	0000d980 	.word	0x0000d980
    d95c:	0000dcd4 	.word	0x0000dcd4
    d960:	0000dcd4 	.word	0x0000dcd4
    d964:	0000dcd4 	.word	0x0000dcd4
    d968:	0000dc6c 	.word	0x0000dc6c
    d96c:	0000dcd4 	.word	0x0000dcd4
    d970:	0000dc64 	.word	0x0000dc64
    d974:	0000dcd4 	.word	0x0000dcd4
    d978:	0000dcd4 	.word	0x0000dcd4
    d97c:	0000dc5c 	.word	0x0000dc5c
    d980:	e3a0a008 	mov	sl, #8
    d984:	e599c000 	ldr	ip, [r9]
    d988:	e2899004 	add	r9, r9, #4
    d98c:	e15c000a 	cmp	ip, sl
    d990:	23a03001 	movcs	r3, #1
    d994:	3a00016e 	bcc	df54 <CString::FormatV(char const*, std::__va_list)+0x75c>
    d998:	e003039a 	mul	r3, sl, r3
    d99c:	e731f31c 	udiv	r1, ip, r3
    d9a0:	e15a0001 	cmp	sl, r1
    d9a4:	e1a02001 	mov	r2, r1
    d9a8:	9afffffa 	bls	d998 <CString::FormatV(char const*, std::__va_list)+0x1a0>
    d9ac:	e3500058 	cmp	r0, #88	; 0x58
    d9b0:	e28d7008 	add	r7, sp, #8
    d9b4:	13a0b057 	movne	fp, #87	; 0x57
    d9b8:	03a0b037 	moveq	fp, #55	; 0x37
    d9bc:	e1a0e007 	mov	lr, r7
    d9c0:	ea000001 	b	d9cc <CString::FormatV(char const*, std::__va_list)+0x1d4>
    d9c4:	e731f31c 	udiv	r1, ip, r3
    d9c8:	e1a02001 	mov	r2, r1
    d9cc:	e06cc193 	mls	ip, r3, r1, ip
    d9d0:	e3520009 	cmp	r2, #9
    d9d4:	e733fa13 	udiv	r3, r3, sl
    d9d8:	e08b0002 	add	r0, fp, r2
    d9dc:	e2822030 	add	r2, r2, #48	; 0x30
    d9e0:	e28ee001 	add	lr, lr, #1
    d9e4:	e6af0070 	sxtb	r0, r0
    d9e8:	96af0072 	sxtbls	r0, r2
    d9ec:	e3530000 	cmp	r3, #0
    d9f0:	e54e0001 	strb	r0, [lr, #-1]
    d9f4:	1afffff2 	bne	d9c4 <CString::FormatV(char const*, std::__va_list)+0x1cc>
    d9f8:	e1a00007 	mov	r0, r7
    d9fc:	e5ce3000 	strb	r3, [lr]
    da00:	eb0008c9 	bl	fd2c <strlen>
    da04:	e3580000 	cmp	r8, #0
    da08:	e1a0a000 	mov	sl, r0
    da0c:	1a0000f4 	bne	dde4 <CString::FormatV(char const*, std::__va_list)+0x5ec>
    da10:	e1500004 	cmp	r0, r4
    da14:	2a00000f 	bcs	da58 <CString::FormatV(char const*, std::__va_list)+0x260>
    da18:	e59d3000 	ldr	r3, [sp]
    da1c:	e0444000 	sub	r4, r4, r0
    da20:	e1a01004 	mov	r1, r4
    da24:	e1a00006 	mov	r0, r6
    da28:	e3530000 	cmp	r3, #0
    da2c:	03a08020 	moveq	r8, #32
    da30:	13a08030 	movne	r8, #48	; 0x30
    da34:	ebfffe1d 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    da38:	e2443001 	sub	r3, r4, #1
    da3c:	e596200c 	ldr	r2, [r6, #12]
    da40:	e2433001 	sub	r3, r3, #1
    da44:	e3730001 	cmn	r3, #1
    da48:	e2821001 	add	r1, r2, #1
    da4c:	e586100c 	str	r1, [r6, #12]
    da50:	e5c28000 	strb	r8, [r2]
    da54:	1afffff8 	bne	da3c <CString::FormatV(char const*, std::__va_list)+0x244>
    da58:	e1a01007 	mov	r1, r7
    da5c:	e1a00006 	mov	r0, r6
    da60:	ebfffea1 	bl	d4ec <CString::PutString(char const*)>
    da64:	e2855001 	add	r5, r5, #1
    da68:	e1d540d0 	ldrsb	r4, [r5]
    da6c:	e3540000 	cmp	r4, #0
    da70:	1affff74 	bne	d848 <CString::FormatV(char const*, std::__va_list)+0x50>
    da74:	e596300c 	ldr	r3, [r6, #12]
    da78:	e5c34000 	strb	r4, [r3]
    da7c:	e28dd024 	add	sp, sp, #36	; 0x24
    da80:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da84:	e2893007 	add	r3, r9, #7
    da88:	e28d7008 	add	r7, sp, #8
    da8c:	e3c33007 	bic	r3, r3, #7
    da90:	e1a00007 	mov	r0, r7
    da94:	e2839008 	add	r9, r3, #8
    da98:	ed930b00 	vldr	d0, [r3]
    da9c:	ebfffec7 	bl	d5c0 <CString::ftoa(char*, double, unsigned int)>
    daa0:	e1a00007 	mov	r0, r7
    daa4:	eb0008a0 	bl	fd2c <strlen>
    daa8:	e3580000 	cmp	r8, #0
    daac:	e1a0a000 	mov	sl, r0
    dab0:	1a000108 	bne	ded8 <CString::FormatV(char const*, std::__va_list)+0x6e0>
    dab4:	e1500004 	cmp	r0, r4
    dab8:	2affffe6 	bcs	da58 <CString::FormatV(char const*, std::__va_list)+0x260>
    dabc:	e0444000 	sub	r4, r4, r0
    dac0:	e1a00006 	mov	r0, r6
    dac4:	e1a01004 	mov	r1, r4
    dac8:	ebfffdf8 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dacc:	e2443001 	sub	r3, r4, #1
    dad0:	e3a00020 	mov	r0, #32
    dad4:	e596200c 	ldr	r2, [r6, #12]
    dad8:	e2433001 	sub	r3, r3, #1
    dadc:	e3730001 	cmn	r3, #1
    dae0:	e2821001 	add	r1, r2, #1
    dae4:	e586100c 	str	r1, [r6, #12]
    dae8:	e5c20000 	strb	r0, [r2]
    daec:	1afffff8 	bne	dad4 <CString::FormatV(char const*, std::__va_list)+0x2dc>
    daf0:	eaffffd8 	b	da58 <CString::FormatV(char const*, std::__va_list)+0x260>
    daf4:	e5990000 	ldr	r0, [r9]
    daf8:	e2899004 	add	r9, r9, #4
    dafc:	e3500000 	cmp	r0, #0
    db00:	b2600000 	rsblt	r0, r0, #0
    db04:	b3a0b001 	movlt	fp, #1
    db08:	a3a0b000 	movge	fp, #0
    db0c:	e3500009 	cmp	r0, #9
    db10:	e1a0a00b 	mov	sl, fp
    db14:	e1a0e000 	mov	lr, r0
    db18:	c3a03001 	movgt	r3, #1
    db1c:	c3a0100a 	movgt	r1, #10
    db20:	da000108 	ble	df48 <CString::FormatV(char const*, std::__va_list)+0x750>
    db24:	e0030391 	mul	r3, r1, r3
    db28:	e732f310 	udiv	r2, r0, r3
    db2c:	e3520009 	cmp	r2, #9
    db30:	8afffffb 	bhi	db24 <CString::FormatV(char const*, std::__va_list)+0x32c>
    db34:	e28d7008 	add	r7, sp, #8
    db38:	e58d8000 	str	r8, [sp]
    db3c:	e730f310 	udiv	r0, r0, r3
    db40:	e1a0c007 	mov	ip, r7
    db44:	e59d8004 	ldr	r8, [sp, #4]
    db48:	ea000001 	b	db54 <CString::FormatV(char const*, std::__va_list)+0x35c>
    db4c:	e730f31e 	udiv	r0, lr, r3
    db50:	e1a02000 	mov	r2, r0
    db54:	e3520009 	cmp	r2, #9
    db58:	e2821057 	add	r1, r2, #87	; 0x57
    db5c:	e2822030 	add	r2, r2, #48	; 0x30
    db60:	e06ee093 	mls	lr, r3, r0, lr
    db64:	e6af1071 	sxtb	r1, r1
    db68:	e28cc001 	add	ip, ip, #1
    db6c:	96af1072 	sxtbls	r1, r2
    db70:	e0832398 	umull	r2, r3, r8, r3
    db74:	e1b031a3 	lsrs	r3, r3, #3
    db78:	e54c1001 	strb	r1, [ip, #-1]
    db7c:	1afffff2 	bne	db4c <CString::FormatV(char const*, std::__va_list)+0x354>
    db80:	e59d8000 	ldr	r8, [sp]
    db84:	e1a00007 	mov	r0, r7
    db88:	e5cc3000 	strb	r3, [ip]
    db8c:	eb000866 	bl	fd2c <strlen>
    db90:	e3580000 	cmp	r8, #0
    db94:	e080b00b 	add	fp, r0, fp
    db98:	0a000077 	beq	dd7c <CString::FormatV(char const*, std::__va_list)+0x584>
    db9c:	e35a0000 	cmp	sl, #0
    dba0:	1a0000df 	bne	df24 <CString::FormatV(char const*, std::__va_list)+0x72c>
    dba4:	e1a01007 	mov	r1, r7
    dba8:	e1a00006 	mov	r0, r6
    dbac:	ebfffe4e 	bl	d4ec <CString::PutString(char const*)>
    dbb0:	e15b0004 	cmp	fp, r4
    dbb4:	2affffaa 	bcs	da64 <CString::FormatV(char const*, std::__va_list)+0x26c>
    dbb8:	e044b00b 	sub	fp, r4, fp
    dbbc:	e1a00006 	mov	r0, r6
    dbc0:	e1a0100b 	mov	r1, fp
    dbc4:	ebfffdb9 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dbc8:	e24b3001 	sub	r3, fp, #1
    dbcc:	e3a00020 	mov	r0, #32
    dbd0:	e596200c 	ldr	r2, [r6, #12]
    dbd4:	e2433001 	sub	r3, r3, #1
    dbd8:	e3730001 	cmn	r3, #1
    dbdc:	e2821001 	add	r1, r2, #1
    dbe0:	e586100c 	str	r1, [r6, #12]
    dbe4:	e5c20000 	strb	r0, [r2]
    dbe8:	1afffff8 	bne	dbd0 <CString::FormatV(char const*, std::__va_list)+0x3d8>
    dbec:	eaffff9c 	b	da64 <CString::FormatV(char const*, std::__va_list)+0x26c>
    dbf0:	e3580000 	cmp	r8, #0
    dbf4:	e2897004 	add	r7, r9, #4
    dbf8:	e1d980d0 	ldrsb	r8, [r9]
    dbfc:	1a00008b 	bne	de30 <CString::FormatV(char const*, std::__va_list)+0x638>
    dc00:	e3540001 	cmp	r4, #1
    dc04:	9a00000b 	bls	dc38 <CString::FormatV(char const*, std::__va_list)+0x440>
    dc08:	e2441001 	sub	r1, r4, #1
    dc0c:	e1a00006 	mov	r0, r6
    dc10:	ebfffda6 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dc14:	e2444002 	sub	r4, r4, #2
    dc18:	e3a01020 	mov	r1, #32
    dc1c:	e596300c 	ldr	r3, [r6, #12]
    dc20:	e2444001 	sub	r4, r4, #1
    dc24:	e3740001 	cmn	r4, #1
    dc28:	e2832001 	add	r2, r3, #1
    dc2c:	e586200c 	str	r2, [r6, #12]
    dc30:	e5c31000 	strb	r1, [r3]
    dc34:	1afffff8 	bne	dc1c <CString::FormatV(char const*, std::__va_list)+0x424>
    dc38:	e3a01001 	mov	r1, #1
    dc3c:	e1a00006 	mov	r0, r6
    dc40:	ebfffd9a 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dc44:	e596300c 	ldr	r3, [r6, #12]
    dc48:	e1a09007 	mov	r9, r7
    dc4c:	e2832001 	add	r2, r3, #1
    dc50:	e586200c 	str	r2, [r6, #12]
    dc54:	e5c38000 	strb	r8, [r3]
    dc58:	eaffff81 	b	da64 <CString::FormatV(char const*, std::__va_list)+0x26c>
    dc5c:	e3a0a010 	mov	sl, #16
    dc60:	eaffff47 	b	d984 <CString::FormatV(char const*, std::__va_list)+0x18c>
    dc64:	e3a0a00a 	mov	sl, #10
    dc68:	eaffff45 	b	d984 <CString::FormatV(char const*, std::__va_list)+0x18c>
    dc6c:	e599a000 	ldr	sl, [r9]
    dc70:	e2899004 	add	r9, r9, #4
    dc74:	e1a0000a 	mov	r0, sl
    dc78:	eb00082b 	bl	fd2c <strlen>
    dc7c:	e3580000 	cmp	r8, #0
    dc80:	e1a07000 	mov	r7, r0
    dc84:	1a000080 	bne	de8c <CString::FormatV(char const*, std::__va_list)+0x694>
    dc88:	e1500004 	cmp	r0, r4
    dc8c:	2a00000c 	bcs	dcc4 <CString::FormatV(char const*, std::__va_list)+0x4cc>
    dc90:	e0444000 	sub	r4, r4, r0
    dc94:	e1a00006 	mov	r0, r6
    dc98:	e1a01004 	mov	r1, r4
    dc9c:	ebfffd83 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dca0:	e2443001 	sub	r3, r4, #1
    dca4:	e3a00020 	mov	r0, #32
    dca8:	e596200c 	ldr	r2, [r6, #12]
    dcac:	e2433001 	sub	r3, r3, #1
    dcb0:	e3730001 	cmn	r3, #1
    dcb4:	e2821001 	add	r1, r2, #1
    dcb8:	e586100c 	str	r1, [r6, #12]
    dcbc:	e5c20000 	strb	r0, [r2]
    dcc0:	1afffff8 	bne	dca8 <CString::FormatV(char const*, std::__va_list)+0x4b0>
    dcc4:	e1a0100a 	mov	r1, sl
    dcc8:	e1a00006 	mov	r0, r6
    dccc:	ebfffe06 	bl	d4ec <CString::PutString(char const*)>
    dcd0:	eaffff63 	b	da64 <CString::FormatV(char const*, std::__va_list)+0x26c>
    dcd4:	e3a01001 	mov	r1, #1
    dcd8:	e1a00006 	mov	r0, r6
    dcdc:	ebfffd73 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dce0:	e596300c 	ldr	r3, [r6, #12]
    dce4:	e3a01001 	mov	r1, #1
    dce8:	e3a02025 	mov	r2, #37	; 0x25
    dcec:	e0830001 	add	r0, r3, r1
    dcf0:	e586000c 	str	r0, [r6, #12]
    dcf4:	e1a00006 	mov	r0, r6
    dcf8:	e5c32000 	strb	r2, [r3]
    dcfc:	e1d540d0 	ldrsb	r4, [r5]
    dd00:	ebfffd6a 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dd04:	e596300c 	ldr	r3, [r6, #12]
    dd08:	e2832001 	add	r2, r3, #1
    dd0c:	e586200c 	str	r2, [r6, #12]
    dd10:	e5c34000 	strb	r4, [r3]
    dd14:	eaffff52 	b	da64 <CString::FormatV(char const*, std::__va_list)+0x26c>
    dd18:	e1d500d1 	ldrsb	r0, [r5, #1]
    dd1c:	e3a01000 	mov	r1, #0
    dd20:	e2855001 	add	r5, r5, #1
    dd24:	e2403030 	sub	r3, r0, #48	; 0x30
    dd28:	e6ef3073 	uxtb	r3, r3
    dd2c:	e3530009 	cmp	r3, #9
    dd30:	8afffee9 	bhi	d8dc <CString::FormatV(char const*, std::__va_list)+0xe4>
    dd34:	e3a0200a 	mov	r2, #10
    dd38:	e0210192 	mla	r1, r2, r1, r0
    dd3c:	e1f500d1 	ldrsb	r0, [r5, #1]!
    dd40:	e2403030 	sub	r3, r0, #48	; 0x30
    dd44:	e2411030 	sub	r1, r1, #48	; 0x30
    dd48:	e6ef3073 	uxtb	r3, r3
    dd4c:	e3530009 	cmp	r3, #9
    dd50:	9afffff8 	bls	dd38 <CString::FormatV(char const*, std::__va_list)+0x540>
    dd54:	eafffee0 	b	d8dc <CString::FormatV(char const*, std::__va_list)+0xe4>
    dd58:	e3a01001 	mov	r1, #1
    dd5c:	e1a00006 	mov	r0, r6
    dd60:	ebfffd52 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dd64:	e596300c 	ldr	r3, [r6, #12]
    dd68:	e2855002 	add	r5, r5, #2
    dd6c:	e2832001 	add	r2, r3, #1
    dd70:	e586200c 	str	r2, [r6, #12]
    dd74:	e5c37000 	strb	r7, [r3]
    dd78:	eafffeaf 	b	d83c <CString::FormatV(char const*, std::__va_list)+0x44>
    dd7c:	e15b0004 	cmp	fp, r4
    dd80:	2a00000c 	bcs	ddb8 <CString::FormatV(char const*, std::__va_list)+0x5c0>
    dd84:	e044b00b 	sub	fp, r4, fp
    dd88:	e1a00006 	mov	r0, r6
    dd8c:	e1a0100b 	mov	r1, fp
    dd90:	ebfffd46 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dd94:	e24b3001 	sub	r3, fp, #1
    dd98:	e3a00020 	mov	r0, #32
    dd9c:	e596200c 	ldr	r2, [r6, #12]
    dda0:	e2433001 	sub	r3, r3, #1
    dda4:	e3730001 	cmn	r3, #1
    dda8:	e2821001 	add	r1, r2, #1
    ddac:	e586100c 	str	r1, [r6, #12]
    ddb0:	e5c20000 	strb	r0, [r2]
    ddb4:	1afffff8 	bne	dd9c <CString::FormatV(char const*, std::__va_list)+0x5a4>
    ddb8:	e35a0000 	cmp	sl, #0
    ddbc:	0affff25 	beq	da58 <CString::FormatV(char const*, std::__va_list)+0x260>
    ddc0:	e3a01001 	mov	r1, #1
    ddc4:	e1a00006 	mov	r0, r6
    ddc8:	ebfffd38 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ddcc:	e596300c 	ldr	r3, [r6, #12]
    ddd0:	e3a0202d 	mov	r2, #45	; 0x2d
    ddd4:	e2831001 	add	r1, r3, #1
    ddd8:	e586100c 	str	r1, [r6, #12]
    dddc:	e5c32000 	strb	r2, [r3]
    dde0:	eaffff1c 	b	da58 <CString::FormatV(char const*, std::__va_list)+0x260>
    dde4:	e1a01007 	mov	r1, r7
    dde8:	e1a00006 	mov	r0, r6
    ddec:	ebfffdbe 	bl	d4ec <CString::PutString(char const*)>
    ddf0:	e15a0004 	cmp	sl, r4
    ddf4:	2affff1a 	bcs	da64 <CString::FormatV(char const*, std::__va_list)+0x26c>
    ddf8:	e044400a 	sub	r4, r4, sl
    ddfc:	e1a00006 	mov	r0, r6
    de00:	e1a01004 	mov	r1, r4
    de04:	ebfffd29 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    de08:	e2443001 	sub	r3, r4, #1
    de0c:	e3a00020 	mov	r0, #32
    de10:	e596200c 	ldr	r2, [r6, #12]
    de14:	e2433001 	sub	r3, r3, #1
    de18:	e3730001 	cmn	r3, #1
    de1c:	e2821001 	add	r1, r2, #1
    de20:	e586100c 	str	r1, [r6, #12]
    de24:	e5c20000 	strb	r0, [r2]
    de28:	1afffff8 	bne	de10 <CString::FormatV(char const*, std::__va_list)+0x618>
    de2c:	eaffff0c 	b	da64 <CString::FormatV(char const*, std::__va_list)+0x26c>
    de30:	e3a01001 	mov	r1, #1
    de34:	e1a00006 	mov	r0, r6
    de38:	ebfffd1c 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    de3c:	e596300c 	ldr	r3, [r6, #12]
    de40:	e3540001 	cmp	r4, #1
    de44:	e2832001 	add	r2, r3, #1
    de48:	e586200c 	str	r2, [r6, #12]
    de4c:	e5c38000 	strb	r8, [r3]
    de50:	9a00000b 	bls	de84 <CString::FormatV(char const*, std::__va_list)+0x68c>
    de54:	e2441001 	sub	r1, r4, #1
    de58:	e1a00006 	mov	r0, r6
    de5c:	ebfffd13 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    de60:	e2444002 	sub	r4, r4, #2
    de64:	e3a01020 	mov	r1, #32
    de68:	e596300c 	ldr	r3, [r6, #12]
    de6c:	e2444001 	sub	r4, r4, #1
    de70:	e3740001 	cmn	r4, #1
    de74:	e2832001 	add	r2, r3, #1
    de78:	e586200c 	str	r2, [r6, #12]
    de7c:	e5c31000 	strb	r1, [r3]
    de80:	1afffff8 	bne	de68 <CString::FormatV(char const*, std::__va_list)+0x670>
    de84:	e1a09007 	mov	r9, r7
    de88:	eafffef5 	b	da64 <CString::FormatV(char const*, std::__va_list)+0x26c>
    de8c:	e1a0100a 	mov	r1, sl
    de90:	e1a00006 	mov	r0, r6
    de94:	ebfffd94 	bl	d4ec <CString::PutString(char const*)>
    de98:	e1570004 	cmp	r7, r4
    de9c:	2afffef0 	bcs	da64 <CString::FormatV(char const*, std::__va_list)+0x26c>
    dea0:	e0444007 	sub	r4, r4, r7
    dea4:	e1a00006 	mov	r0, r6
    dea8:	e1a01004 	mov	r1, r4
    deac:	ebfffcff 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    deb0:	e2443001 	sub	r3, r4, #1
    deb4:	e3a00020 	mov	r0, #32
    deb8:	e596200c 	ldr	r2, [r6, #12]
    debc:	e2433001 	sub	r3, r3, #1
    dec0:	e3730001 	cmn	r3, #1
    dec4:	e2821001 	add	r1, r2, #1
    dec8:	e586100c 	str	r1, [r6, #12]
    decc:	e5c20000 	strb	r0, [r2]
    ded0:	1afffff8 	bne	deb8 <CString::FormatV(char const*, std::__va_list)+0x6c0>
    ded4:	eafffee2 	b	da64 <CString::FormatV(char const*, std::__va_list)+0x26c>
    ded8:	e1a01007 	mov	r1, r7
    dedc:	e1a00006 	mov	r0, r6
    dee0:	ebfffd81 	bl	d4ec <CString::PutString(char const*)>
    dee4:	e15a0004 	cmp	sl, r4
    dee8:	2afffedd 	bcs	da64 <CString::FormatV(char const*, std::__va_list)+0x26c>
    deec:	e044400a 	sub	r4, r4, sl
    def0:	e1a00006 	mov	r0, r6
    def4:	e1a01004 	mov	r1, r4
    def8:	ebfffcec 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    defc:	e2443001 	sub	r3, r4, #1
    df00:	e3a00020 	mov	r0, #32
    df04:	e596200c 	ldr	r2, [r6, #12]
    df08:	e2433001 	sub	r3, r3, #1
    df0c:	e3730001 	cmn	r3, #1
    df10:	e2821001 	add	r1, r2, #1
    df14:	e586100c 	str	r1, [r6, #12]
    df18:	e5c20000 	strb	r0, [r2]
    df1c:	1afffff8 	bne	df04 <CString::FormatV(char const*, std::__va_list)+0x70c>
    df20:	eafffecf 	b	da64 <CString::FormatV(char const*, std::__va_list)+0x26c>
    df24:	e3a01001 	mov	r1, #1
    df28:	e1a00006 	mov	r0, r6
    df2c:	ebfffcdf 	bl	d2b0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    df30:	e596300c 	ldr	r3, [r6, #12]
    df34:	e3a0202d 	mov	r2, #45	; 0x2d
    df38:	e2831001 	add	r1, r3, #1
    df3c:	e586100c 	str	r1, [r6, #12]
    df40:	e5c32000 	strb	r2, [r3]
    df44:	eaffff16 	b	dba4 <CString::FormatV(char const*, std::__va_list)+0x3ac>
    df48:	e1a02000 	mov	r2, r0
    df4c:	e3a03001 	mov	r3, #1
    df50:	eafffef7 	b	db34 <CString::FormatV(char const*, std::__va_list)+0x33c>
    df54:	e1a0200c 	mov	r2, ip
    df58:	e3a03001 	mov	r3, #1
    df5c:	e1a0100c 	mov	r1, ip
    df60:	eafffe91 	b	d9ac <CString::FormatV(char const*, std::__va_list)+0x1b4>

0000df64 <CString::Format(char const*, ...)>:
    df64:	e92d000e 	push	{r1, r2, r3}
    df68:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    df6c:	e24dd008 	sub	sp, sp, #8
    df70:	e28d3010 	add	r3, sp, #16
    df74:	e1a02003 	mov	r2, r3
    df78:	e59d100c 	ldr	r1, [sp, #12]
    df7c:	e58d3004 	str	r3, [sp, #4]
    df80:	ebfffe1c 	bl	d7f8 <CString::FormatV(char const*, std::__va_list)>
    df84:	e28dd008 	add	sp, sp, #8
    df88:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    df8c:	e28dd00c 	add	sp, sp, #12
    df90:	e12fff1e 	bx	lr
    df94:	00000000 	andeq	r0, r0, r0

0000df98 <DelayLoop>:
    df98:	e2500001 	subs	r0, r0, #1
    df9c:	8afffffd 	bhi	df98 <DelayLoop>
    dfa0:	e1a0f00e 	mov	pc, lr

0000dfa4 <CExceptionHandler::CExceptionHandler()>:
    dfa4:	e92d4070 	push	{r4, r5, r6, lr}
    dfa8:	e3025d90 	movw	r5, #11664	; 0x2d90
    dfac:	e3405005 	movt	r5, #5
    dfb0:	e1a04000 	mov	r4, r0
    dfb4:	e5953000 	ldr	r3, [r5]
    dfb8:	e3530000 	cmp	r3, #0
    dfbc:	0a000005 	beq	dfd8 <CExceptionHandler::CExceptionHandler()+0x34>
    dfc0:	e30215c8 	movw	r1, #9672	; 0x25c8
    dfc4:	e3401005 	movt	r1, #5
    dfc8:	e3010360 	movw	r0, #4960	; 0x1360
    dfcc:	e3400005 	movt	r0, #5
    dfd0:	e3a0202e 	mov	r2, #46	; 0x2e
    dfd4:	ebfff96b 	bl	c588 <assertion_failed>
    dfd8:	e59f1048 	ldr	r1, [pc, #72]	; e028 <CExceptionHandler::CExceptionHandler()+0x84>
    dfdc:	e3a00000 	mov	r0, #0
    dfe0:	e59f2044 	ldr	r2, [pc, #68]	; e02c <CExceptionHandler::CExceptionHandler()+0x88>
    dfe4:	e59f3044 	ldr	r3, [pc, #68]	; e030 <CExceptionHandler::CExceptionHandler()+0x8c>
    dfe8:	e1a01141 	asr	r1, r1, #2
    dfec:	e5854000 	str	r4, [r5]
    dff0:	e1a02142 	asr	r2, r2, #2
    dff4:	e2411002 	sub	r1, r1, #2
    dff8:	e1a03143 	asr	r3, r3, #2
    dffc:	e2422002 	sub	r2, r2, #2
    e000:	e2433002 	sub	r3, r3, #2
    e004:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    e008:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    e00c:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    e010:	e5801004 	str	r1, [r0, #4]
    e014:	e580200c 	str	r2, [r0, #12]
    e018:	e5803010 	str	r3, [r0, #16]
    e01c:	ebffefd5 	bl	9f78 <SyncDataAndInstructionCache>
    e020:	e1a00004 	mov	r0, r4
    e024:	e8bd8070 	pop	{r4, r5, r6, pc}
    e028:	0000e1f8 	.word	0x0000e1f8
    e02c:	0000e230 	.word	0x0000e230
    e030:	0000e26c 	.word	0x0000e26c

0000e034 <CExceptionHandler::~CExceptionHandler()>:
    e034:	e3023d90 	movw	r3, #11664	; 0x2d90
    e038:	e3403005 	movt	r3, #5
    e03c:	e3a02000 	mov	r2, #0
    e040:	e5832000 	str	r2, [r3]
    e044:	e12fff1e 	bx	lr

0000e048 <CExceptionHandler::Throw(unsigned int)>:
    e048:	e92d4010 	push	{r4, lr}
    e04c:	e1a04001 	mov	r4, r1
    e050:	e24dd008 	sub	sp, sp, #8
    e054:	ebfffaca 	bl	cb84 <CLogger::Get()>
    e058:	e3022cb4 	movw	r2, #11444	; 0x2cb4
    e05c:	e3402005 	movt	r2, #5
    e060:	e30235e0 	movw	r3, #9696	; 0x25e0
    e064:	e3403005 	movt	r3, #5
    e068:	e30215c0 	movw	r1, #9664	; 0x25c0
    e06c:	e3401005 	movt	r1, #5
    e070:	e792c104 	ldr	ip, [r2, r4, lsl #2]
    e074:	e3a02000 	mov	r2, #0
    e078:	e58dc000 	str	ip, [sp]
    e07c:	ebfffb9d 	bl	cef8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e080:	e28dd008 	add	sp, sp, #8
    e084:	e8bd8010 	pop	{r4, pc}

0000e088 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    e088:	e3510002 	cmp	r1, #2
    e08c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    e090:	e1a05001 	mov	r5, r1
    e094:	e24dd024 	sub	sp, sp, #36	; 0x24
    e098:	e1a04002 	mov	r4, r2
    e09c:	0a000027 	beq	e140 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb8>
    e0a0:	e3510003 	cmp	r1, #3
    e0a4:	0a000022 	beq	e134 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
    e0a8:	e3a07000 	mov	r7, #0
    e0ac:	e1a08007 	mov	r8, r7
    e0b0:	e3540000 	cmp	r4, #0
    e0b4:	0a000024 	beq	e14c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
    e0b8:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    e0bc:	e30215c0 	movw	r1, #9664	; 0x25c0
    e0c0:	e3401005 	movt	r1, #5
    e0c4:	e203301f 	and	r3, r3, #31
    e0c8:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    e0cc:	e3530012 	cmp	r3, #18
    e0d0:	e5949040 	ldr	r9, [r4, #64]	; 0x40
    e0d4:	08940240 	ldmeq	r4, {r6, r9}
    e0d8:	e1a00006 	mov	r0, r6
    e0dc:	ebfff9b8 	bl	c7c4 <debug_stacktrace(unsigned int const*, char const*)>
    e0e0:	ebfffaa7 	bl	cb84 <CLogger::Get()>
    e0e4:	e3023cb4 	movw	r3, #11444	; 0x2cb4
    e0e8:	e3403005 	movt	r3, #5
    e0ec:	e594e044 	ldr	lr, [r4, #68]	; 0x44
    e0f0:	e3a02000 	mov	r2, #0
    e0f4:	e594c048 	ldr	ip, [r4, #72]	; 0x48
    e0f8:	e30215c0 	movw	r1, #9664	; 0x25c0
    e0fc:	e3401005 	movt	r1, #5
    e100:	e7934105 	ldr	r4, [r3, r5, lsl #2]
    e104:	e30235fc 	movw	r3, #9724	; 0x25fc
    e108:	e3403005 	movt	r3, #5
    e10c:	e58d9014 	str	r9, [sp, #20]
    e110:	e58d6010 	str	r6, [sp, #16]
    e114:	e58d700c 	str	r7, [sp, #12]
    e118:	e58d8008 	str	r8, [sp, #8]
    e11c:	e58d4000 	str	r4, [sp]
    e120:	e58de018 	str	lr, [sp, #24]
    e124:	e58dc004 	str	ip, [sp, #4]
    e128:	ebfffb72 	bl	cef8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e12c:	e28dd024 	add	sp, sp, #36	; 0x24
    e130:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    e134:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
    e138:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
    e13c:	eaffffdb 	b	e0b0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    e140:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
    e144:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
    e148:	eaffffd8 	b	e0b0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    e14c:	e30215c8 	movw	r1, #9672	; 0x25c8
    e150:	e3401005 	movt	r1, #5
    e154:	e30205f0 	movw	r0, #9712	; 0x25f0
    e158:	e3400005 	movt	r0, #5
    e15c:	e3a02067 	mov	r2, #103	; 0x67
    e160:	ebfff908 	bl	c588 <assertion_failed>
    e164:	eaffffd3 	b	e0b8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>

0000e168 <CExceptionHandler::Get()>:
    e168:	e92d4010 	push	{r4, lr}
    e16c:	e3024d90 	movw	r4, #11664	; 0x2d90
    e170:	e3404005 	movt	r4, #5
    e174:	e5940000 	ldr	r0, [r4]
    e178:	e3500000 	cmp	r0, #0
    e17c:	18bd8010 	popne	{r4, pc}
    e180:	e3a0207e 	mov	r2, #126	; 0x7e
    e184:	e30215c8 	movw	r1, #9672	; 0x25c8
    e188:	e3401005 	movt	r1, #5
    e18c:	e301046c 	movw	r0, #5228	; 0x146c
    e190:	e3400005 	movt	r0, #5
    e194:	ebfff8fb 	bl	c588 <assertion_failed>
    e198:	e5940000 	ldr	r0, [r4]
    e19c:	e8bd8010 	pop	{r4, pc}

0000e1a0 <ExceptionHandler>:
    e1a0:	e92d4070 	push	{r4, r5, r6, lr}
    e1a4:	e3024d90 	movw	r4, #11664	; 0x2d90
    e1a8:	e3404005 	movt	r4, #5
    e1ac:	e1a05000 	mov	r5, r0
    e1b0:	e1a06001 	mov	r6, r1
    e1b4:	e5940000 	ldr	r0, [r4]
    e1b8:	e3500000 	cmp	r0, #0
    e1bc:	0a000003 	beq	e1d0 <ExceptionHandler+0x30>
    e1c0:	e1a02006 	mov	r2, r6
    e1c4:	e1a01005 	mov	r1, r5
    e1c8:	e8bd4070 	pop	{r4, r5, r6, lr}
    e1cc:	eaffffad 	b	e088 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
    e1d0:	e3a0207e 	mov	r2, #126	; 0x7e
    e1d4:	e30215c8 	movw	r1, #9672	; 0x25c8
    e1d8:	e3401005 	movt	r1, #5
    e1dc:	e301046c 	movw	r0, #5228	; 0x146c
    e1e0:	e3400005 	movt	r0, #5
    e1e4:	ebfff8e7 	bl	c588 <assertion_failed>
    e1e8:	e5940000 	ldr	r0, [r4]
    e1ec:	e1a02006 	mov	r2, r6
    e1f0:	e1a01005 	mov	r1, r5
    e1f4:	e8bd4070 	pop	{r4, r5, r6, lr}
    e1f8:	eaffffa2 	b	e088 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

0000e1fc <UndefinedInstructionStub>:
    e1fc:	e24ee004 	sub	lr, lr, #4
    e200:	e92d4000 	stmfd	sp!, {lr}
    e204:	e14fe000 	mrs	lr, SPSR
    e208:	e92d4000 	stmfd	sp!, {lr}
    e20c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e210:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e214:	e1a0100d 	mov	r1, sp
    e218:	f1020012 	cps	#18
    e21c:	e1a0200d 	mov	r2, sp
    e220:	e1a0300e 	mov	r3, lr
    e224:	f102001f 	cps	#31
    e228:	e1a0d001 	mov	sp, r1
    e22c:	e92d000c 	push	{r2, r3}
    e230:	e1a0100d 	mov	r1, sp
    e234:	e3a00001 	mov	r0, #1
    e238:	eaffffd8 	b	e1a0 <ExceptionHandler>

0000e23c <PrefetchAbortStub>:
    e23c:	e24ee004 	sub	lr, lr, #4
    e240:	e92d4000 	stmfd	sp!, {lr}
    e244:	e14fe000 	mrs	lr, SPSR
    e248:	e92d4000 	stmfd	sp!, {lr}
    e24c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e250:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e254:	e1a0100d 	mov	r1, sp
    e258:	f1020012 	cps	#18
    e25c:	e1a0200d 	mov	r2, sp
    e260:	e1a0300e 	mov	r3, lr
    e264:	f102001f 	cps	#31
    e268:	e1a0d001 	mov	sp, r1
    e26c:	e92d000c 	push	{r2, r3}
    e270:	e1a0100d 	mov	r1, sp
    e274:	e3a00002 	mov	r0, #2
    e278:	eaffffc8 	b	e1a0 <ExceptionHandler>

0000e27c <DataAbortStub>:
    e27c:	e24ee008 	sub	lr, lr, #8
    e280:	e92d4000 	stmfd	sp!, {lr}
    e284:	e14fe000 	mrs	lr, SPSR
    e288:	e92d4000 	stmfd	sp!, {lr}
    e28c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e290:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e294:	e1a0100d 	mov	r1, sp
    e298:	f1020012 	cps	#18
    e29c:	e1a0200d 	mov	r2, sp
    e2a0:	e1a0300e 	mov	r3, lr
    e2a4:	f102001f 	cps	#31
    e2a8:	e1a0d001 	mov	sp, r1
    e2ac:	e92d000c 	push	{r2, r3}
    e2b0:	e1a0100d 	mov	r1, sp
    e2b4:	e3a00003 	mov	r0, #3
    e2b8:	eaffffb8 	b	e1a0 <ExceptionHandler>

0000e2bc <IRQStub>:
    e2bc:	e24ee004 	sub	lr, lr, #4
    e2c0:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e2c4:	eb0000f2 	bl	e694 <InterruptHandler>
    e2c8:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000e2cc <CInterruptSystem::CInterruptSystem()>:
    e2cc:	e2802f47 	add	r2, r0, #284	; 0x11c
    e2d0:	e1a0c000 	mov	ip, r0
    e2d4:	e2403004 	sub	r3, r0, #4
    e2d8:	e3a01000 	mov	r1, #0
    e2dc:	e1a00002 	mov	r0, r2
    e2e0:	e5a31004 	str	r1, [r3, #4]!
    e2e4:	e5a21004 	str	r1, [r2, #4]!
    e2e8:	e1530000 	cmp	r3, r0
    e2ec:	1afffffb 	bne	e2e0 <CInterruptSystem::CInterruptSystem()+0x14>
    e2f0:	e3023d94 	movw	r3, #11668	; 0x2d94
    e2f4:	e3403005 	movt	r3, #5
    e2f8:	e1a0000c 	mov	r0, ip
    e2fc:	e583c000 	str	ip, [r3]
    e300:	e12fff1e 	bx	lr

0000e304 <CInterruptSystem::~CInterruptSystem()>:
    e304:	e3023d94 	movw	r3, #11668	; 0x2d94
    e308:	e3403005 	movt	r3, #5
    e30c:	e3a02000 	mov	r2, #0
    e310:	e5832000 	str	r2, [r3]
    e314:	e12fff1e 	bx	lr

0000e318 <CInterruptSystem::Initialize()>:
    e318:	e59f3040 	ldr	r3, [pc, #64]	; e360 <CInterruptSystem::Initialize()+0x48>
    e31c:	e92d4010 	push	{r4, lr}
    e320:	e3a04000 	mov	r4, #0
    e324:	e1a03143 	asr	r3, r3, #2
    e328:	e2433002 	sub	r3, r3, #2
    e32c:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    e330:	e5843018 	str	r3, [r4, #24]
    e334:	ebffef0f 	bl	9f78 <SyncDataAndInstructionCache>
    e338:	e3a03a0b 	mov	r3, #45056	; 0xb000
    e33c:	e3433f00 	movt	r3, #16128	; 0x3f00
    e340:	e3e02000 	mvn	r2, #0
    e344:	e583420c 	str	r4, [r3, #524]	; 0x20c
    e348:	e583221c 	str	r2, [r3, #540]	; 0x21c
    e34c:	e5832220 	str	r2, [r3, #544]	; 0x220
    e350:	e5832224 	str	r2, [r3, #548]	; 0x224
    e354:	f1080080 	cpsie	i
    e358:	e3a00001 	mov	r0, #1
    e35c:	e8bd8010 	pop	{r4, pc}
    e360:	0000e2a4 	.word	0x0000e2a4

0000e364 <CInterruptSystem::EnableIRQ(unsigned int)>:
    e364:	e3500047 	cmp	r0, #71	; 0x47
    e368:	e92d4010 	push	{r4, lr}
    e36c:	e1a04000 	mov	r4, r0
    e370:	8a00000e 	bhi	e3b0 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
    e374:	e350001f 	cmp	r0, #31
    e378:	930b2210 	movwls	r2, #45584	; 0xb210
    e37c:	93432f00 	movtls	r2, #16128	; 0x3f00
    e380:	8a000004 	bhi	e398 <CInterruptSystem::EnableIRQ(unsigned int)+0x34>
    e384:	e204401f 	and	r4, r4, #31
    e388:	e3a03001 	mov	r3, #1
    e38c:	e1a04413 	lsl	r4, r3, r4
    e390:	e5824000 	str	r4, [r2]
    e394:	e8bd8010 	pop	{r4, pc}
    e398:	e350003f 	cmp	r0, #63	; 0x3f
    e39c:	930b2214 	movwls	r2, #45588	; 0xb214
    e3a0:	93432f00 	movtls	r2, #16128	; 0x3f00
    e3a4:	830b2218 	movwhi	r2, #45592	; 0xb218
    e3a8:	83432f00 	movthi	r2, #16128	; 0x3f00
    e3ac:	eafffff4 	b	e384 <CInterruptSystem::EnableIRQ(unsigned int)+0x20>
    e3b0:	e3a02074 	mov	r2, #116	; 0x74
    e3b4:	e3021684 	movw	r1, #9860	; 0x2684
    e3b8:	e3401005 	movt	r1, #5
    e3bc:	e3020694 	movw	r0, #9876	; 0x2694
    e3c0:	e3400005 	movt	r0, #5
    e3c4:	ebfff86f 	bl	c588 <assertion_failed>
    e3c8:	e30b2218 	movw	r2, #45592	; 0xb218
    e3cc:	e3432f00 	movt	r2, #16128	; 0x3f00
    e3d0:	eaffffeb 	b	e384 <CInterruptSystem::EnableIRQ(unsigned int)+0x20>

0000e3d4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    e3d4:	e3510047 	cmp	r1, #71	; 0x47
    e3d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e3dc:	e1a04001 	mov	r4, r1
    e3e0:	e1a05000 	mov	r5, r0
    e3e4:	e1a08002 	mov	r8, r2
    e3e8:	e1a07003 	mov	r7, r3
    e3ec:	8a00000e 	bhi	e42c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
    e3f0:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e3f4:	e0856104 	add	r6, r5, r4, lsl #2
    e3f8:	e3530000 	cmp	r3, #0
    e3fc:	0a000005 	beq	e418 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x44>
    e400:	e3021684 	movw	r1, #9860	; 0x2684
    e404:	e3401005 	movt	r1, #5
    e408:	e30206a8 	movw	r0, #9896	; 0x26a8
    e40c:	e3400005 	movt	r0, #5
    e410:	e3a0205d 	mov	r2, #93	; 0x5d
    e414:	ebfff85b 	bl	c588 <assertion_failed>
    e418:	e7858104 	str	r8, [r5, r4, lsl #2]
    e41c:	e1a00004 	mov	r0, r4
    e420:	e5867120 	str	r7, [r6, #288]	; 0x120
    e424:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    e428:	eaffffcd 	b	e364 <CInterruptSystem::EnableIRQ(unsigned int)>
    e42c:	e3021684 	movw	r1, #9860	; 0x2684
    e430:	e3401005 	movt	r1, #5
    e434:	e3020694 	movw	r0, #9876	; 0x2694
    e438:	e3400005 	movt	r0, #5
    e43c:	e3a0205c 	mov	r2, #92	; 0x5c
    e440:	ebfff850 	bl	c588 <assertion_failed>
    e444:	eaffffe9 	b	e3f0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>

0000e448 <CInterruptSystem::DisableIRQ(unsigned int)>:
    e448:	e3500047 	cmp	r0, #71	; 0x47
    e44c:	e92d4010 	push	{r4, lr}
    e450:	e1a04000 	mov	r4, r0
    e454:	8a00000e 	bhi	e494 <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
    e458:	e350001f 	cmp	r0, #31
    e45c:	930b221c 	movwls	r2, #45596	; 0xb21c
    e460:	93432f00 	movtls	r2, #16128	; 0x3f00
    e464:	8a000004 	bhi	e47c <CInterruptSystem::DisableIRQ(unsigned int)+0x34>
    e468:	e204401f 	and	r4, r4, #31
    e46c:	e3a03001 	mov	r3, #1
    e470:	e1a04413 	lsl	r4, r3, r4
    e474:	e5824000 	str	r4, [r2]
    e478:	e8bd8010 	pop	{r4, pc}
    e47c:	e350003f 	cmp	r0, #63	; 0x3f
    e480:	930b2220 	movwls	r2, #45600	; 0xb220
    e484:	93432f00 	movtls	r2, #16128	; 0x3f00
    e488:	830b2224 	movwhi	r2, #45604	; 0xb224
    e48c:	83432f00 	movthi	r2, #16128	; 0x3f00
    e490:	eafffff4 	b	e468 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>
    e494:	e3a0207f 	mov	r2, #127	; 0x7f
    e498:	e3021684 	movw	r1, #9860	; 0x2684
    e49c:	e3401005 	movt	r1, #5
    e4a0:	e3020694 	movw	r0, #9876	; 0x2694
    e4a4:	e3400005 	movt	r0, #5
    e4a8:	ebfff836 	bl	c588 <assertion_failed>
    e4ac:	e30b2224 	movw	r2, #45604	; 0xb224
    e4b0:	e3432f00 	movt	r2, #16128	; 0x3f00
    e4b4:	eaffffeb 	b	e468 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>

0000e4b8 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    e4b8:	e3510047 	cmp	r1, #71	; 0x47
    e4bc:	e92d4070 	push	{r4, r5, r6, lr}
    e4c0:	e1a04001 	mov	r4, r1
    e4c4:	e1a05000 	mov	r5, r0
    e4c8:	8a000009 	bhi	e4f4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    e4cc:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e4d0:	e0856104 	add	r6, r5, r4, lsl #2
    e4d4:	e3530000 	cmp	r3, #0
    e4d8:	0a00000f 	beq	e51c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
    e4dc:	e1a00004 	mov	r0, r4
    e4e0:	ebffffd8 	bl	e448 <CInterruptSystem::DisableIRQ(unsigned int)>
    e4e4:	e3a03000 	mov	r3, #0
    e4e8:	e7853104 	str	r3, [r5, r4, lsl #2]
    e4ec:	e5863120 	str	r3, [r6, #288]	; 0x120
    e4f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e4f4:	e3021684 	movw	r1, #9860	; 0x2684
    e4f8:	e3401005 	movt	r1, #5
    e4fc:	e3020694 	movw	r0, #9876	; 0x2694
    e500:	e3400005 	movt	r0, #5
    e504:	e3a02067 	mov	r2, #103	; 0x67
    e508:	e0856104 	add	r6, r5, r4, lsl #2
    e50c:	ebfff81d 	bl	c588 <assertion_failed>
    e510:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e514:	e3530000 	cmp	r3, #0
    e518:	1affffef 	bne	e4dc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    e51c:	e3021684 	movw	r1, #9860	; 0x2684
    e520:	e3401005 	movt	r1, #5
    e524:	e30206c4 	movw	r0, #9924	; 0x26c4
    e528:	e3400005 	movt	r0, #5
    e52c:	e3a02068 	mov	r2, #104	; 0x68
    e530:	ebfff814 	bl	c588 <assertion_failed>
    e534:	eaffffe8 	b	e4dc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>

0000e538 <CInterruptSystem::Get()>:
    e538:	e92d4010 	push	{r4, lr}
    e53c:	e3024d94 	movw	r4, #11668	; 0x2d94
    e540:	e3404005 	movt	r4, #5
    e544:	e5940000 	ldr	r0, [r4]
    e548:	e3500000 	cmp	r0, #0
    e54c:	18bd8010 	popne	{r4, pc}
    e550:	e3a02088 	mov	r2, #136	; 0x88
    e554:	e3021684 	movw	r1, #9860	; 0x2684
    e558:	e3401005 	movt	r1, #5
    e55c:	e301046c 	movw	r0, #5228	; 0x146c
    e560:	e3400005 	movt	r0, #5
    e564:	ebfff807 	bl	c588 <assertion_failed>
    e568:	e5940000 	ldr	r0, [r4]
    e56c:	e8bd8010 	pop	{r4, pc}

0000e570 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    e570:	e3510047 	cmp	r1, #71	; 0x47
    e574:	e92d4070 	push	{r4, r5, r6, lr}
    e578:	e1a06001 	mov	r6, r1
    e57c:	e1a05000 	mov	r5, r0
    e580:	8a000007 	bhi	e5a4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    e584:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    e588:	e0855106 	add	r5, r5, r6, lsl #2
    e58c:	e3540000 	cmp	r4, #0
    e590:	0a00000d 	beq	e5cc <CInterruptSystem::CallIRQHandler(unsigned int)+0x5c>
    e594:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    e598:	e12fff34 	blx	r4
    e59c:	e3a00001 	mov	r0, #1
    e5a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e5a4:	e3021684 	movw	r1, #9860	; 0x2684
    e5a8:	e3401005 	movt	r1, #5
    e5ac:	e3020694 	movw	r0, #9876	; 0x2694
    e5b0:	e3400005 	movt	r0, #5
    e5b4:	e3a0208e 	mov	r2, #142	; 0x8e
    e5b8:	ebfff7f2 	bl	c588 <assertion_failed>
    e5bc:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    e5c0:	e0855106 	add	r5, r5, r6, lsl #2
    e5c4:	e3540000 	cmp	r4, #0
    e5c8:	1afffff1 	bne	e594 <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    e5cc:	e1a00006 	mov	r0, r6
    e5d0:	ebffff9c 	bl	e448 <CInterruptSystem::DisableIRQ(unsigned int)>
    e5d4:	e1a00004 	mov	r0, r4
    e5d8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e5dc <CInterruptSystem::InterruptHandler()>:
    e5dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e5e0:	e3026d94 	movw	r6, #11668	; 0x2d94
    e5e4:	e3406005 	movt	r6, #5
    e5e8:	e24dd010 	sub	sp, sp, #16
    e5ec:	e5963000 	ldr	r3, [r6]
    e5f0:	e3530000 	cmp	r3, #0
    e5f4:	0a00001f 	beq	e678 <CInterruptSystem::InterruptHandler()+0x9c>
    e5f8:	e3a03a0b 	mov	r3, #45056	; 0xb000
    e5fc:	e3433f00 	movt	r3, #16128	; 0x3f00
    e600:	e28d8008 	add	r8, sp, #8
    e604:	e3a07000 	mov	r7, #0
    e608:	e5934204 	ldr	r4, [r3, #516]	; 0x204
    e60c:	e58d4004 	str	r4, [sp, #4]
    e610:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    e614:	e58d2008 	str	r2, [sp, #8]
    e618:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    e61c:	e6ef3073 	uxtb	r3, r3
    e620:	e58d300c 	str	r3, [sp, #12]
    e624:	e3540000 	cmp	r4, #0
    e628:	0a00000d 	beq	e664 <CInterruptSystem::InterruptHandler()+0x88>
    e62c:	e1a05007 	mov	r5, r7
    e630:	ea000002 	b	e640 <CInterruptSystem::InterruptHandler()+0x64>
    e634:	e1b040a4 	lsrs	r4, r4, #1
    e638:	e2855001 	add	r5, r5, #1
    e63c:	0a000008 	beq	e664 <CInterruptSystem::InterruptHandler()+0x88>
    e640:	e3140001 	tst	r4, #1
    e644:	0afffffa 	beq	e634 <CInterruptSystem::InterruptHandler()+0x58>
    e648:	e1a01005 	mov	r1, r5
    e64c:	e5960000 	ldr	r0, [r6]
    e650:	ebffffc6 	bl	e570 <CInterruptSystem::CallIRQHandler(unsigned int)>
    e654:	e3500000 	cmp	r0, #0
    e658:	0afffff5 	beq	e634 <CInterruptSystem::InterruptHandler()+0x58>
    e65c:	e28dd010 	add	sp, sp, #16
    e660:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e664:	e2877020 	add	r7, r7, #32
    e668:	e3570060 	cmp	r7, #96	; 0x60
    e66c:	0afffffa 	beq	e65c <CInterruptSystem::InterruptHandler()+0x80>
    e670:	e4984004 	ldr	r4, [r8], #4
    e674:	eaffffea 	b	e624 <CInterruptSystem::InterruptHandler()+0x48>
    e678:	e3021684 	movw	r1, #9860	; 0x2684
    e67c:	e3401005 	movt	r1, #5
    e680:	e301046c 	movw	r0, #5228	; 0x146c
    e684:	e3400005 	movt	r0, #5
    e688:	e3a020a1 	mov	r2, #161	; 0xa1
    e68c:	ebfff7bd 	bl	c588 <assertion_failed>
    e690:	eaffffd8 	b	e5f8 <CInterruptSystem::InterruptHandler()+0x1c>

0000e694 <InterruptHandler>:
    e694:	eaffffd0 	b	e5dc <CInterruptSystem::InterruptHandler()>

0000e698 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    e698:	e1a03000 	mov	r3, r0
    e69c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    e6a0:	e3a0e000 	mov	lr, #0
    e6a4:	e1a0c00e 	mov	ip, lr
    e6a8:	e28020dc 	add	r2, r0, #220	; 0xdc
    e6ac:	e5801000 	str	r1, [r0]
    e6b0:	e5a3e004 	str	lr, [r3, #4]!
    e6b4:	e5a3c004 	str	ip, [r3, #4]!
    e6b8:	e1530002 	cmp	r3, r2
    e6bc:	1afffffc 	bne	e6b4 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    e6c0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000e6c4 <CGPIOManager::~CGPIOManager()>:
    e6c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e6c8:	e30266e0 	movw	r6, #9952	; 0x26e0
    e6cc:	e3406005 	movt	r6, #5
    e6d0:	e30256f0 	movw	r5, #9968	; 0x26f0
    e6d4:	e3405005 	movt	r5, #5
    e6d8:	e1a08000 	mov	r8, r0
    e6dc:	e2804004 	add	r4, r0, #4
    e6e0:	e28070dc 	add	r7, r0, #220	; 0xdc
    e6e4:	e5b43004 	ldr	r3, [r4, #4]!
    e6e8:	e3a0202c 	mov	r2, #44	; 0x2c
    e6ec:	e1a01006 	mov	r1, r6
    e6f0:	e1a00005 	mov	r0, r5
    e6f4:	e3530000 	cmp	r3, #0
    e6f8:	0a000000 	beq	e700 <CGPIOManager::~CGPIOManager()+0x3c>
    e6fc:	ebfff7a1 	bl	c588 <assertion_failed>
    e700:	e1540007 	cmp	r4, r7
    e704:	1afffff6 	bne	e6e4 <CGPIOManager::~CGPIOManager()+0x20>
    e708:	e5983004 	ldr	r3, [r8, #4]
    e70c:	e3530000 	cmp	r3, #0
    e710:	0a000004 	beq	e728 <CGPIOManager::~CGPIOManager()+0x64>
    e714:	e5980000 	ldr	r0, [r8]
    e718:	e3500000 	cmp	r0, #0
    e71c:	0a000003 	beq	e730 <CGPIOManager::~CGPIOManager()+0x6c>
    e720:	e3a01034 	mov	r1, #52	; 0x34
    e724:	ebffff63 	bl	e4b8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    e728:	e1a00008 	mov	r0, r8
    e72c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e730:	e30216e0 	movw	r1, #9952	; 0x26e0
    e734:	e3401005 	movt	r1, #5
    e738:	e3020704 	movw	r0, #9988	; 0x2704
    e73c:	e3400005 	movt	r0, #5
    e740:	e3a02032 	mov	r2, #50	; 0x32
    e744:	ebfff78f 	bl	c588 <assertion_failed>
    e748:	e5980000 	ldr	r0, [r8]
    e74c:	eafffff3 	b	e720 <CGPIOManager::~CGPIOManager()+0x5c>

0000e750 <CGPIOManager::Initialize()>:
    e750:	e5903004 	ldr	r3, [r0, #4]
    e754:	e92d4010 	push	{r4, lr}
    e758:	e1a04000 	mov	r4, r0
    e75c:	e3530000 	cmp	r3, #0
    e760:	1a00000a 	bne	e790 <CGPIOManager::Initialize()+0x40>
    e764:	e5940000 	ldr	r0, [r4]
    e768:	e3500000 	cmp	r0, #0
    e76c:	0a000010 	beq	e7b4 <CGPIOManager::Initialize()+0x64>
    e770:	e1a03004 	mov	r3, r4
    e774:	e3a01034 	mov	r1, #52	; 0x34
    e778:	e30e29f4 	movw	r2, #59892	; 0xe9f4
    e77c:	e3402000 	movt	r2, #0
    e780:	ebffff13 	bl	e3d4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    e784:	e3a00001 	mov	r0, #1
    e788:	e5840004 	str	r0, [r4, #4]
    e78c:	e8bd8010 	pop	{r4, pc}
    e790:	e30216e0 	movw	r1, #9952	; 0x26e0
    e794:	e3401005 	movt	r1, #5
    e798:	e3020718 	movw	r0, #10008	; 0x2718
    e79c:	e3400005 	movt	r0, #5
    e7a0:	e3a0203b 	mov	r2, #59	; 0x3b
    e7a4:	ebfff777 	bl	c588 <assertion_failed>
    e7a8:	e5940000 	ldr	r0, [r4]
    e7ac:	e3500000 	cmp	r0, #0
    e7b0:	1affffee 	bne	e770 <CGPIOManager::Initialize()+0x20>
    e7b4:	e30216e0 	movw	r1, #9952	; 0x26e0
    e7b8:	e3401005 	movt	r1, #5
    e7bc:	e3020704 	movw	r0, #9988	; 0x2704
    e7c0:	e3400005 	movt	r0, #5
    e7c4:	e3a0203c 	mov	r2, #60	; 0x3c
    e7c8:	ebfff76e 	bl	c588 <assertion_failed>
    e7cc:	e5940000 	ldr	r0, [r4]
    e7d0:	eaffffe6 	b	e770 <CGPIOManager::Initialize()+0x20>

0000e7d4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    e7d4:	e5903004 	ldr	r3, [r0, #4]
    e7d8:	e92d4070 	push	{r4, r5, r6, lr}
    e7dc:	e1a04000 	mov	r4, r0
    e7e0:	e3530000 	cmp	r3, #0
    e7e4:	e1a05001 	mov	r5, r1
    e7e8:	0a000010 	beq	e830 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
    e7ec:	e3550000 	cmp	r5, #0
    e7f0:	0a00001c 	beq	e868 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    e7f4:	e5956004 	ldr	r6, [r5, #4]
    e7f8:	e3560035 	cmp	r6, #53	; 0x35
    e7fc:	8a000012 	bhi	e84c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x78>
    e800:	e0844106 	add	r4, r4, r6, lsl #2
    e804:	e5943008 	ldr	r3, [r4, #8]
    e808:	e3530000 	cmp	r3, #0
    e80c:	0a000005 	beq	e828 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
    e810:	e30216e0 	movw	r1, #9952	; 0x26e0
    e814:	e3401005 	movt	r1, #5
    e818:	e30206f0 	movw	r0, #9968	; 0x26f0
    e81c:	e3400005 	movt	r0, #5
    e820:	e3a0204b 	mov	r2, #75	; 0x4b
    e824:	ebfff757 	bl	c588 <assertion_failed>
    e828:	e5845008 	str	r5, [r4, #8]
    e82c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e830:	e30216e0 	movw	r1, #9952	; 0x26e0
    e834:	e3401005 	movt	r1, #5
    e838:	e302072c 	movw	r0, #10028	; 0x272c
    e83c:	e3400005 	movt	r0, #5
    e840:	e3a02045 	mov	r2, #69	; 0x45
    e844:	ebfff74f 	bl	c588 <assertion_failed>
    e848:	eaffffe7 	b	e7ec <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
    e84c:	e30216e0 	movw	r1, #9952	; 0x26e0
    e850:	e3401005 	movt	r1, #5
    e854:	e301024c 	movw	r0, #4684	; 0x124c
    e858:	e3400005 	movt	r0, #5
    e85c:	e3a02049 	mov	r2, #73	; 0x49
    e860:	ebfff748 	bl	c588 <assertion_failed>
    e864:	eaffffe5 	b	e800 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
    e868:	e30216e0 	movw	r1, #9952	; 0x26e0
    e86c:	e3401005 	movt	r1, #5
    e870:	e302073c 	movw	r0, #10044	; 0x273c
    e874:	e3400005 	movt	r0, #5
    e878:	e3a02047 	mov	r2, #71	; 0x47
    e87c:	ebfff741 	bl	c588 <assertion_failed>
    e880:	eaffffdb 	b	e7f4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>

0000e884 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    e884:	e5903004 	ldr	r3, [r0, #4]
    e888:	e92d4070 	push	{r4, r5, r6, lr}
    e88c:	e1a04000 	mov	r4, r0
    e890:	e3530000 	cmp	r3, #0
    e894:	e1a05001 	mov	r5, r1
    e898:	0a00000b 	beq	e8cc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
    e89c:	e3550000 	cmp	r5, #0
    e8a0:	0a000021 	beq	e92c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    e8a4:	e5955004 	ldr	r5, [r5, #4]
    e8a8:	e3550035 	cmp	r5, #53	; 0x35
    e8ac:	8a00000d 	bhi	e8e8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x64>
    e8b0:	e0844105 	add	r4, r4, r5, lsl #2
    e8b4:	e5943008 	ldr	r3, [r4, #8]
    e8b8:	e3530000 	cmp	r3, #0
    e8bc:	0a000013 	beq	e910 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
    e8c0:	e3a03000 	mov	r3, #0
    e8c4:	e5843008 	str	r3, [r4, #8]
    e8c8:	e8bd8070 	pop	{r4, r5, r6, pc}
    e8cc:	e30216e0 	movw	r1, #9952	; 0x26e0
    e8d0:	e3401005 	movt	r1, #5
    e8d4:	e302072c 	movw	r0, #10028	; 0x272c
    e8d8:	e3400005 	movt	r0, #5
    e8dc:	e3a02052 	mov	r2, #82	; 0x52
    e8e0:	ebfff728 	bl	c588 <assertion_failed>
    e8e4:	eaffffec 	b	e89c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
    e8e8:	e0844105 	add	r4, r4, r5, lsl #2
    e8ec:	e30216e0 	movw	r1, #9952	; 0x26e0
    e8f0:	e3401005 	movt	r1, #5
    e8f4:	e301024c 	movw	r0, #4684	; 0x124c
    e8f8:	e3400005 	movt	r0, #5
    e8fc:	e3a02056 	mov	r2, #86	; 0x56
    e900:	ebfff720 	bl	c588 <assertion_failed>
    e904:	e5943008 	ldr	r3, [r4, #8]
    e908:	e3530000 	cmp	r3, #0
    e90c:	1affffeb 	bne	e8c0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    e910:	e30216e0 	movw	r1, #9952	; 0x26e0
    e914:	e3401005 	movt	r1, #5
    e918:	e3020748 	movw	r0, #10056	; 0x2748
    e91c:	e3400005 	movt	r0, #5
    e920:	e3a02058 	mov	r2, #88	; 0x58
    e924:	ebfff717 	bl	c588 <assertion_failed>
    e928:	eaffffe4 	b	e8c0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    e92c:	e30216e0 	movw	r1, #9952	; 0x26e0
    e930:	e3401005 	movt	r1, #5
    e934:	e302073c 	movw	r0, #10044	; 0x273c
    e938:	e3400005 	movt	r0, #5
    e93c:	e3a02054 	mov	r2, #84	; 0x54
    e940:	ebfff710 	bl	c588 <assertion_failed>
    e944:	eaffffd6 	b	e8a4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>

0000e948 <CGPIOManager::InterruptHandler()>:
    e948:	e5903004 	ldr	r3, [r0, #4]
    e94c:	e92d4070 	push	{r4, r5, r6, lr}
    e950:	e1a06000 	mov	r6, r0
    e954:	e3530000 	cmp	r3, #0
    e958:	0a00001b 	beq	e9cc <CGPIOManager::InterruptHandler()+0x84>
    e95c:	e3a03000 	mov	r3, #0
    e960:	e3433f20 	movt	r3, #16160	; 0x3f20
    e964:	e1a02003 	mov	r2, r3
    e968:	e3a04000 	mov	r4, #0
    e96c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
    e970:	ea000004 	b	e988 <CGPIOManager::InterruptHandler()+0x40>
    e974:	e2844001 	add	r4, r4, #1
    e978:	e314001f 	tst	r4, #31
    e97c:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    e980:	e3540036 	cmp	r4, #54	; 0x36
    e984:	08bd8070 	popeq	{r4, r5, r6, pc}
    e988:	e3130001 	tst	r3, #1
    e98c:	e1a030a3 	lsr	r3, r3, #1
    e990:	0afffff7 	beq	e974 <CGPIOManager::InterruptHandler()+0x2c>
    e994:	e2843002 	add	r3, r4, #2
    e998:	e204501f 	and	r5, r4, #31
    e99c:	e3a02001 	mov	r2, #1
    e9a0:	e7960103 	ldr	r0, [r6, r3, lsl #2]
    e9a4:	e1a05512 	lsl	r5, r2, r5
    e9a8:	e3500000 	cmp	r0, #0
    e9ac:	0a00000d 	beq	e9e8 <CGPIOManager::InterruptHandler()+0xa0>
    e9b0:	ebffec4c 	bl	9ae8 <CGPIOPin::InterruptHandler()>
    e9b4:	e3a03010 	mov	r3, #16
    e9b8:	e3403fc8 	movt	r3, #4040	; 0xfc8
    e9bc:	e08332a4 	add	r3, r3, r4, lsr #5
    e9c0:	e1a03103 	lsl	r3, r3, #2
    e9c4:	e5835000 	str	r5, [r3]
    e9c8:	e8bd8070 	pop	{r4, r5, r6, pc}
    e9cc:	e30216e0 	movw	r1, #9952	; 0x26e0
    e9d0:	e3401005 	movt	r1, #5
    e9d4:	e302072c 	movw	r0, #10028	; 0x272c
    e9d8:	e3400005 	movt	r0, #5
    e9dc:	e3a0205e 	mov	r2, #94	; 0x5e
    e9e0:	ebfff6e8 	bl	c588 <assertion_failed>
    e9e4:	eaffffdc 	b	e95c <CGPIOManager::InterruptHandler()+0x14>
    e9e8:	e1a00004 	mov	r0, r4
    e9ec:	ebffec69 	bl	9b98 <CGPIOPin::DisableAllInterrupts(unsigned int)>
    e9f0:	eaffffef 	b	e9b4 <CGPIOManager::InterruptHandler()+0x6c>

0000e9f4 <CGPIOManager::InterruptStub(void*)>:
    e9f4:	e92d4010 	push	{r4, lr}
    e9f8:	e2504000 	subs	r4, r0, #0
    e9fc:	0a000002 	beq	ea0c <CGPIOManager::InterruptStub(void*)+0x18>
    ea00:	e1a00004 	mov	r0, r4
    ea04:	e8bd4010 	pop	{r4, lr}
    ea08:	eaffffce 	b	e948 <CGPIOManager::InterruptHandler()>
    ea0c:	e30216e0 	movw	r1, #9952	; 0x26e0
    ea10:	e3401005 	movt	r1, #5
    ea14:	e302075c 	movw	r0, #10076	; 0x275c
    ea18:	e3400005 	movt	r0, #5
    ea1c:	e3a0208a 	mov	r2, #138	; 0x8a
    ea20:	ebfff6d8 	bl	c588 <assertion_failed>
    ea24:	e1a00004 	mov	r0, r4
    ea28:	e8bd4010 	pop	{r4, lr}
    ea2c:	eaffffc5 	b	e948 <CGPIOManager::InterruptHandler()>

0000ea30 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    ea30:	e12fff1e 	bx	lr

0000ea34 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    ea34:	e92d4010 	push	{r4, lr}
    ea38:	e1a04000 	mov	r4, r0
    ea3c:	ebffed26 	bl	9edc <operator delete(void*)>
    ea40:	e1a00004 	mov	r0, r4
    ea44:	e8bd8010 	pop	{r4, pc}

0000ea48 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
    ea48:	e92d4070 	push	{r4, r5, r6, lr}
    ea4c:	e3024d98 	movw	r4, #11672	; 0x2d98
    ea50:	e3404005 	movt	r4, #5
    ea54:	e1a05000 	mov	r5, r0
    ea58:	e1a06001 	mov	r6, r1
    ea5c:	e5943000 	ldr	r3, [r4]
    ea60:	e3530000 	cmp	r3, #0
    ea64:	1a00001a 	bne	ead4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x8c>
    ea68:	e1d500bc 	ldrh	r0, [r5, #12]
    ea6c:	e1d530be 	ldrh	r3, [r5, #14]
    ea70:	e5856008 	str	r6, [r5, #8]
    ea74:	e0402003 	sub	r2, r0, r3
    ea78:	e6bf2072 	sxth	r2, r2
    ea7c:	e3520000 	cmp	r2, #0
    ea80:	da00000c 	ble	eab8 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x70>
    ea84:	e3560000 	cmp	r6, #0
    ea88:	1a00000c 	bne	eac0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x78>
    ea8c:	e2833001 	add	r3, r3, #1
    ea90:	e6ff3073 	uxth	r3, r3
    ea94:	e1c530be 	strh	r3, [r5, #14]
    ea98:	e5951004 	ldr	r1, [r5, #4]
    ea9c:	e1833800 	orr	r3, r3, r0, lsl #16
    eaa0:	e5942004 	ldr	r2, [r4, #4]
    eaa4:	e7823101 	str	r3, [r2, r1, lsl #2]
    eaa8:	e5943000 	ldr	r3, [r4]
    eaac:	e3530000 	cmp	r3, #0
    eab0:	1a000005 	bne	eacc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x84>
    eab4:	e8bd8070 	pop	{r4, r5, r6, pc}
    eab8:	e3560000 	cmp	r6, #0
    eabc:	1a000006 	bne	eadc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x94>
    eac0:	e5943000 	ldr	r3, [r4]
    eac4:	e3530000 	cmp	r3, #0
    eac8:	08bd8070 	popeq	{r4, r5, r6, pc}
    eacc:	e8bd4070 	pop	{r4, r5, r6, lr}
    ead0:	eaffed10 	b	9f18 <LeaveCritical>
    ead4:	ebffed02 	bl	9ee4 <EnterCritical>
    ead8:	eaffffe2 	b	ea68 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x20>
    eadc:	e2800001 	add	r0, r0, #1
    eae0:	e6ff0070 	uxth	r0, r0
    eae4:	e1c500bc 	strh	r0, [r5, #12]
    eae8:	eaffffea 	b	ea98 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x50>

0000eaec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    eaec:	e3510001 	cmp	r1, #1
    eaf0:	e92d4030 	push	{r4, r5, lr}
    eaf4:	e59f20dc 	ldr	r2, [pc, #220]	; ebd8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xec>
    eaf8:	e3a03000 	mov	r3, #0
    eafc:	e24dd024 	sub	sp, sp, #36	; 0x24
    eb00:	e1a04000 	mov	r4, r0
    eb04:	e5801004 	str	r1, [r0, #4]
    eb08:	e5802000 	str	r2, [r0]
    eb0c:	e1c030bc 	strh	r3, [r0, #12]
    eb10:	e1c030be 	strh	r3, [r0, #14]
    eb14:	9a000002 	bls	eb24 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
    eb18:	e1a00004 	mov	r0, r4
    eb1c:	e28dd024 	add	sp, sp, #36	; 0x24
    eb20:	e8bd8030 	pop	{r4, r5, pc}
    eb24:	e3025d98 	movw	r5, #11672	; 0x2d98
    eb28:	e3405005 	movt	r5, #5
    eb2c:	e5953000 	ldr	r3, [r5]
    eb30:	e3530000 	cmp	r3, #0
    eb34:	1a000009 	bne	eb60 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x74>
    eb38:	e5953004 	ldr	r3, [r5, #4]
    eb3c:	e3530000 	cmp	r3, #0
    eb40:	0a00000a 	beq	eb70 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x84>
    eb44:	e5953004 	ldr	r3, [r5, #4]
    eb48:	e3530000 	cmp	r3, #0
    eb4c:	0afffff1 	beq	eb18 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    eb50:	e3a01000 	mov	r1, #0
    eb54:	e1a00004 	mov	r0, r4
    eb58:	ebffffba 	bl	ea48 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
    eb5c:	eaffffed 	b	eb18 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    eb60:	ebffecdf 	bl	9ee4 <EnterCritical>
    eb64:	e5953004 	ldr	r3, [r5, #4]
    eb68:	e3530000 	cmp	r3, #0
    eb6c:	1a00000f 	bne	ebb0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xc4>
    eb70:	e28d0008 	add	r0, sp, #8
    eb74:	ebffe843 	bl	8c88 <CBcmPropertyTags::CBcmPropertyTags()>
    eb78:	e3a03000 	mov	r3, #0
    eb7c:	e58d3000 	str	r3, [sp]
    eb80:	e3a03010 	mov	r3, #16
    eb84:	e08d2003 	add	r2, sp, r3
    eb88:	e28d0008 	add	r0, sp, #8
    eb8c:	e3a01010 	mov	r1, #16
    eb90:	e3401004 	movt	r1, #4
    eb94:	ebffe883 	bl	8da8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    eb98:	e3500000 	cmp	r0, #0
    eb9c:	e28d0008 	add	r0, sp, #8
    eba0:	159d301c 	ldrne	r3, [sp, #28]
    eba4:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    eba8:	15853004 	strne	r3, [r5, #4]
    ebac:	ebffe83b 	bl	8ca0 <CBcmPropertyTags::~CBcmPropertyTags()>
    ebb0:	e5953000 	ldr	r3, [r5]
    ebb4:	e3530000 	cmp	r3, #0
    ebb8:	0a000000 	beq	ebc0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xd4>
    ebbc:	ebffecd5 	bl	9f18 <LeaveCritical>
    ebc0:	e5943004 	ldr	r3, [r4, #4]
    ebc4:	e3530001 	cmp	r3, #1
    ebc8:	9affffdd 	bls	eb44 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x58>
    ebcc:	e1a00004 	mov	r0, r4
    ebd0:	e28dd024 	add	sp, sp, #36	; 0x24
    ebd4:	e8bd8030 	pop	{r4, r5, pc}
    ebd8:	00052770 	.word	0x00052770

0000ebdc <CVirtualGPIOPin::Write(unsigned int)>:
    ebdc:	e5902004 	ldr	r2, [r0, #4]
    ebe0:	e1a03001 	mov	r3, r1
    ebe4:	e3520001 	cmp	r2, #1
    ebe8:	812fff1e 	bxhi	lr
    ebec:	e3022d98 	movw	r2, #11672	; 0x2d98
    ebf0:	e3402005 	movt	r2, #5
    ebf4:	e3510001 	cmp	r1, #1
    ebf8:	93a03000 	movls	r3, #0
    ebfc:	83a03001 	movhi	r3, #1
    ec00:	e5922004 	ldr	r2, [r2, #4]
    ec04:	e3520000 	cmp	r2, #0
    ec08:	03833001 	orreq	r3, r3, #1
    ec0c:	e3530000 	cmp	r3, #0
    ec10:	112fff1e 	bxne	lr
    ec14:	eaffff8b 	b	ea48 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>

0000ec18 <CVirtualGPIOPin::Invert()>:
    ec18:	e5901008 	ldr	r1, [r0, #8]
    ec1c:	e2211001 	eor	r1, r1, #1
    ec20:	eaffffed 	b	ebdc <CVirtualGPIOPin::Write(unsigned int)>

0000ec24 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    ec24:	e3023d98 	movw	r3, #11672	; 0x2d98
    ec28:	e3403005 	movt	r3, #5
    ec2c:	e3a02000 	mov	r2, #0
    ec30:	e5832000 	str	r2, [r3]
    ec34:	e12fff1e 	bx	lr

0000ec38 <CMachineInfo::CMachineInfo()>:
    ec38:	e3022da0 	movw	r2, #11680	; 0x2da0
    ec3c:	e3402005 	movt	r2, #5
    ec40:	e92d4030 	push	{r4, r5, lr}
    ec44:	e3a03000 	mov	r3, #0
    ec48:	e1a04000 	mov	r4, r0
    ec4c:	e5925000 	ldr	r5, [r2]
    ec50:	e3a0000a 	mov	r0, #10
    ec54:	e3a01003 	mov	r1, #3
    ec58:	e24dd024 	sub	sp, sp, #36	; 0x24
    ec5c:	e1550003 	cmp	r5, r3
    ec60:	e5c40004 	strb	r0, [r4, #4]
    ec64:	e5c41010 	strb	r1, [r4, #16]
    ec68:	e5843000 	str	r3, [r4]
    ec6c:	e5843008 	str	r3, [r4, #8]
    ec70:	e584300c 	str	r3, [r4, #12]
    ec74:	e5843014 	str	r3, [r4, #20]
    ec78:	0a00000e 	beq	ecb8 <CMachineInfo::CMachineInfo()+0x80>
    ec7c:	e595e000 	ldr	lr, [r5]
    ec80:	e5d5c004 	ldrb	ip, [r5, #4]
    ec84:	e5950008 	ldr	r0, [r5, #8]
    ec88:	e595100c 	ldr	r1, [r5, #12]
    ec8c:	e5d52010 	ldrb	r2, [r5, #16]
    ec90:	e5953014 	ldr	r3, [r5, #20]
    ec94:	e584e000 	str	lr, [r4]
    ec98:	e5c4c004 	strb	ip, [r4, #4]
    ec9c:	e5840008 	str	r0, [r4, #8]
    eca0:	e584100c 	str	r1, [r4, #12]
    eca4:	e5c42010 	strb	r2, [r4, #16]
    eca8:	e5843014 	str	r3, [r4, #20]
    ecac:	e1a00004 	mov	r0, r4
    ecb0:	e28dd024 	add	sp, sp, #36	; 0x24
    ecb4:	e8bd8030 	pop	{r4, r5, pc}
    ecb8:	e28d0008 	add	r0, sp, #8
    ecbc:	e5824000 	str	r4, [r2]
    ecc0:	ebffe7f0 	bl	8c88 <CBcmPropertyTags::CBcmPropertyTags()>
    ecc4:	e3a03010 	mov	r3, #16
    ecc8:	e58d5000 	str	r5, [sp]
    eccc:	e28d0008 	add	r0, sp, #8
    ecd0:	e3a01002 	mov	r1, #2
    ecd4:	e3401001 	movt	r1, #1
    ecd8:	e08d2003 	add	r2, sp, r3
    ecdc:	ebffe831 	bl	8da8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ece0:	e3500000 	cmp	r0, #0
    ece4:	0a00000c 	beq	ed1c <CMachineInfo::CMachineInfo()+0xe4>
    ece8:	e59d201c 	ldr	r2, [sp, #28]
    ecec:	e2123502 	ands	r3, r2, #8388608	; 0x800000
    ecf0:	e5842000 	str	r2, [r4]
    ecf4:	1a00000b 	bne	ed28 <CMachineInfo::CMachineInfo()+0xf0>
    ecf8:	e3a01002 	mov	r1, #2
    ecfc:	e59f00fc 	ldr	r0, [pc, #252]	; ee00 <CMachineInfo::CMachineInfo()+0x1c8>
    ed00:	ea000000 	b	ed08 <CMachineInfo::CMachineInfo()+0xd0>
    ed04:	e7901203 	ldr	r1, [r0, r3, lsl #4]
    ed08:	e1520001 	cmp	r2, r1
    ed0c:	0a000011 	beq	ed58 <CMachineInfo::CMachineInfo()+0x120>
    ed10:	e2833001 	add	r3, r3, #1
    ed14:	e3530011 	cmp	r3, #17
    ed18:	1afffff9 	bne	ed04 <CMachineInfo::CMachineInfo()+0xcc>
    ed1c:	e28d0008 	add	r0, sp, #8
    ed20:	ebffe7de 	bl	8ca0 <CBcmPropertyTags::~CBcmPropertyTags()>
    ed24:	eaffffe0 	b	ecac <CMachineInfo::CMachineInfo()+0x74>
    ed28:	e59f10d4 	ldr	r1, [pc, #212]	; ee04 <CMachineInfo::CMachineInfo()+0x1cc>
    ed2c:	e1a03005 	mov	r3, r5
    ed30:	e7e70252 	ubfx	r0, r2, #4, #8
    ed34:	ea000000 	b	ed3c <CMachineInfo::CMachineInfo()+0x104>
    ed38:	e511500c 	ldr	r5, [r1, #-12]
    ed3c:	e1550000 	cmp	r5, r0
    ed40:	e281100c 	add	r1, r1, #12
    ed44:	0a000011 	beq	ed90 <CMachineInfo::CMachineInfo()+0x158>
    ed48:	e2833001 	add	r3, r3, #1
    ed4c:	e3530008 	cmp	r3, #8
    ed50:	1afffff8 	bne	ed38 <CMachineInfo::CMachineInfo()+0x100>
    ed54:	eafffff0 	b	ed1c <CMachineInfo::CMachineInfo()+0xe4>
    ed58:	e3022778 	movw	r2, #10104	; 0x2778
    ed5c:	e3402005 	movt	r2, #5
    ed60:	e3a01000 	mov	r1, #0
    ed64:	e3a00001 	mov	r0, #1
    ed68:	e0823203 	add	r3, r2, r3, lsl #4
    ed6c:	e5c41010 	strb	r1, [r4, #16]
    ed70:	e5840008 	str	r0, [r4, #8]
    ed74:	e5d31064 	ldrb	r1, [r3, #100]	; 0x64
    ed78:	e5932068 	ldr	r2, [r3, #104]	; 0x68
    ed7c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    ed80:	e5c41004 	strb	r1, [r4, #4]
    ed84:	e584200c 	str	r2, [r4, #12]
    ed88:	e5843014 	str	r3, [r4, #20]
    ed8c:	eaffffe2 	b	ed1c <CMachineInfo::CMachineInfo()+0xe4>
    ed90:	e3a0c00c 	mov	ip, #12
    ed94:	e7e2ea52 	ubfx	lr, r2, #20, #3
    ed98:	e3021778 	movw	r1, #10104	; 0x2778
    ed9c:	e3401005 	movt	r1, #5
    eda0:	e3a00c01 	mov	r0, #256	; 0x100
    eda4:	e7e35652 	ubfx	r5, r2, #12, #4
    eda8:	e021139c 	mla	r1, ip, r3, r1
    edac:	e3550002 	cmp	r5, #2
    edb0:	e202300f 	and	r3, r2, #15
    edb4:	e5c45010 	strb	r5, [r4, #16]
    edb8:	e5d1c004 	ldrb	ip, [r1, #4]
    edbc:	e1a02e10 	lsl	r2, r0, lr
    edc0:	e5842014 	str	r2, [r4, #20]
    edc4:	83a02003 	movhi	r2, #3
    edc8:	85c42010 	strbhi	r2, [r4, #16]
    edcc:	e35e0000 	cmp	lr, #0
    edd0:	035c0003 	cmpeq	ip, #3
    edd4:	e5911008 	ldr	r1, [r1, #8]
    edd8:	e2833001 	add	r3, r3, #1
    eddc:	e5c4c004 	strb	ip, [r4, #4]
    ede0:	e5841008 	str	r1, [r4, #8]
    ede4:	e584300c 	str	r3, [r4, #12]
    ede8:	1affffcb 	bne	ed1c <CMachineInfo::CMachineInfo()+0xe4>
    edec:	e3530001 	cmp	r3, #1
    edf0:	13a03002 	movne	r3, #2
    edf4:	03a03001 	moveq	r3, #1
    edf8:	e5c43004 	strb	r3, [r4, #4]
    edfc:	eaffffc6 	b	ed1c <CMachineInfo::CMachineInfo()+0xe4>
    ee00:	000527d8 	.word	0x000527d8
    ee04:	00052784 	.word	0x00052784

0000ee08 <CMachineInfo::~CMachineInfo()>:
    ee08:	e3023da0 	movw	r3, #11680	; 0x2da0
    ee0c:	e3403005 	movt	r3, #5
    ee10:	e3a0100a 	mov	r1, #10
    ee14:	e5c01004 	strb	r1, [r0, #4]
    ee18:	e5932000 	ldr	r2, [r3]
    ee1c:	e1500002 	cmp	r0, r2
    ee20:	03a02000 	moveq	r2, #0
    ee24:	05832000 	streq	r2, [r3]
    ee28:	e12fff1e 	bx	lr

0000ee2c <CMachineInfo::GetMachineModel() const>:
    ee2c:	e5d00004 	ldrb	r0, [r0, #4]
    ee30:	e12fff1e 	bx	lr

0000ee34 <CMachineInfo::GetMachineName() const>:
    ee34:	e5d02004 	ldrb	r2, [r0, #4]
    ee38:	e3023778 	movw	r3, #10104	; 0x2778
    ee3c:	e3403005 	movt	r3, #5
    ee40:	e0833102 	add	r3, r3, r2, lsl #2
    ee44:	e5930170 	ldr	r0, [r3, #368]	; 0x170
    ee48:	e12fff1e 	bx	lr

0000ee4c <CMachineInfo::GetModelMajor() const>:
    ee4c:	e5900008 	ldr	r0, [r0, #8]
    ee50:	e12fff1e 	bx	lr

0000ee54 <CMachineInfo::GetModelRevision() const>:
    ee54:	e590000c 	ldr	r0, [r0, #12]
    ee58:	e12fff1e 	bx	lr

0000ee5c <CMachineInfo::GetSoCType() const>:
    ee5c:	e5d00010 	ldrb	r0, [r0, #16]
    ee60:	e12fff1e 	bx	lr

0000ee64 <CMachineInfo::GetRAMSize() const>:
    ee64:	e5900014 	ldr	r0, [r0, #20]
    ee68:	e12fff1e 	bx	lr

0000ee6c <CMachineInfo::GetSoCName() const>:
    ee6c:	e5d02010 	ldrb	r2, [r0, #16]
    ee70:	e3023778 	movw	r3, #10104	; 0x2778
    ee74:	e3403005 	movt	r3, #5
    ee78:	e0833102 	add	r3, r3, r2, lsl #2
    ee7c:	e593019c 	ldr	r0, [r3, #412]	; 0x19c
    ee80:	e12fff1e 	bx	lr

0000ee84 <CMachineInfo::GetRevisionRaw() const>:
    ee84:	e5900000 	ldr	r0, [r0]
    ee88:	e12fff1e 	bx	lr

0000ee8c <CMachineInfo::GetClockRate(unsigned int) const>:
    ee8c:	e92d4070 	push	{r4, r5, r6, lr}
    ee90:	e1a06000 	mov	r6, r0
    ee94:	e1a05001 	mov	r5, r1
    ee98:	e24dd028 	sub	sp, sp, #40	; 0x28
    ee9c:	e28d000c 	add	r0, sp, #12
    eea0:	ebffe778 	bl	8c88 <CBcmPropertyTags::CBcmPropertyTags()>
    eea4:	e3a03004 	mov	r3, #4
    eea8:	e58d3000 	str	r3, [sp]
    eeac:	e3a03014 	mov	r3, #20
    eeb0:	e28d000c 	add	r0, sp, #12
    eeb4:	e3a01002 	mov	r1, #2
    eeb8:	e3401003 	movt	r1, #3
    eebc:	e08d2003 	add	r2, sp, r3
    eec0:	e58d5020 	str	r5, [sp, #32]
    eec4:	ebffe7b7 	bl	8da8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    eec8:	e2504000 	subs	r4, r0, #0
    eecc:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
    eed0:	1a00000b 	bne	ef04 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    eed4:	e3550002 	cmp	r5, #2
    eed8:	0a00000e 	beq	ef18 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    eedc:	e3550004 	cmp	r5, #4
    eee0:	0a000012 	beq	ef30 <CMachineInfo::GetClockRate(unsigned int) const+0xa4>
    eee4:	e3550001 	cmp	r5, #1
    eee8:	0a00000d 	beq	ef24 <CMachineInfo::GetClockRate(unsigned int) const+0x98>
    eeec:	e3021924 	movw	r1, #10532	; 0x2924
    eef0:	e3401005 	movt	r1, #5
    eef4:	e30206dc 	movw	r0, #9948	; 0x26dc
    eef8:	e3400005 	movt	r0, #5
    eefc:	e3a02f43 	mov	r2, #268	; 0x10c
    ef00:	ebfff5a0 	bl	c588 <assertion_failed>
    ef04:	e28d000c 	add	r0, sp, #12
    ef08:	ebffe764 	bl	8ca0 <CBcmPropertyTags::~CBcmPropertyTags()>
    ef0c:	e1a00004 	mov	r0, r4
    ef10:	e28dd028 	add	sp, sp, #40	; 0x28
    ef14:	e8bd8070 	pop	{r4, r5, r6, pc}
    ef18:	e3a04b1b 	mov	r4, #27648	; 0x6c00
    ef1c:	e34042dc 	movt	r4, #732	; 0x2dc
    ef20:	eafffff7 	b	ef04 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    ef24:	e3a04ce1 	mov	r4, #57600	; 0xe100
    ef28:	e34045f5 	movt	r4, #1525	; 0x5f5
    ef2c:	eafffff4 	b	ef04 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    ef30:	e5962008 	ldr	r2, [r6, #8]
    ef34:	e3a03ca3 	mov	r3, #41728	; 0xa300
    ef38:	e34131e1 	movt	r3, #4577	; 0x11e1
    ef3c:	e3520002 	cmp	r2, #2
    ef40:	e30b4280 	movw	r4, #45696	; 0xb280
    ef44:	e3404ee6 	movt	r4, #3814	; 0xee6
    ef48:	81a04003 	movhi	r4, r3
    ef4c:	eaffffec 	b	ef04 <CMachineInfo::GetClockRate(unsigned int) const+0x78>

0000ef50 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    ef50:	e3510036 	cmp	r1, #54	; 0x36
    ef54:	0a00000f 	beq	ef98 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x48>
    ef58:	e3510037 	cmp	r1, #55	; 0x37
    ef5c:	1a000004 	bne	ef74 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    ef60:	e5d03004 	ldrb	r3, [r0, #4]
    ef64:	e3530003 	cmp	r3, #3
    ef68:	c3a00028 	movgt	r0, #40	; 0x28
    ef6c:	d3a0002d 	movle	r0, #45	; 0x2d
    ef70:	e12fff1e 	bx	lr
    ef74:	e92d4010 	push	{r4, lr}
    ef78:	e3002137 	movw	r2, #311	; 0x137
    ef7c:	e3021924 	movw	r1, #10532	; 0x2924
    ef80:	e3401005 	movt	r1, #5
    ef84:	e30206dc 	movw	r0, #9948	; 0x26dc
    ef88:	e3400005 	movt	r0, #5
    ef8c:	ebfff57d 	bl	c588 <assertion_failed>
    ef90:	e3a00000 	mov	r0, #0
    ef94:	e8bd8010 	pop	{r4, pc}
    ef98:	e5d03004 	ldrb	r3, [r0, #4]
    ef9c:	e3530003 	cmp	r3, #3
    efa0:	ca000001 	bgt	efac <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
    efa4:	e3a00028 	mov	r0, #40	; 0x28
    efa8:	e12fff1e 	bx	lr
    efac:	e5903008 	ldr	r3, [r0, #8]
    efb0:	e3530003 	cmp	r3, #3
    efb4:	33a0002d 	movcc	r0, #45	; 0x2d
    efb8:	23a00029 	movcs	r0, #41	; 0x29
    efbc:	e12fff1e 	bx	lr

0000efc0 <CMachineInfo::GetDevice(TDeviceId) const>:
    efc0:	e3510000 	cmp	r1, #0
    efc4:	1a000003 	bne	efd8 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    efc8:	e5d00004 	ldrb	r0, [r0, #4]
    efcc:	e2500001 	subs	r0, r0, #1
    efd0:	13a00001 	movne	r0, #1
    efd4:	e12fff1e 	bx	lr
    efd8:	e92d4010 	push	{r4, lr}
    efdc:	e3a02e15 	mov	r2, #336	; 0x150
    efe0:	e3021924 	movw	r1, #10532	; 0x2924
    efe4:	e3401005 	movt	r1, #5
    efe8:	e30206dc 	movw	r0, #9948	; 0x26dc
    efec:	e3400005 	movt	r0, #5
    eff0:	ebfff564 	bl	c588 <assertion_failed>
    eff4:	e3a00000 	mov	r0, #0
    eff8:	e8bd8010 	pop	{r4, pc}

0000effc <CMachineInfo::Get()>:
    effc:	e92d4010 	push	{r4, lr}
    f000:	e3024da0 	movw	r4, #11680	; 0x2da0
    f004:	e3404005 	movt	r4, #5
    f008:	e5940000 	ldr	r0, [r4]
    f00c:	e3500000 	cmp	r0, #0
    f010:	18bd8010 	popne	{r4, pc}
    f014:	e3002159 	movw	r2, #345	; 0x159
    f018:	e3021924 	movw	r1, #10532	; 0x2924
    f01c:	e3401005 	movt	r1, #5
    f020:	e301046c 	movw	r0, #5228	; 0x146c
    f024:	e3400005 	movt	r0, #5
    f028:	ebfff556 	bl	c588 <assertion_failed>
    f02c:	e5940000 	ldr	r0, [r4]
    f030:	e8bd8010 	pop	{r4, pc}

0000f034 <InvalidateDataCacheL1Only>:
    f034:	e92d0070 	push	{r4, r5, r6}
    f038:	e3a00000 	mov	r0, #0
    f03c:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
    f040:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
    f044:	e3071fff 	movw	r1, #32767	; 0x7fff
    f048:	e00126a0 	and	r2, r1, r0, lsr #13
    f04c:	e30013ff 	movw	r1, #1023	; 0x3ff
    f050:	e00131a0 	and	r3, r1, r0, lsr #3
    f054:	e2822001 	add	r2, r2, #1
    f058:	e2000007 	and	r0, r0, #7
    f05c:	e2800004 	add	r0, r0, #4
    f060:	e16f1f13 	clz	r1, r3
    f064:	e2834001 	add	r4, r3, #1
    f068:	e2422001 	sub	r2, r2, #1
    f06c:	e1a03004 	mov	r3, r4
    f070:	e2533001 	subs	r3, r3, #1
    f074:	e1a05113 	lsl	r5, r3, r1
    f078:	e1a06012 	lsl	r6, r2, r0
    f07c:	e1855006 	orr	r5, r5, r6
    f080:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
    f084:	cafffff9 	bgt	f070 <InvalidateDataCacheL1Only+0x3c>
    f088:	e3520000 	cmp	r2, #0
    f08c:	cafffff5 	bgt	f068 <InvalidateDataCacheL1Only+0x34>
    f090:	f57ff04e 	dsb	st
    f094:	f57ff06f 	isb	sy
    f098:	e8bd0070 	pop	{r4, r5, r6}
    f09c:	e12fff1e 	bx	lr

0000f0a0 <InvalidateDataCache>:
    f0a0:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    f0a4:	f57ff05f 	dmb	sy
    f0a8:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    f0ac:	e1a03ba0 	lsr	r3, r0, #23
    f0b0:	e213300e 	ands	r3, r3, #14
    f0b4:	0a00001d 	beq	f130 <InvalidateDataCache+0x90>
    f0b8:	e3a0a000 	mov	sl, #0
    f0bc:	e08a20aa 	add	r2, sl, sl, lsr #1
    f0c0:	e1a01230 	lsr	r1, r0, r2
    f0c4:	e2011007 	and	r1, r1, #7
    f0c8:	e3510002 	cmp	r1, #2
    f0cc:	ba000014 	blt	f124 <InvalidateDataCache+0x84>
    f0d0:	e10f9000 	mrs	r9, CPSR
    f0d4:	f10c0080 	cpsid	i
    f0d8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    f0dc:	f57ff06f 	isb	sy
    f0e0:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    f0e4:	e121f009 	msr	CPSR_c, r9
    f0e8:	e2012007 	and	r2, r1, #7
    f0ec:	e2822004 	add	r2, r2, #4
    f0f0:	e30043ff 	movw	r4, #1023	; 0x3ff
    f0f4:	e01441a1 	ands	r4, r4, r1, lsr #3
    f0f8:	e16f5f14 	clz	r5, r4
    f0fc:	e3077fff 	movw	r7, #32767	; 0x7fff
    f100:	e01776a1 	ands	r7, r7, r1, lsr #13
    f104:	e1a09007 	mov	r9, r7
    f108:	e18ab514 	orr	fp, sl, r4, lsl r5
    f10c:	e18bb219 	orr	fp, fp, r9, lsl r2
    f110:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
    f114:	e2599001 	subs	r9, r9, #1
    f118:	aafffffa 	bge	f108 <InvalidateDataCache+0x68>
    f11c:	e2544001 	subs	r4, r4, #1
    f120:	aafffff7 	bge	f104 <InvalidateDataCache+0x64>
    f124:	e28aa002 	add	sl, sl, #2
    f128:	e153000a 	cmp	r3, sl
    f12c:	caffffe2 	bgt	f0bc <InvalidateDataCache+0x1c>
    f130:	e3a0a000 	mov	sl, #0
    f134:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    f138:	f57ff04e 	dsb	st
    f13c:	f57ff06f 	isb	sy
    f140:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    f144:	e12fff1e 	bx	lr

0000f148 <CleanDataCache>:
    f148:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    f14c:	f57ff05f 	dmb	sy
    f150:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    f154:	e1a03ba0 	lsr	r3, r0, #23
    f158:	e213300e 	ands	r3, r3, #14
    f15c:	0a00001d 	beq	f1d8 <CleanDataCache+0x90>
    f160:	e3a0a000 	mov	sl, #0
    f164:	e08a20aa 	add	r2, sl, sl, lsr #1
    f168:	e1a01230 	lsr	r1, r0, r2
    f16c:	e2011007 	and	r1, r1, #7
    f170:	e3510002 	cmp	r1, #2
    f174:	ba000014 	blt	f1cc <CleanDataCache+0x84>
    f178:	e10f9000 	mrs	r9, CPSR
    f17c:	f10c0080 	cpsid	i
    f180:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    f184:	f57ff06f 	isb	sy
    f188:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    f18c:	e121f009 	msr	CPSR_c, r9
    f190:	e2012007 	and	r2, r1, #7
    f194:	e2822004 	add	r2, r2, #4
    f198:	e30043ff 	movw	r4, #1023	; 0x3ff
    f19c:	e01441a1 	ands	r4, r4, r1, lsr #3
    f1a0:	e16f5f14 	clz	r5, r4
    f1a4:	e3077fff 	movw	r7, #32767	; 0x7fff
    f1a8:	e01776a1 	ands	r7, r7, r1, lsr #13
    f1ac:	e1a09007 	mov	r9, r7
    f1b0:	e18ab514 	orr	fp, sl, r4, lsl r5
    f1b4:	e18bb219 	orr	fp, fp, r9, lsl r2
    f1b8:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
    f1bc:	e2599001 	subs	r9, r9, #1
    f1c0:	aafffffa 	bge	f1b0 <CleanDataCache+0x68>
    f1c4:	e2544001 	subs	r4, r4, #1
    f1c8:	aafffff7 	bge	f1ac <CleanDataCache+0x64>
    f1cc:	e28aa002 	add	sl, sl, #2
    f1d0:	e153000a 	cmp	r3, sl
    f1d4:	caffffe2 	bgt	f164 <CleanDataCache+0x1c>
    f1d8:	e3a0a000 	mov	sl, #0
    f1dc:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    f1e0:	f57ff04e 	dsb	st
    f1e4:	f57ff06f 	isb	sy
    f1e8:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    f1ec:	e12fff1e 	bx	lr

0000f1f0 <CleanAndInvalidateDataCacheRange>:
    f1f0:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
    f1f4:	e1a03823 	lsr	r3, r3, #16
    f1f8:	e203300f 	and	r3, r3, #15
    f1fc:	e3a02004 	mov	r2, #4
    f200:	e1a02312 	lsl	r2, r2, r3
    f204:	e0801001 	add	r1, r0, r1
    f208:	e2423001 	sub	r3, r2, #1
    f20c:	e1c00003 	bic	r0, r0, r3
    f210:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    f214:	e0800002 	add	r0, r0, r2
    f218:	e1500001 	cmp	r0, r1
    f21c:	3afffffb 	bcc	f210 <CleanAndInvalidateDataCacheRange+0x20>
    f220:	f57ff04e 	dsb	st
    f224:	e12fff1e 	bx	lr

0000f228 <CPtrList::CPtrList()>:
    f228:	e3a02000 	mov	r2, #0
    f22c:	e5802000 	str	r2, [r0]
    f230:	e12fff1e 	bx	lr

0000f234 <CPtrList::~CPtrList()>:
    f234:	e5903000 	ldr	r3, [r0]
    f238:	e92d4010 	push	{r4, lr}
    f23c:	e1a04000 	mov	r4, r0
    f240:	e3530000 	cmp	r3, #0
    f244:	0a000005 	beq	f260 <CPtrList::~CPtrList()+0x2c>
    f248:	e3021a18 	movw	r1, #10776	; 0x2a18
    f24c:	e3401005 	movt	r1, #5
    f250:	e3020a24 	movw	r0, #10788	; 0x2a24
    f254:	e3400005 	movt	r0, #5
    f258:	e3a0202a 	mov	r2, #42	; 0x2a
    f25c:	ebfff4c9 	bl	c588 <assertion_failed>
    f260:	e1a00004 	mov	r0, r4
    f264:	e8bd8010 	pop	{r4, pc}

0000f268 <CPtrList::GetFirst()>:
    f268:	e5900000 	ldr	r0, [r0]
    f26c:	e12fff1e 	bx	lr

0000f270 <CPtrList::GetNext(TPtrListElement*)>:
    f270:	e92d4010 	push	{r4, lr}
    f274:	e2514000 	subs	r4, r1, #0
    f278:	0a00000c 	beq	f2b0 <CPtrList::GetNext(TPtrListElement*)+0x40>
    f27c:	e5942000 	ldr	r2, [r4]
    f280:	e3043d43 	movw	r3, #19779	; 0x4d43
    f284:	e345304c 	movt	r3, #20556	; 0x504c
    f288:	e1520003 	cmp	r2, r3
    f28c:	0a000005 	beq	f2a8 <CPtrList::GetNext(TPtrListElement*)+0x38>
    f290:	e3021a18 	movw	r1, #10776	; 0x2a18
    f294:	e3401005 	movt	r1, #5
    f298:	e3020a44 	movw	r0, #10820	; 0x2a44
    f29c:	e3400005 	movt	r0, #5
    f2a0:	e3a02035 	mov	r2, #53	; 0x35
    f2a4:	ebfff4b7 	bl	c588 <assertion_failed>
    f2a8:	e5940008 	ldr	r0, [r4, #8]
    f2ac:	e8bd8010 	pop	{r4, pc}
    f2b0:	e3021a18 	movw	r1, #10776	; 0x2a18
    f2b4:	e3401005 	movt	r1, #5
    f2b8:	e3020a34 	movw	r0, #10804	; 0x2a34
    f2bc:	e3400005 	movt	r0, #5
    f2c0:	e3a02034 	mov	r2, #52	; 0x34
    f2c4:	ebfff4af 	bl	c588 <assertion_failed>
    f2c8:	eaffffeb 	b	f27c <CPtrList::GetNext(TPtrListElement*)+0xc>

0000f2cc <CPtrList::GetPtr(TPtrListElement*)>:
    f2cc:	e92d4010 	push	{r4, lr}
    f2d0:	e2514000 	subs	r4, r1, #0
    f2d4:	0a00000c 	beq	f30c <CPtrList::GetPtr(TPtrListElement*)+0x40>
    f2d8:	e5942000 	ldr	r2, [r4]
    f2dc:	e3043d43 	movw	r3, #19779	; 0x4d43
    f2e0:	e345304c 	movt	r3, #20556	; 0x504c
    f2e4:	e1520003 	cmp	r2, r3
    f2e8:	0a000005 	beq	f304 <CPtrList::GetPtr(TPtrListElement*)+0x38>
    f2ec:	e3021a18 	movw	r1, #10776	; 0x2a18
    f2f0:	e3401005 	movt	r1, #5
    f2f4:	e3020a44 	movw	r0, #10820	; 0x2a44
    f2f8:	e3400005 	movt	r0, #5
    f2fc:	e3a0203d 	mov	r2, #61	; 0x3d
    f300:	ebfff4a0 	bl	c588 <assertion_failed>
    f304:	e594000c 	ldr	r0, [r4, #12]
    f308:	e8bd8010 	pop	{r4, pc}
    f30c:	e3021a18 	movw	r1, #10776	; 0x2a18
    f310:	e3401005 	movt	r1, #5
    f314:	e3020a34 	movw	r0, #10804	; 0x2a34
    f318:	e3400005 	movt	r0, #5
    f31c:	e3a0203c 	mov	r2, #60	; 0x3c
    f320:	ebfff498 	bl	c588 <assertion_failed>
    f324:	eaffffeb 	b	f2d8 <CPtrList::GetPtr(TPtrListElement*)+0xc>

0000f328 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
    f328:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f32c:	e1a06000 	mov	r6, r0
    f330:	e3a00010 	mov	r0, #16
    f334:	e1a07002 	mov	r7, r2
    f338:	e1a04001 	mov	r4, r1
    f33c:	ebffeae4 	bl	9ed4 <operator new(unsigned int)>
    f340:	e5962000 	ldr	r2, [r6]
    f344:	e3043d43 	movw	r3, #19779	; 0x4d43
    f348:	e345304c 	movt	r3, #20556	; 0x504c
    f34c:	e3520000 	cmp	r2, #0
    f350:	e1a05000 	mov	r5, r0
    f354:	e580700c 	str	r7, [r0, #12]
    f358:	e5803000 	str	r3, [r0]
    f35c:	0a000029 	beq	f408 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
    f360:	e3540000 	cmp	r4, #0
    f364:	0a00002e 	beq	f424 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
    f368:	e5942000 	ldr	r2, [r4]
    f36c:	e3043d43 	movw	r3, #19779	; 0x4d43
    f370:	e345304c 	movt	r3, #20556	; 0x504c
    f374:	e1520003 	cmp	r2, r3
    f378:	0a000005 	beq	f394 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x6c>
    f37c:	e3021a18 	movw	r1, #10776	; 0x2a18
    f380:	e3401005 	movt	r1, #5
    f384:	e3020a84 	movw	r0, #10884	; 0x2a84
    f388:	e3400005 	movt	r0, #5
    f38c:	e3a0204e 	mov	r2, #78	; 0x4e
    f390:	ebfff47c 	bl	c588 <assertion_failed>
    f394:	e5963000 	ldr	r3, [r6]
    f398:	e1540003 	cmp	r4, r3
    f39c:	0a000013 	beq	f3f0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
    f3a0:	e5943004 	ldr	r3, [r4, #4]
    f3a4:	e5854008 	str	r4, [r5, #8]
    f3a8:	e3530000 	cmp	r3, #0
    f3ac:	e5853004 	str	r3, [r5, #4]
    f3b0:	0a00000c 	beq	f3e8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
    f3b4:	e5931000 	ldr	r1, [r3]
    f3b8:	e3042d43 	movw	r2, #19779	; 0x4d43
    f3bc:	e345204c 	movt	r2, #20556	; 0x504c
    f3c0:	e1510002 	cmp	r1, r2
    f3c4:	0a000006 	beq	f3e4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xbc>
    f3c8:	e3021a18 	movw	r1, #10776	; 0x2a18
    f3cc:	e3401005 	movt	r1, #5
    f3d0:	e3020aa8 	movw	r0, #10920	; 0x2aa8
    f3d4:	e3400005 	movt	r0, #5
    f3d8:	e3a02060 	mov	r2, #96	; 0x60
    f3dc:	ebfff469 	bl	c588 <assertion_failed>
    f3e0:	e5943004 	ldr	r3, [r4, #4]
    f3e4:	e5835008 	str	r5, [r3, #8]
    f3e8:	e5845004 	str	r5, [r4, #4]
    f3ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f3f0:	e3a03000 	mov	r3, #0
    f3f4:	e5845004 	str	r5, [r4, #4]
    f3f8:	e5854008 	str	r4, [r5, #8]
    f3fc:	e5865000 	str	r5, [r6]
    f400:	e5853004 	str	r3, [r5, #4]
    f404:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f408:	e3021a18 	movw	r1, #10776	; 0x2a18
    f40c:	e3401005 	movt	r1, #5
    f410:	e3020a68 	movw	r0, #10856	; 0x2a68
    f414:	e3400005 	movt	r0, #5
    f418:	e3a0204c 	mov	r2, #76	; 0x4c
    f41c:	ebfff459 	bl	c588 <assertion_failed>
    f420:	eaffffce 	b	f360 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x38>
    f424:	e3021a18 	movw	r1, #10776	; 0x2a18
    f428:	e3401005 	movt	r1, #5
    f42c:	e3020a78 	movw	r0, #10872	; 0x2a78
    f430:	e3400005 	movt	r0, #5
    f434:	e3a0204d 	mov	r2, #77	; 0x4d
    f438:	ebfff452 	bl	c588 <assertion_failed>
    f43c:	eaffffc9 	b	f368 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x40>

0000f440 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
    f440:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f444:	e1a06000 	mov	r6, r0
    f448:	e1a05001 	mov	r5, r1
    f44c:	e3a00010 	mov	r0, #16
    f450:	e1a07002 	mov	r7, r2
    f454:	ebffea9e 	bl	9ed4 <operator new(unsigned int)>
    f458:	e3550000 	cmp	r5, #0
    f45c:	e3043d43 	movw	r3, #19779	; 0x4d43
    f460:	e345304c 	movt	r3, #20556	; 0x504c
    f464:	e5803000 	str	r3, [r0]
    f468:	e1a04000 	mov	r4, r0
    f46c:	e580700c 	str	r7, [r0, #12]
    f470:	e5963000 	ldr	r3, [r6]
    f474:	0a000020 	beq	f4fc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
    f478:	e3530000 	cmp	r3, #0
    f47c:	0a00002b 	beq	f530 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
    f480:	e5952000 	ldr	r2, [r5]
    f484:	e3043d43 	movw	r3, #19779	; 0x4d43
    f488:	e345304c 	movt	r3, #20556	; 0x504c
    f48c:	e1520003 	cmp	r2, r3
    f490:	0a000005 	beq	f4ac <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
    f494:	e3021a18 	movw	r1, #10776	; 0x2a18
    f498:	e3401005 	movt	r1, #5
    f49c:	e3020ad0 	movw	r0, #10960	; 0x2ad0
    f4a0:	e3400005 	movt	r0, #5
    f4a4:	e3a0207e 	mov	r2, #126	; 0x7e
    f4a8:	ebfff436 	bl	c588 <assertion_failed>
    f4ac:	e5953008 	ldr	r3, [r5, #8]
    f4b0:	e5845004 	str	r5, [r4, #4]
    f4b4:	e3530000 	cmp	r3, #0
    f4b8:	e5843008 	str	r3, [r4, #8]
    f4bc:	0a00000c 	beq	f4f4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>
    f4c0:	e5931000 	ldr	r1, [r3]
    f4c4:	e3042d43 	movw	r2, #19779	; 0x4d43
    f4c8:	e345204c 	movt	r2, #20556	; 0x504c
    f4cc:	e1510002 	cmp	r1, r2
    f4d0:	0a000006 	beq	f4f0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb0>
    f4d4:	e3021a18 	movw	r1, #10776	; 0x2a18
    f4d8:	e3401005 	movt	r1, #5
    f4dc:	e3020af4 	movw	r0, #10996	; 0x2af4
    f4e0:	e3400005 	movt	r0, #5
    f4e4:	e3a02085 	mov	r2, #133	; 0x85
    f4e8:	ebfff426 	bl	c588 <assertion_failed>
    f4ec:	e5953008 	ldr	r3, [r5, #8]
    f4f0:	e5834004 	str	r4, [r3, #4]
    f4f4:	e5854008 	str	r4, [r5, #8]
    f4f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f4fc:	e3530000 	cmp	r3, #0
    f500:	0a000005 	beq	f51c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
    f504:	e3021a18 	movw	r1, #10776	; 0x2a18
    f508:	e3401005 	movt	r1, #5
    f50c:	e3020a24 	movw	r0, #10788	; 0x2a24
    f510:	e3400005 	movt	r0, #5
    f514:	e3a02074 	mov	r2, #116	; 0x74
    f518:	ebfff41a 	bl	c588 <assertion_failed>
    f51c:	e3a03000 	mov	r3, #0
    f520:	e5864000 	str	r4, [r6]
    f524:	e5843004 	str	r3, [r4, #4]
    f528:	e5843008 	str	r3, [r4, #8]
    f52c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f530:	e3021a18 	movw	r1, #10776	; 0x2a18
    f534:	e3401005 	movt	r1, #5
    f538:	e3020a68 	movw	r0, #10856	; 0x2a68
    f53c:	e3400005 	movt	r0, #5
    f540:	e3a0207d 	mov	r2, #125	; 0x7d
    f544:	ebfff40f 	bl	c588 <assertion_failed>
    f548:	eaffffcc 	b	f480 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x40>

0000f54c <CPtrList::Remove(TPtrListElement*)>:
    f54c:	e92d4070 	push	{r4, r5, r6, lr}
    f550:	e2514000 	subs	r4, r1, #0
    f554:	e1a05000 	mov	r5, r0
    f558:	0a000047 	beq	f67c <CPtrList::Remove(TPtrListElement*)+0x130>
    f55c:	e5942000 	ldr	r2, [r4]
    f560:	e3043d43 	movw	r3, #19779	; 0x4d43
    f564:	e345304c 	movt	r3, #20556	; 0x504c
    f568:	e1520003 	cmp	r2, r3
    f56c:	0a000005 	beq	f588 <CPtrList::Remove(TPtrListElement*)+0x3c>
    f570:	e3021a18 	movw	r1, #10776	; 0x2a18
    f574:	e3401005 	movt	r1, #5
    f578:	e3020a44 	movw	r0, #10820	; 0x2a44
    f57c:	e3400005 	movt	r0, #5
    f580:	e3a02090 	mov	r2, #144	; 0x90
    f584:	ebfff3ff 	bl	c588 <assertion_failed>
    f588:	e5953000 	ldr	r3, [r5]
    f58c:	e1540003 	cmp	r4, r3
    f590:	0a000026 	beq	f630 <CPtrList::Remove(TPtrListElement*)+0xe4>
    f594:	e5943004 	ldr	r3, [r4, #4]
    f598:	e3530000 	cmp	r3, #0
    f59c:	0a00003d 	beq	f698 <CPtrList::Remove(TPtrListElement*)+0x14c>
    f5a0:	e5931000 	ldr	r1, [r3]
    f5a4:	e3042d43 	movw	r2, #19779	; 0x4d43
    f5a8:	e345204c 	movt	r2, #20556	; 0x504c
    f5ac:	e1510002 	cmp	r1, r2
    f5b0:	0a000006 	beq	f5d0 <CPtrList::Remove(TPtrListElement*)+0x84>
    f5b4:	e3021a18 	movw	r1, #10776	; 0x2a18
    f5b8:	e3401005 	movt	r1, #5
    f5bc:	e3020b64 	movw	r0, #11108	; 0x2b64
    f5c0:	e3400005 	movt	r0, #5
    f5c4:	e3a0209f 	mov	r2, #159	; 0x9f
    f5c8:	ebfff3ee 	bl	c588 <assertion_failed>
    f5cc:	e5943004 	ldr	r3, [r4, #4]
    f5d0:	e5942008 	ldr	r2, [r4, #8]
    f5d4:	e5832008 	str	r2, [r3, #8]
    f5d8:	e5942008 	ldr	r2, [r4, #8]
    f5dc:	e3520000 	cmp	r2, #0
    f5e0:	0a00000d 	beq	f61c <CPtrList::Remove(TPtrListElement*)+0xd0>
    f5e4:	e5920000 	ldr	r0, [r2]
    f5e8:	e3041d43 	movw	r1, #19779	; 0x4d43
    f5ec:	e345104c 	movt	r1, #20556	; 0x504c
    f5f0:	e1500001 	cmp	r0, r1
    f5f4:	0a000007 	beq	f618 <CPtrList::Remove(TPtrListElement*)+0xcc>
    f5f8:	e3a020a4 	mov	r2, #164	; 0xa4
    f5fc:	e3021a18 	movw	r1, #10776	; 0x2a18
    f600:	e3401005 	movt	r1, #5
    f604:	e3020b20 	movw	r0, #11040	; 0x2b20
    f608:	e3400005 	movt	r0, #5
    f60c:	ebfff3dd 	bl	c588 <assertion_failed>
    f610:	e5942008 	ldr	r2, [r4, #8]
    f614:	e5943004 	ldr	r3, [r4, #4]
    f618:	e5823004 	str	r3, [r2, #4]
    f61c:	e3a03000 	mov	r3, #0
    f620:	e1a00004 	mov	r0, r4
    f624:	e5843000 	str	r3, [r4]
    f628:	e8bd4070 	pop	{r4, r5, r6, lr}
    f62c:	eaffea2a 	b	9edc <operator delete(void*)>
    f630:	e5943008 	ldr	r3, [r4, #8]
    f634:	e3530000 	cmp	r3, #0
    f638:	e5853000 	str	r3, [r5]
    f63c:	0afffff6 	beq	f61c <CPtrList::Remove(TPtrListElement*)+0xd0>
    f640:	e5931000 	ldr	r1, [r3]
    f644:	e3042d43 	movw	r2, #19779	; 0x4d43
    f648:	e345204c 	movt	r2, #20556	; 0x504c
    f64c:	e1510002 	cmp	r1, r2
    f650:	0a000006 	beq	f670 <CPtrList::Remove(TPtrListElement*)+0x124>
    f654:	e3021a18 	movw	r1, #10776	; 0x2a18
    f658:	e3401005 	movt	r1, #5
    f65c:	e3020b20 	movw	r0, #11040	; 0x2b20
    f660:	e3400005 	movt	r0, #5
    f664:	e3a02098 	mov	r2, #152	; 0x98
    f668:	ebfff3c6 	bl	c588 <assertion_failed>
    f66c:	e5943008 	ldr	r3, [r4, #8]
    f670:	e3a02000 	mov	r2, #0
    f674:	e5832004 	str	r2, [r3, #4]
    f678:	eaffffe7 	b	f61c <CPtrList::Remove(TPtrListElement*)+0xd0>
    f67c:	e3021a18 	movw	r1, #10776	; 0x2a18
    f680:	e3401005 	movt	r1, #5
    f684:	e3020a34 	movw	r0, #10804	; 0x2a34
    f688:	e3400005 	movt	r0, #5
    f68c:	e3a0208f 	mov	r2, #143	; 0x8f
    f690:	ebfff3bc 	bl	c588 <assertion_failed>
    f694:	eaffffb0 	b	f55c <CPtrList::Remove(TPtrListElement*)+0x10>
    f698:	e3021a18 	movw	r1, #10776	; 0x2a18
    f69c:	e3401005 	movt	r1, #5
    f6a0:	e3020b4c 	movw	r0, #11084	; 0x2b4c
    f6a4:	e3400005 	movt	r0, #5
    f6a8:	e3a0209e 	mov	r2, #158	; 0x9e
    f6ac:	ebfff3b5 	bl	c588 <assertion_failed>
    f6b0:	e5943004 	ldr	r3, [r4, #4]
    f6b4:	eaffffb9 	b	f5a0 <CPtrList::Remove(TPtrListElement*)+0x54>

0000f6b8 <CPtrList::Find(void*)>:
    f6b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f6bc:	e5904000 	ldr	r4, [r0]
    f6c0:	e3540000 	cmp	r4, #0
    f6c4:	0a000016 	beq	f724 <CPtrList::Find(void*)+0x6c>
    f6c8:	e3048d43 	movw	r8, #19779	; 0x4d43
    f6cc:	e345804c 	movt	r8, #20556	; 0x504c
    f6d0:	e3027a18 	movw	r7, #10776	; 0x2a18
    f6d4:	e3407005 	movt	r7, #5
    f6d8:	e3026a44 	movw	r6, #10820	; 0x2a44
    f6dc:	e3406005 	movt	r6, #5
    f6e0:	e1a05001 	mov	r5, r1
    f6e4:	ea000002 	b	f6f4 <CPtrList::Find(void*)+0x3c>
    f6e8:	e5944008 	ldr	r4, [r4, #8]
    f6ec:	e3540000 	cmp	r4, #0
    f6f0:	0a00000b 	beq	f724 <CPtrList::Find(void*)+0x6c>
    f6f4:	e5943000 	ldr	r3, [r4]
    f6f8:	e3a020b3 	mov	r2, #179	; 0xb3
    f6fc:	e1a01007 	mov	r1, r7
    f700:	e1a00006 	mov	r0, r6
    f704:	e1530008 	cmp	r3, r8
    f708:	0a000000 	beq	f710 <CPtrList::Find(void*)+0x58>
    f70c:	ebfff39d 	bl	c588 <assertion_failed>
    f710:	e594300c 	ldr	r3, [r4, #12]
    f714:	e1530005 	cmp	r3, r5
    f718:	1afffff2 	bne	f6e8 <CPtrList::Find(void*)+0x30>
    f71c:	e1a00004 	mov	r0, r4
    f720:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f724:	e3a04000 	mov	r4, #0
    f728:	e1a00004 	mov	r0, r4
    f72c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000f730 <mem_init>:
    f730:	e0801001 	add	r1, r0, r1
    f734:	e3022da4 	movw	r2, #11684	; 0x2da4
    f738:	e3402005 	movt	r2, #5
    f73c:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
    f740:	e3500605 	cmp	r0, #5242880	; 0x500000
    f744:	e2433a03 	sub	r3, r3, #12288	; 0x3000
    f748:	33a00605 	movcc	r0, #5242880	; 0x500000
    f74c:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
    f750:	e241c501 	sub	ip, r1, #4194304	; 0x400000
    f754:	e3c3300f 	bic	r3, r3, #15
    f758:	e5820000 	str	r0, [r2]
    f75c:	e582100c 	str	r1, [r2, #12]
    f760:	e582c004 	str	ip, [r2, #4]
    f764:	e5823008 	str	r3, [r2, #8]
    f768:	e12fff1e 	bx	lr

0000f76c <mem_get_size>:
    f76c:	e3023da4 	movw	r3, #11684	; 0x2da4
    f770:	e3403005 	movt	r3, #5
    f774:	e5930004 	ldr	r0, [r3, #4]
    f778:	e5931000 	ldr	r1, [r3]
    f77c:	e593200c 	ldr	r2, [r3, #12]
    f780:	e5933008 	ldr	r3, [r3, #8]
    f784:	e0400001 	sub	r0, r0, r1
    f788:	e0423003 	sub	r3, r2, r3
    f78c:	e0800003 	add	r0, r0, r3
    f790:	e12fff1e 	bx	lr

0000f794 <malloc>:
    f794:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f798:	e3027da4 	movw	r7, #11684	; 0x2da4
    f79c:	e3407005 	movt	r7, #5
    f7a0:	e1a05000 	mov	r5, r0
    f7a4:	e5973000 	ldr	r3, [r7]
    f7a8:	e3530000 	cmp	r3, #0
    f7ac:	0a000053 	beq	f900 <malloc+0x16c>
    f7b0:	e5973010 	ldr	r3, [r7, #16]
    f7b4:	e3530000 	cmp	r3, #0
    f7b8:	1a00004b 	bne	f8ec <malloc+0x158>
    f7bc:	e3024cc4 	movw	r4, #11460	; 0x2cc4
    f7c0:	e3404005 	movt	r4, #5
    f7c4:	e5943000 	ldr	r3, [r4]
    f7c8:	e3530000 	cmp	r3, #0
    f7cc:	0a000007 	beq	f7f0 <malloc+0x5c>
    f7d0:	e1550003 	cmp	r5, r3
    f7d4:	8a000002 	bhi	f7e4 <malloc+0x50>
    f7d8:	ea000011 	b	f824 <malloc+0x90>
    f7dc:	e1530005 	cmp	r3, r5
    f7e0:	2a00000f 	bcs	f824 <malloc+0x90>
    f7e4:	e5b43008 	ldr	r3, [r4, #8]!
    f7e8:	e3530000 	cmp	r3, #0
    f7ec:	1afffffa 	bne	f7dc <malloc+0x48>
    f7f0:	e5976000 	ldr	r6, [r7]
    f7f4:	e285301f 	add	r3, r5, #31
    f7f8:	e3c3300f 	bic	r3, r3, #15
    f7fc:	e5972004 	ldr	r2, [r7, #4]
    f800:	e0863003 	add	r3, r6, r3
    f804:	e1530002 	cmp	r3, r2
    f808:	e5873000 	str	r3, [r7]
    f80c:	9a000028 	bls	f8b4 <malloc+0x120>
    f810:	e5974010 	ldr	r4, [r7, #16]
    f814:	e3540000 	cmp	r4, #0
    f818:	1a000035 	bne	f8f4 <malloc+0x160>
    f81c:	e1a00004 	mov	r0, r4
    f820:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f824:	e5946004 	ldr	r6, [r4, #4]
    f828:	e3560000 	cmp	r6, #0
    f82c:	01a05003 	moveq	r5, r3
    f830:	0affffee 	beq	f7f0 <malloc+0x5c>
    f834:	e5962000 	ldr	r2, [r6]
    f838:	e3043d43 	movw	r3, #19779	; 0x4d43
    f83c:	e344324c 	movt	r3, #16972	; 0x424c
    f840:	e1520003 	cmp	r2, r3
    f844:	0a000005 	beq	f860 <malloc+0xcc>
    f848:	e3021b90 	movw	r1, #11152	; 0x2b90
    f84c:	e3401005 	movt	r1, #5
    f850:	e3020bb0 	movw	r0, #11184	; 0x2bb0
    f854:	e3400005 	movt	r0, #5
    f858:	e3a02089 	mov	r2, #137	; 0x89
    f85c:	ebfff349 	bl	c588 <assertion_failed>
    f860:	e5963008 	ldr	r3, [r6, #8]
    f864:	e5843004 	str	r3, [r4, #4]
    f868:	e5973010 	ldr	r3, [r7, #16]
    f86c:	e3530000 	cmp	r3, #0
    f870:	1a00001b 	bne	f8e4 <malloc+0x150>
    f874:	e2864010 	add	r4, r6, #16
    f878:	e3a03000 	mov	r3, #0
    f87c:	e314000f 	tst	r4, #15
    f880:	e5c63008 	strb	r3, [r6, #8]
    f884:	e5c63009 	strb	r3, [r6, #9]
    f888:	e5c6300a 	strb	r3, [r6, #10]
    f88c:	e5c6300b 	strb	r3, [r6, #11]
    f890:	0affffe1 	beq	f81c <malloc+0x88>
    f894:	e3a020a1 	mov	r2, #161	; 0xa1
    f898:	e3021b90 	movw	r1, #11152	; 0x2b90
    f89c:	e3401005 	movt	r1, #5
    f8a0:	e3020bd4 	movw	r0, #11220	; 0x2bd4
    f8a4:	e3400005 	movt	r0, #5
    f8a8:	ebfff336 	bl	c588 <assertion_failed>
    f8ac:	e1a00004 	mov	r0, r4
    f8b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f8b4:	e3a03042 	mov	r3, #66	; 0x42
    f8b8:	e3a00043 	mov	r0, #67	; 0x43
    f8bc:	e5c63003 	strb	r3, [r6, #3]
    f8c0:	e3a0104d 	mov	r1, #77	; 0x4d
    f8c4:	e5973010 	ldr	r3, [r7, #16]
    f8c8:	e3a0204c 	mov	r2, #76	; 0x4c
    f8cc:	e5865004 	str	r5, [r6, #4]
    f8d0:	e3530000 	cmp	r3, #0
    f8d4:	e5c60000 	strb	r0, [r6]
    f8d8:	e5c61001 	strb	r1, [r6, #1]
    f8dc:	e5c62002 	strb	r2, [r6, #2]
    f8e0:	0affffe3 	beq	f874 <malloc+0xe0>
    f8e4:	ebffe98b 	bl	9f18 <LeaveCritical>
    f8e8:	eaffffe1 	b	f874 <malloc+0xe0>
    f8ec:	ebffe97c 	bl	9ee4 <EnterCritical>
    f8f0:	eaffffb1 	b	f7bc <malloc+0x28>
    f8f4:	ebffe987 	bl	9f18 <LeaveCritical>
    f8f8:	e3a04000 	mov	r4, #0
    f8fc:	eaffffc6 	b	f81c <malloc+0x88>
    f900:	e3021b90 	movw	r1, #11152	; 0x2b90
    f904:	e3401005 	movt	r1, #5
    f908:	e3020b9c 	movw	r0, #11164	; 0x2b9c
    f90c:	e3400005 	movt	r0, #5
    f910:	e3a0206f 	mov	r2, #111	; 0x6f
    f914:	ebfff31b 	bl	c588 <assertion_failed>
    f918:	eaffffa4 	b	f7b0 <malloc+0x1c>

0000f91c <free>:
    f91c:	e92d4070 	push	{r4, r5, r6, lr}
    f920:	e2505000 	subs	r5, r0, #0
    f924:	08bd8070 	popeq	{r4, r5, r6, pc}
    f928:	e5352010 	ldr	r2, [r5, #-16]!
    f92c:	e3043d43 	movw	r3, #19779	; 0x4d43
    f930:	e344324c 	movt	r3, #16972	; 0x424c
    f934:	e1520003 	cmp	r2, r3
    f938:	0a000005 	beq	f954 <free+0x38>
    f93c:	e3021b90 	movw	r1, #11152	; 0x2b90
    f940:	e3401005 	movt	r1, #5
    f944:	e3020bb0 	movw	r0, #11184	; 0x2bb0
    f948:	e3400005 	movt	r0, #5
    f94c:	e3a020ae 	mov	r2, #174	; 0xae
    f950:	ebfff30c 	bl	c588 <assertion_failed>
    f954:	e3024cc4 	movw	r4, #11460	; 0x2cc4
    f958:	e3404005 	movt	r4, #5
    f95c:	e5943000 	ldr	r3, [r4]
    f960:	e3530000 	cmp	r3, #0
    f964:	08bd8070 	popeq	{r4, r5, r6, pc}
    f968:	e5952004 	ldr	r2, [r5, #4]
    f96c:	e1520003 	cmp	r2, r3
    f970:	1a000002 	bne	f980 <free+0x64>
    f974:	ea000005 	b	f990 <free+0x74>
    f978:	e1530002 	cmp	r3, r2
    f97c:	0a000003 	beq	f990 <free+0x74>
    f980:	e5b43008 	ldr	r3, [r4, #8]!
    f984:	e3530000 	cmp	r3, #0
    f988:	1afffffa 	bne	f978 <free+0x5c>
    f98c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f990:	e3026da4 	movw	r6, #11684	; 0x2da4
    f994:	e3406005 	movt	r6, #5
    f998:	e5963010 	ldr	r3, [r6, #16]
    f99c:	e3530000 	cmp	r3, #0
    f9a0:	1a000003 	bne	f9b4 <free+0x98>
    f9a4:	e5943004 	ldr	r3, [r4, #4]
    f9a8:	e5853008 	str	r3, [r5, #8]
    f9ac:	e5845004 	str	r5, [r4, #4]
    f9b0:	e8bd8070 	pop	{r4, r5, r6, pc}
    f9b4:	ebffe94a 	bl	9ee4 <EnterCritical>
    f9b8:	e5962010 	ldr	r2, [r6, #16]
    f9bc:	e5943004 	ldr	r3, [r4, #4]
    f9c0:	e3520000 	cmp	r2, #0
    f9c4:	e5853008 	str	r3, [r5, #8]
    f9c8:	e5845004 	str	r5, [r4, #4]
    f9cc:	08bd8070 	popeq	{r4, r5, r6, pc}
    f9d0:	e8bd4070 	pop	{r4, r5, r6, lr}
    f9d4:	eaffe94f 	b	9f18 <LeaveCritical>

0000f9d8 <palloc>:
    f9d8:	e92d4070 	push	{r4, r5, r6, lr}
    f9dc:	e3024da4 	movw	r4, #11684	; 0x2da4
    f9e0:	e3404005 	movt	r4, #5
    f9e4:	e5943008 	ldr	r3, [r4, #8]
    f9e8:	e3530000 	cmp	r3, #0
    f9ec:	0a00002c 	beq	faa4 <palloc+0xcc>
    f9f0:	e5943014 	ldr	r3, [r4, #20]
    f9f4:	e3530000 	cmp	r3, #0
    f9f8:	1a000019 	bne	fa64 <palloc+0x8c>
    f9fc:	e5945018 	ldr	r5, [r4, #24]
    fa00:	e3550000 	cmp	r5, #0
    fa04:	0a00001a 	beq	fa74 <palloc+0x9c>
    fa08:	e5952000 	ldr	r2, [r5]
    fa0c:	e3043d43 	movw	r3, #19779	; 0x4d43
    fa10:	e3453047 	movt	r3, #20551	; 0x5047
    fa14:	e1520003 	cmp	r2, r3
    fa18:	0a000005 	beq	fa34 <palloc+0x5c>
    fa1c:	e3021b90 	movw	r1, #11152	; 0x2b90
    fa20:	e3401005 	movt	r1, #5
    fa24:	e3020c14 	movw	r0, #11284	; 0x2c14
    fa28:	e3400005 	movt	r0, #5
    fa2c:	e3a020d4 	mov	r2, #212	; 0xd4
    fa30:	ebfff2d4 	bl	c588 <assertion_failed>
    fa34:	e5953004 	ldr	r3, [r5, #4]
    fa38:	e3a02000 	mov	r2, #0
    fa3c:	e5852000 	str	r2, [r5]
    fa40:	e5843018 	str	r3, [r4, #24]
    fa44:	e5943014 	ldr	r3, [r4, #20]
    fa48:	e3530000 	cmp	r3, #0
    fa4c:	1a000001 	bne	fa58 <palloc+0x80>
    fa50:	e1a00005 	mov	r0, r5
    fa54:	e8bd8070 	pop	{r4, r5, r6, pc}
    fa58:	ebffe92e 	bl	9f18 <LeaveCritical>
    fa5c:	e1a00005 	mov	r0, r5
    fa60:	e8bd8070 	pop	{r4, r5, r6, pc}
    fa64:	ebffe91e 	bl	9ee4 <EnterCritical>
    fa68:	e5945018 	ldr	r5, [r4, #24]
    fa6c:	e3550000 	cmp	r5, #0
    fa70:	1affffe4 	bne	fa08 <palloc+0x30>
    fa74:	e5945008 	ldr	r5, [r4, #8]
    fa78:	e594200c 	ldr	r2, [r4, #12]
    fa7c:	e2853a01 	add	r3, r5, #4096	; 0x1000
    fa80:	e1530002 	cmp	r3, r2
    fa84:	e5843008 	str	r3, [r4, #8]
    fa88:	9affffed 	bls	fa44 <palloc+0x6c>
    fa8c:	e5945014 	ldr	r5, [r4, #20]
    fa90:	e3550000 	cmp	r5, #0
    fa94:	0affffed 	beq	fa50 <palloc+0x78>
    fa98:	ebffe91e 	bl	9f18 <LeaveCritical>
    fa9c:	e3a00000 	mov	r0, #0
    faa0:	e8bd8070 	pop	{r4, r5, r6, pc}
    faa4:	e3021b90 	movw	r1, #11152	; 0x2b90
    faa8:	e3401005 	movt	r1, #5
    faac:	e3020c00 	movw	r0, #11264	; 0x2c00
    fab0:	e3400005 	movt	r0, #5
    fab4:	e3a020c6 	mov	r2, #198	; 0xc6
    fab8:	ebfff2b2 	bl	c588 <assertion_failed>
    fabc:	eaffffcb 	b	f9f0 <palloc+0x18>

0000fac0 <pfree>:
    fac0:	e92d4070 	push	{r4, r5, r6, lr}
    fac4:	e2505000 	subs	r5, r0, #0
    fac8:	08bd8070 	popeq	{r4, r5, r6, pc}
    facc:	e3024da4 	movw	r4, #11684	; 0x2da4
    fad0:	e3404005 	movt	r4, #5
    fad4:	e5943014 	ldr	r3, [r4, #20]
    fad8:	e3530000 	cmp	r3, #0
    fadc:	1a000006 	bne	fafc <pfree+0x3c>
    fae0:	e5942018 	ldr	r2, [r4, #24]
    fae4:	e3043d43 	movw	r3, #19779	; 0x4d43
    fae8:	e3453047 	movt	r3, #20551	; 0x5047
    faec:	e5853000 	str	r3, [r5]
    faf0:	e5852004 	str	r2, [r5, #4]
    faf4:	e5845018 	str	r5, [r4, #24]
    faf8:	e8bd8070 	pop	{r4, r5, r6, pc}
    fafc:	ebffe8f8 	bl	9ee4 <EnterCritical>
    fb00:	e5941014 	ldr	r1, [r4, #20]
    fb04:	e5942018 	ldr	r2, [r4, #24]
    fb08:	e3043d43 	movw	r3, #19779	; 0x4d43
    fb0c:	e3453047 	movt	r3, #20551	; 0x5047
    fb10:	e3510000 	cmp	r1, #0
    fb14:	e5853000 	str	r3, [r5]
    fb18:	e5852004 	str	r2, [r5, #4]
    fb1c:	e5845018 	str	r5, [r4, #24]
    fb20:	08bd8070 	popeq	{r4, r5, r6, pc}
    fb24:	e8bd4070 	pop	{r4, r5, r6, lr}
    fb28:	eaffe8fa 	b	9f18 <LeaveCritical>

0000fb2c <_GLOBAL__sub_I_mem_init>:
    fb2c:	e3023da4 	movw	r3, #11684	; 0x2da4
    fb30:	e3403005 	movt	r3, #5
    fb34:	e3a02001 	mov	r2, #1
    fb38:	e5832010 	str	r2, [r3, #16]
    fb3c:	e5832014 	str	r2, [r3, #20]
    fb40:	e12fff1e 	bx	lr

0000fb44 <CBcmMailBox::CBcmMailBox(unsigned int)>:
    fb44:	e3a02000 	mov	r2, #0
    fb48:	e8800006 	stm	r0, {r1, r2}
    fb4c:	e12fff1e 	bx	lr

0000fb50 <CBcmMailBox::~CBcmMailBox()>:
    fb50:	e12fff1e 	bx	lr

0000fb54 <CBcmMailBox::Flush()>:
    fb54:	e92d4010 	push	{r4, lr}
    fb58:	e3a04a0b 	mov	r4, #45056	; 0xb000
    fb5c:	e3434f00 	movt	r4, #16128	; 0x3f00
    fb60:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    fb64:	e3130101 	tst	r3, #1073741824	; 0x40000000
    fb68:	18bd8010 	popne	{r4, pc}
    fb6c:	e3a00014 	mov	r0, #20
    fb70:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    fb74:	ebffebc7 	bl	aa98 <CTimer::SimpleMsDelay(unsigned int)>
    fb78:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    fb7c:	e3130101 	tst	r3, #1073741824	; 0x40000000
    fb80:	0afffff9 	beq	fb6c <CBcmMailBox::Flush()+0x18>
    fb84:	e8bd8010 	pop	{r4, pc}

0000fb88 <CBcmMailBox::Read()>:
    fb88:	e5901000 	ldr	r1, [r0]
    fb8c:	e3a02a0b 	mov	r2, #45056	; 0xb000
    fb90:	e3432f00 	movt	r2, #16128	; 0x3f00
    fb94:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    fb98:	e3130101 	tst	r3, #1073741824	; 0x40000000
    fb9c:	1afffffc 	bne	fb94 <CBcmMailBox::Read()+0xc>
    fba0:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
    fba4:	e200300f 	and	r3, r0, #15
    fba8:	e1510003 	cmp	r1, r3
    fbac:	1afffff8 	bne	fb94 <CBcmMailBox::Read()+0xc>
    fbb0:	e3c0000f 	bic	r0, r0, #15
    fbb4:	e12fff1e 	bx	lr

0000fbb8 <CBcmMailBox::Write(unsigned int)>:
    fbb8:	e92d4070 	push	{r4, r5, r6, lr}
    fbbc:	e3a02a0b 	mov	r2, #45056	; 0xb000
    fbc0:	e3432f00 	movt	r2, #16128	; 0x3f00
    fbc4:	e1a05000 	mov	r5, r0
    fbc8:	e1a04001 	mov	r4, r1
    fbcc:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
    fbd0:	e3530000 	cmp	r3, #0
    fbd4:	bafffffc 	blt	fbcc <CBcmMailBox::Write(unsigned int)+0x14>
    fbd8:	e314000f 	tst	r4, #15
    fbdc:	0a000005 	beq	fbf8 <CBcmMailBox::Write(unsigned int)+0x40>
    fbe0:	e3021c38 	movw	r1, #11320	; 0x2c38
    fbe4:	e3401005 	movt	r1, #5
    fbe8:	e3020c48 	movw	r0, #11336	; 0x2c48
    fbec:	e3400005 	movt	r0, #5
    fbf0:	e3a0205a 	mov	r2, #90	; 0x5a
    fbf4:	ebfff263 	bl	c588 <assertion_failed>
    fbf8:	e5952000 	ldr	r2, [r5]
    fbfc:	e3a03a0b 	mov	r3, #45056	; 0xb000
    fc00:	e3433f00 	movt	r3, #16128	; 0x3f00
    fc04:	e1844002 	orr	r4, r4, r2
    fc08:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
    fc0c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000fc10 <CBcmMailBox::WriteRead(unsigned int)>:
    fc10:	e5903004 	ldr	r3, [r0, #4]
    fc14:	e92d4070 	push	{r4, r5, r6, lr}
    fc18:	e1a05000 	mov	r5, r0
    fc1c:	e3530000 	cmp	r3, #0
    fc20:	e1a06001 	mov	r6, r1
    fc24:	1a00001e 	bne	fca4 <CBcmMailBox::WriteRead(unsigned int)+0x94>
    fc28:	e3a04a0b 	mov	r4, #45056	; 0xb000
    fc2c:	e3434f00 	movt	r4, #16128	; 0x3f00
    fc30:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    fc34:	e3130101 	tst	r3, #1073741824	; 0x40000000
    fc38:	1a000005 	bne	fc54 <CBcmMailBox::WriteRead(unsigned int)+0x44>
    fc3c:	e3a00014 	mov	r0, #20
    fc40:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    fc44:	ebffeb93 	bl	aa98 <CTimer::SimpleMsDelay(unsigned int)>
    fc48:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    fc4c:	e3130101 	tst	r3, #1073741824	; 0x40000000
    fc50:	0afffff9 	beq	fc3c <CBcmMailBox::WriteRead(unsigned int)+0x2c>
    fc54:	e1a00005 	mov	r0, r5
    fc58:	e1a01006 	mov	r1, r6
    fc5c:	ebffffd5 	bl	fbb8 <CBcmMailBox::Write(unsigned int)>
    fc60:	e5950000 	ldr	r0, [r5]
    fc64:	e3a02a0b 	mov	r2, #45056	; 0xb000
    fc68:	e3432f00 	movt	r2, #16128	; 0x3f00
    fc6c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    fc70:	e3130101 	tst	r3, #1073741824	; 0x40000000
    fc74:	1afffffc 	bne	fc6c <CBcmMailBox::WriteRead(unsigned int)+0x5c>
    fc78:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
    fc7c:	e203100f 	and	r1, r3, #15
    fc80:	e1510000 	cmp	r1, r0
    fc84:	1afffff8 	bne	fc6c <CBcmMailBox::WriteRead(unsigned int)+0x5c>
    fc88:	e5952004 	ldr	r2, [r5, #4]
    fc8c:	e3c3400f 	bic	r4, r3, #15
    fc90:	e3520000 	cmp	r2, #0
    fc94:	0a000000 	beq	fc9c <CBcmMailBox::WriteRead(unsigned int)+0x8c>
    fc98:	ebffe89e 	bl	9f18 <LeaveCritical>
    fc9c:	e1a00004 	mov	r0, r4
    fca0:	e8bd8070 	pop	{r4, r5, r6, pc}
    fca4:	ebffe88e 	bl	9ee4 <EnterCritical>
    fca8:	eaffffde 	b	fc28 <CBcmMailBox::WriteRead(unsigned int)+0x18>

0000fcac <memset>:
    fcac:	e3520000 	cmp	r2, #0
    fcb0:	012fff1e 	bxeq	lr
    fcb4:	e6af1071 	sxtb	r1, r1
    fcb8:	e0802002 	add	r2, r0, r2
    fcbc:	e1a03000 	mov	r3, r0
    fcc0:	e4c31001 	strb	r1, [r3], #1
    fcc4:	e1530002 	cmp	r3, r2
    fcc8:	1afffffc 	bne	fcc0 <memset+0x14>
    fccc:	e12fff1e 	bx	lr

0000fcd0 <memcmp>:
    fcd0:	e3520000 	cmp	r2, #0
    fcd4:	0a00000e 	beq	fd14 <memcmp+0x44>
    fcd8:	e5d0c000 	ldrb	ip, [r0]
    fcdc:	e5d13000 	ldrb	r3, [r1]
    fce0:	e15c0003 	cmp	ip, r3
    fce4:	ca00000c 	bgt	fd1c <memcmp+0x4c>
    fce8:	ba00000d 	blt	fd24 <memcmp+0x54>
    fcec:	e0812002 	add	r2, r1, r2
    fcf0:	e2811001 	add	r1, r1, #1
    fcf4:	ea000004 	b	fd0c <memcmp+0x3c>
    fcf8:	e5f0c001 	ldrb	ip, [r0, #1]!
    fcfc:	e4d13001 	ldrb	r3, [r1], #1
    fd00:	e15c0003 	cmp	ip, r3
    fd04:	ca000004 	bgt	fd1c <memcmp+0x4c>
    fd08:	ba000005 	blt	fd24 <memcmp+0x54>
    fd0c:	e1510002 	cmp	r1, r2
    fd10:	1afffff8 	bne	fcf8 <memcmp+0x28>
    fd14:	e3a00000 	mov	r0, #0
    fd18:	e12fff1e 	bx	lr
    fd1c:	e3a00001 	mov	r0, #1
    fd20:	e12fff1e 	bx	lr
    fd24:	e3e00000 	mvn	r0, #0
    fd28:	e12fff1e 	bx	lr

0000fd2c <strlen>:
    fd2c:	e1d010d0 	ldrsb	r1, [r0]
    fd30:	e2803001 	add	r3, r0, #1
    fd34:	e3510000 	cmp	r1, #0
    fd38:	0a000003 	beq	fd4c <strlen+0x20>
    fd3c:	e0431000 	sub	r1, r3, r0
    fd40:	e0d320d1 	ldrsb	r2, [r3], #1
    fd44:	e3520000 	cmp	r2, #0
    fd48:	1afffffb 	bne	fd3c <strlen+0x10>
    fd4c:	e1a00001 	mov	r0, r1
    fd50:	e12fff1e 	bx	lr

0000fd54 <strcmp>:
    fd54:	e1d030d0 	ldrsb	r3, [r0]
    fd58:	e1d120d0 	ldrsb	r2, [r1]
    fd5c:	e3530000 	cmp	r3, #0
    fd60:	1a000007 	bne	fd84 <strcmp+0x30>
    fd64:	ea000008 	b	fd8c <strcmp+0x38>
    fd68:	e1530002 	cmp	r3, r2
    fd6c:	ca00000b 	bgt	fda0 <strcmp+0x4c>
    fd70:	ba00000c 	blt	fda8 <strcmp+0x54>
    fd74:	e1f030d1 	ldrsb	r3, [r0, #1]!
    fd78:	e3530000 	cmp	r3, #0
    fd7c:	0a00000b 	beq	fdb0 <strcmp+0x5c>
    fd80:	e1f120d1 	ldrsb	r2, [r1, #1]!
    fd84:	e3520000 	cmp	r2, #0
    fd88:	1afffff6 	bne	fd68 <strcmp+0x14>
    fd8c:	e1530002 	cmp	r3, r2
    fd90:	ca000002 	bgt	fda0 <strcmp+0x4c>
    fd94:	b3e00000 	mvnlt	r0, #0
    fd98:	a3a00000 	movge	r0, #0
    fd9c:	e12fff1e 	bx	lr
    fda0:	e3a00001 	mov	r0, #1
    fda4:	e12fff1e 	bx	lr
    fda8:	e3e00000 	mvn	r0, #0
    fdac:	e12fff1e 	bx	lr
    fdb0:	e1d120d1 	ldrsb	r2, [r1, #1]
    fdb4:	e1530002 	cmp	r3, r2
    fdb8:	dafffff5 	ble	fd94 <strcmp+0x40>
    fdbc:	eafffff7 	b	fda0 <strcmp+0x4c>

0000fdc0 <strcpy>:
    fdc0:	e1d130d0 	ldrsb	r3, [r1]
    fdc4:	e1a02000 	mov	r2, r0
    fdc8:	e3530000 	cmp	r3, #0
    fdcc:	0a000003 	beq	fde0 <strcpy+0x20>
    fdd0:	e4c23001 	strb	r3, [r2], #1
    fdd4:	e1f130d1 	ldrsb	r3, [r1, #1]!
    fdd8:	e3530000 	cmp	r3, #0
    fddc:	1afffffb 	bne	fdd0 <strcpy+0x10>
    fde0:	e3a03000 	mov	r3, #0
    fde4:	e5c23000 	strb	r3, [r2]
    fde8:	e12fff1e 	bx	lr

0000fdec <strncpy>:
    fdec:	e3520000 	cmp	r2, #0
    fdf0:	012fff1e 	bxeq	lr
    fdf4:	e1d1c0d0 	ldrsb	ip, [r1]
    fdf8:	e35c0000 	cmp	ip, #0
    fdfc:	0a000009 	beq	fe28 <strncpy+0x3c>
    fe00:	e0802002 	add	r2, r0, r2
    fe04:	e1a03000 	mov	r3, r0
    fe08:	ea000002 	b	fe18 <strncpy+0x2c>
    fe0c:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    fe10:	e35c0000 	cmp	ip, #0
    fe14:	0a000004 	beq	fe2c <strncpy+0x40>
    fe18:	e4c3c001 	strb	ip, [r3], #1
    fe1c:	e1530002 	cmp	r3, r2
    fe20:	1afffff9 	bne	fe0c <strncpy+0x20>
    fe24:	e12fff1e 	bx	lr
    fe28:	e1a03000 	mov	r3, r0
    fe2c:	e3a02000 	mov	r2, #0
    fe30:	e5c32000 	strb	r2, [r3]
    fe34:	e12fff1e 	bx	lr

0000fe38 <strcat>:
    fe38:	e1d030d0 	ldrsb	r3, [r0]
    fe3c:	e3530000 	cmp	r3, #0
    fe40:	e1a03000 	mov	r3, r0
    fe44:	0a000002 	beq	fe54 <strcat+0x1c>
    fe48:	e1f320d1 	ldrsb	r2, [r3, #1]!
    fe4c:	e3520000 	cmp	r2, #0
    fe50:	1afffffc 	bne	fe48 <strcat+0x10>
    fe54:	e1d120d0 	ldrsb	r2, [r1]
    fe58:	e3520000 	cmp	r2, #0
    fe5c:	0a000003 	beq	fe70 <strcat+0x38>
    fe60:	e4c32001 	strb	r2, [r3], #1
    fe64:	e1f120d1 	ldrsb	r2, [r1, #1]!
    fe68:	e3520000 	cmp	r2, #0
    fe6c:	1afffffb 	bne	fe60 <strcat+0x28>
    fe70:	e3a02000 	mov	r2, #0
    fe74:	e5c32000 	strb	r2, [r3]
    fe78:	e12fff1e 	bx	lr

0000fe7c <strchr>:
    fe7c:	e1d020d0 	ldrsb	r2, [r0]
    fe80:	e3520000 	cmp	r2, #0
    fe84:	0a000009 	beq	feb0 <strchr+0x34>
    fe88:	e1510002 	cmp	r1, r2
    fe8c:	1a000002 	bne	fe9c <strchr+0x20>
    fe90:	ea000008 	b	feb8 <strchr+0x3c>
    fe94:	e1530001 	cmp	r3, r1
    fe98:	012fff1e 	bxeq	lr
    fe9c:	e1f030d1 	ldrsb	r3, [r0, #1]!
    fea0:	e3530000 	cmp	r3, #0
    fea4:	1afffffa 	bne	fe94 <strchr+0x18>
    fea8:	e1a00003 	mov	r0, r3
    feac:	e12fff1e 	bx	lr
    feb0:	e1a00002 	mov	r0, r2
    feb4:	e12fff1e 	bx	lr
    feb8:	e12fff1e 	bx	lr

0000febc <strtok_r>:
    febc:	e3500000 	cmp	r0, #0
    fec0:	0a00002c 	beq	ff78 <strtok_r+0xbc>
    fec4:	e92d4030 	push	{r4, r5, lr}
    fec8:	e1d0e0d0 	ldrsb	lr, [r0]
    fecc:	e35e0000 	cmp	lr, #0
    fed0:	11d140d0 	ldrsbne	r4, [r1]
    fed4:	0a000024 	beq	ff6c <strtok_r+0xb0>
    fed8:	e3540000 	cmp	r4, #0
    fedc:	0a000008 	beq	ff04 <strtok_r+0x48>
    fee0:	e15e0004 	cmp	lr, r4
    fee4:	0a000019 	beq	ff50 <strtok_r+0x94>
    fee8:	e1a0c001 	mov	ip, r1
    feec:	ea000001 	b	fef8 <strtok_r+0x3c>
    fef0:	e15e0003 	cmp	lr, r3
    fef4:	0a000015 	beq	ff50 <strtok_r+0x94>
    fef8:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    fefc:	e3530000 	cmp	r3, #0
    ff00:	1afffffa 	bne	fef0 <strtok_r+0x34>
    ff04:	e35e0000 	cmp	lr, #0
    ff08:	0a000017 	beq	ff6c <strtok_r+0xb0>
    ff0c:	e1a05000 	mov	r5, r0
    ff10:	e3540000 	cmp	r4, #0
    ff14:	0a000008 	beq	ff3c <strtok_r+0x80>
    ff18:	e15e0004 	cmp	lr, r4
    ff1c:	0a00000d 	beq	ff58 <strtok_r+0x9c>
    ff20:	e1a0c001 	mov	ip, r1
    ff24:	ea000001 	b	ff30 <strtok_r+0x74>
    ff28:	e15e0003 	cmp	lr, r3
    ff2c:	0a000009 	beq	ff58 <strtok_r+0x9c>
    ff30:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    ff34:	e3530000 	cmp	r3, #0
    ff38:	1afffffa 	bne	ff28 <strtok_r+0x6c>
    ff3c:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
    ff40:	e35e0000 	cmp	lr, #0
    ff44:	1afffff1 	bne	ff10 <strtok_r+0x54>
    ff48:	e5825000 	str	r5, [r2]
    ff4c:	e8bd8030 	pop	{r4, r5, pc}
    ff50:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
    ff54:	eaffffdf 	b	fed8 <strtok_r+0x1c>
    ff58:	e3a03000 	mov	r3, #0
    ff5c:	e2855001 	add	r5, r5, #1
    ff60:	e5453001 	strb	r3, [r5, #-1]
    ff64:	e5825000 	str	r5, [r2]
    ff68:	e8bd8030 	pop	{r4, r5, pc}
    ff6c:	e3a00000 	mov	r0, #0
    ff70:	e5820000 	str	r0, [r2]
    ff74:	e8bd8030 	pop	{r4, r5, pc}
    ff78:	e5920000 	ldr	r0, [r2]
    ff7c:	e3500000 	cmp	r0, #0
    ff80:	1affffcf 	bne	fec4 <strtok_r+0x8>
    ff84:	e12fff1e 	bx	lr

0000ff88 <strtoul>:
    ff88:	e3510000 	cmp	r1, #0
    ff8c:	e92d4070 	push	{r4, r5, r6, lr}
    ff90:	e2425002 	sub	r5, r2, #2
    ff94:	e3c2e010 	bic	lr, r2, #16
    ff98:	15810000 	strne	r0, [r1]
    ff9c:	e3520000 	cmp	r2, #0
    ffa0:	13550022 	cmpne	r5, #34	; 0x22
    ffa4:	83a05001 	movhi	r5, #1
    ffa8:	93a05000 	movls	r5, #0
    ffac:	8a000036 	bhi	1008c <strtoul+0x104>
    ffb0:	e1d0c0d0 	ldrsb	ip, [r0]
    ffb4:	e1a04000 	mov	r4, r0
    ffb8:	e2800001 	add	r0, r0, #1
    ffbc:	e35c0020 	cmp	ip, #32
    ffc0:	e24c3009 	sub	r3, ip, #9
    ffc4:	e6ef3073 	uxtb	r3, r3
    ffc8:	0afffff8 	beq	ffb0 <strtoul+0x28>
    ffcc:	e3530004 	cmp	r3, #4
    ffd0:	9afffff6 	bls	ffb0 <strtoul+0x28>
    ffd4:	e35c002b 	cmp	ip, #43	; 0x2b
    ffd8:	0a00002d 	beq	10094 <strtoul+0x10c>
    ffdc:	e35c002d 	cmp	ip, #45	; 0x2d
    ffe0:	03a06001 	moveq	r6, #1
    ffe4:	13a06000 	movne	r6, #0
    ffe8:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
    ffec:	01a04000 	moveq	r4, r0
    fff0:	e35c0030 	cmp	ip, #48	; 0x30
    fff4:	0a00002b 	beq	100a8 <strtoul+0x120>
    fff8:	e3520000 	cmp	r2, #0
    fffc:	03a0200a 	moveq	r2, #10
   10000:	e35c002f 	cmp	ip, #47	; 0x2f
   10004:	e1a0300c 	mov	r3, ip
   10008:	da00001c 	ble	10080 <strtoul+0xf8>
   1000c:	e3a05001 	mov	r5, #1
   10010:	e3a0e000 	mov	lr, #0
   10014:	ea000007 	b	10038 <strtoul+0xb0>
   10018:	e150000e 	cmp	r0, lr
   1001c:	e3a05000 	mov	r5, #0
   10020:	e1a0e000 	mov	lr, r0
   10024:	3a000028 	bcc	100cc <strtoul+0x144>
   10028:	e1f430d1 	ldrsb	r3, [r4, #1]!
   1002c:	e353002f 	cmp	r3, #47	; 0x2f
   10030:	e1a0c003 	mov	ip, r3
   10034:	da000029 	ble	100e0 <strtoul+0x158>
   10038:	e24cc061 	sub	ip, ip, #97	; 0x61
   1003c:	e35c0019 	cmp	ip, #25
   10040:	92433020 	subls	r3, r3, #32
   10044:	e3530040 	cmp	r3, #64	; 0x40
   10048:	c2433007 	subgt	r3, r3, #7
   1004c:	e2433030 	sub	r3, r3, #48	; 0x30
   10050:	e1520003 	cmp	r2, r3
   10054:	e020329e 	mla	r0, lr, r2, r3
   10058:	caffffee 	bgt	10018 <strtoul+0x90>
   1005c:	e2255001 	eor	r5, r5, #1
   10060:	e1a0000e 	mov	r0, lr
   10064:	e3510000 	cmp	r1, #0
   10068:	e0055006 	and	r5, r5, r6
   1006c:	0a000000 	beq	10074 <strtoul+0xec>
   10070:	e5814000 	str	r4, [r1]
   10074:	e3550000 	cmp	r5, #0
   10078:	12600000 	rsbne	r0, r0, #0
   1007c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10080:	e3510000 	cmp	r1, #0
   10084:	13a00000 	movne	r0, #0
   10088:	1afffff8 	bne	10070 <strtoul+0xe8>
   1008c:	e3a00000 	mov	r0, #0
   10090:	e8bd8070 	pop	{r4, r5, r6, pc}
   10094:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   10098:	e3a06000 	mov	r6, #0
   1009c:	e1a04000 	mov	r4, r0
   100a0:	e35c0030 	cmp	ip, #48	; 0x30
   100a4:	1affffd3 	bne	fff8 <strtoul+0x70>
   100a8:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   100ac:	e2840001 	add	r0, r4, #1
   100b0:	e3cc3020 	bic	r3, ip, #32
   100b4:	e3530058 	cmp	r3, #88	; 0x58
   100b8:	0a00000a 	beq	100e8 <strtoul+0x160>
   100bc:	e3520000 	cmp	r2, #0
   100c0:	e1a04000 	mov	r4, r0
   100c4:	03a02008 	moveq	r2, #8
   100c8:	eaffffcc 	b	10000 <strtoul+0x78>
   100cc:	e1510005 	cmp	r1, r5
   100d0:	0a00000a 	beq	10100 <strtoul+0x178>
   100d4:	e5814000 	str	r4, [r1]
   100d8:	e3e00000 	mvn	r0, #0
   100dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   100e0:	e3a05001 	mov	r5, #1
   100e4:	eaffffde 	b	10064 <strtoul+0xdc>
   100e8:	e35e0000 	cmp	lr, #0
   100ec:	1affffe6 	bne	1008c <strtoul+0x104>
   100f0:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   100f4:	e3a02010 	mov	r2, #16
   100f8:	e2844002 	add	r4, r4, #2
   100fc:	eaffffbf 	b	10000 <strtoul+0x78>
   10100:	e3e00000 	mvn	r0, #0
   10104:	e8bd8070 	pop	{r4, r5, r6, pc}

00010108 <char2int>:
   10108:	e12fff1e 	bx	lr

0001010c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   1010c:	e92d4010 	push	{r4, lr}
   10110:	e1a04000 	mov	r4, r0
   10114:	e3a01000 	mov	r1, #0
   10118:	e24dd010 	sub	sp, sp, #16
   1011c:	e3a02c01 	mov	r2, #256	; 0x100
   10120:	e5943020 	ldr	r3, [r4, #32]
   10124:	e28d0008 	add	r0, sp, #8
   10128:	e583100c 	str	r1, [r3, #12]
   1012c:	e5832010 	str	r2, [r3, #16]
   10130:	ebffe2d4 	bl	8c88 <CBcmPropertyTags::CBcmPropertyTags()>
   10134:	e3003408 	movw	r3, #1032	; 0x408
   10138:	e5942020 	ldr	r2, [r4, #32]
   1013c:	e28d0008 	add	r0, sp, #8
   10140:	e58d3000 	str	r3, [sp]
   10144:	e308100b 	movw	r1, #32779	; 0x800b
   10148:	e3401004 	movt	r1, #4
   1014c:	e3003414 	movw	r3, #1044	; 0x414
   10150:	ebffe314 	bl	8da8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10154:	e3500000 	cmp	r0, #0
   10158:	e28d0008 	add	r0, sp, #8
   1015c:	0a000003 	beq	10170 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x64>
   10160:	e5943020 	ldr	r3, [r4, #32]
   10164:	e593300c 	ldr	r3, [r3, #12]
   10168:	e3530000 	cmp	r3, #0
   1016c:	0a000003 	beq	10180 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
   10170:	ebffe2ca 	bl	8ca0 <CBcmPropertyTags::~CBcmPropertyTags()>
   10174:	e3a00000 	mov	r0, #0
   10178:	e28dd010 	add	sp, sp, #16
   1017c:	e8bd8010 	pop	{r4, pc}
   10180:	ebffe2c6 	bl	8ca0 <CBcmPropertyTags::~CBcmPropertyTags()>
   10184:	e3a00001 	mov	r0, #1
   10188:	e28dd010 	add	sp, sp, #16
   1018c:	e8bd8010 	pop	{r4, pc}

00010190 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   10190:	e92d4030 	push	{r4, r5, lr}
   10194:	e3510000 	cmp	r1, #0
   10198:	13520000 	cmpne	r2, #0
   1019c:	e1a04000 	mov	r4, r0
   101a0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   101a4:	e3a05000 	mov	r5, #0
   101a8:	e8840006 	stm	r4, {r1, r2}
   101ac:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
   101b0:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
   101b4:	e5843010 	str	r3, [r4, #16]
   101b8:	e584c00c 	str	ip, [r4, #12]
   101bc:	e5840008 	str	r0, [r4, #8]
   101c0:	e5845014 	str	r5, [r4, #20]
   101c4:	e5845018 	str	r5, [r4, #24]
   101c8:	e584501c 	str	r5, [r4, #28]
   101cc:	e5845020 	str	r5, [r4, #32]
   101d0:	1a000011 	bne	1021c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   101d4:	e28d000c 	add	r0, sp, #12
   101d8:	ebffe2aa 	bl	8c88 <CBcmPropertyTags::CBcmPropertyTags()>
   101dc:	e3a03014 	mov	r3, #20
   101e0:	e58d5000 	str	r5, [sp]
   101e4:	e28d000c 	add	r0, sp, #12
   101e8:	e3a01003 	mov	r1, #3
   101ec:	e3401004 	movt	r1, #4
   101f0:	e08d2003 	add	r2, sp, r3
   101f4:	ebffe2eb 	bl	8da8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   101f8:	e1500005 	cmp	r0, r5
   101fc:	1a000027 	bne	102a0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
   10200:	e3a02d0a 	mov	r2, #640	; 0x280
   10204:	e3a03e1e 	mov	r3, #480	; 0x1e0
   10208:	e884000c 	stm	r4, {r2, r3}
   1020c:	e28d000c 	add	r0, sp, #12
   10210:	ebffe2a2 	bl	8ca0 <CBcmPropertyTags::~CBcmPropertyTags()>
   10214:	e5940008 	ldr	r0, [r4, #8]
   10218:	e5943010 	ldr	r3, [r4, #16]
   1021c:	e3500000 	cmp	r0, #0
   10220:	0a00001a 	beq	10290 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   10224:	e594200c 	ldr	r2, [r4, #12]
   10228:	e3520000 	cmp	r2, #0
   1022c:	0a000017 	beq	10290 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   10230:	e3530008 	cmp	r3, #8
   10234:	8a000007 	bhi	10258 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
   10238:	e3000414 	movw	r0, #1044	; 0x414
   1023c:	ebffe725 	bl	9ed8 <operator new[](unsigned int)>
   10240:	e3a02b01 	mov	r2, #1024	; 0x400
   10244:	e5840020 	str	r0, [r4, #32]
   10248:	e3a01000 	mov	r1, #0
   1024c:	e2800014 	add	r0, r0, #20
   10250:	ebfffe95 	bl	fcac <memset>
   10254:	e5943010 	ldr	r3, [r4, #16]
   10258:	e3022cfc 	movw	r2, #11516	; 0x2cfc
   1025c:	e3402005 	movt	r2, #5
   10260:	e5945000 	ldr	r5, [r4]
   10264:	e1a00004 	mov	r0, r4
   10268:	e594e004 	ldr	lr, [r4, #4]
   1026c:	e594c008 	ldr	ip, [r4, #8]
   10270:	e594100c 	ldr	r1, [r4, #12]
   10274:	e582500c 	str	r5, [r2, #12]
   10278:	e582e010 	str	lr, [r2, #16]
   1027c:	e582c020 	str	ip, [r2, #32]
   10280:	e5821024 	str	r1, [r2, #36]	; 0x24
   10284:	e5823034 	str	r3, [r2, #52]	; 0x34
   10288:	e28dd02c 	add	sp, sp, #44	; 0x2c
   1028c:	e8bd8030 	pop	{r4, r5, pc}
   10290:	e8940006 	ldm	r4, {r1, r2}
   10294:	e5841008 	str	r1, [r4, #8]
   10298:	e584200c 	str	r2, [r4, #12]
   1029c:	eaffffe3 	b	10230 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   102a0:	e59d2020 	ldr	r2, [sp, #32]
   102a4:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   102a8:	e2421d0a 	sub	r1, r2, #640	; 0x280
   102ac:	e5842000 	str	r2, [r4]
   102b0:	e2432e1e 	sub	r2, r3, #480	; 0x1e0
   102b4:	e5843004 	str	r3, [r4, #4]
   102b8:	e3520f96 	cmp	r2, #600	; 0x258
   102bc:	93510c05 	cmpls	r1, #1280	; 0x500
   102c0:	9affffd1 	bls	1020c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
   102c4:	eaffffcd 	b	10200 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>

000102c8 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   102c8:	e92d4010 	push	{r4, lr}
   102cc:	e1a04000 	mov	r4, r0
   102d0:	e5900020 	ldr	r0, [r0, #32]
   102d4:	ebffe700 	bl	9edc <operator delete(void*)>
   102d8:	e1a00004 	mov	r0, r4
   102dc:	e8bd8010 	pop	{r4, pc}

000102e0 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   102e0:	e5903010 	ldr	r3, [r0, #16]
   102e4:	e3530008 	cmp	r3, #8
   102e8:	812fff1e 	bxhi	lr
   102ec:	e5900020 	ldr	r0, [r0, #32]
   102f0:	e1a03982 	lsl	r3, r2, #19
   102f4:	e1a0c5a2 	lsr	ip, r2, #11
   102f8:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   102fc:	e1a02282 	lsl	r2, r2, #5
   10300:	e0801101 	add	r1, r0, r1, lsl #2
   10304:	e183318c 	orr	r3, r3, ip, lsl #3
   10308:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   1030c:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   10310:	e1822003 	orr	r2, r2, r3
   10314:	e5812014 	str	r2, [r1, #20]
   10318:	e12fff1e 	bx	lr

0001031c <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   1031c:	e5903010 	ldr	r3, [r0, #16]
   10320:	e3530008 	cmp	r3, #8
   10324:	95903020 	ldrls	r3, [r0, #32]
   10328:	90831101 	addls	r1, r3, r1, lsl #2
   1032c:	95812014 	strls	r2, [r1, #20]
   10330:	e12fff1e 	bx	lr

00010334 <CBcmFrameBuffer::Initialize()>:
   10334:	e92d4070 	push	{r4, r5, r6, lr}
   10338:	e1a05000 	mov	r5, r0
   1033c:	e3026cfc 	movw	r6, #11516	; 0x2cfc
   10340:	e3406005 	movt	r6, #5
   10344:	e24dd008 	sub	sp, sp, #8
   10348:	e1a0000d 	mov	r0, sp
   1034c:	ebffe24d 	bl	8c88 <CBcmPropertyTags::CBcmPropertyTags()>
   10350:	e1a01006 	mov	r1, r6
   10354:	e1a0000d 	mov	r0, sp
   10358:	e3a02070 	mov	r2, #112	; 0x70
   1035c:	ebffe254 	bl	8cb4 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   10360:	e2504000 	subs	r4, r0, #0
   10364:	0a00001e 	beq	103e4 <CBcmFrameBuffer::Initialize()+0xb0>
   10368:	e596400c 	ldr	r4, [r6, #12]
   1036c:	e3540000 	cmp	r4, #0
   10370:	0a00001b 	beq	103e4 <CBcmFrameBuffer::Initialize()+0xb0>
   10374:	e5964010 	ldr	r4, [r6, #16]
   10378:	e3540000 	cmp	r4, #0
   1037c:	0a000018 	beq	103e4 <CBcmFrameBuffer::Initialize()+0xb0>
   10380:	e5964020 	ldr	r4, [r6, #32]
   10384:	e3540000 	cmp	r4, #0
   10388:	0a000015 	beq	103e4 <CBcmFrameBuffer::Initialize()+0xb0>
   1038c:	e5964024 	ldr	r4, [r6, #36]	; 0x24
   10390:	e3540000 	cmp	r4, #0
   10394:	0a000012 	beq	103e4 <CBcmFrameBuffer::Initialize()+0xb0>
   10398:	e5964034 	ldr	r4, [r6, #52]	; 0x34
   1039c:	e3540000 	cmp	r4, #0
   103a0:	0a00000f 	beq	103e4 <CBcmFrameBuffer::Initialize()+0xb0>
   103a4:	e5964058 	ldr	r4, [r6, #88]	; 0x58
   103a8:	e3540000 	cmp	r4, #0
   103ac:	0a00000c 	beq	103e4 <CBcmFrameBuffer::Initialize()+0xb0>
   103b0:	e5953010 	ldr	r3, [r5, #16]
   103b4:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
   103b8:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
   103bc:	e3530008 	cmp	r3, #8
   103c0:	e596306c 	ldr	r3, [r6, #108]	; 0x6c
   103c4:	e5854014 	str	r4, [r5, #20]
   103c8:	83a04001 	movhi	r4, #1
   103cc:	e5852018 	str	r2, [r5, #24]
   103d0:	e585301c 	str	r3, [r5, #28]
   103d4:	8a000002 	bhi	103e4 <CBcmFrameBuffer::Initialize()+0xb0>
   103d8:	e1a00005 	mov	r0, r5
   103dc:	ebffff4a 	bl	1010c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   103e0:	e1a04000 	mov	r4, r0
   103e4:	e1a0000d 	mov	r0, sp
   103e8:	ebffe22c 	bl	8ca0 <CBcmPropertyTags::~CBcmPropertyTags()>
   103ec:	e1a00004 	mov	r0, r4
   103f0:	e28dd008 	add	sp, sp, #8
   103f4:	e8bd8070 	pop	{r4, r5, r6, pc}

000103f8 <CBcmFrameBuffer::GetWidth() const>:
   103f8:	e5900000 	ldr	r0, [r0]
   103fc:	e12fff1e 	bx	lr

00010400 <CBcmFrameBuffer::GetHeight() const>:
   10400:	e5900004 	ldr	r0, [r0, #4]
   10404:	e12fff1e 	bx	lr

00010408 <CBcmFrameBuffer::GetVirtWidth() const>:
   10408:	e5900008 	ldr	r0, [r0, #8]
   1040c:	e12fff1e 	bx	lr

00010410 <CBcmFrameBuffer::GetVirtHeight() const>:
   10410:	e590000c 	ldr	r0, [r0, #12]
   10414:	e12fff1e 	bx	lr

00010418 <CBcmFrameBuffer::GetPitch() const>:
   10418:	e590001c 	ldr	r0, [r0, #28]
   1041c:	e12fff1e 	bx	lr

00010420 <CBcmFrameBuffer::GetDepth() const>:
   10420:	e5900010 	ldr	r0, [r0, #16]
   10424:	e12fff1e 	bx	lr

00010428 <CBcmFrameBuffer::GetBuffer() const>:
   10428:	e5900014 	ldr	r0, [r0, #20]
   1042c:	e12fff1e 	bx	lr

00010430 <CBcmFrameBuffer::GetSize() const>:
   10430:	e5900018 	ldr	r0, [r0, #24]
   10434:	e12fff1e 	bx	lr

00010438 <CBcmFrameBuffer::UpdatePalette()>:
   10438:	e5903010 	ldr	r3, [r0, #16]
   1043c:	e3530008 	cmp	r3, #8
   10440:	9a000001 	bls	1044c <CBcmFrameBuffer::UpdatePalette()+0x14>
   10444:	e3a00001 	mov	r0, #1
   10448:	e12fff1e 	bx	lr
   1044c:	eaffff2e 	b	1010c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00010450 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   10450:	e92d4070 	push	{r4, r5, r6, lr}
   10454:	e1a05001 	mov	r5, r1
   10458:	e1a06002 	mov	r6, r2
   1045c:	e24dd028 	sub	sp, sp, #40	; 0x28
   10460:	e28d000c 	add	r0, sp, #12
   10464:	ebffe207 	bl	8c88 <CBcmPropertyTags::CBcmPropertyTags()>
   10468:	e3a03008 	mov	r3, #8
   1046c:	e58d3000 	str	r3, [sp]
   10470:	e3a03014 	mov	r3, #20
   10474:	e28d000c 	add	r0, sp, #12
   10478:	e3081009 	movw	r1, #32777	; 0x8009
   1047c:	e3401004 	movt	r1, #4
   10480:	e08d2003 	add	r2, sp, r3
   10484:	e58d5020 	str	r5, [sp, #32]
   10488:	e58d6024 	str	r6, [sp, #36]	; 0x24
   1048c:	ebffe245 	bl	8da8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10490:	e2504000 	subs	r4, r0, #0
   10494:	0a000006 	beq	104b4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   10498:	e59d3020 	ldr	r3, [sp, #32]
   1049c:	e1550003 	cmp	r5, r3
   104a0:	13a04000 	movne	r4, #0
   104a4:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   104a8:	00444006 	subeq	r4, r4, r6
   104ac:	016f4f14 	clzeq	r4, r4
   104b0:	01a042a4 	lsreq	r4, r4, #5
   104b4:	e28d000c 	add	r0, sp, #12
   104b8:	ebffe1f8 	bl	8ca0 <CBcmPropertyTags::~CBcmPropertyTags()>
   104bc:	e1a00004 	mov	r0, r4
   104c0:	e28dd028 	add	sp, sp, #40	; 0x28
   104c4:	e8bd8070 	pop	{r4, r5, r6, pc}

000104c8 <CDevice::~CDevice()>:
   104c8:	e12fff1e 	bx	lr

000104cc <CDevice::Read(void*, unsigned int)>:
   104cc:	e3e00000 	mvn	r0, #0
   104d0:	e12fff1e 	bx	lr

000104d4 <CDevice::Seek(unsigned long long)>:
   104d4:	e3e00000 	mvn	r0, #0
   104d8:	e3e01000 	mvn	r1, #0
   104dc:	e12fff1e 	bx	lr

000104e0 <CDevice::~CDevice()>:
   104e0:	e92d4010 	push	{r4, lr}
   104e4:	e1a04000 	mov	r4, r0
   104e8:	ebffe67b 	bl	9edc <operator delete(void*)>
   104ec:	e1a00004 	mov	r0, r4
   104f0:	e8bd8010 	pop	{r4, pc}

000104f4 <CDevice::CDevice()>:
   104f4:	e59f3004 	ldr	r3, [pc, #4]	; 10500 <CDevice::CDevice()+0xc>
   104f8:	e5803000 	str	r3, [r0]
   104fc:	e12fff1e 	bx	lr
   10500:	00052c64 	.word	0x00052c64
