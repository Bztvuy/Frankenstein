
kernel7.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020012 	cps	#18
    803c:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8040:	f1020017 	cps	#23
    8044:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8048:	f102001b 	cps	#27
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001f 	cps	#31
    8054:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8058:	ea000b91 	b	aea4 <sysinit>

0000805c <_start_secondary>:
    805c:	f57ff04f 	dsb	sy
    8060:	e320f003 	wfi
    8064:	eafffffd 	b	8060 <_start_secondary+0x4>

00008068 <main>:
    8068:	e92d4010 	push	{r4, lr}
    806c:	e24ddebe 	sub	sp, sp, #3040	; 0xbe0
    8070:	e1a0000d 	mov	r0, sp
    8074:	eb000011 	bl	80c0 <CKernel::CKernel()>
    8078:	e1a0000d 	mov	r0, sp
    807c:	eb00003f 	bl	8180 <CKernel::Initialize()>
    8080:	e2504000 	subs	r4, r0, #0
    8084:	0a000004 	beq	809c <main+0x34>
    8088:	e1a0000d 	mov	r0, sp
    808c:	eb000062 	bl	821c <CKernel::Run()>
    8090:	e3500002 	cmp	r0, #2
    8094:	13a04000 	movne	r4, #0
    8098:	0a000005 	beq	80b4 <main+0x4c>
    809c:	eb000b73 	bl	ae70 <halt>
    80a0:	e1a0000d 	mov	r0, sp
    80a4:	eb000067 	bl	8248 <CKernel::~CKernel()>
    80a8:	e1a00004 	mov	r0, r4
    80ac:	e28ddebe 	add	sp, sp, #3040	; 0xbe0
    80b0:	e8bd8010 	pop	{r4, pc}
    80b4:	eb000b71 	bl	ae80 <reboot>
    80b8:	e3a04001 	mov	r4, #1
    80bc:	eafffff7 	b	80a0 <main+0x38>

000080c0 <CKernel::CKernel()>:
    80c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80c4:	e3a01001 	mov	r1, #1
    80c8:	e1a04000 	mov	r4, r0
    80cc:	e284501c 	add	r5, r4, #28
    80d0:	eb000afb 	bl	acc4 <CMemorySystem::CMemorySystem(int)>
    80d4:	e2840010 	add	r0, r4, #16
    80d8:	e2847e95 	add	r7, r4, #2384	; 0x950
    80dc:	eb000641 	bl	99e8 <CActLED::CActLED()>
    80e0:	e1a00005 	mov	r0, r5
    80e4:	eb000ee3 	bl	bc78 <CKernelOptions::CKernelOptions()>
    80e8:	e2840e85 	add	r0, r4, #2128	; 0x850
    80ec:	e280000c 	add	r0, r0, #12
    80f0:	e2846eb9 	add	r6, r4, #2960	; 0xb90
    80f4:	eb00158b 	bl	d728 <CDeviceNameService::CDeviceNameService()>
    80f8:	e1a00005 	mov	r0, r5
    80fc:	eb000ea9 	bl	bba8 <CKernelOptions::GetWidth() const>
    8100:	e1a08000 	mov	r8, r0
    8104:	e1a00005 	mov	r0, r5
    8108:	eb000ea8 	bl	bbb0 <CKernelOptions::GetHeight() const>
    810c:	e1a02000 	mov	r2, r0
    8110:	e2840e86 	add	r0, r4, #2144	; 0x860
    8114:	e3a03000 	mov	r3, #0
    8118:	e1a01008 	mov	r1, r8
    811c:	e2800004 	add	r0, r0, #4
    8120:	eb0010a6 	bl	c3c0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    8124:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    8128:	e2800004 	add	r0, r0, #4
    812c:	eb001771 	bl	def8 <CSerialDevice::CSerialDevice()>
    8130:	e2840d25 	add	r0, r4, #2368	; 0x940
    8134:	e280000c 	add	r0, r0, #12
    8138:	eb001b4f 	bl	ee7c <CExceptionHandler::CExceptionHandler()>
    813c:	e1a00007 	mov	r0, r7
    8140:	eb001c17 	bl	f1a4 <CInterruptSystem::CInterruptSystem()>
    8144:	e1a01007 	mov	r1, r7
    8148:	e1a00006 	mov	r0, r6
    814c:	eb000b7e 	bl	af4c <CTimer::CTimer(CInterruptSystem*)>
    8150:	e1a00005 	mov	r0, r5
    8154:	eb000e9a 	bl	bbc4 <CKernelOptions::GetLogLevel() const>
    8158:	e1a01000 	mov	r1, r0
    815c:	e2840ebb 	add	r0, r4, #2992	; 0xbb0
    8160:	e1a02006 	mov	r2, r6
    8164:	e2800008 	add	r0, r0, #8
    8168:	eb00161c 	bl	d9e0 <CLogger::CLogger(unsigned int, CTimer*)>
    816c:	e2840ebd 	add	r0, r4, #3024	; 0xbd0
    8170:	e2800004 	add	r0, r0, #4
    8174:	eb000050 	bl	82bc <Nes::Nes()>
    8178:	e1a00004 	mov	r0, r4
    817c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008180 <CKernel::Initialize()>:
    8180:	e92d4070 	push	{r4, r5, r6, lr}
    8184:	e2804e86 	add	r4, r0, #2144	; 0x860
    8188:	e2844004 	add	r4, r4, #4
    818c:	e1a05000 	mov	r5, r0
    8190:	e1a00004 	mov	r0, r4
    8194:	eb001420 	bl	d21c <CScreenDevice::Initialize()>
    8198:	e3500000 	cmp	r0, #0
    819c:	1a000001 	bne	81a8 <CKernel::Initialize()+0x28>
    81a0:	e3a00000 	mov	r0, #0
    81a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    81a8:	e2850d23 	add	r0, r5, #2240	; 0x8c0
    81ac:	e3a01cc2 	mov	r1, #49664	; 0xc200
    81b0:	e3401001 	movt	r1, #1
    81b4:	e2800004 	add	r0, r0, #4
    81b8:	eb00176c 	bl	df70 <CSerialDevice::Initialize(unsigned int)>
    81bc:	e3500000 	cmp	r0, #0
    81c0:	0afffff6 	beq	81a0 <CKernel::Initialize()+0x20>
    81c4:	e285001c 	add	r0, r5, #28
    81c8:	eb000e7a 	bl	bbb8 <CKernelOptions::GetLogDevice() const>
    81cc:	e1a01000 	mov	r1, r0
    81d0:	e2850e85 	add	r0, r5, #2128	; 0x850
    81d4:	e3a02000 	mov	r2, #0
    81d8:	e280000c 	add	r0, r0, #12
    81dc:	eb0015ad 	bl	d898 <CDeviceNameService::GetDevice(char const*, int)>
    81e0:	e3500000 	cmp	r0, #0
    81e4:	11a01000 	movne	r1, r0
    81e8:	e2850ebb 	add	r0, r5, #2992	; 0xbb0
    81ec:	01a01004 	moveq	r1, r4
    81f0:	e2800008 	add	r0, r0, #8
    81f4:	eb001700 	bl	ddfc <CLogger::Initialize(CDevice*)>
    81f8:	e3500000 	cmp	r0, #0
    81fc:	0affffe7 	beq	81a0 <CKernel::Initialize()+0x20>
    8200:	e2850e95 	add	r0, r5, #2384	; 0x950
    8204:	eb001bf9 	bl	f1f0 <CInterruptSystem::Initialize()>
    8208:	e3500000 	cmp	r0, #0
    820c:	0affffe3 	beq	81a0 <CKernel::Initialize()+0x20>
    8210:	e2850eb9 	add	r0, r5, #2960	; 0xb90
    8214:	e8bd4070 	pop	{r4, r5, r6, lr}
    8218:	ea000db4 	b	b8f0 <CTimer::Initialize()>

0000821c <CKernel::Run()>:
    821c:	e2800ebb 	add	r0, r0, #2992	; 0xbb0
    8220:	e92d4010 	push	{r4, lr}
    8224:	e2800008 	add	r0, r0, #8
    8228:	e3a02003 	mov	r2, #3
    822c:	e30133e4 	movw	r3, #5092	; 0x13e4
    8230:	e3403001 	movt	r3, #1
    8234:	e30113dc 	movw	r1, #5084	; 0x13dc
    8238:	e3401001 	movt	r1, #1
    823c:	eb0016e2 	bl	ddcc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8240:	e3a00001 	mov	r0, #1
    8244:	e8bd8010 	pop	{r4, pc}

00008248 <CKernel::~CKernel()>:
    8248:	e92d4010 	push	{r4, lr}
    824c:	e1a04000 	mov	r4, r0
    8250:	e2800ebb 	add	r0, r0, #2992	; 0xbb0
    8254:	e2800008 	add	r0, r0, #8
    8258:	eb0015f2 	bl	da28 <CLogger::~CLogger()>
    825c:	e2840eb9 	add	r0, r4, #2960	; 0xb90
    8260:	eb000b59 	bl	afcc <CTimer::~CTimer()>
    8264:	e2840e95 	add	r0, r4, #2384	; 0x950
    8268:	eb001bdb 	bl	f1dc <CInterruptSystem::~CInterruptSystem()>
    826c:	e2840d25 	add	r0, r4, #2368	; 0x940
    8270:	e280000c 	add	r0, r0, #12
    8274:	eb001b24 	bl	ef0c <CExceptionHandler::~CExceptionHandler()>
    8278:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    827c:	e2800004 	add	r0, r0, #4
    8280:	eb00178b 	bl	e0b4 <CSerialDevice::~CSerialDevice()>
    8284:	e2840e86 	add	r0, r4, #2144	; 0x860
    8288:	e2800004 	add	r0, r0, #4
    828c:	eb000ff5 	bl	c268 <CScreenDevice::~CScreenDevice()>
    8290:	e2840e85 	add	r0, r4, #2128	; 0x850
    8294:	e280000c 	add	r0, r0, #12
    8298:	eb001535 	bl	d774 <CDeviceNameService::~CDeviceNameService()>
    829c:	e284001c 	add	r0, r4, #28
    82a0:	eb000e3b 	bl	bb94 <CKernelOptions::~CKernelOptions()>
    82a4:	e2840010 	add	r0, r4, #16
    82a8:	eb0005a9 	bl	9954 <CActLED::~CActLED()>
    82ac:	e1a00004 	mov	r0, r4
    82b0:	eb000a21 	bl	ab3c <CMemorySystem::~CMemorySystem()>
    82b4:	e1a00004 	mov	r0, r4
    82b8:	e8bd8010 	pop	{r4, pc}

000082bc <Nes::Nes()>:
    82bc:	e92d4070 	push	{r4, r5, r6, lr}
    82c0:	e1a04000 	mov	r4, r0
    82c4:	e3a0001c 	mov	r0, #28
    82c8:	e3400004 	movt	r0, #4
    82cc:	eb000ab5 	bl	ada8 <operator new(unsigned int)>
    82d0:	e1a05000 	mov	r5, r0
    82d4:	e3a0e010 	mov	lr, #16
    82d8:	e3a0cc02 	mov	ip, #512	; 0x200
    82dc:	e3a03010 	mov	r3, #16
    82e0:	e3403004 	movt	r3, #4
    82e4:	e585e000 	str	lr, [r5]
    82e8:	e1a02003 	mov	r2, r3
    82ec:	e585c004 	str	ip, [r5, #4]
    82f0:	e280000c 	add	r0, r0, #12
    82f4:	e5853008 	str	r3, [r5, #8]
    82f8:	e3011408 	movw	r1, #5128	; 0x1408
    82fc:	e3401001 	movt	r1, #1
    8300:	eb000df4 	bl	bad8 <memcpy>
    8304:	e5845000 	str	r5, [r4]
    8308:	e3000918 	movw	r0, #2328	; 0x918
    830c:	eb000aa5 	bl	ada8 <operator new(unsigned int)>
    8310:	e5941000 	ldr	r1, [r4]
    8314:	e1a05000 	mov	r5, r0
    8318:	eb000278 	bl	8d00 <Cpu::Cpu(Rom const*)>
    831c:	e5845004 	str	r5, [r4, #4]
    8320:	e3a000c8 	mov	r0, #200	; 0xc8
    8324:	e3400001 	movt	r0, #1
    8328:	eb000a9e 	bl	ada8 <operator new(unsigned int)>
    832c:	e5941000 	ldr	r1, [r4]
    8330:	e1a05000 	mov	r5, r0
    8334:	eb00053b 	bl	9828 <Ppu::Ppu(Rom const*)>
    8338:	e5845008 	str	r5, [r4, #8]
    833c:	e1a00004 	mov	r0, r4
    8340:	e8bd8070 	pop	{r4, r5, r6, pc}

00008344 <Cpu::ORA_IMM()>:
    8344:	e8901002 	ldm	r0, {r1, ip}
    8348:	e1d120b0 	ldrh	r2, [r1]
    834c:	e5d10003 	ldrb	r0, [r1, #3]
    8350:	e2822001 	add	r2, r2, #1
    8354:	e1d130d6 	ldrsb	r3, [r1, #6]
    8358:	e6ff2072 	uxth	r2, r2
    835c:	e7dcc002 	ldrb	ip, [ip, r2]
    8360:	e18cc000 	orr	ip, ip, r0
    8364:	e26c0000 	rsb	r0, ip, #0
    8368:	e3cc207f 	bic	r2, ip, #127	; 0x7f
    836c:	e0200003 	eor	r0, r0, r3
    8370:	e2622000 	rsb	r2, r2, #0
    8374:	e2000002 	and	r0, r0, #2
    8378:	e5c1c003 	strb	ip, [r1, #3]
    837c:	e0233000 	eor	r3, r3, r0
    8380:	e0222003 	eor	r2, r2, r3
    8384:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    8388:	e0233002 	eor	r3, r3, r2
    838c:	e5c13006 	strb	r3, [r1, #6]
    8390:	e12fff1e 	bx	lr

00008394 <Cpu::AND_IMM()>:
    8394:	e590c000 	ldr	ip, [r0]
    8398:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    839c:	e5900004 	ldr	r0, [r0, #4]
    83a0:	e1dc20b0 	ldrh	r2, [ip]
    83a4:	e5dc1003 	ldrb	r1, [ip, #3]
    83a8:	e2822001 	add	r2, r2, #1
    83ac:	e1dc30d6 	ldrsb	r3, [ip, #6]
    83b0:	e6ff2072 	uxth	r2, r2
    83b4:	e7d0e002 	ldrb	lr, [r0, r2]
    83b8:	e001100e 	and	r1, r1, lr
    83bc:	e5cc1003 	strb	r1, [ip, #3]
    83c0:	e7d01002 	ldrb	r1, [r0, r2]
    83c4:	e2611000 	rsb	r1, r1, #0
    83c8:	e0211003 	eor	r1, r1, r3
    83cc:	e2011002 	and	r1, r1, #2
    83d0:	e0233001 	eor	r3, r3, r1
    83d4:	e5cc3006 	strb	r3, [ip, #6]
    83d8:	e19020d2 	ldrsb	r2, [r0, r2]
    83dc:	e0222003 	eor	r2, r2, r3
    83e0:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    83e4:	e0233002 	eor	r3, r3, r2
    83e8:	e5cc3006 	strb	r3, [ip, #6]
    83ec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000083f0 <Cpu::UNIMP()>:
    83f0:	e12fff1e 	bx	lr

000083f4 <Cpu::SBC_IND_X()>:
    83f4:	e5902000 	ldr	r2, [r0]
    83f8:	e5901004 	ldr	r1, [r0, #4]
    83fc:	e1d230b0 	ldrh	r3, [r2]
    8400:	e5d22004 	ldrb	r2, [r2, #4]
    8404:	e2833001 	add	r3, r3, #1
    8408:	e6ff3073 	uxth	r3, r3
    840c:	e7d11003 	ldrb	r1, [r1, r3]
    8410:	ea00051f 	b	9894 <Cpu::PreIndexedIndirect(unsigned char, unsigned char) const>

00008414 <Cpu::LDA_IND_X()>:
    8414:	eafffff6 	b	83f4 <Cpu::SBC_IND_X()>

00008418 <Cpu::STA_IND_X()>:
    8418:	eafffff5 	b	83f4 <Cpu::SBC_IND_X()>

0000841c <Cpu::ADC_IND_X()>:
    841c:	eafffff4 	b	83f4 <Cpu::SBC_IND_X()>

00008420 <Cpu::EOR_IND_X()>:
    8420:	eafffff3 	b	83f4 <Cpu::SBC_IND_X()>

00008424 <Cpu::AND_IND_X()>:
    8424:	e5902000 	ldr	r2, [r0]
    8428:	e92d4010 	push	{r4, lr}
    842c:	e1a04000 	mov	r4, r0
    8430:	e5901004 	ldr	r1, [r0, #4]
    8434:	e1d230b0 	ldrh	r3, [r2]
    8438:	e5d22004 	ldrb	r2, [r2, #4]
    843c:	e2833001 	add	r3, r3, #1
    8440:	e6ff3073 	uxth	r3, r3
    8444:	e7d11003 	ldrb	r1, [r1, r3]
    8448:	eb000511 	bl	9894 <Cpu::PreIndexedIndirect(unsigned char, unsigned char) const>
    844c:	e8941002 	ldm	r4, {r1, ip}
    8450:	e7dce000 	ldrb	lr, [ip, r0]
    8454:	e5d12003 	ldrb	r2, [r1, #3]
    8458:	e1d130d6 	ldrsb	r3, [r1, #6]
    845c:	e002200e 	and	r2, r2, lr
    8460:	e5c12003 	strb	r2, [r1, #3]
    8464:	e7dc2000 	ldrb	r2, [ip, r0]
    8468:	e2622000 	rsb	r2, r2, #0
    846c:	e0222003 	eor	r2, r2, r3
    8470:	e2022002 	and	r2, r2, #2
    8474:	e0233002 	eor	r3, r3, r2
    8478:	e5c13006 	strb	r3, [r1, #6]
    847c:	e19c20d0 	ldrsb	r2, [ip, r0]
    8480:	e0222003 	eor	r2, r2, r3
    8484:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    8488:	e0233002 	eor	r3, r3, r2
    848c:	e5c13006 	strb	r3, [r1, #6]
    8490:	e8bd8010 	pop	{r4, pc}

00008494 <Cpu::ORA_IND_X()>:
    8494:	e5902000 	ldr	r2, [r0]
    8498:	e92d4010 	push	{r4, lr}
    849c:	e1a04000 	mov	r4, r0
    84a0:	e5901004 	ldr	r1, [r0, #4]
    84a4:	e1d230b0 	ldrh	r3, [r2]
    84a8:	e5d22004 	ldrb	r2, [r2, #4]
    84ac:	e2833001 	add	r3, r3, #1
    84b0:	e6ff3073 	uxth	r3, r3
    84b4:	e7d11003 	ldrb	r1, [r1, r3]
    84b8:	eb0004f5 	bl	9894 <Cpu::PreIndexedIndirect(unsigned char, unsigned char) const>
    84bc:	e5943004 	ldr	r3, [r4, #4]
    84c0:	e594c000 	ldr	ip, [r4]
    84c4:	e7d30000 	ldrb	r0, [r3, r0]
    84c8:	e5dc2003 	ldrb	r2, [ip, #3]
    84cc:	e1dc30d6 	ldrsb	r3, [ip, #6]
    84d0:	e1800002 	orr	r0, r0, r2
    84d4:	e2601000 	rsb	r1, r0, #0
    84d8:	e3c0207f 	bic	r2, r0, #127	; 0x7f
    84dc:	e0211003 	eor	r1, r1, r3
    84e0:	e2622000 	rsb	r2, r2, #0
    84e4:	e2011002 	and	r1, r1, #2
    84e8:	e5cc0003 	strb	r0, [ip, #3]
    84ec:	e0233001 	eor	r3, r3, r1
    84f0:	e0222003 	eor	r2, r2, r3
    84f4:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    84f8:	e0233002 	eor	r3, r3, r2
    84fc:	e5cc3006 	strb	r3, [ip, #6]
    8500:	e8bd8010 	pop	{r4, pc}

00008504 <Cpu::INC_ZP()>:
    8504:	e8900006 	ldm	r0, {r1, r2}
    8508:	e1d130b0 	ldrh	r3, [r1]
    850c:	e2833001 	add	r3, r3, #1
    8510:	e6ff3073 	uxth	r3, r3
    8514:	e7d21003 	ldrb	r1, [r2, r3]
    8518:	ea0004cc 	b	9850 <Cpu::ZeroPage(unsigned char) const>

0000851c <Cpu::SBC_ZP()>:
    851c:	eafffff8 	b	8504 <Cpu::INC_ZP()>

00008520 <Cpu::DEC_ZP()>:
    8520:	eafffff7 	b	8504 <Cpu::INC_ZP()>

00008524 <Cpu::LDX_ZP()>:
    8524:	eafffff6 	b	8504 <Cpu::INC_ZP()>

00008528 <Cpu::LDA_ZP()>:
    8528:	eafffff5 	b	8504 <Cpu::INC_ZP()>

0000852c <Cpu::LDY_ZP()>:
    852c:	eafffff4 	b	8504 <Cpu::INC_ZP()>

00008530 <Cpu::STX_ZP()>:
    8530:	eafffff3 	b	8504 <Cpu::INC_ZP()>

00008534 <Cpu::STA_ZP()>:
    8534:	eafffff2 	b	8504 <Cpu::INC_ZP()>

00008538 <Cpu::STY_ZP()>:
    8538:	eafffff1 	b	8504 <Cpu::INC_ZP()>

0000853c <Cpu::ADC_ZP()>:
    853c:	eafffff0 	b	8504 <Cpu::INC_ZP()>

00008540 <Cpu::LSR_ZP()>:
    8540:	eaffffef 	b	8504 <Cpu::INC_ZP()>

00008544 <Cpu::EOR_ZP()>:
    8544:	eaffffee 	b	8504 <Cpu::INC_ZP()>

00008548 <Cpu::AND_ZP()>:
    8548:	e5903000 	ldr	r3, [r0]
    854c:	e92d4010 	push	{r4, lr}
    8550:	e1a04000 	mov	r4, r0
    8554:	e5902004 	ldr	r2, [r0, #4]
    8558:	e1d330b0 	ldrh	r3, [r3]
    855c:	e2833001 	add	r3, r3, #1
    8560:	e6ff3073 	uxth	r3, r3
    8564:	e7d21003 	ldrb	r1, [r2, r3]
    8568:	eb0004b8 	bl	9850 <Cpu::ZeroPage(unsigned char) const>
    856c:	e8941002 	ldm	r4, {r1, ip}
    8570:	e7dce000 	ldrb	lr, [ip, r0]
    8574:	e5d12003 	ldrb	r2, [r1, #3]
    8578:	e1d130d6 	ldrsb	r3, [r1, #6]
    857c:	e002200e 	and	r2, r2, lr
    8580:	e5c12003 	strb	r2, [r1, #3]
    8584:	e7dc2000 	ldrb	r2, [ip, r0]
    8588:	e2622000 	rsb	r2, r2, #0
    858c:	e0222003 	eor	r2, r2, r3
    8590:	e2022002 	and	r2, r2, #2
    8594:	e0233002 	eor	r3, r3, r2
    8598:	e5c13006 	strb	r3, [r1, #6]
    859c:	e19c20d0 	ldrsb	r2, [ip, r0]
    85a0:	e0222003 	eor	r2, r2, r3
    85a4:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    85a8:	e0233002 	eor	r3, r3, r2
    85ac:	e5c13006 	strb	r3, [r1, #6]
    85b0:	e8bd8010 	pop	{r4, pc}

000085b4 <Cpu::ORA_ZP()>:
    85b4:	e5903000 	ldr	r3, [r0]
    85b8:	e92d4010 	push	{r4, lr}
    85bc:	e1a04000 	mov	r4, r0
    85c0:	e5902004 	ldr	r2, [r0, #4]
    85c4:	e1d330b0 	ldrh	r3, [r3]
    85c8:	e2833001 	add	r3, r3, #1
    85cc:	e6ff3073 	uxth	r3, r3
    85d0:	e7d21003 	ldrb	r1, [r2, r3]
    85d4:	eb00049d 	bl	9850 <Cpu::ZeroPage(unsigned char) const>
    85d8:	e5943004 	ldr	r3, [r4, #4]
    85dc:	e594c000 	ldr	ip, [r4]
    85e0:	e7d30000 	ldrb	r0, [r3, r0]
    85e4:	e5dc2003 	ldrb	r2, [ip, #3]
    85e8:	e1dc30d6 	ldrsb	r3, [ip, #6]
    85ec:	e1800002 	orr	r0, r0, r2
    85f0:	e2601000 	rsb	r1, r0, #0
    85f4:	e3c0207f 	bic	r2, r0, #127	; 0x7f
    85f8:	e0211003 	eor	r1, r1, r3
    85fc:	e2622000 	rsb	r2, r2, #0
    8600:	e2011002 	and	r1, r1, #2
    8604:	e5cc0003 	strb	r0, [ip, #3]
    8608:	e0233001 	eor	r3, r3, r1
    860c:	e0222003 	eor	r2, r2, r3
    8610:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    8614:	e0233002 	eor	r3, r3, r2
    8618:	e5cc3006 	strb	r3, [ip, #6]
    861c:	e8bd8010 	pop	{r4, pc}

00008620 <Cpu::INC_ABS()>:
    8620:	e5902000 	ldr	r2, [r0]
    8624:	e5901004 	ldr	r1, [r0, #4]
    8628:	e1d230b0 	ldrh	r3, [r2]
    862c:	e2832002 	add	r2, r3, #2
    8630:	e2833001 	add	r3, r3, #1
    8634:	e6ff2072 	uxth	r2, r2
    8638:	e6ff3073 	uxth	r3, r3
    863c:	e7d12002 	ldrb	r2, [r1, r2]
    8640:	e7d11003 	ldrb	r1, [r1, r3]
    8644:	ea000483 	b	9858 <Cpu::Absolute(unsigned char, unsigned char) const>

00008648 <Cpu::SBC_ABS()>:
    8648:	eafffff4 	b	8620 <Cpu::INC_ABS()>

0000864c <Cpu::DEC_ABS()>:
    864c:	eafffff3 	b	8620 <Cpu::INC_ABS()>

00008650 <Cpu::LDX_ABS()>:
    8650:	eafffff2 	b	8620 <Cpu::INC_ABS()>

00008654 <Cpu::LDA_ABS()>:
    8654:	eafffff1 	b	8620 <Cpu::INC_ABS()>

00008658 <Cpu::LDY_ABS()>:
    8658:	eafffff0 	b	8620 <Cpu::INC_ABS()>

0000865c <Cpu::STX_ABS()>:
    865c:	eaffffef 	b	8620 <Cpu::INC_ABS()>

00008660 <Cpu::STA_ABS()>:
    8660:	eaffffee 	b	8620 <Cpu::INC_ABS()>

00008664 <Cpu::STY_ABS()>:
    8664:	eaffffed 	b	8620 <Cpu::INC_ABS()>

00008668 <Cpu::ADC_ABS()>:
    8668:	eaffffec 	b	8620 <Cpu::INC_ABS()>

0000866c <Cpu::LSR_ABS()>:
    866c:	eaffffeb 	b	8620 <Cpu::INC_ABS()>

00008670 <Cpu::EOR_ABS()>:
    8670:	eaffffea 	b	8620 <Cpu::INC_ABS()>

00008674 <Cpu::JMP_ABS()>:
    8674:	eaffffe9 	b	8620 <Cpu::INC_ABS()>

00008678 <Cpu::AND_ABS()>:
    8678:	e5903000 	ldr	r3, [r0]
    867c:	e92d4010 	push	{r4, lr}
    8680:	e1a04000 	mov	r4, r0
    8684:	e5901004 	ldr	r1, [r0, #4]
    8688:	e1d330b0 	ldrh	r3, [r3]
    868c:	e2832002 	add	r2, r3, #2
    8690:	e2833001 	add	r3, r3, #1
    8694:	e6ff2072 	uxth	r2, r2
    8698:	e6ff3073 	uxth	r3, r3
    869c:	e7d12002 	ldrb	r2, [r1, r2]
    86a0:	e7d11003 	ldrb	r1, [r1, r3]
    86a4:	eb00046b 	bl	9858 <Cpu::Absolute(unsigned char, unsigned char) const>
    86a8:	e8941002 	ldm	r4, {r1, ip}
    86ac:	e7dc2000 	ldrb	r2, [ip, r0]
    86b0:	e5d1e003 	ldrb	lr, [r1, #3]
    86b4:	e1d130d6 	ldrsb	r3, [r1, #6]
    86b8:	e002200e 	and	r2, r2, lr
    86bc:	e5c12003 	strb	r2, [r1, #3]
    86c0:	e7dc2000 	ldrb	r2, [ip, r0]
    86c4:	e2622000 	rsb	r2, r2, #0
    86c8:	e0222003 	eor	r2, r2, r3
    86cc:	e2022002 	and	r2, r2, #2
    86d0:	e0233002 	eor	r3, r3, r2
    86d4:	e5c13006 	strb	r3, [r1, #6]
    86d8:	e19c20d0 	ldrsb	r2, [ip, r0]
    86dc:	e0222003 	eor	r2, r2, r3
    86e0:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    86e4:	e0233002 	eor	r3, r3, r2
    86e8:	e5c13006 	strb	r3, [r1, #6]
    86ec:	e8bd8010 	pop	{r4, pc}

000086f0 <Cpu::ORA_ABS()>:
    86f0:	e5903000 	ldr	r3, [r0]
    86f4:	e92d4010 	push	{r4, lr}
    86f8:	e1a04000 	mov	r4, r0
    86fc:	e5901004 	ldr	r1, [r0, #4]
    8700:	e1d330b0 	ldrh	r3, [r3]
    8704:	e2832002 	add	r2, r3, #2
    8708:	e2833001 	add	r3, r3, #1
    870c:	e6ff2072 	uxth	r2, r2
    8710:	e6ff3073 	uxth	r3, r3
    8714:	e7d12002 	ldrb	r2, [r1, r2]
    8718:	e7d11003 	ldrb	r1, [r1, r3]
    871c:	eb00044d 	bl	9858 <Cpu::Absolute(unsigned char, unsigned char) const>
    8720:	e5943004 	ldr	r3, [r4, #4]
    8724:	e594c000 	ldr	ip, [r4]
    8728:	e7d30000 	ldrb	r0, [r3, r0]
    872c:	e5dc2003 	ldrb	r2, [ip, #3]
    8730:	e1dc30d6 	ldrsb	r3, [ip, #6]
    8734:	e1800002 	orr	r0, r0, r2
    8738:	e2601000 	rsb	r1, r0, #0
    873c:	e3c0207f 	bic	r2, r0, #127	; 0x7f
    8740:	e0211003 	eor	r1, r1, r3
    8744:	e2622000 	rsb	r2, r2, #0
    8748:	e2011002 	and	r1, r1, #2
    874c:	e5cc0003 	strb	r0, [ip, #3]
    8750:	e0233001 	eor	r3, r3, r1
    8754:	e0222003 	eor	r2, r2, r3
    8758:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    875c:	e0233002 	eor	r3, r3, r2
    8760:	e5cc3006 	strb	r3, [ip, #6]
    8764:	e8bd8010 	pop	{r4, pc}

00008768 <Cpu::SBC_IND_Y()>:
    8768:	e5902000 	ldr	r2, [r0]
    876c:	e5901004 	ldr	r1, [r0, #4]
    8770:	e1d230b0 	ldrh	r3, [r2]
    8774:	e5d22005 	ldrb	r2, [r2, #5]
    8778:	e2833001 	add	r3, r3, #1
    877c:	e6ff3073 	uxth	r3, r3
    8780:	e7d11003 	ldrb	r1, [r1, r3]
    8784:	ea00044a 	b	98b4 <Cpu::PostIndexedIndirect(unsigned char, unsigned char) const>

00008788 <Cpu::LDA_IND_Y()>:
    8788:	eafffff6 	b	8768 <Cpu::SBC_IND_Y()>

0000878c <Cpu::STA_IND_Y()>:
    878c:	eafffff5 	b	8768 <Cpu::SBC_IND_Y()>

00008790 <Cpu::ADC_IND_Y()>:
    8790:	eafffff4 	b	8768 <Cpu::SBC_IND_Y()>

00008794 <Cpu::EOR_IND_Y()>:
    8794:	eafffff3 	b	8768 <Cpu::SBC_IND_Y()>

00008798 <Cpu::AND_IND_Y()>:
    8798:	e5902000 	ldr	r2, [r0]
    879c:	e92d4010 	push	{r4, lr}
    87a0:	e1a04000 	mov	r4, r0
    87a4:	e5901004 	ldr	r1, [r0, #4]
    87a8:	e1d230b0 	ldrh	r3, [r2]
    87ac:	e5d22005 	ldrb	r2, [r2, #5]
    87b0:	e2833001 	add	r3, r3, #1
    87b4:	e6ff3073 	uxth	r3, r3
    87b8:	e7d11003 	ldrb	r1, [r1, r3]
    87bc:	eb00043c 	bl	98b4 <Cpu::PostIndexedIndirect(unsigned char, unsigned char) const>
    87c0:	e8941002 	ldm	r4, {r1, ip}
    87c4:	e7dce000 	ldrb	lr, [ip, r0]
    87c8:	e5d12003 	ldrb	r2, [r1, #3]
    87cc:	e1d130d6 	ldrsb	r3, [r1, #6]
    87d0:	e002200e 	and	r2, r2, lr
    87d4:	e5c12003 	strb	r2, [r1, #3]
    87d8:	e7dc2000 	ldrb	r2, [ip, r0]
    87dc:	e2622000 	rsb	r2, r2, #0
    87e0:	e0222003 	eor	r2, r2, r3
    87e4:	e2022002 	and	r2, r2, #2
    87e8:	e0233002 	eor	r3, r3, r2
    87ec:	e5c13006 	strb	r3, [r1, #6]
    87f0:	e19c20d0 	ldrsb	r2, [ip, r0]
    87f4:	e0222003 	eor	r2, r2, r3
    87f8:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    87fc:	e0233002 	eor	r3, r3, r2
    8800:	e5c13006 	strb	r3, [r1, #6]
    8804:	e8bd8010 	pop	{r4, pc}

00008808 <Cpu::ORA_IND_Y()>:
    8808:	e5902000 	ldr	r2, [r0]
    880c:	e92d4010 	push	{r4, lr}
    8810:	e1a04000 	mov	r4, r0
    8814:	e5901004 	ldr	r1, [r0, #4]
    8818:	e1d230b0 	ldrh	r3, [r2]
    881c:	e5d22005 	ldrb	r2, [r2, #5]
    8820:	e2833001 	add	r3, r3, #1
    8824:	e6ff3073 	uxth	r3, r3
    8828:	e7d11003 	ldrb	r1, [r1, r3]
    882c:	eb000420 	bl	98b4 <Cpu::PostIndexedIndirect(unsigned char, unsigned char) const>
    8830:	e5943004 	ldr	r3, [r4, #4]
    8834:	e594c000 	ldr	ip, [r4]
    8838:	e7d30000 	ldrb	r0, [r3, r0]
    883c:	e5dc2003 	ldrb	r2, [ip, #3]
    8840:	e1dc30d6 	ldrsb	r3, [ip, #6]
    8844:	e1800002 	orr	r0, r0, r2
    8848:	e2601000 	rsb	r1, r0, #0
    884c:	e3c0207f 	bic	r2, r0, #127	; 0x7f
    8850:	e0211003 	eor	r1, r1, r3
    8854:	e2622000 	rsb	r2, r2, #0
    8858:	e2011002 	and	r1, r1, #2
    885c:	e5cc0003 	strb	r0, [ip, #3]
    8860:	e0233001 	eor	r3, r3, r1
    8864:	e0222003 	eor	r2, r2, r3
    8868:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    886c:	e0233002 	eor	r3, r3, r2
    8870:	e5cc3006 	strb	r3, [ip, #6]
    8874:	e8bd8010 	pop	{r4, pc}

00008878 <Cpu::INC_ZP_X()>:
    8878:	e5902000 	ldr	r2, [r0]
    887c:	e5901004 	ldr	r1, [r0, #4]
    8880:	e1d230b0 	ldrh	r3, [r2]
    8884:	e5d22004 	ldrb	r2, [r2, #4]
    8888:	e2833001 	add	r3, r3, #1
    888c:	e6ff3073 	uxth	r3, r3
    8890:	e7d11003 	ldrb	r1, [r1, r3]
    8894:	ea0003f5 	b	9870 <Cpu::ZeroPageIndexed(unsigned char, unsigned char) const>

00008898 <Cpu::SBC_ZP_X()>:
    8898:	eafffff6 	b	8878 <Cpu::INC_ZP_X()>

0000889c <Cpu::DEC_ZP_X()>:
    889c:	eafffff5 	b	8878 <Cpu::INC_ZP_X()>

000088a0 <Cpu::LDA_ZP_X()>:
    88a0:	eafffff4 	b	8878 <Cpu::INC_ZP_X()>

000088a4 <Cpu::LDY_ZP_X()>:
    88a4:	eafffff3 	b	8878 <Cpu::INC_ZP_X()>

000088a8 <Cpu::STA_ZP_X()>:
    88a8:	eafffff2 	b	8878 <Cpu::INC_ZP_X()>

000088ac <Cpu::STY_ZP_X()>:
    88ac:	eafffff1 	b	8878 <Cpu::INC_ZP_X()>

000088b0 <Cpu::ADC_ZP_X()>:
    88b0:	eafffff0 	b	8878 <Cpu::INC_ZP_X()>

000088b4 <Cpu::LSR_ZP_X()>:
    88b4:	eaffffef 	b	8878 <Cpu::INC_ZP_X()>

000088b8 <Cpu::EOR_ZP_X()>:
    88b8:	eaffffee 	b	8878 <Cpu::INC_ZP_X()>

000088bc <Cpu::LDX_ZP_Y()>:
    88bc:	e5902000 	ldr	r2, [r0]
    88c0:	e5901004 	ldr	r1, [r0, #4]
    88c4:	e1d230b0 	ldrh	r3, [r2]
    88c8:	e5d22005 	ldrb	r2, [r2, #5]
    88cc:	e2833001 	add	r3, r3, #1
    88d0:	e6ff3073 	uxth	r3, r3
    88d4:	e7d11003 	ldrb	r1, [r1, r3]
    88d8:	ea0003e4 	b	9870 <Cpu::ZeroPageIndexed(unsigned char, unsigned char) const>

000088dc <Cpu::STX_ZP_Y()>:
    88dc:	eafffff6 	b	88bc <Cpu::LDX_ZP_Y()>

000088e0 <Cpu::AND_ZP_X()>:
    88e0:	e5902000 	ldr	r2, [r0]
    88e4:	e92d4010 	push	{r4, lr}
    88e8:	e1a04000 	mov	r4, r0
    88ec:	e5901004 	ldr	r1, [r0, #4]
    88f0:	e1d230b0 	ldrh	r3, [r2]
    88f4:	e5d22004 	ldrb	r2, [r2, #4]
    88f8:	e2833001 	add	r3, r3, #1
    88fc:	e6ff3073 	uxth	r3, r3
    8900:	e7d11003 	ldrb	r1, [r1, r3]
    8904:	eb0003d9 	bl	9870 <Cpu::ZeroPageIndexed(unsigned char, unsigned char) const>
    8908:	e8941002 	ldm	r4, {r1, ip}
    890c:	e7dce000 	ldrb	lr, [ip, r0]
    8910:	e5d12003 	ldrb	r2, [r1, #3]
    8914:	e1d130d6 	ldrsb	r3, [r1, #6]
    8918:	e002200e 	and	r2, r2, lr
    891c:	e5c12003 	strb	r2, [r1, #3]
    8920:	e7dc2000 	ldrb	r2, [ip, r0]
    8924:	e2622000 	rsb	r2, r2, #0
    8928:	e0222003 	eor	r2, r2, r3
    892c:	e2022002 	and	r2, r2, #2
    8930:	e0233002 	eor	r3, r3, r2
    8934:	e5c13006 	strb	r3, [r1, #6]
    8938:	e19c20d0 	ldrsb	r2, [ip, r0]
    893c:	e0222003 	eor	r2, r2, r3
    8940:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    8944:	e0233002 	eor	r3, r3, r2
    8948:	e5c13006 	strb	r3, [r1, #6]
    894c:	e8bd8010 	pop	{r4, pc}

00008950 <Cpu::ORA_ZP_X()>:
    8950:	e5902000 	ldr	r2, [r0]
    8954:	e92d4010 	push	{r4, lr}
    8958:	e1a04000 	mov	r4, r0
    895c:	e5901004 	ldr	r1, [r0, #4]
    8960:	e1d230b0 	ldrh	r3, [r2]
    8964:	e5d22004 	ldrb	r2, [r2, #4]
    8968:	e2833001 	add	r3, r3, #1
    896c:	e6ff3073 	uxth	r3, r3
    8970:	e7d11003 	ldrb	r1, [r1, r3]
    8974:	eb0003bd 	bl	9870 <Cpu::ZeroPageIndexed(unsigned char, unsigned char) const>
    8978:	e5943004 	ldr	r3, [r4, #4]
    897c:	e594c000 	ldr	ip, [r4]
    8980:	e7d30000 	ldrb	r0, [r3, r0]
    8984:	e5dc2003 	ldrb	r2, [ip, #3]
    8988:	e1dc30d6 	ldrsb	r3, [ip, #6]
    898c:	e1800002 	orr	r0, r0, r2
    8990:	e2601000 	rsb	r1, r0, #0
    8994:	e3c0207f 	bic	r2, r0, #127	; 0x7f
    8998:	e0211003 	eor	r1, r1, r3
    899c:	e2622000 	rsb	r2, r2, #0
    89a0:	e2011002 	and	r1, r1, #2
    89a4:	e5cc0003 	strb	r0, [ip, #3]
    89a8:	e0233001 	eor	r3, r3, r1
    89ac:	e0222003 	eor	r2, r2, r3
    89b0:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    89b4:	e0233002 	eor	r3, r3, r2
    89b8:	e5cc3006 	strb	r3, [ip, #6]
    89bc:	e8bd8010 	pop	{r4, pc}

000089c0 <Cpu::INC_ABS_X()>:
    89c0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    89c4:	e8904008 	ldm	r0, {r3, lr}
    89c8:	e1d320b0 	ldrh	r2, [r3]
    89cc:	e5d33004 	ldrb	r3, [r3, #4]
    89d0:	e282c002 	add	ip, r2, #2
    89d4:	e2822001 	add	r2, r2, #1
    89d8:	e6ffc07c 	uxth	ip, ip
    89dc:	e6ff1072 	uxth	r1, r2
    89e0:	e7de200c 	ldrb	r2, [lr, ip]
    89e4:	e7de1001 	ldrb	r1, [lr, r1]
    89e8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    89ec:	ea00039b 	b	9860 <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>

000089f0 <Cpu::SBC_ABS_X()>:
    89f0:	eafffff2 	b	89c0 <Cpu::INC_ABS_X()>

000089f4 <Cpu::DEC_ABS_X()>:
    89f4:	eafffff1 	b	89c0 <Cpu::INC_ABS_X()>

000089f8 <Cpu::LDA_ABS_X()>:
    89f8:	eafffff0 	b	89c0 <Cpu::INC_ABS_X()>

000089fc <Cpu::LDY_ABS_X()>:
    89fc:	eaffffef 	b	89c0 <Cpu::INC_ABS_X()>

00008a00 <Cpu::STA_ABS_X()>:
    8a00:	eaffffee 	b	89c0 <Cpu::INC_ABS_X()>

00008a04 <Cpu::ADC_ABS_X()>:
    8a04:	eaffffed 	b	89c0 <Cpu::INC_ABS_X()>

00008a08 <Cpu::LSR_ABS_X()>:
    8a08:	eaffffec 	b	89c0 <Cpu::INC_ABS_X()>

00008a0c <Cpu::EOR_ABS_X()>:
    8a0c:	eaffffeb 	b	89c0 <Cpu::INC_ABS_X()>

00008a10 <Cpu::SBC_ABS_Y()>:
    8a10:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8a14:	e8904008 	ldm	r0, {r3, lr}
    8a18:	e1d320b0 	ldrh	r2, [r3]
    8a1c:	e5d33005 	ldrb	r3, [r3, #5]
    8a20:	e282c002 	add	ip, r2, #2
    8a24:	e2822001 	add	r2, r2, #1
    8a28:	e6ffc07c 	uxth	ip, ip
    8a2c:	e6ff1072 	uxth	r1, r2
    8a30:	e7de200c 	ldrb	r2, [lr, ip]
    8a34:	e7de1001 	ldrb	r1, [lr, r1]
    8a38:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    8a3c:	ea000387 	b	9860 <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>

00008a40 <Cpu::LDX_ABS_Y()>:
    8a40:	eafffff2 	b	8a10 <Cpu::SBC_ABS_Y()>

00008a44 <Cpu::LDA_ABS_Y()>:
    8a44:	eafffff1 	b	8a10 <Cpu::SBC_ABS_Y()>

00008a48 <Cpu::STA_ABS_Y()>:
    8a48:	eafffff0 	b	8a10 <Cpu::SBC_ABS_Y()>

00008a4c <Cpu::ADC_ABS_Y()>:
    8a4c:	eaffffef 	b	8a10 <Cpu::SBC_ABS_Y()>

00008a50 <Cpu::EOR_ABS_Y()>:
    8a50:	eaffffee 	b	8a10 <Cpu::SBC_ABS_Y()>

00008a54 <Cpu::AND_ABS_Y()>:
    8a54:	e92d4010 	push	{r4, lr}
    8a58:	e1a04000 	mov	r4, r0
    8a5c:	e8904008 	ldm	r0, {r3, lr}
    8a60:	e1d320b0 	ldrh	r2, [r3]
    8a64:	e5d33005 	ldrb	r3, [r3, #5]
    8a68:	e282c002 	add	ip, r2, #2
    8a6c:	e2822001 	add	r2, r2, #1
    8a70:	e6ffc07c 	uxth	ip, ip
    8a74:	e6ff1072 	uxth	r1, r2
    8a78:	e7de200c 	ldrb	r2, [lr, ip]
    8a7c:	e7de1001 	ldrb	r1, [lr, r1]
    8a80:	eb000376 	bl	9860 <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>
    8a84:	e8941002 	ldm	r4, {r1, ip}
    8a88:	e7dc2000 	ldrb	r2, [ip, r0]
    8a8c:	e5d1e003 	ldrb	lr, [r1, #3]
    8a90:	e1d130d6 	ldrsb	r3, [r1, #6]
    8a94:	e002200e 	and	r2, r2, lr
    8a98:	e5c12003 	strb	r2, [r1, #3]
    8a9c:	e7dc2000 	ldrb	r2, [ip, r0]
    8aa0:	e2622000 	rsb	r2, r2, #0
    8aa4:	e0222003 	eor	r2, r2, r3
    8aa8:	e2022002 	and	r2, r2, #2
    8aac:	e0233002 	eor	r3, r3, r2
    8ab0:	e5c13006 	strb	r3, [r1, #6]
    8ab4:	e19c20d0 	ldrsb	r2, [ip, r0]
    8ab8:	e0222003 	eor	r2, r2, r3
    8abc:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    8ac0:	e0233002 	eor	r3, r3, r2
    8ac4:	e5c13006 	strb	r3, [r1, #6]
    8ac8:	e8bd8010 	pop	{r4, pc}

00008acc <Cpu::AND_ABS_X()>:
    8acc:	e92d4010 	push	{r4, lr}
    8ad0:	e1a04000 	mov	r4, r0
    8ad4:	e8904008 	ldm	r0, {r3, lr}
    8ad8:	e1d320b0 	ldrh	r2, [r3]
    8adc:	e5d33004 	ldrb	r3, [r3, #4]
    8ae0:	e282c002 	add	ip, r2, #2
    8ae4:	e2822001 	add	r2, r2, #1
    8ae8:	e6ffc07c 	uxth	ip, ip
    8aec:	e6ff1072 	uxth	r1, r2
    8af0:	e7de200c 	ldrb	r2, [lr, ip]
    8af4:	e7de1001 	ldrb	r1, [lr, r1]
    8af8:	eb000358 	bl	9860 <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>
    8afc:	e8941002 	ldm	r4, {r1, ip}
    8b00:	e7dc2000 	ldrb	r2, [ip, r0]
    8b04:	e5d1e003 	ldrb	lr, [r1, #3]
    8b08:	e1d130d6 	ldrsb	r3, [r1, #6]
    8b0c:	e002200e 	and	r2, r2, lr
    8b10:	e5c12003 	strb	r2, [r1, #3]
    8b14:	e7dc2000 	ldrb	r2, [ip, r0]
    8b18:	e2622000 	rsb	r2, r2, #0
    8b1c:	e0222003 	eor	r2, r2, r3
    8b20:	e2022002 	and	r2, r2, #2
    8b24:	e0233002 	eor	r3, r3, r2
    8b28:	e5c13006 	strb	r3, [r1, #6]
    8b2c:	e19c20d0 	ldrsb	r2, [ip, r0]
    8b30:	e0222003 	eor	r2, r2, r3
    8b34:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    8b38:	e0233002 	eor	r3, r3, r2
    8b3c:	e5c13006 	strb	r3, [r1, #6]
    8b40:	e8bd8010 	pop	{r4, pc}

00008b44 <Cpu::ORA_ABS_Y()>:
    8b44:	e92d4010 	push	{r4, lr}
    8b48:	e1a04000 	mov	r4, r0
    8b4c:	e8904008 	ldm	r0, {r3, lr}
    8b50:	e1d320b0 	ldrh	r2, [r3]
    8b54:	e5d33005 	ldrb	r3, [r3, #5]
    8b58:	e282c002 	add	ip, r2, #2
    8b5c:	e2822001 	add	r2, r2, #1
    8b60:	e6ffc07c 	uxth	ip, ip
    8b64:	e6ff1072 	uxth	r1, r2
    8b68:	e7de200c 	ldrb	r2, [lr, ip]
    8b6c:	e7de1001 	ldrb	r1, [lr, r1]
    8b70:	eb00033a 	bl	9860 <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>
    8b74:	e5943004 	ldr	r3, [r4, #4]
    8b78:	e594c000 	ldr	ip, [r4]
    8b7c:	e7d30000 	ldrb	r0, [r3, r0]
    8b80:	e5dc2003 	ldrb	r2, [ip, #3]
    8b84:	e1dc30d6 	ldrsb	r3, [ip, #6]
    8b88:	e1800002 	orr	r0, r0, r2
    8b8c:	e2601000 	rsb	r1, r0, #0
    8b90:	e3c0207f 	bic	r2, r0, #127	; 0x7f
    8b94:	e0211003 	eor	r1, r1, r3
    8b98:	e2622000 	rsb	r2, r2, #0
    8b9c:	e2011002 	and	r1, r1, #2
    8ba0:	e5cc0003 	strb	r0, [ip, #3]
    8ba4:	e0233001 	eor	r3, r3, r1
    8ba8:	e0222003 	eor	r2, r2, r3
    8bac:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    8bb0:	e0233002 	eor	r3, r3, r2
    8bb4:	e5cc3006 	strb	r3, [ip, #6]
    8bb8:	e8bd8010 	pop	{r4, pc}

00008bbc <Cpu::ORA_ABS_X()>:
    8bbc:	e92d4010 	push	{r4, lr}
    8bc0:	e1a04000 	mov	r4, r0
    8bc4:	e8904008 	ldm	r0, {r3, lr}
    8bc8:	e1d320b0 	ldrh	r2, [r3]
    8bcc:	e5d33004 	ldrb	r3, [r3, #4]
    8bd0:	e282c002 	add	ip, r2, #2
    8bd4:	e2822001 	add	r2, r2, #1
    8bd8:	e6ffc07c 	uxth	ip, ip
    8bdc:	e6ff1072 	uxth	r1, r2
    8be0:	e7de200c 	ldrb	r2, [lr, ip]
    8be4:	e7de1001 	ldrb	r1, [lr, r1]
    8be8:	eb00031c 	bl	9860 <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>
    8bec:	e5943004 	ldr	r3, [r4, #4]
    8bf0:	e594c000 	ldr	ip, [r4]
    8bf4:	e7d30000 	ldrb	r0, [r3, r0]
    8bf8:	e5dc2003 	ldrb	r2, [ip, #3]
    8bfc:	e1dc30d6 	ldrsb	r3, [ip, #6]
    8c00:	e1800002 	orr	r0, r0, r2
    8c04:	e2601000 	rsb	r1, r0, #0
    8c08:	e3c0207f 	bic	r2, r0, #127	; 0x7f
    8c0c:	e0211003 	eor	r1, r1, r3
    8c10:	e2622000 	rsb	r2, r2, #0
    8c14:	e2011002 	and	r1, r1, #2
    8c18:	e5cc0003 	strb	r0, [ip, #3]
    8c1c:	e0233001 	eor	r3, r3, r1
    8c20:	e0222003 	eor	r2, r2, r3
    8c24:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    8c28:	e0233002 	eor	r3, r3, r2
    8c2c:	e5cc3006 	strb	r3, [ip, #6]
    8c30:	e8bd8010 	pop	{r4, pc}

00008c34 <Cpu::JMP_IND()>:
    8c34:	e5902000 	ldr	r2, [r0]
    8c38:	e5901004 	ldr	r1, [r0, #4]
    8c3c:	e1d230b0 	ldrh	r3, [r2]
    8c40:	e2832002 	add	r2, r3, #2
    8c44:	e2833001 	add	r3, r3, #1
    8c48:	e6ff2072 	uxth	r2, r2
    8c4c:	e6ff3073 	uxth	r3, r3
    8c50:	e7d12002 	ldrb	r2, [r1, r2]
    8c54:	e7d11003 	ldrb	r1, [r1, r3]
    8c58:	ea000306 	b	9878 <Cpu::Indirect(unsigned char, unsigned char) const>

00008c5c <Cpu::CLD()>:
    8c5c:	e12fff1e 	bx	lr

00008c60 <Cpu::SED()>:
    8c60:	e12fff1e 	bx	lr

00008c64 <Cpu::BRK()>:
    8c64:	e12fff1e 	bx	lr

00008c68 <Cpu::PHP()>:
    8c68:	e12fff1e 	bx	lr

00008c6c <Cpu::BPL()>:
    8c6c:	e12fff1e 	bx	lr

00008c70 <Cpu::CLC()>:
    8c70:	e12fff1e 	bx	lr

00008c74 <Cpu::INX()>:
    8c74:	e12fff1e 	bx	lr

00008c78 <Cpu::SBC_IMM()>:
    8c78:	e12fff1e 	bx	lr

00008c7c <Cpu::NOP()>:
    8c7c:	e12fff1e 	bx	lr

00008c80 <Cpu::BEQ()>:
    8c80:	e12fff1e 	bx	lr

00008c84 <Cpu::JSR()>:
    8c84:	e12fff1e 	bx	lr

00008c88 <Cpu::PLP()>:
    8c88:	e12fff1e 	bx	lr

00008c8c <Cpu::BMI()>:
    8c8c:	e12fff1e 	bx	lr

00008c90 <Cpu::SEC()>:
    8c90:	e12fff1e 	bx	lr

00008c94 <Cpu::RTI()>:
    8c94:	e12fff1e 	bx	lr

00008c98 <Cpu::PHA()>:
    8c98:	e12fff1e 	bx	lr

00008c9c <Cpu::EOR_IMM()>:
    8c9c:	e12fff1e 	bx	lr

00008ca0 <Cpu::LSR_ACC()>:
    8ca0:	e12fff1e 	bx	lr

00008ca4 <Cpu::BVC()>:
    8ca4:	e12fff1e 	bx	lr

00008ca8 <Cpu::CLI()>:
    8ca8:	e12fff1e 	bx	lr

00008cac <Cpu::RTS()>:
    8cac:	e12fff1e 	bx	lr

00008cb0 <Cpu::PLA()>:
    8cb0:	e12fff1e 	bx	lr

00008cb4 <Cpu::ADC_IMM()>:
    8cb4:	e12fff1e 	bx	lr

00008cb8 <Cpu::BVS()>:
    8cb8:	e12fff1e 	bx	lr

00008cbc <Cpu::SEI()>:
    8cbc:	e12fff1e 	bx	lr

00008cc0 <Cpu::DEY()>:
    8cc0:	e12fff1e 	bx	lr

00008cc4 <Cpu::TXA()>:
    8cc4:	e12fff1e 	bx	lr

00008cc8 <Cpu::BCC()>:
    8cc8:	e12fff1e 	bx	lr

00008ccc <Cpu::TYA()>:
    8ccc:	e12fff1e 	bx	lr

00008cd0 <Cpu::TXS()>:
    8cd0:	e12fff1e 	bx	lr

00008cd4 <Cpu::LDY_IMM()>:
    8cd4:	e12fff1e 	bx	lr

00008cd8 <Cpu::LDX_IMM()>:
    8cd8:	e12fff1e 	bx	lr

00008cdc <Cpu::TAY()>:
    8cdc:	e12fff1e 	bx	lr

00008ce0 <Cpu::LDA_IMM()>:
    8ce0:	e12fff1e 	bx	lr

00008ce4 <Cpu::TAX()>:
    8ce4:	e12fff1e 	bx	lr

00008ce8 <Cpu::BCS()>:
    8ce8:	e12fff1e 	bx	lr

00008cec <Cpu::CLV()>:
    8cec:	e12fff1e 	bx	lr

00008cf0 <Cpu::TSX()>:
    8cf0:	e12fff1e 	bx	lr

00008cf4 <Cpu::INY()>:
    8cf4:	e12fff1e 	bx	lr

00008cf8 <Cpu::DEX()>:
    8cf8:	e12fff1e 	bx	lr

00008cfc <Cpu::BNE()>:
    8cfc:	e12fff1e 	bx	lr

00008d00 <Cpu::Cpu(Rom const*)>:
    8d00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8d04:	e1a04000 	mov	r4, r0
    8d08:	e3a00008 	mov	r0, #8
    8d0c:	e1a05001 	mov	r5, r1
    8d10:	eb000824 	bl	ada8 <operator new(unsigned int)>
    8d14:	e1a03000 	mov	r3, r0
    8d18:	e3a02020 	mov	r2, #32
    8d1c:	e5843000 	str	r3, [r4]
    8d20:	e3a00801 	mov	r0, #65536	; 0x10000
    8d24:	e5c32006 	strb	r2, [r3, #6]
    8d28:	eb00081e 	bl	ada8 <operator new(unsigned int)>
    8d2c:	e3a03a02 	mov	r3, #8192	; 0x2000
    8d30:	e3a02901 	mov	r2, #16384	; 0x4000
    8d34:	e584300c 	str	r3, [r4, #12]
    8d38:	e5843010 	str	r3, [r4, #16]
    8d3c:	e3011418 	movw	r1, #5144	; 0x1418
    8d40:	e3401005 	movt	r1, #5
    8d44:	e5840004 	str	r0, [r4, #4]
    8d48:	e2840014 	add	r0, r4, #20
    8d4c:	e5842008 	str	r2, [r4, #8]
    8d50:	e3a02c01 	mov	r2, #256	; 0x100
    8d54:	eb000b5f 	bl	bad8 <memcpy>
    8d58:	e59f1080 	ldr	r1, [pc, #128]	; 8de0 <Cpu::Cpu(Rom const*)+0xe0>
    8d5c:	e3a02b02 	mov	r2, #2048	; 0x800
    8d60:	e2840f45 	add	r0, r4, #276	; 0x114
    8d64:	eb000b5b 	bl	bad8 <memcpy>
    8d68:	e1a00005 	mov	r0, r5
    8d6c:	eb0002d8 	bl	98d4 <Rom::GetHeader() const>
    8d70:	e1d060d4 	ldrsb	r6, [r0, #4]
    8d74:	e1a00005 	mov	r0, r5
    8d78:	eb0002e5 	bl	9914 <Rom::GetTrainerOffset() const>
    8d7c:	e3560001 	cmp	r6, #1
    8d80:	e5951000 	ldr	r1, [r5]
    8d84:	e0807001 	add	r7, r0, r1
    8d88:	0a00000a 	beq	8db8 <Cpu::Cpu(Rom const*)+0xb8>
    8d8c:	e3560002 	cmp	r6, #2
    8d90:	1a000010 	bne	8dd8 <Cpu::Cpu(Rom const*)+0xd8>
    8d94:	e1a00005 	mov	r0, r5
    8d98:	e5946004 	ldr	r6, [r4, #4]
    8d9c:	eb0002d8 	bl	9904 <Rom::GetRaw() const>
    8da0:	e5942008 	ldr	r2, [r4, #8]
    8da4:	e2866903 	add	r6, r6, #49152	; 0xc000
    8da8:	e0871002 	add	r1, r7, r2
    8dac:	e0801001 	add	r1, r0, r1
    8db0:	e1a00006 	mov	r0, r6
    8db4:	eb000b47 	bl	bad8 <memcpy>
    8db8:	e5943004 	ldr	r3, [r4, #4]
    8dbc:	e1a00005 	mov	r0, r5
    8dc0:	e2835902 	add	r5, r3, #32768	; 0x8000
    8dc4:	eb0002ce 	bl	9904 <Rom::GetRaw() const>
    8dc8:	e5942008 	ldr	r2, [r4, #8]
    8dcc:	e0801007 	add	r1, r0, r7
    8dd0:	e1a00005 	mov	r0, r5
    8dd4:	eb000b3f 	bl	bad8 <memcpy>
    8dd8:	e1a00004 	mov	r0, r4
    8ddc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8de0:	00051518 	.word	0x00051518

00008de4 <Cpu::ADC(unsigned char&)>:
    8de4:	e12fff1e 	bx	lr

00008de8 <Cpu::AND(unsigned char&)>:
    8de8:	e5900000 	ldr	r0, [r0]
    8dec:	e5d1c000 	ldrb	ip, [r1]
    8df0:	e5d02003 	ldrb	r2, [r0, #3]
    8df4:	e1d030d6 	ldrsb	r3, [r0, #6]
    8df8:	e002200c 	and	r2, r2, ip
    8dfc:	e5c02003 	strb	r2, [r0, #3]
    8e00:	e5d12000 	ldrb	r2, [r1]
    8e04:	e2622000 	rsb	r2, r2, #0
    8e08:	e0222003 	eor	r2, r2, r3
    8e0c:	e2022002 	and	r2, r2, #2
    8e10:	e0233002 	eor	r3, r3, r2
    8e14:	e5c03006 	strb	r3, [r0, #6]
    8e18:	e1d120d0 	ldrsb	r2, [r1]
    8e1c:	e0222003 	eor	r2, r2, r3
    8e20:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    8e24:	e0233002 	eor	r3, r3, r2
    8e28:	e5c03006 	strb	r3, [r0, #6]
    8e2c:	e12fff1e 	bx	lr

00008e30 <Cpu::ASL(unsigned char&)>:
    8e30:	e5902000 	ldr	r2, [r0]
    8e34:	e1d230d6 	ldrsb	r3, [r2, #6]
    8e38:	e3c33001 	bic	r3, r3, #1
    8e3c:	e5c23006 	strb	r3, [r2, #6]
    8e40:	e5d13000 	ldrb	r3, [r1]
    8e44:	e1a03083 	lsl	r3, r3, #1
    8e48:	e6ef3073 	uxtb	r3, r3
    8e4c:	e5c13000 	strb	r3, [r1]
    8e50:	e2633000 	rsb	r3, r3, #0
    8e54:	e5900000 	ldr	r0, [r0]
    8e58:	e1d020d6 	ldrsb	r2, [r0, #6]
    8e5c:	e0233002 	eor	r3, r3, r2
    8e60:	e2033002 	and	r3, r3, #2
    8e64:	e0233002 	eor	r3, r3, r2
    8e68:	e5c03006 	strb	r3, [r0, #6]
    8e6c:	e1d120d0 	ldrsb	r2, [r1]
    8e70:	e0222003 	eor	r2, r2, r3
    8e74:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    8e78:	e0233002 	eor	r3, r3, r2
    8e7c:	e5c03006 	strb	r3, [r0, #6]
    8e80:	e12fff1e 	bx	lr

00008e84 <Cpu::ASL_ZP()>:
    8e84:	e5903000 	ldr	r3, [r0]
    8e88:	e92d4010 	push	{r4, lr}
    8e8c:	e1a04000 	mov	r4, r0
    8e90:	e5902004 	ldr	r2, [r0, #4]
    8e94:	e1d330b0 	ldrh	r3, [r3]
    8e98:	e2833001 	add	r3, r3, #1
    8e9c:	e6ff3073 	uxth	r3, r3
    8ea0:	e7d21003 	ldrb	r1, [r2, r3]
    8ea4:	eb000269 	bl	9850 <Cpu::ZeroPage(unsigned char) const>
    8ea8:	e5941004 	ldr	r1, [r4, #4]
    8eac:	e0811000 	add	r1, r1, r0
    8eb0:	e1a00004 	mov	r0, r4
    8eb4:	e8bd4010 	pop	{r4, lr}
    8eb8:	eaffffdc 	b	8e30 <Cpu::ASL(unsigned char&)>

00008ebc <Cpu::ASL_ACC()>:
    8ebc:	e5901000 	ldr	r1, [r0]
    8ec0:	e2811003 	add	r1, r1, #3
    8ec4:	eaffffd9 	b	8e30 <Cpu::ASL(unsigned char&)>

00008ec8 <Cpu::ASL_ABS()>:
    8ec8:	e5903000 	ldr	r3, [r0]
    8ecc:	e92d4010 	push	{r4, lr}
    8ed0:	e1a04000 	mov	r4, r0
    8ed4:	e5901004 	ldr	r1, [r0, #4]
    8ed8:	e1d330b0 	ldrh	r3, [r3]
    8edc:	e2832002 	add	r2, r3, #2
    8ee0:	e2833001 	add	r3, r3, #1
    8ee4:	e6ff2072 	uxth	r2, r2
    8ee8:	e6ff3073 	uxth	r3, r3
    8eec:	e7d12002 	ldrb	r2, [r1, r2]
    8ef0:	e7d11003 	ldrb	r1, [r1, r3]
    8ef4:	eb000257 	bl	9858 <Cpu::Absolute(unsigned char, unsigned char) const>
    8ef8:	e5941004 	ldr	r1, [r4, #4]
    8efc:	e0811000 	add	r1, r1, r0
    8f00:	e1a00004 	mov	r0, r4
    8f04:	e8bd4010 	pop	{r4, lr}
    8f08:	eaffffc8 	b	8e30 <Cpu::ASL(unsigned char&)>

00008f0c <Cpu::ASL_ZP_X()>:
    8f0c:	e5902000 	ldr	r2, [r0]
    8f10:	e92d4010 	push	{r4, lr}
    8f14:	e1a04000 	mov	r4, r0
    8f18:	e5901004 	ldr	r1, [r0, #4]
    8f1c:	e1d230b0 	ldrh	r3, [r2]
    8f20:	e5d22004 	ldrb	r2, [r2, #4]
    8f24:	e2833001 	add	r3, r3, #1
    8f28:	e6ff3073 	uxth	r3, r3
    8f2c:	e7d11003 	ldrb	r1, [r1, r3]
    8f30:	eb00024e 	bl	9870 <Cpu::ZeroPageIndexed(unsigned char, unsigned char) const>
    8f34:	e5941004 	ldr	r1, [r4, #4]
    8f38:	e0811000 	add	r1, r1, r0
    8f3c:	e1a00004 	mov	r0, r4
    8f40:	e8bd4010 	pop	{r4, lr}
    8f44:	eaffffb9 	b	8e30 <Cpu::ASL(unsigned char&)>

00008f48 <Cpu::ASL_ABS_X()>:
    8f48:	e92d4010 	push	{r4, lr}
    8f4c:	e1a04000 	mov	r4, r0
    8f50:	e8904008 	ldm	r0, {r3, lr}
    8f54:	e1d320b0 	ldrh	r2, [r3]
    8f58:	e5d33004 	ldrb	r3, [r3, #4]
    8f5c:	e282c002 	add	ip, r2, #2
    8f60:	e2822001 	add	r2, r2, #1
    8f64:	e6ffc07c 	uxth	ip, ip
    8f68:	e6ff1072 	uxth	r1, r2
    8f6c:	e7de200c 	ldrb	r2, [lr, ip]
    8f70:	e7de1001 	ldrb	r1, [lr, r1]
    8f74:	eb000239 	bl	9860 <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>
    8f78:	e5941004 	ldr	r1, [r4, #4]
    8f7c:	e0811000 	add	r1, r1, r0
    8f80:	e1a00004 	mov	r0, r4
    8f84:	e8bd4010 	pop	{r4, lr}
    8f88:	eaffffa8 	b	8e30 <Cpu::ASL(unsigned char&)>

00008f8c <Cpu::BIT(unsigned char&)>:
    8f8c:	e5900000 	ldr	r0, [r0]
    8f90:	e5d12000 	ldrb	r2, [r1]
    8f94:	e5d0c003 	ldrb	ip, [r0, #3]
    8f98:	e1d030d6 	ldrsb	r3, [r0, #6]
    8f9c:	e002200c 	and	r2, r2, ip
    8fa0:	e2622000 	rsb	r2, r2, #0
    8fa4:	e0222003 	eor	r2, r2, r3
    8fa8:	e2022002 	and	r2, r2, #2
    8fac:	e0233002 	eor	r3, r3, r2
    8fb0:	e5c03006 	strb	r3, [r0, #6]
    8fb4:	e1d120d0 	ldrsb	r2, [r1]
    8fb8:	e0222003 	eor	r2, r2, r3
    8fbc:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    8fc0:	e0233002 	eor	r3, r3, r2
    8fc4:	e5c03006 	strb	r3, [r0, #6]
    8fc8:	e5d12000 	ldrb	r2, [r1]
    8fcc:	e0222003 	eor	r2, r2, r3
    8fd0:	e2022040 	and	r2, r2, #64	; 0x40
    8fd4:	e0233002 	eor	r3, r3, r2
    8fd8:	e5c03006 	strb	r3, [r0, #6]
    8fdc:	e12fff1e 	bx	lr

00008fe0 <Cpu::BIT_ZP()>:
    8fe0:	e5903000 	ldr	r3, [r0]
    8fe4:	e92d4010 	push	{r4, lr}
    8fe8:	e1a04000 	mov	r4, r0
    8fec:	e5902004 	ldr	r2, [r0, #4]
    8ff0:	e1d330b0 	ldrh	r3, [r3]
    8ff4:	e2833001 	add	r3, r3, #1
    8ff8:	e6ff3073 	uxth	r3, r3
    8ffc:	e7d21003 	ldrb	r1, [r2, r3]
    9000:	eb000212 	bl	9850 <Cpu::ZeroPage(unsigned char) const>
    9004:	e5941004 	ldr	r1, [r4, #4]
    9008:	e0811000 	add	r1, r1, r0
    900c:	e1a00004 	mov	r0, r4
    9010:	e8bd4010 	pop	{r4, lr}
    9014:	eaffffdc 	b	8f8c <Cpu::BIT(unsigned char&)>

00009018 <Cpu::BIT_ABS()>:
    9018:	e5903000 	ldr	r3, [r0]
    901c:	e92d4010 	push	{r4, lr}
    9020:	e1a04000 	mov	r4, r0
    9024:	e5901004 	ldr	r1, [r0, #4]
    9028:	e1d330b0 	ldrh	r3, [r3]
    902c:	e2832002 	add	r2, r3, #2
    9030:	e2833001 	add	r3, r3, #1
    9034:	e6ff2072 	uxth	r2, r2
    9038:	e6ff3073 	uxth	r3, r3
    903c:	e7d12002 	ldrb	r2, [r1, r2]
    9040:	e7d11003 	ldrb	r1, [r1, r3]
    9044:	eb000203 	bl	9858 <Cpu::Absolute(unsigned char, unsigned char) const>
    9048:	e5941004 	ldr	r1, [r4, #4]
    904c:	e0811000 	add	r1, r1, r0
    9050:	e1a00004 	mov	r0, r4
    9054:	e8bd4010 	pop	{r4, lr}
    9058:	eaffffcb 	b	8f8c <Cpu::BIT(unsigned char&)>

0000905c <Cpu::CMP(unsigned char&)>:
    905c:	e590c000 	ldr	ip, [r0]
    9060:	e5d10000 	ldrb	r0, [r1]
    9064:	e5dc2003 	ldrb	r2, [ip, #3]
    9068:	e1dc30d6 	ldrsb	r3, [ip, #6]
    906c:	e1520000 	cmp	r2, r0
    9070:	b3a00000 	movlt	r0, #0
    9074:	a3e00000 	mvnge	r0, #0
    9078:	e0200003 	eor	r0, r0, r3
    907c:	e2000001 	and	r0, r0, #1
    9080:	e0233000 	eor	r3, r3, r0
    9084:	e5cc3006 	strb	r3, [ip, #6]
    9088:	e5d10000 	ldrb	r0, [r1]
    908c:	e1500002 	cmp	r0, r2
    9090:	13a00000 	movne	r0, #0
    9094:	03e00000 	mvneq	r0, #0
    9098:	e0200003 	eor	r0, r0, r3
    909c:	e2000002 	and	r0, r0, #2
    90a0:	e0233000 	eor	r3, r3, r0
    90a4:	e5cc3006 	strb	r3, [ip, #6]
    90a8:	e5d11000 	ldrb	r1, [r1]
    90ac:	e1520001 	cmp	r2, r1
    90b0:	a3a02000 	movge	r2, #0
    90b4:	b3e02000 	mvnlt	r2, #0
    90b8:	e0222003 	eor	r2, r2, r3
    90bc:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    90c0:	e0233002 	eor	r3, r3, r2
    90c4:	e5cc3006 	strb	r3, [ip, #6]
    90c8:	e12fff1e 	bx	lr

000090cc <Cpu::CMP_IND_X()>:
    90cc:	e5902000 	ldr	r2, [r0]
    90d0:	e92d4010 	push	{r4, lr}
    90d4:	e1a04000 	mov	r4, r0
    90d8:	e5901004 	ldr	r1, [r0, #4]
    90dc:	e1d230b0 	ldrh	r3, [r2]
    90e0:	e5d22004 	ldrb	r2, [r2, #4]
    90e4:	e2833001 	add	r3, r3, #1
    90e8:	e6ff3073 	uxth	r3, r3
    90ec:	e7d11003 	ldrb	r1, [r1, r3]
    90f0:	eb0001e7 	bl	9894 <Cpu::PreIndexedIndirect(unsigned char, unsigned char) const>
    90f4:	e5941004 	ldr	r1, [r4, #4]
    90f8:	e0811000 	add	r1, r1, r0
    90fc:	e1a00004 	mov	r0, r4
    9100:	e8bd4010 	pop	{r4, lr}
    9104:	eaffffd4 	b	905c <Cpu::CMP(unsigned char&)>

00009108 <Cpu::CMP_ZP()>:
    9108:	e5903000 	ldr	r3, [r0]
    910c:	e92d4010 	push	{r4, lr}
    9110:	e1a04000 	mov	r4, r0
    9114:	e5902004 	ldr	r2, [r0, #4]
    9118:	e1d330b0 	ldrh	r3, [r3]
    911c:	e2833001 	add	r3, r3, #1
    9120:	e6ff3073 	uxth	r3, r3
    9124:	e7d21003 	ldrb	r1, [r2, r3]
    9128:	eb0001c8 	bl	9850 <Cpu::ZeroPage(unsigned char) const>
    912c:	e5941004 	ldr	r1, [r4, #4]
    9130:	e0811000 	add	r1, r1, r0
    9134:	e1a00004 	mov	r0, r4
    9138:	e8bd4010 	pop	{r4, lr}
    913c:	eaffffc6 	b	905c <Cpu::CMP(unsigned char&)>

00009140 <Cpu::CMP_IMM()>:
    9140:	e5902000 	ldr	r2, [r0]
    9144:	e5901004 	ldr	r1, [r0, #4]
    9148:	e1d230b0 	ldrh	r3, [r2]
    914c:	e2833001 	add	r3, r3, #1
    9150:	e6f11073 	uxtah	r1, r1, r3
    9154:	eaffffc0 	b	905c <Cpu::CMP(unsigned char&)>

00009158 <Cpu::CMP_ABS()>:
    9158:	e5903000 	ldr	r3, [r0]
    915c:	e92d4010 	push	{r4, lr}
    9160:	e1a04000 	mov	r4, r0
    9164:	e5901004 	ldr	r1, [r0, #4]
    9168:	e1d330b0 	ldrh	r3, [r3]
    916c:	e2832002 	add	r2, r3, #2
    9170:	e2833001 	add	r3, r3, #1
    9174:	e6ff2072 	uxth	r2, r2
    9178:	e6ff3073 	uxth	r3, r3
    917c:	e7d12002 	ldrb	r2, [r1, r2]
    9180:	e7d11003 	ldrb	r1, [r1, r3]
    9184:	eb0001b3 	bl	9858 <Cpu::Absolute(unsigned char, unsigned char) const>
    9188:	e5941004 	ldr	r1, [r4, #4]
    918c:	e0811000 	add	r1, r1, r0
    9190:	e1a00004 	mov	r0, r4
    9194:	e8bd4010 	pop	{r4, lr}
    9198:	eaffffaf 	b	905c <Cpu::CMP(unsigned char&)>

0000919c <Cpu::CMP_IND_Y()>:
    919c:	e5902000 	ldr	r2, [r0]
    91a0:	e92d4010 	push	{r4, lr}
    91a4:	e1a04000 	mov	r4, r0
    91a8:	e5901004 	ldr	r1, [r0, #4]
    91ac:	e1d230b0 	ldrh	r3, [r2]
    91b0:	e5d22005 	ldrb	r2, [r2, #5]
    91b4:	e2833001 	add	r3, r3, #1
    91b8:	e6ff3073 	uxth	r3, r3
    91bc:	e7d11003 	ldrb	r1, [r1, r3]
    91c0:	eb0001bb 	bl	98b4 <Cpu::PostIndexedIndirect(unsigned char, unsigned char) const>
    91c4:	e5941004 	ldr	r1, [r4, #4]
    91c8:	e0811000 	add	r1, r1, r0
    91cc:	e1a00004 	mov	r0, r4
    91d0:	e8bd4010 	pop	{r4, lr}
    91d4:	eaffffa0 	b	905c <Cpu::CMP(unsigned char&)>

000091d8 <Cpu::CMP_ZP_X()>:
    91d8:	e5902000 	ldr	r2, [r0]
    91dc:	e92d4010 	push	{r4, lr}
    91e0:	e1a04000 	mov	r4, r0
    91e4:	e5901004 	ldr	r1, [r0, #4]
    91e8:	e1d230b0 	ldrh	r3, [r2]
    91ec:	e5d22004 	ldrb	r2, [r2, #4]
    91f0:	e2833001 	add	r3, r3, #1
    91f4:	e6ff3073 	uxth	r3, r3
    91f8:	e7d11003 	ldrb	r1, [r1, r3]
    91fc:	eb00019b 	bl	9870 <Cpu::ZeroPageIndexed(unsigned char, unsigned char) const>
    9200:	e5941004 	ldr	r1, [r4, #4]
    9204:	e0811000 	add	r1, r1, r0
    9208:	e1a00004 	mov	r0, r4
    920c:	e8bd4010 	pop	{r4, lr}
    9210:	eaffff91 	b	905c <Cpu::CMP(unsigned char&)>

00009214 <Cpu::CMP_ABS_Y()>:
    9214:	e92d4010 	push	{r4, lr}
    9218:	e1a04000 	mov	r4, r0
    921c:	e8904008 	ldm	r0, {r3, lr}
    9220:	e1d320b0 	ldrh	r2, [r3]
    9224:	e5d33005 	ldrb	r3, [r3, #5]
    9228:	e282c002 	add	ip, r2, #2
    922c:	e2822001 	add	r2, r2, #1
    9230:	e6ffc07c 	uxth	ip, ip
    9234:	e6ff1072 	uxth	r1, r2
    9238:	e7de200c 	ldrb	r2, [lr, ip]
    923c:	e7de1001 	ldrb	r1, [lr, r1]
    9240:	eb000186 	bl	9860 <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>
    9244:	e5941004 	ldr	r1, [r4, #4]
    9248:	e0811000 	add	r1, r1, r0
    924c:	e1a00004 	mov	r0, r4
    9250:	e8bd4010 	pop	{r4, lr}
    9254:	eaffff80 	b	905c <Cpu::CMP(unsigned char&)>

00009258 <Cpu::CMP_ABS_X()>:
    9258:	e92d4010 	push	{r4, lr}
    925c:	e1a04000 	mov	r4, r0
    9260:	e8904008 	ldm	r0, {r3, lr}
    9264:	e1d320b0 	ldrh	r2, [r3]
    9268:	e5d33004 	ldrb	r3, [r3, #4]
    926c:	e282c002 	add	ip, r2, #2
    9270:	e2822001 	add	r2, r2, #1
    9274:	e6ffc07c 	uxth	ip, ip
    9278:	e6ff1072 	uxth	r1, r2
    927c:	e7de200c 	ldrb	r2, [lr, ip]
    9280:	e7de1001 	ldrb	r1, [lr, r1]
    9284:	eb000175 	bl	9860 <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>
    9288:	e5941004 	ldr	r1, [r4, #4]
    928c:	e0811000 	add	r1, r1, r0
    9290:	e1a00004 	mov	r0, r4
    9294:	e8bd4010 	pop	{r4, lr}
    9298:	eaffff6f 	b	905c <Cpu::CMP(unsigned char&)>

0000929c <Cpu::CPX(unsigned char&)>:
    929c:	e590c000 	ldr	ip, [r0]
    92a0:	e5d10000 	ldrb	r0, [r1]
    92a4:	e5dc2004 	ldrb	r2, [ip, #4]
    92a8:	e1dc30d6 	ldrsb	r3, [ip, #6]
    92ac:	e1520000 	cmp	r2, r0
    92b0:	b3a00000 	movlt	r0, #0
    92b4:	a3e00000 	mvnge	r0, #0
    92b8:	e0200003 	eor	r0, r0, r3
    92bc:	e2000001 	and	r0, r0, #1
    92c0:	e0233000 	eor	r3, r3, r0
    92c4:	e5cc3006 	strb	r3, [ip, #6]
    92c8:	e5d10000 	ldrb	r0, [r1]
    92cc:	e1500002 	cmp	r0, r2
    92d0:	13a00000 	movne	r0, #0
    92d4:	03e00000 	mvneq	r0, #0
    92d8:	e0200003 	eor	r0, r0, r3
    92dc:	e2000002 	and	r0, r0, #2
    92e0:	e0233000 	eor	r3, r3, r0
    92e4:	e5cc3006 	strb	r3, [ip, #6]
    92e8:	e5d11000 	ldrb	r1, [r1]
    92ec:	e1520001 	cmp	r2, r1
    92f0:	a3a02000 	movge	r2, #0
    92f4:	b3e02000 	mvnlt	r2, #0
    92f8:	e0222003 	eor	r2, r2, r3
    92fc:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    9300:	e0233002 	eor	r3, r3, r2
    9304:	e5cc3006 	strb	r3, [ip, #6]
    9308:	e12fff1e 	bx	lr

0000930c <Cpu::CPX_IMM()>:
    930c:	e5902000 	ldr	r2, [r0]
    9310:	e5901004 	ldr	r1, [r0, #4]
    9314:	e1d230b0 	ldrh	r3, [r2]
    9318:	e2833001 	add	r3, r3, #1
    931c:	e6f11073 	uxtah	r1, r1, r3
    9320:	eaffffdd 	b	929c <Cpu::CPX(unsigned char&)>

00009324 <Cpu::CPX_ZP()>:
    9324:	e5903000 	ldr	r3, [r0]
    9328:	e92d4010 	push	{r4, lr}
    932c:	e1a04000 	mov	r4, r0
    9330:	e5902004 	ldr	r2, [r0, #4]
    9334:	e1d330b0 	ldrh	r3, [r3]
    9338:	e2833001 	add	r3, r3, #1
    933c:	e6ff3073 	uxth	r3, r3
    9340:	e7d21003 	ldrb	r1, [r2, r3]
    9344:	eb000141 	bl	9850 <Cpu::ZeroPage(unsigned char) const>
    9348:	e5941004 	ldr	r1, [r4, #4]
    934c:	e0811000 	add	r1, r1, r0
    9350:	e1a00004 	mov	r0, r4
    9354:	e8bd4010 	pop	{r4, lr}
    9358:	eaffffcf 	b	929c <Cpu::CPX(unsigned char&)>

0000935c <Cpu::CPX_ABS()>:
    935c:	e5903000 	ldr	r3, [r0]
    9360:	e92d4010 	push	{r4, lr}
    9364:	e1a04000 	mov	r4, r0
    9368:	e5901004 	ldr	r1, [r0, #4]
    936c:	e1d330b0 	ldrh	r3, [r3]
    9370:	e2832002 	add	r2, r3, #2
    9374:	e2833001 	add	r3, r3, #1
    9378:	e6ff2072 	uxth	r2, r2
    937c:	e6ff3073 	uxth	r3, r3
    9380:	e7d12002 	ldrb	r2, [r1, r2]
    9384:	e7d11003 	ldrb	r1, [r1, r3]
    9388:	eb000132 	bl	9858 <Cpu::Absolute(unsigned char, unsigned char) const>
    938c:	e5941004 	ldr	r1, [r4, #4]
    9390:	e0811000 	add	r1, r1, r0
    9394:	e1a00004 	mov	r0, r4
    9398:	e8bd4010 	pop	{r4, lr}
    939c:	eaffffbe 	b	929c <Cpu::CPX(unsigned char&)>

000093a0 <Cpu::CPY(unsigned char&)>:
    93a0:	e590c000 	ldr	ip, [r0]
    93a4:	e5d10000 	ldrb	r0, [r1]
    93a8:	e5dc2005 	ldrb	r2, [ip, #5]
    93ac:	e1dc30d6 	ldrsb	r3, [ip, #6]
    93b0:	e1520000 	cmp	r2, r0
    93b4:	b3a00000 	movlt	r0, #0
    93b8:	a3e00000 	mvnge	r0, #0
    93bc:	e0200003 	eor	r0, r0, r3
    93c0:	e2000001 	and	r0, r0, #1
    93c4:	e0233000 	eor	r3, r3, r0
    93c8:	e5cc3006 	strb	r3, [ip, #6]
    93cc:	e5d10000 	ldrb	r0, [r1]
    93d0:	e1500002 	cmp	r0, r2
    93d4:	13a00000 	movne	r0, #0
    93d8:	03e00000 	mvneq	r0, #0
    93dc:	e0200003 	eor	r0, r0, r3
    93e0:	e2000002 	and	r0, r0, #2
    93e4:	e0233000 	eor	r3, r3, r0
    93e8:	e5cc3006 	strb	r3, [ip, #6]
    93ec:	e5d11000 	ldrb	r1, [r1]
    93f0:	e1520001 	cmp	r2, r1
    93f4:	a3a02000 	movge	r2, #0
    93f8:	b3e02000 	mvnlt	r2, #0
    93fc:	e0222003 	eor	r2, r2, r3
    9400:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    9404:	e0233002 	eor	r3, r3, r2
    9408:	e5cc3006 	strb	r3, [ip, #6]
    940c:	e12fff1e 	bx	lr

00009410 <Cpu::CPY_IMM()>:
    9410:	e5902000 	ldr	r2, [r0]
    9414:	e5901004 	ldr	r1, [r0, #4]
    9418:	e1d230b0 	ldrh	r3, [r2]
    941c:	e2833001 	add	r3, r3, #1
    9420:	e6f11073 	uxtah	r1, r1, r3
    9424:	eaffffdd 	b	93a0 <Cpu::CPY(unsigned char&)>

00009428 <Cpu::CPY_ZP()>:
    9428:	e5903000 	ldr	r3, [r0]
    942c:	e92d4010 	push	{r4, lr}
    9430:	e1a04000 	mov	r4, r0
    9434:	e5902004 	ldr	r2, [r0, #4]
    9438:	e1d330b0 	ldrh	r3, [r3]
    943c:	e2833001 	add	r3, r3, #1
    9440:	e6ff3073 	uxth	r3, r3
    9444:	e7d21003 	ldrb	r1, [r2, r3]
    9448:	eb000100 	bl	9850 <Cpu::ZeroPage(unsigned char) const>
    944c:	e5941004 	ldr	r1, [r4, #4]
    9450:	e0811000 	add	r1, r1, r0
    9454:	e1a00004 	mov	r0, r4
    9458:	e8bd4010 	pop	{r4, lr}
    945c:	eaffffcf 	b	93a0 <Cpu::CPY(unsigned char&)>

00009460 <Cpu::CPY_ABS()>:
    9460:	e5903000 	ldr	r3, [r0]
    9464:	e92d4010 	push	{r4, lr}
    9468:	e1a04000 	mov	r4, r0
    946c:	e5901004 	ldr	r1, [r0, #4]
    9470:	e1d330b0 	ldrh	r3, [r3]
    9474:	e2832002 	add	r2, r3, #2
    9478:	e2833001 	add	r3, r3, #1
    947c:	e6ff2072 	uxth	r2, r2
    9480:	e6ff3073 	uxth	r3, r3
    9484:	e7d12002 	ldrb	r2, [r1, r2]
    9488:	e7d11003 	ldrb	r1, [r1, r3]
    948c:	eb0000f1 	bl	9858 <Cpu::Absolute(unsigned char, unsigned char) const>
    9490:	e5941004 	ldr	r1, [r4, #4]
    9494:	e0811000 	add	r1, r1, r0
    9498:	e1a00004 	mov	r0, r4
    949c:	e8bd4010 	pop	{r4, lr}
    94a0:	eaffffbe 	b	93a0 <Cpu::CPY(unsigned char&)>

000094a4 <Cpu::DEC(unsigned char&)>:
    94a4:	e12fff1e 	bx	lr

000094a8 <Cpu::EOR(unsigned char&)>:
    94a8:	e12fff1e 	bx	lr

000094ac <Cpu::INC(unsigned char&)>:
    94ac:	e12fff1e 	bx	lr

000094b0 <Cpu::JMP(unsigned char&)>:
    94b0:	e12fff1e 	bx	lr

000094b4 <Cpu::LDA(unsigned char&)>:
    94b4:	e12fff1e 	bx	lr

000094b8 <Cpu::LDX(unsigned char&)>:
    94b8:	e12fff1e 	bx	lr

000094bc <Cpu::LDY(unsigned char&)>:
    94bc:	e12fff1e 	bx	lr

000094c0 <Cpu::LSR(unsigned char&)>:
    94c0:	e12fff1e 	bx	lr

000094c4 <Cpu::ORA(unsigned char&)>:
    94c4:	e590c000 	ldr	ip, [r0]
    94c8:	e5d12000 	ldrb	r2, [r1]
    94cc:	e5dc0003 	ldrb	r0, [ip, #3]
    94d0:	e1dc30d6 	ldrsb	r3, [ip, #6]
    94d4:	e1800002 	orr	r0, r0, r2
    94d8:	e2601000 	rsb	r1, r0, #0
    94dc:	e3c0207f 	bic	r2, r0, #127	; 0x7f
    94e0:	e0211003 	eor	r1, r1, r3
    94e4:	e2622000 	rsb	r2, r2, #0
    94e8:	e2011002 	and	r1, r1, #2
    94ec:	e5cc0003 	strb	r0, [ip, #3]
    94f0:	e0233001 	eor	r3, r3, r1
    94f4:	e0222003 	eor	r2, r2, r3
    94f8:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    94fc:	e0233002 	eor	r3, r3, r2
    9500:	e5cc3006 	strb	r3, [ip, #6]
    9504:	e12fff1e 	bx	lr

00009508 <Cpu::ROL(unsigned char&)>:
    9508:	e5902000 	ldr	r2, [r0]
    950c:	e1d230d6 	ldrsb	r3, [r2, #6]
    9510:	e3c3c001 	bic	ip, r3, #1
    9514:	e2033001 	and	r3, r3, #1
    9518:	e5c2c006 	strb	ip, [r2, #6]
    951c:	e5d12000 	ldrb	r2, [r1]
    9520:	e7a62052 	sbfx	r2, r2, #0, #7
    9524:	e1833082 	orr	r3, r3, r2, lsl #1
    9528:	e6ef3073 	uxtb	r3, r3
    952c:	e5c13000 	strb	r3, [r1]
    9530:	e2633000 	rsb	r3, r3, #0
    9534:	e5900000 	ldr	r0, [r0]
    9538:	e1d020d6 	ldrsb	r2, [r0, #6]
    953c:	e0233002 	eor	r3, r3, r2
    9540:	e2033002 	and	r3, r3, #2
    9544:	e0233002 	eor	r3, r3, r2
    9548:	e5c03006 	strb	r3, [r0, #6]
    954c:	e1d120d0 	ldrsb	r2, [r1]
    9550:	e0222003 	eor	r2, r2, r3
    9554:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    9558:	e0233002 	eor	r3, r3, r2
    955c:	e5c03006 	strb	r3, [r0, #6]
    9560:	e12fff1e 	bx	lr

00009564 <Cpu::ROL_ZP()>:
    9564:	e5903000 	ldr	r3, [r0]
    9568:	e92d4010 	push	{r4, lr}
    956c:	e1a04000 	mov	r4, r0
    9570:	e5902004 	ldr	r2, [r0, #4]
    9574:	e1d330b0 	ldrh	r3, [r3]
    9578:	e2833001 	add	r3, r3, #1
    957c:	e6ff3073 	uxth	r3, r3
    9580:	e7d21003 	ldrb	r1, [r2, r3]
    9584:	eb0000b1 	bl	9850 <Cpu::ZeroPage(unsigned char) const>
    9588:	e5941004 	ldr	r1, [r4, #4]
    958c:	e0811000 	add	r1, r1, r0
    9590:	e1a00004 	mov	r0, r4
    9594:	e8bd4010 	pop	{r4, lr}
    9598:	eaffffda 	b	9508 <Cpu::ROL(unsigned char&)>

0000959c <Cpu::ROL_ACC()>:
    959c:	e5901000 	ldr	r1, [r0]
    95a0:	e2811003 	add	r1, r1, #3
    95a4:	eaffffd7 	b	9508 <Cpu::ROL(unsigned char&)>

000095a8 <Cpu::ROL_ABS()>:
    95a8:	e5903000 	ldr	r3, [r0]
    95ac:	e92d4010 	push	{r4, lr}
    95b0:	e1a04000 	mov	r4, r0
    95b4:	e5901004 	ldr	r1, [r0, #4]
    95b8:	e1d330b0 	ldrh	r3, [r3]
    95bc:	e2832002 	add	r2, r3, #2
    95c0:	e2833001 	add	r3, r3, #1
    95c4:	e6ff2072 	uxth	r2, r2
    95c8:	e6ff3073 	uxth	r3, r3
    95cc:	e7d12002 	ldrb	r2, [r1, r2]
    95d0:	e7d11003 	ldrb	r1, [r1, r3]
    95d4:	eb00009f 	bl	9858 <Cpu::Absolute(unsigned char, unsigned char) const>
    95d8:	e5941004 	ldr	r1, [r4, #4]
    95dc:	e0811000 	add	r1, r1, r0
    95e0:	e1a00004 	mov	r0, r4
    95e4:	e8bd4010 	pop	{r4, lr}
    95e8:	eaffffc6 	b	9508 <Cpu::ROL(unsigned char&)>

000095ec <Cpu::ROL_ZP_X()>:
    95ec:	e5902000 	ldr	r2, [r0]
    95f0:	e92d4010 	push	{r4, lr}
    95f4:	e1a04000 	mov	r4, r0
    95f8:	e5901004 	ldr	r1, [r0, #4]
    95fc:	e1d230b0 	ldrh	r3, [r2]
    9600:	e5d22004 	ldrb	r2, [r2, #4]
    9604:	e2833001 	add	r3, r3, #1
    9608:	e6ff3073 	uxth	r3, r3
    960c:	e7d11003 	ldrb	r1, [r1, r3]
    9610:	eb000096 	bl	9870 <Cpu::ZeroPageIndexed(unsigned char, unsigned char) const>
    9614:	e5941004 	ldr	r1, [r4, #4]
    9618:	e0811000 	add	r1, r1, r0
    961c:	e1a00004 	mov	r0, r4
    9620:	e8bd4010 	pop	{r4, lr}
    9624:	eaffffb7 	b	9508 <Cpu::ROL(unsigned char&)>

00009628 <Cpu::ROL_ABS_X()>:
    9628:	e92d4010 	push	{r4, lr}
    962c:	e1a04000 	mov	r4, r0
    9630:	e8904008 	ldm	r0, {r3, lr}
    9634:	e1d320b0 	ldrh	r2, [r3]
    9638:	e5d33004 	ldrb	r3, [r3, #4]
    963c:	e282c002 	add	ip, r2, #2
    9640:	e2822001 	add	r2, r2, #1
    9644:	e6ffc07c 	uxth	ip, ip
    9648:	e6ff1072 	uxth	r1, r2
    964c:	e7de200c 	ldrb	r2, [lr, ip]
    9650:	e7de1001 	ldrb	r1, [lr, r1]
    9654:	eb000081 	bl	9860 <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>
    9658:	e5941004 	ldr	r1, [r4, #4]
    965c:	e0811000 	add	r1, r1, r0
    9660:	e1a00004 	mov	r0, r4
    9664:	e8bd4010 	pop	{r4, lr}
    9668:	eaffffa6 	b	9508 <Cpu::ROL(unsigned char&)>

0000966c <Cpu::ROR(unsigned char&)>:
    966c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9670:	e590e000 	ldr	lr, [r0]
    9674:	e5d1c000 	ldrb	ip, [r1]
    9678:	e1de20d6 	ldrsb	r2, [lr, #6]
    967c:	e02cc002 	eor	ip, ip, r2
    9680:	e7a03052 	sbfx	r3, r2, #0, #1
    9684:	e20cc001 	and	ip, ip, #1
    9688:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    968c:	e022200c 	eor	r2, r2, ip
    9690:	e5ce2006 	strb	r2, [lr, #6]
    9694:	e5d12000 	ldrb	r2, [r1]
    9698:	e18330a2 	orr	r3, r3, r2, lsr #1
    969c:	e6ef3073 	uxtb	r3, r3
    96a0:	e5c13000 	strb	r3, [r1]
    96a4:	e2633000 	rsb	r3, r3, #0
    96a8:	e5900000 	ldr	r0, [r0]
    96ac:	e1d020d6 	ldrsb	r2, [r0, #6]
    96b0:	e0233002 	eor	r3, r3, r2
    96b4:	e2033002 	and	r3, r3, #2
    96b8:	e0233002 	eor	r3, r3, r2
    96bc:	e5c03006 	strb	r3, [r0, #6]
    96c0:	e1d120d0 	ldrsb	r2, [r1]
    96c4:	e0222003 	eor	r2, r2, r3
    96c8:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    96cc:	e0233002 	eor	r3, r3, r2
    96d0:	e5c03006 	strb	r3, [r0, #6]
    96d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000096d8 <Cpu::ROR_ZP()>:
    96d8:	e5903000 	ldr	r3, [r0]
    96dc:	e92d4010 	push	{r4, lr}
    96e0:	e1a04000 	mov	r4, r0
    96e4:	e5902004 	ldr	r2, [r0, #4]
    96e8:	e1d330b0 	ldrh	r3, [r3]
    96ec:	e2833001 	add	r3, r3, #1
    96f0:	e6ff3073 	uxth	r3, r3
    96f4:	e7d21003 	ldrb	r1, [r2, r3]
    96f8:	eb000054 	bl	9850 <Cpu::ZeroPage(unsigned char) const>
    96fc:	e5941004 	ldr	r1, [r4, #4]
    9700:	e0811000 	add	r1, r1, r0
    9704:	e1a00004 	mov	r0, r4
    9708:	e8bd4010 	pop	{r4, lr}
    970c:	eaffffd6 	b	966c <Cpu::ROR(unsigned char&)>

00009710 <Cpu::ROR_ACC()>:
    9710:	e5901000 	ldr	r1, [r0]
    9714:	e2811003 	add	r1, r1, #3
    9718:	eaffffd3 	b	966c <Cpu::ROR(unsigned char&)>

0000971c <Cpu::ROR_ABS()>:
    971c:	e5903000 	ldr	r3, [r0]
    9720:	e92d4010 	push	{r4, lr}
    9724:	e1a04000 	mov	r4, r0
    9728:	e5901004 	ldr	r1, [r0, #4]
    972c:	e1d330b0 	ldrh	r3, [r3]
    9730:	e2832002 	add	r2, r3, #2
    9734:	e2833001 	add	r3, r3, #1
    9738:	e6ff2072 	uxth	r2, r2
    973c:	e6ff3073 	uxth	r3, r3
    9740:	e7d12002 	ldrb	r2, [r1, r2]
    9744:	e7d11003 	ldrb	r1, [r1, r3]
    9748:	eb000042 	bl	9858 <Cpu::Absolute(unsigned char, unsigned char) const>
    974c:	e5941004 	ldr	r1, [r4, #4]
    9750:	e0811000 	add	r1, r1, r0
    9754:	e1a00004 	mov	r0, r4
    9758:	e8bd4010 	pop	{r4, lr}
    975c:	eaffffc2 	b	966c <Cpu::ROR(unsigned char&)>

00009760 <Cpu::ROR_ZP_X()>:
    9760:	e5902000 	ldr	r2, [r0]
    9764:	e92d4010 	push	{r4, lr}
    9768:	e1a04000 	mov	r4, r0
    976c:	e5901004 	ldr	r1, [r0, #4]
    9770:	e1d230b0 	ldrh	r3, [r2]
    9774:	e5d22004 	ldrb	r2, [r2, #4]
    9778:	e2833001 	add	r3, r3, #1
    977c:	e6ff3073 	uxth	r3, r3
    9780:	e7d11003 	ldrb	r1, [r1, r3]
    9784:	eb000039 	bl	9870 <Cpu::ZeroPageIndexed(unsigned char, unsigned char) const>
    9788:	e5941004 	ldr	r1, [r4, #4]
    978c:	e0811000 	add	r1, r1, r0
    9790:	e1a00004 	mov	r0, r4
    9794:	e8bd4010 	pop	{r4, lr}
    9798:	eaffffb3 	b	966c <Cpu::ROR(unsigned char&)>

0000979c <Cpu::ROR_ABS_X()>:
    979c:	e92d4010 	push	{r4, lr}
    97a0:	e1a04000 	mov	r4, r0
    97a4:	e8904008 	ldm	r0, {r3, lr}
    97a8:	e1d320b0 	ldrh	r2, [r3]
    97ac:	e5d33004 	ldrb	r3, [r3, #4]
    97b0:	e282c002 	add	ip, r2, #2
    97b4:	e2822001 	add	r2, r2, #1
    97b8:	e6ffc07c 	uxth	ip, ip
    97bc:	e6ff1072 	uxth	r1, r2
    97c0:	e7de200c 	ldrb	r2, [lr, ip]
    97c4:	e7de1001 	ldrb	r1, [lr, r1]
    97c8:	eb000024 	bl	9860 <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>
    97cc:	e5941004 	ldr	r1, [r4, #4]
    97d0:	e0811000 	add	r1, r1, r0
    97d4:	e1a00004 	mov	r0, r4
    97d8:	e8bd4010 	pop	{r4, lr}
    97dc:	eaffffa2 	b	966c <Cpu::ROR(unsigned char&)>

000097e0 <Cpu::SBC(unsigned char&)>:
    97e0:	e12fff1e 	bx	lr

000097e4 <Cpu::STA(unsigned char&)>:
    97e4:	e12fff1e 	bx	lr

000097e8 <Cpu::STX(unsigned char&)>:
    97e8:	e12fff1e 	bx	lr

000097ec <Cpu::STY(unsigned char&)>:
    97ec:	e12fff1e 	bx	lr

000097f0 <Cpu::SetFlag(unsigned char, unsigned char)>:
    97f0:	e5900000 	ldr	r0, [r0]
    97f4:	e2622000 	rsb	r2, r2, #0
    97f8:	e3a0c001 	mov	ip, #1
    97fc:	e1d030d6 	ldrsb	r3, [r0, #6]
    9800:	e0222003 	eor	r2, r2, r3
    9804:	e002111c 	and	r1, r2, ip, lsl r1
    9808:	e0211003 	eor	r1, r1, r3
    980c:	e5c01006 	strb	r1, [r0, #6]
    9810:	e12fff1e 	bx	lr

00009814 <Cpu::GetFlag(unsigned char)>:
    9814:	e5903000 	ldr	r3, [r0]
    9818:	e3a00001 	mov	r0, #1
    981c:	e5d33006 	ldrb	r3, [r3, #6]
    9820:	e0030110 	and	r0, r3, r0, lsl r1
    9824:	e12fff1e 	bx	lr

00009828 <Ppu::Ppu(Rom const*)>:
    9828:	e92d4010 	push	{r4, lr}
    982c:	e3011d18 	movw	r1, #7448	; 0x1d18
    9830:	e3401005 	movt	r1, #5
    9834:	e3a020c0 	mov	r2, #192	; 0xc0
    9838:	eb0008a6 	bl	bad8 <memcpy>
    983c:	e8bd8010 	pop	{r4, pc}

00009840 <Cpu::FromValues(unsigned char) const>:
    9840:	e1a00001 	mov	r0, r1
    9844:	e12fff1e 	bx	lr

00009848 <Cpu::FromValues(unsigned char, unsigned char) const>:
    9848:	e1810402 	orr	r0, r1, r2, lsl #8
    984c:	e12fff1e 	bx	lr

00009850 <Cpu::ZeroPage(unsigned char) const>:
    9850:	e1a00001 	mov	r0, r1
    9854:	e12fff1e 	bx	lr

00009858 <Cpu::Absolute(unsigned char, unsigned char) const>:
    9858:	e1810402 	orr	r0, r1, r2, lsl #8
    985c:	e12fff1e 	bx	lr

00009860 <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>:
    9860:	e1812402 	orr	r2, r1, r2, lsl #8
    9864:	e0823003 	add	r3, r2, r3
    9868:	e6ff0073 	uxth	r0, r3
    986c:	e12fff1e 	bx	lr

00009870 <Cpu::ZeroPageIndexed(unsigned char, unsigned char) const>:
    9870:	e0810002 	add	r0, r1, r2
    9874:	e12fff1e 	bx	lr

00009878 <Cpu::Indirect(unsigned char, unsigned char) const>:
    9878:	e5903008 	ldr	r3, [r0, #8]
    987c:	e1812402 	orr	r2, r1, r2, lsl #8
    9880:	e0831002 	add	r1, r3, r2
    9884:	e7d33002 	ldrb	r3, [r3, r2]
    9888:	e5d10001 	ldrb	r0, [r1, #1]
    988c:	e1830400 	orr	r0, r3, r0, lsl #8
    9890:	e12fff1e 	bx	lr

00009894 <Cpu::PreIndexedIndirect(unsigned char, unsigned char) const>:
    9894:	e0812002 	add	r2, r1, r2
    9898:	e5903008 	ldr	r3, [r0, #8]
    989c:	e6ef2072 	uxtb	r2, r2
    98a0:	e0831002 	add	r1, r3, r2
    98a4:	e7d33002 	ldrb	r3, [r3, r2]
    98a8:	e5d10001 	ldrb	r0, [r1, #1]
    98ac:	e1830400 	orr	r0, r3, r0, lsl #8
    98b0:	e12fff1e 	bx	lr

000098b4 <Cpu::PostIndexedIndirect(unsigned char, unsigned char) const>:
    98b4:	e5903008 	ldr	r3, [r0, #8]
    98b8:	e083c001 	add	ip, r3, r1
    98bc:	e7d30001 	ldrb	r0, [r3, r1]
    98c0:	e5dc3001 	ldrb	r3, [ip, #1]
    98c4:	e1800403 	orr	r0, r0, r3, lsl #8
    98c8:	e0800002 	add	r0, r0, r2
    98cc:	e6ff0070 	uxth	r0, r0
    98d0:	e12fff1e 	bx	lr

000098d4 <Rom::GetHeader() const>:
    98d4:	e92d4010 	push	{r4, lr}
    98d8:	e1a04000 	mov	r4, r0
    98dc:	e3a00010 	mov	r0, #16
    98e0:	eb000530 	bl	ada8 <operator new(unsigned int)>
    98e4:	e284300b 	add	r3, r4, #11
    98e8:	e284c01b 	add	ip, r4, #27
    98ec:	e2402001 	sub	r2, r0, #1
    98f0:	e5f31001 	ldrb	r1, [r3, #1]!
    98f4:	e153000c 	cmp	r3, ip
    98f8:	e5e21001 	strb	r1, [r2, #1]!
    98fc:	1afffffb 	bne	98f0 <Rom::GetHeader() const+0x1c>
    9900:	e8bd8010 	pop	{r4, pc}

00009904 <Rom::GetRaw() const>:
    9904:	e280000c 	add	r0, r0, #12
    9908:	e12fff1e 	bx	lr

0000990c <Rom::GetLength() const>:
    990c:	e5900008 	ldr	r0, [r0, #8]
    9910:	e12fff1e 	bx	lr

00009914 <Rom::GetTrainerOffset() const>:
    9914:	e92d4010 	push	{r4, lr}
    9918:	e1a04000 	mov	r4, r0
    991c:	e3a00010 	mov	r0, #16
    9920:	eb000520 	bl	ada8 <operator new(unsigned int)>
    9924:	e284300b 	add	r3, r4, #11
    9928:	e2402001 	sub	r2, r0, #1
    992c:	e284c01b 	add	ip, r4, #27
    9930:	e5f31001 	ldrb	r1, [r3, #1]!
    9934:	e153000c 	cmp	r3, ip
    9938:	e5e21001 	strb	r1, [r2, #1]!
    993c:	1afffffb 	bne	9930 <Rom::GetTrainerOffset() const+0x1c>
    9940:	e5d03006 	ldrb	r3, [r0, #6]
    9944:	e5940004 	ldr	r0, [r4, #4]
    9948:	e2033004 	and	r3, r3, #4
    994c:	e0000390 	mul	r0, r0, r3
    9950:	e8bd8010 	pop	{r4, pc}

00009954 <CActLED::~CActLED()>:
    9954:	e3033c44 	movw	r3, #15428	; 0x3c44
    9958:	e3403005 	movt	r3, #5
    995c:	e3a02000 	mov	r2, #0
    9960:	e5832000 	str	r2, [r3]
    9964:	e12fff1e 	bx	lr

00009968 <CActLED::On()>:
    9968:	e5903000 	ldr	r3, [r0]
    996c:	e3530000 	cmp	r3, #0
    9970:	0a000004 	beq	9988 <CActLED::On()+0x20>
    9974:	e5901008 	ldr	r1, [r0, #8]
    9978:	e1a00003 	mov	r0, r3
    997c:	e2911000 	adds	r1, r1, #0
    9980:	13a01001 	movne	r1, #1
    9984:	ea0000ee 	b	9d44 <CGPIOPin::Write(unsigned int)>
    9988:	e5903004 	ldr	r3, [r0, #4]
    998c:	e3530000 	cmp	r3, #0
    9990:	012fff1e 	bxeq	lr
    9994:	e5901008 	ldr	r1, [r0, #8]
    9998:	e1a00003 	mov	r0, r3
    999c:	e2911000 	adds	r1, r1, #0
    99a0:	13a01001 	movne	r1, #1
    99a4:	ea001842 	b	fab4 <CVirtualGPIOPin::Write(unsigned int)>

000099a8 <CActLED::Off()>:
    99a8:	e5903000 	ldr	r3, [r0]
    99ac:	e3530000 	cmp	r3, #0
    99b0:	0a000004 	beq	99c8 <CActLED::Off()+0x20>
    99b4:	e5901008 	ldr	r1, [r0, #8]
    99b8:	e1a00003 	mov	r0, r3
    99bc:	e16f1f11 	clz	r1, r1
    99c0:	e1a012a1 	lsr	r1, r1, #5
    99c4:	ea0000de 	b	9d44 <CGPIOPin::Write(unsigned int)>
    99c8:	e5903004 	ldr	r3, [r0, #4]
    99cc:	e3530000 	cmp	r3, #0
    99d0:	012fff1e 	bxeq	lr
    99d4:	e5901008 	ldr	r1, [r0, #8]
    99d8:	e1a00003 	mov	r0, r3
    99dc:	e16f1f11 	clz	r1, r1
    99e0:	e1a012a1 	lsr	r1, r1, #5
    99e4:	ea001832 	b	fab4 <CVirtualGPIOPin::Write(unsigned int)>

000099e8 <CActLED::CActLED()>:
    99e8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    99ec:	e1a04000 	mov	r4, r0
    99f0:	e3033c44 	movw	r3, #15428	; 0x3c44
    99f4:	e3403005 	movt	r3, #5
    99f8:	e24dd024 	sub	sp, sp, #36	; 0x24
    99fc:	e3a05000 	mov	r5, #0
    9a00:	e5805000 	str	r5, [r0]
    9a04:	e28d0008 	add	r0, sp, #8
    9a08:	e5845004 	str	r5, [r4, #4]
    9a0c:	e5834000 	str	r4, [r3]
    9a10:	eb000051 	bl	9b5c <CBcmPropertyTags::CBcmPropertyTags()>
    9a14:	e3a03010 	mov	r3, #16
    9a18:	e58d5000 	str	r5, [sp]
    9a1c:	e28d0008 	add	r0, sp, #8
    9a20:	e3a01002 	mov	r1, #2
    9a24:	e3401001 	movt	r1, #1
    9a28:	e08d2003 	add	r2, sp, r3
    9a2c:	eb000092 	bl	9c7c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9a30:	e1500005 	cmp	r0, r5
    9a34:	0a000011 	beq	9a80 <CActLED::CActLED()+0x98>
    9a38:	e59d301c 	ldr	r3, [sp, #28]
    9a3c:	e3130502 	tst	r3, #8388608	; 0x800000
    9a40:	1a000013 	bne	9a94 <CActLED::CActLED()+0xac>
    9a44:	e6ff3073 	uxth	r3, r3
    9a48:	e353000f 	cmp	r3, #15
    9a4c:	83a06001 	movhi	r6, #1
    9a50:	9a00001c 	bls	9ac8 <CActLED::CActLED()+0xe0>
    9a54:	e3a00020 	mov	r0, #32
    9a58:	eb0004d2 	bl	ada8 <operator new(unsigned int)>
    9a5c:	e3a03000 	mov	r3, #0
    9a60:	e1a05000 	mov	r5, r0
    9a64:	e3a02001 	mov	r2, #1
    9a68:	e3a0102f 	mov	r1, #47	; 0x2f
    9a6c:	eb0003ad 	bl	a928 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    9a70:	e5845000 	str	r5, [r4]
    9a74:	e5846008 	str	r6, [r4, #8]
    9a78:	e1a00004 	mov	r0, r4
    9a7c:	ebffffc9 	bl	99a8 <CActLED::Off()>
    9a80:	e28d0008 	add	r0, sp, #8
    9a84:	eb00003a 	bl	9b74 <CBcmPropertyTags::~CBcmPropertyTags()>
    9a88:	e1a00004 	mov	r0, r4
    9a8c:	e28dd024 	add	sp, sp, #36	; 0x24
    9a90:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9a94:	e7e73253 	ubfx	r3, r3, #4, #8
    9a98:	e3530001 	cmp	r3, #1
    9a9c:	9a000009 	bls	9ac8 <CActLED::CActLED()+0xe0>
    9aa0:	e3530008 	cmp	r3, #8
    9aa4:	1a000012 	bne	9af4 <CActLED::CActLED()+0x10c>
    9aa8:	e3a00010 	mov	r0, #16
    9aac:	e3a06001 	mov	r6, #1
    9ab0:	eb0004bc 	bl	ada8 <operator new(unsigned int)>
    9ab4:	e1a01005 	mov	r1, r5
    9ab8:	e1a07000 	mov	r7, r0
    9abc:	eb0017c0 	bl	f9c4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    9ac0:	e5847004 	str	r7, [r4, #4]
    9ac4:	eaffffea 	b	9a74 <CActLED::CActLED()+0x8c>
    9ac8:	e3a00020 	mov	r0, #32
    9acc:	eb0004b5 	bl	ada8 <operator new(unsigned int)>
    9ad0:	e3a03000 	mov	r3, #0
    9ad4:	e3a02001 	mov	r2, #1
    9ad8:	e3a01010 	mov	r1, #16
    9adc:	e1a05000 	mov	r5, r0
    9ae0:	eb000390 	bl	a928 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    9ae4:	e3a03000 	mov	r3, #0
    9ae8:	e5845000 	str	r5, [r4]
    9aec:	e5843008 	str	r3, [r4, #8]
    9af0:	eaffffe0 	b	9a78 <CActLED::CActLED()+0x90>
    9af4:	e2536009 	subs	r6, r3, #9
    9af8:	13a06001 	movne	r6, #1
    9afc:	eaffffd4 	b	9a54 <CActLED::CActLED()+0x6c>

00009b00 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    9b00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9b04:	e2516000 	subs	r6, r1, #0
    9b08:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9b0c:	e1a08003 	mov	r8, r3
    9b10:	e1a07002 	mov	r7, r2
    9b14:	e1a05000 	mov	r5, r0
    9b18:	e3a04001 	mov	r4, #1
    9b1c:	e1a00005 	mov	r0, r5
    9b20:	e2844001 	add	r4, r4, #1
    9b24:	ebffff8f 	bl	9968 <CActLED::On()>
    9b28:	e1a00007 	mov	r0, r7
    9b2c:	eb00078e 	bl	b96c <CTimer::SimpleMsDelay(unsigned int)>
    9b30:	e1a00005 	mov	r0, r5
    9b34:	ebffff9b 	bl	99a8 <CActLED::Off()>
    9b38:	e1a00008 	mov	r0, r8
    9b3c:	eb00078a 	bl	b96c <CTimer::SimpleMsDelay(unsigned int)>
    9b40:	e1560004 	cmp	r6, r4
    9b44:	2afffff4 	bcs	9b1c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    9b48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009b4c <CActLED::Get()>:
    9b4c:	e3033c44 	movw	r3, #15428	; 0x3c44
    9b50:	e3403005 	movt	r3, #5
    9b54:	e5930000 	ldr	r0, [r3]
    9b58:	e12fff1e 	bx	lr

00009b5c <CBcmPropertyTags::CBcmPropertyTags()>:
    9b5c:	e92d4010 	push	{r4, lr}
    9b60:	e3a01008 	mov	r1, #8
    9b64:	e1a04000 	mov	r4, r0
    9b68:	eb001bab 	bl	10a1c <CBcmMailBox::CBcmMailBox(unsigned int)>
    9b6c:	e1a00004 	mov	r0, r4
    9b70:	e8bd8010 	pop	{r4, pc}

00009b74 <CBcmPropertyTags::~CBcmPropertyTags()>:
    9b74:	e92d4010 	push	{r4, lr}
    9b78:	e1a04000 	mov	r4, r0
    9b7c:	eb001ba9 	bl	10a28 <CBcmMailBox::~CBcmMailBox()>
    9b80:	e1a00004 	mov	r0, r4
    9b84:	e8bd8010 	pop	{r4, pc}

00009b88 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    9b88:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9b8c:	e2519000 	subs	r9, r1, #0
    9b90:	e1a0a000 	mov	sl, r0
    9b94:	e1a04002 	mov	r4, r2
    9b98:	0a000030 	beq	9c60 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd8>
    9b9c:	e354000f 	cmp	r4, #15
    9ba0:	9a000027 	bls	9c44 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xbc>
    9ba4:	e284800c 	add	r8, r4, #12
    9ba8:	e3180003 	tst	r8, #3
    9bac:	1a00001d 	bne	9c28 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
    9bb0:	e3a06501 	mov	r6, #4194304	; 0x400000
    9bb4:	e3a05008 	mov	r5, #8
    9bb8:	e3405040 	movt	r5, #64	; 0x40
    9bbc:	e3a07000 	mov	r7, #0
    9bc0:	e1a00005 	mov	r0, r5
    9bc4:	e5868000 	str	r8, [r6]
    9bc8:	e1a02004 	mov	r2, r4
    9bcc:	e5867004 	str	r7, [r6, #4]
    9bd0:	e1a01009 	mov	r1, r9
    9bd4:	eb0007bf 	bl	bad8 <memcpy>
    9bd8:	e7857004 	str	r7, [r5, r4]
    9bdc:	f57ff04f 	dsb	sy
    9be0:	e1a01007 	mov	r1, r7
    9be4:	e1a0000a 	mov	r0, sl
    9be8:	e34c1040 	movt	r1, #49216	; 0xc040
    9bec:	eb001bbd 	bl	10ae8 <CBcmMailBox::WriteRead(unsigned int)>
    9bf0:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
    9bf4:	0a000001 	beq	9c00 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x78>
    9bf8:	e3a00000 	mov	r0, #0
    9bfc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9c00:	f57ff05f 	dmb	sy
    9c04:	e5963004 	ldr	r3, [r6, #4]
    9c08:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    9c0c:	1afffff9 	bne	9bf8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x70>
    9c10:	e1a02004 	mov	r2, r4
    9c14:	e1a01005 	mov	r1, r5
    9c18:	e1a00009 	mov	r0, r9
    9c1c:	eb0007ad 	bl	bad8 <memcpy>
    9c20:	e3a00001 	mov	r0, #1
    9c24:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9c28:	e3011dd8 	movw	r1, #7640	; 0x1dd8
    9c2c:	e3401005 	movt	r1, #5
    9c30:	e3010e24 	movw	r0, #7716	; 0x1e24
    9c34:	e3400005 	movt	r0, #5
    9c38:	e3a02051 	mov	r2, #81	; 0x51
    9c3c:	eb000e06 	bl	d45c <assertion_failed>
    9c40:	eaffffda 	b	9bb0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    9c44:	e3011dd8 	movw	r1, #7640	; 0x1dd8
    9c48:	e3401005 	movt	r1, #5
    9c4c:	e3010df8 	movw	r0, #7672	; 0x1df8
    9c50:	e3400005 	movt	r0, #5
    9c54:	e3a0204f 	mov	r2, #79	; 0x4f
    9c58:	eb000dff 	bl	d45c <assertion_failed>
    9c5c:	eaffffd0 	b	9ba4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    9c60:	e3011dd8 	movw	r1, #7640	; 0x1dd8
    9c64:	e3401005 	movt	r1, #5
    9c68:	e3010dec 	movw	r0, #7660	; 0x1dec
    9c6c:	e3400005 	movt	r0, #5
    9c70:	e3a0204e 	mov	r2, #78	; 0x4e
    9c74:	eb000df8 	bl	d45c <assertion_failed>
    9c78:	eaffffc7 	b	9b9c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>

00009c7c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    9c7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9c80:	e2524000 	subs	r4, r2, #0
    9c84:	e1a08000 	mov	r8, r0
    9c88:	e1a07001 	mov	r7, r1
    9c8c:	e1a05003 	mov	r5, r3
    9c90:	e59d6018 	ldr	r6, [sp, #24]
    9c94:	0a00001d 	beq	9d10 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x94>
    9c98:	e355000f 	cmp	r5, #15
    9c9c:	9a000014 	bls	9cf4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
    9ca0:	e245300c 	sub	r3, r5, #12
    9ca4:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
    9ca8:	e5846008 	str	r6, [r4, #8]
    9cac:	e1a00008 	mov	r0, r8
    9cb0:	e5847000 	str	r7, [r4]
    9cb4:	e1a02005 	mov	r2, r5
    9cb8:	e5843004 	str	r3, [r4, #4]
    9cbc:	e1a01004 	mov	r1, r4
    9cc0:	ebffffb0 	bl	9b88 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    9cc4:	e3500000 	cmp	r0, #0
    9cc8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9ccc:	e5940008 	ldr	r0, [r4, #8]
    9cd0:	e3500000 	cmp	r0, #0
    9cd4:	ba000001 	blt	9ce0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
    9cd8:	e3a00000 	mov	r0, #0
    9cdc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9ce0:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    9ce4:	e5840008 	str	r0, [r4, #8]
    9ce8:	e2900000 	adds	r0, r0, #0
    9cec:	13a00001 	movne	r0, #1
    9cf0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9cf4:	e3011dd8 	movw	r1, #7640	; 0x1dd8
    9cf8:	e3401005 	movt	r1, #5
    9cfc:	e3010e48 	movw	r0, #7752	; 0x1e48
    9d00:	e3400005 	movt	r0, #5
    9d04:	e3a02032 	mov	r2, #50	; 0x32
    9d08:	eb000dd3 	bl	d45c <assertion_failed>
    9d0c:	eaffffe3 	b	9ca0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    9d10:	e3011dd8 	movw	r1, #7640	; 0x1dd8
    9d14:	e3401005 	movt	r1, #5
    9d18:	e3010e3c 	movw	r0, #7740	; 0x1e3c
    9d1c:	e3400005 	movt	r0, #5
    9d20:	e3a02031 	mov	r2, #49	; 0x31
    9d24:	eb000dcc 	bl	d45c <assertion_failed>
    9d28:	eaffffda 	b	9c98 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>

00009d2c <CGPIOPin::~CGPIOPin()>:
    9d2c:	e12fff1e 	bx	lr

00009d30 <CGPIOPin::~CGPIOPin()>:
    9d30:	e92d4010 	push	{r4, lr}
    9d34:	e1a04000 	mov	r4, r0
    9d38:	eb00041c 	bl	adb0 <operator delete(void*)>
    9d3c:	e1a00004 	mov	r0, r4
    9d40:	e8bd8010 	pop	{r4, pc}

00009d44 <CGPIOPin::Write(unsigned int)>:
    9d44:	e5d03008 	ldrb	r3, [r0, #8]
    9d48:	e92d4070 	push	{r4, r5, r6, lr}
    9d4c:	e1a04000 	mov	r4, r0
    9d50:	e3530003 	cmp	r3, #3
    9d54:	e1a05001 	mov	r5, r1
    9d58:	ca000017 	bgt	9dbc <CGPIOPin::Write(unsigned int)+0x78>
    9d5c:	e3550001 	cmp	r5, #1
    9d60:	9a000005 	bls	9d7c <CGPIOPin::Write(unsigned int)+0x38>
    9d64:	e3011e98 	movw	r1, #7832	; 0x1e98
    9d68:	e3401005 	movt	r1, #5
    9d6c:	e3010ec8 	movw	r0, #7880	; 0x1ec8
    9d70:	e3400005 	movt	r0, #5
    9d74:	e3a02081 	mov	r2, #129	; 0x81
    9d78:	eb000db7 	bl	d45c <assertion_failed>
    9d7c:	e5943004 	ldr	r3, [r4, #4]
    9d80:	e584500c 	str	r5, [r4, #12]
    9d84:	e3530035 	cmp	r3, #53	; 0x35
    9d88:	8a000012 	bhi	9dd8 <CGPIOPin::Write(unsigned int)+0x94>
    9d8c:	e203c01f 	and	ip, r3, #31
    9d90:	e3a0001c 	mov	r0, #28
    9d94:	e3430f20 	movt	r0, #16160	; 0x3f20
    9d98:	e3a01001 	mov	r1, #1
    9d9c:	e3550000 	cmp	r5, #0
    9da0:	e3a02028 	mov	r2, #40	; 0x28
    9da4:	e3432f20 	movt	r2, #16160	; 0x3f20
    9da8:	e1a032a3 	lsr	r3, r3, #5
    9dac:	11a02000 	movne	r2, r0
    9db0:	e1a01c11 	lsl	r1, r1, ip
    9db4:	e7821103 	str	r1, [r2, r3, lsl #2]
    9db8:	e8bd8070 	pop	{r4, r5, r6, pc}
    9dbc:	e3011e98 	movw	r1, #7832	; 0x1e98
    9dc0:	e3401005 	movt	r1, #5
    9dc4:	e3010ea4 	movw	r0, #7844	; 0x1ea4
    9dc8:	e3400005 	movt	r0, #5
    9dcc:	e3a0207d 	mov	r2, #125	; 0x7d
    9dd0:	eb000da1 	bl	d45c <assertion_failed>
    9dd4:	eaffffe0 	b	9d5c <CGPIOPin::Write(unsigned int)+0x18>
    9dd8:	e3011e98 	movw	r1, #7832	; 0x1e98
    9ddc:	e3401005 	movt	r1, #5
    9de0:	e3010ee8 	movw	r0, #7912	; 0x1ee8
    9de4:	e3400005 	movt	r0, #5
    9de8:	e3a02084 	mov	r2, #132	; 0x84
    9dec:	eb000d9a 	bl	d45c <assertion_failed>
    9df0:	e594500c 	ldr	r5, [r4, #12]
    9df4:	e5943004 	ldr	r3, [r4, #4]
    9df8:	eaffffe3 	b	9d8c <CGPIOPin::Write(unsigned int)+0x48>

00009dfc <CGPIOPin::Read() const>:
    9dfc:	e5d03008 	ldrb	r3, [r0, #8]
    9e00:	e92d4010 	push	{r4, lr}
    9e04:	e1a04000 	mov	r4, r0
    9e08:	e2432002 	sub	r2, r3, #2
    9e0c:	e3530000 	cmp	r3, #0
    9e10:	13520001 	cmpne	r2, #1
    9e14:	9a000005 	bls	9e30 <CGPIOPin::Read() const+0x34>
    9e18:	e3011e98 	movw	r1, #7832	; 0x1e98
    9e1c:	e3401005 	movt	r1, #5
    9e20:	e3010efc 	movw	r0, #7932	; 0x1efc
    9e24:	e3400005 	movt	r0, #5
    9e28:	e3a02091 	mov	r2, #145	; 0x91
    9e2c:	eb000d8a 	bl	d45c <assertion_failed>
    9e30:	e5942004 	ldr	r2, [r4, #4]
    9e34:	e3520035 	cmp	r2, #53	; 0x35
    9e38:	8a000009 	bhi	9e64 <CGPIOPin::Read() const+0x68>
    9e3c:	e3a0300d 	mov	r3, #13
    9e40:	e3403fc8 	movt	r3, #4040	; 0xfc8
    9e44:	e3a00001 	mov	r0, #1
    9e48:	e202101f 	and	r1, r2, #31
    9e4c:	e08332a2 	add	r3, r3, r2, lsr #5
    9e50:	e1a03103 	lsl	r3, r3, #2
    9e54:	e5933000 	ldr	r3, [r3]
    9e58:	e0133110 	ands	r3, r3, r0, lsl r1
    9e5c:	03a00000 	moveq	r0, #0
    9e60:	e8bd8010 	pop	{r4, pc}
    9e64:	e3a02095 	mov	r2, #149	; 0x95
    9e68:	e3011e98 	movw	r1, #7832	; 0x1e98
    9e6c:	e3401005 	movt	r1, #5
    9e70:	e3010ee8 	movw	r0, #7912	; 0x1ee8
    9e74:	e3400005 	movt	r0, #5
    9e78:	eb000d77 	bl	d45c <assertion_failed>
    9e7c:	e5942004 	ldr	r2, [r4, #4]
    9e80:	eaffffed 	b	9e3c <CGPIOPin::Read() const+0x40>

00009e84 <CGPIOPin::Invert()>:
    9e84:	e5d03008 	ldrb	r3, [r0, #8]
    9e88:	e92d4010 	push	{r4, lr}
    9e8c:	e1a04000 	mov	r4, r0
    9e90:	e3530001 	cmp	r3, #1
    9e94:	0a000005 	beq	9eb0 <CGPIOPin::Invert()+0x2c>
    9e98:	e3011e98 	movw	r1, #7832	; 0x1e98
    9e9c:	e3401005 	movt	r1, #5
    9ea0:	e3010f58 	movw	r0, #8024	; 0x1f58
    9ea4:	e3400005 	movt	r0, #5
    9ea8:	e3a020a2 	mov	r2, #162	; 0xa2
    9eac:	eb000d6a 	bl	d45c <assertion_failed>
    9eb0:	e594100c 	ldr	r1, [r4, #12]
    9eb4:	e1a00004 	mov	r0, r4
    9eb8:	e8bd4010 	pop	{r4, lr}
    9ebc:	e2211001 	eor	r1, r1, #1
    9ec0:	eaffff9f 	b	9d44 <CGPIOPin::Write(unsigned int)>

00009ec4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    9ec4:	e5d03008 	ldrb	r3, [r0, #8]
    9ec8:	e92d4070 	push	{r4, r5, r6, lr}
    9ecc:	e1a06002 	mov	r6, r2
    9ed0:	e2432002 	sub	r2, r3, #2
    9ed4:	e3530000 	cmp	r3, #0
    9ed8:	13520001 	cmpne	r2, #1
    9edc:	e1a04000 	mov	r4, r0
    9ee0:	e1a05001 	mov	r5, r1
    9ee4:	9a000005 	bls	9f00 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x3c>
    9ee8:	e3011e98 	movw	r1, #7832	; 0x1e98
    9eec:	e3401005 	movt	r1, #5
    9ef0:	e3010efc 	movw	r0, #7932	; 0x1efc
    9ef4:	e3400005 	movt	r0, #5
    9ef8:	e3a020ab 	mov	r2, #171	; 0xab
    9efc:	eb000d56 	bl	d45c <assertion_failed>
    9f00:	e5d4301c 	ldrb	r3, [r4, #28]
    9f04:	e3530006 	cmp	r3, #6
    9f08:	0a000005 	beq	9f24 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x60>
    9f0c:	e3011e98 	movw	r1, #7832	; 0x1e98
    9f10:	e3401005 	movt	r1, #5
    9f14:	e3010f74 	movw	r0, #8052	; 0x1f74
    9f18:	e3400005 	movt	r0, #5
    9f1c:	e3a020ad 	mov	r2, #173	; 0xad
    9f20:	eb000d4d 	bl	d45c <assertion_failed>
    9f24:	e5d4301d 	ldrb	r3, [r4, #29]
    9f28:	e3530006 	cmp	r3, #6
    9f2c:	0a000005 	beq	9f48 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x84>
    9f30:	e3011e98 	movw	r1, #7832	; 0x1e98
    9f34:	e3401005 	movt	r1, #5
    9f38:	e3010f98 	movw	r0, #8088	; 0x1f98
    9f3c:	e3400005 	movt	r0, #5
    9f40:	e3a020ae 	mov	r2, #174	; 0xae
    9f44:	eb000d44 	bl	d45c <assertion_failed>
    9f48:	e3550000 	cmp	r5, #0
    9f4c:	0a00001a 	beq	9fbc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    9f50:	e5943014 	ldr	r3, [r4, #20]
    9f54:	e3530000 	cmp	r3, #0
    9f58:	0a000005 	beq	9f74 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    9f5c:	e3011e98 	movw	r1, #7832	; 0x1e98
    9f60:	e3401005 	movt	r1, #5
    9f64:	e3010fd0 	movw	r0, #8144	; 0x1fd0
    9f68:	e3400005 	movt	r0, #5
    9f6c:	e3a020b1 	mov	r2, #177	; 0xb1
    9f70:	eb000d39 	bl	d45c <assertion_failed>
    9f74:	e5940010 	ldr	r0, [r4, #16]
    9f78:	e5845014 	str	r5, [r4, #20]
    9f7c:	e3500000 	cmp	r0, #0
    9f80:	e5846018 	str	r6, [r4, #24]
    9f84:	0a000002 	beq	9f94 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    9f88:	e1a01004 	mov	r1, r4
    9f8c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9f90:	ea0015c5 	b	f6ac <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    9f94:	e3011e98 	movw	r1, #7832	; 0x1e98
    9f98:	e3401005 	movt	r1, #5
    9f9c:	e3010fe0 	movw	r0, #8160	; 0x1fe0
    9fa0:	e3400005 	movt	r0, #5
    9fa4:	e3a020b6 	mov	r2, #182	; 0xb6
    9fa8:	eb000d2b 	bl	d45c <assertion_failed>
    9fac:	e5940010 	ldr	r0, [r4, #16]
    9fb0:	e1a01004 	mov	r1, r4
    9fb4:	e8bd4070 	pop	{r4, r5, r6, lr}
    9fb8:	ea0015bb 	b	f6ac <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    9fbc:	e3011e98 	movw	r1, #7832	; 0x1e98
    9fc0:	e3401005 	movt	r1, #5
    9fc4:	e3010fc0 	movw	r0, #8128	; 0x1fc0
    9fc8:	e3400005 	movt	r0, #5
    9fcc:	e3a020b0 	mov	r2, #176	; 0xb0
    9fd0:	eb000d21 	bl	d45c <assertion_failed>
    9fd4:	eaffffdd 	b	9f50 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x8c>

00009fd8 <CGPIOPin::DisconnectInterrupt()>:
    9fd8:	e5d03008 	ldrb	r3, [r0, #8]
    9fdc:	e92d4010 	push	{r4, lr}
    9fe0:	e1a04000 	mov	r4, r0
    9fe4:	e2432002 	sub	r2, r3, #2
    9fe8:	e3530000 	cmp	r3, #0
    9fec:	13520001 	cmpne	r2, #1
    9ff0:	9a000005 	bls	a00c <CGPIOPin::DisconnectInterrupt()+0x34>
    9ff4:	e3011e98 	movw	r1, #7832	; 0x1e98
    9ff8:	e3401005 	movt	r1, #5
    9ffc:	e3010efc 	movw	r0, #7932	; 0x1efc
    a000:	e3400005 	movt	r0, #5
    a004:	e3a020be 	mov	r2, #190	; 0xbe
    a008:	eb000d13 	bl	d45c <assertion_failed>
    a00c:	e5d4301c 	ldrb	r3, [r4, #28]
    a010:	e3530006 	cmp	r3, #6
    a014:	0a000005 	beq	a030 <CGPIOPin::DisconnectInterrupt()+0x58>
    a018:	e3011e98 	movw	r1, #7832	; 0x1e98
    a01c:	e3401005 	movt	r1, #5
    a020:	e3010f74 	movw	r0, #8052	; 0x1f74
    a024:	e3400005 	movt	r0, #5
    a028:	e3a020c0 	mov	r2, #192	; 0xc0
    a02c:	eb000d0a 	bl	d45c <assertion_failed>
    a030:	e5d4301d 	ldrb	r3, [r4, #29]
    a034:	e3530006 	cmp	r3, #6
    a038:	0a000005 	beq	a054 <CGPIOPin::DisconnectInterrupt()+0x7c>
    a03c:	e3011e98 	movw	r1, #7832	; 0x1e98
    a040:	e3401005 	movt	r1, #5
    a044:	e3010f98 	movw	r0, #8088	; 0x1f98
    a048:	e3400005 	movt	r0, #5
    a04c:	e3a020c1 	mov	r2, #193	; 0xc1
    a050:	eb000d01 	bl	d45c <assertion_failed>
    a054:	e5943014 	ldr	r3, [r4, #20]
    a058:	e3530000 	cmp	r3, #0
    a05c:	0a000011 	beq	a0a8 <CGPIOPin::DisconnectInterrupt()+0xd0>
    a060:	e5940010 	ldr	r0, [r4, #16]
    a064:	e3a03000 	mov	r3, #0
    a068:	e5843014 	str	r3, [r4, #20]
    a06c:	e1500003 	cmp	r0, r3
    a070:	0a000002 	beq	a080 <CGPIOPin::DisconnectInterrupt()+0xa8>
    a074:	e1a01004 	mov	r1, r4
    a078:	e8bd4010 	pop	{r4, lr}
    a07c:	ea0015b6 	b	f75c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    a080:	e3011e98 	movw	r1, #7832	; 0x1e98
    a084:	e3401005 	movt	r1, #5
    a088:	e3010fe0 	movw	r0, #8160	; 0x1fe0
    a08c:	e3400005 	movt	r0, #5
    a090:	e3a020c6 	mov	r2, #198	; 0xc6
    a094:	eb000cf0 	bl	d45c <assertion_failed>
    a098:	e5940010 	ldr	r0, [r4, #16]
    a09c:	e1a01004 	mov	r1, r4
    a0a0:	e8bd4010 	pop	{r4, lr}
    a0a4:	ea0015ac 	b	f75c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    a0a8:	e3011e98 	movw	r1, #7832	; 0x1e98
    a0ac:	e3401005 	movt	r1, #5
    a0b0:	e3010ff0 	movw	r0, #8176	; 0x1ff0
    a0b4:	e3400005 	movt	r0, #5
    a0b8:	e3a020c3 	mov	r2, #195	; 0xc3
    a0bc:	eb000ce6 	bl	d45c <assertion_failed>
    a0c0:	eaffffe6 	b	a060 <CGPIOPin::DisconnectInterrupt()+0x88>

0000a0c4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    a0c4:	e5d03008 	ldrb	r3, [r0, #8]
    a0c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a0cc:	e1a04000 	mov	r4, r0
    a0d0:	e2432002 	sub	r2, r3, #2
    a0d4:	e3530000 	cmp	r3, #0
    a0d8:	13520001 	cmpne	r2, #1
    a0dc:	e1a08001 	mov	r8, r1
    a0e0:	9a000005 	bls	a0fc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x38>
    a0e4:	e3011e98 	movw	r1, #7832	; 0x1e98
    a0e8:	e3401005 	movt	r1, #5
    a0ec:	e3010efc 	movw	r0, #7932	; 0x1efc
    a0f0:	e3400005 	movt	r0, #5
    a0f4:	e3a020ce 	mov	r2, #206	; 0xce
    a0f8:	eb000cd7 	bl	d45c <assertion_failed>
    a0fc:	e5943010 	ldr	r3, [r4, #16]
    a100:	e3530000 	cmp	r3, #0
    a104:	0a000043 	beq	a218 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    a108:	e5943014 	ldr	r3, [r4, #20]
    a10c:	e3530000 	cmp	r3, #0
    a110:	0a000047 	beq	a234 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x170>
    a114:	e5d4301c 	ldrb	r3, [r4, #28]
    a118:	e3530006 	cmp	r3, #6
    a11c:	0a000005 	beq	a138 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x74>
    a120:	e3011e98 	movw	r1, #7832	; 0x1e98
    a124:	e3401005 	movt	r1, #5
    a128:	e3010f74 	movw	r0, #8052	; 0x1f74
    a12c:	e3400005 	movt	r0, #5
    a130:	e3a020d2 	mov	r2, #210	; 0xd2
    a134:	eb000cc8 	bl	d45c <assertion_failed>
    a138:	e3580005 	cmp	r8, #5
    a13c:	ca000025 	bgt	a1d8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
    a140:	e5d4301d 	ldrb	r3, [r4, #29]
    a144:	e1530008 	cmp	r3, r8
    a148:	0a00002b 	beq	a1fc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x138>
    a14c:	e5943004 	ldr	r3, [r4, #4]
    a150:	e5c4801c 	strb	r8, [r4, #28]
    a154:	e3530035 	cmp	r3, #53	; 0x35
    a158:	8a000016 	bhi	a1b8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    a15c:	e3036c48 	movw	r6, #15432	; 0x3c48
    a160:	e3406005 	movt	r6, #5
    a164:	e203101f 	and	r1, r3, #31
    a168:	e3a05001 	mov	r5, #1
    a16c:	e3a0700c 	mov	r7, #12
    a170:	e3a04013 	mov	r4, #19
    a174:	e3404fc8 	movt	r4, #4040	; 0xfc8
    a178:	e5962000 	ldr	r2, [r6]
    a17c:	e1a05115 	lsl	r5, r5, r1
    a180:	e08442a3 	add	r4, r4, r3, lsr #5
    a184:	e0070897 	mul	r7, r7, r8
    a188:	e3520000 	cmp	r2, #0
    a18c:	1a000007 	bne	a1b0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xec>
    a190:	e7973104 	ldr	r3, [r7, r4, lsl #2]
    a194:	e1855003 	orr	r5, r5, r3
    a198:	e7875104 	str	r5, [r7, r4, lsl #2]
    a19c:	e5963000 	ldr	r3, [r6]
    a1a0:	e3530000 	cmp	r3, #0
    a1a4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a1a8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a1ac:	ea00030e 	b	adec <LeaveCritical>
    a1b0:	eb000300 	bl	adb8 <EnterCritical>
    a1b4:	eafffff5 	b	a190 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
    a1b8:	e3011e98 	movw	r1, #7832	; 0x1e98
    a1bc:	e3401005 	movt	r1, #5
    a1c0:	e3010ee8 	movw	r0, #7912	; 0x1ee8
    a1c4:	e3400005 	movt	r0, #5
    a1c8:	e3a020d7 	mov	r2, #215	; 0xd7
    a1cc:	eb000ca2 	bl	d45c <assertion_failed>
    a1d0:	e5943004 	ldr	r3, [r4, #4]
    a1d4:	eaffffe0 	b	a15c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x98>
    a1d8:	e3011e98 	movw	r1, #7832	; 0x1e98
    a1dc:	e3401005 	movt	r1, #5
    a1e0:	e3020000 	movw	r0, #8192	; 0x2000
    a1e4:	e3400005 	movt	r0, #5
    a1e8:	e3a020d3 	mov	r2, #211	; 0xd3
    a1ec:	eb000c9a 	bl	d45c <assertion_failed>
    a1f0:	e5d4301d 	ldrb	r3, [r4, #29]
    a1f4:	e1530008 	cmp	r3, r8
    a1f8:	1affffd3 	bne	a14c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x88>
    a1fc:	e3011e98 	movw	r1, #7832	; 0x1e98
    a200:	e3401005 	movt	r1, #5
    a204:	e3020024 	movw	r0, #8228	; 0x2024
    a208:	e3400005 	movt	r0, #5
    a20c:	e3a020d4 	mov	r2, #212	; 0xd4
    a210:	eb000c91 	bl	d45c <assertion_failed>
    a214:	eaffffcc 	b	a14c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x88>
    a218:	e3011e98 	movw	r1, #7832	; 0x1e98
    a21c:	e3401005 	movt	r1, #5
    a220:	e3010fe0 	movw	r0, #8160	; 0x1fe0
    a224:	e3400005 	movt	r0, #5
    a228:	e3a020cf 	mov	r2, #207	; 0xcf
    a22c:	eb000c8a 	bl	d45c <assertion_failed>
    a230:	eaffffb4 	b	a108 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x44>
    a234:	e3011e98 	movw	r1, #7832	; 0x1e98
    a238:	e3401005 	movt	r1, #5
    a23c:	e3010ff0 	movw	r0, #8176	; 0x1ff0
    a240:	e3400005 	movt	r0, #5
    a244:	e3a020d0 	mov	r2, #208	; 0xd0
    a248:	eb000c83 	bl	d45c <assertion_failed>
    a24c:	eaffffb0 	b	a114 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x50>

0000a250 <CGPIOPin::DisableInterrupt()>:
    a250:	e5d03008 	ldrb	r3, [r0, #8]
    a254:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a258:	e1a04000 	mov	r4, r0
    a25c:	e2432002 	sub	r2, r3, #2
    a260:	e3530000 	cmp	r3, #0
    a264:	13520001 	cmpne	r2, #1
    a268:	9a000005 	bls	a284 <CGPIOPin::DisableInterrupt()+0x34>
    a26c:	e3011e98 	movw	r1, #7832	; 0x1e98
    a270:	e3401005 	movt	r1, #5
    a274:	e3010efc 	movw	r0, #7932	; 0x1efc
    a278:	e3400005 	movt	r0, #5
    a27c:	e3a020e8 	mov	r2, #232	; 0xe8
    a280:	eb000c75 	bl	d45c <assertion_failed>
    a284:	e5d4301c 	ldrb	r3, [r4, #28]
    a288:	e3530005 	cmp	r3, #5
    a28c:	ca000024 	bgt	a324 <CGPIOPin::DisableInterrupt()+0xd4>
    a290:	e5943004 	ldr	r3, [r4, #4]
    a294:	e3530035 	cmp	r3, #53	; 0x35
    a298:	8a000019 	bhi	a304 <CGPIOPin::DisableInterrupt()+0xb4>
    a29c:	e3036c48 	movw	r6, #15432	; 0x3c48
    a2a0:	e3406005 	movt	r6, #5
    a2a4:	e5d4201c 	ldrb	r2, [r4, #28]
    a2a8:	e203101f 	and	r1, r3, #31
    a2ac:	e3a08001 	mov	r8, #1
    a2b0:	e3a0700c 	mov	r7, #12
    a2b4:	e5960000 	ldr	r0, [r6]
    a2b8:	e3a05013 	mov	r5, #19
    a2bc:	e3405fc8 	movt	r5, #4040	; 0xfc8
    a2c0:	e3500000 	cmp	r0, #0
    a2c4:	e1a08118 	lsl	r8, r8, r1
    a2c8:	e08552a3 	add	r5, r5, r3, lsr #5
    a2cc:	e0070297 	mul	r7, r7, r2
    a2d0:	1a000009 	bne	a2fc <CGPIOPin::DisableInterrupt()+0xac>
    a2d4:	e7973105 	ldr	r3, [r7, r5, lsl #2]
    a2d8:	e1c33008 	bic	r3, r3, r8
    a2dc:	e7873105 	str	r3, [r7, r5, lsl #2]
    a2e0:	e5963000 	ldr	r3, [r6]
    a2e4:	e3530000 	cmp	r3, #0
    a2e8:	0a000000 	beq	a2f0 <CGPIOPin::DisableInterrupt()+0xa0>
    a2ec:	eb0002be 	bl	adec <LeaveCritical>
    a2f0:	e3a03006 	mov	r3, #6
    a2f4:	e5c4301c 	strb	r3, [r4, #28]
    a2f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a2fc:	eb0002ad 	bl	adb8 <EnterCritical>
    a300:	eafffff3 	b	a2d4 <CGPIOPin::DisableInterrupt()+0x84>
    a304:	e3011e98 	movw	r1, #7832	; 0x1e98
    a308:	e3401005 	movt	r1, #5
    a30c:	e3010ee8 	movw	r0, #7912	; 0x1ee8
    a310:	e3400005 	movt	r0, #5
    a314:	e3a020ec 	mov	r2, #236	; 0xec
    a318:	eb000c4f 	bl	d45c <assertion_failed>
    a31c:	e5943004 	ldr	r3, [r4, #4]
    a320:	eaffffdd 	b	a29c <CGPIOPin::DisableInterrupt()+0x4c>
    a324:	e3011e98 	movw	r1, #7832	; 0x1e98
    a328:	e3401005 	movt	r1, #5
    a32c:	e3020040 	movw	r0, #8256	; 0x2040
    a330:	e3400005 	movt	r0, #5
    a334:	e3a020ea 	mov	r2, #234	; 0xea
    a338:	eb000c47 	bl	d45c <assertion_failed>
    a33c:	eaffffd3 	b	a290 <CGPIOPin::DisableInterrupt()+0x40>

0000a340 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    a340:	e5d03008 	ldrb	r3, [r0, #8]
    a344:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a348:	e1a04000 	mov	r4, r0
    a34c:	e2432002 	sub	r2, r3, #2
    a350:	e3530000 	cmp	r3, #0
    a354:	13520001 	cmpne	r2, #1
    a358:	e1a08001 	mov	r8, r1
    a35c:	9a000005 	bls	a378 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x38>
    a360:	e3011e98 	movw	r1, #7832	; 0x1e98
    a364:	e3401005 	movt	r1, #5
    a368:	e3010efc 	movw	r0, #7932	; 0x1efc
    a36c:	e3400005 	movt	r0, #5
    a370:	e3a020fe 	mov	r2, #254	; 0xfe
    a374:	eb000c38 	bl	d45c <assertion_failed>
    a378:	e5943010 	ldr	r3, [r4, #16]
    a37c:	e3530000 	cmp	r3, #0
    a380:	0a000043 	beq	a494 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    a384:	e5943014 	ldr	r3, [r4, #20]
    a388:	e3530000 	cmp	r3, #0
    a38c:	0a000047 	beq	a4b0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x170>
    a390:	e5d4301d 	ldrb	r3, [r4, #29]
    a394:	e3530006 	cmp	r3, #6
    a398:	0a000005 	beq	a3b4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x74>
    a39c:	e3011e98 	movw	r1, #7832	; 0x1e98
    a3a0:	e3401005 	movt	r1, #5
    a3a4:	e3010f98 	movw	r0, #8088	; 0x1f98
    a3a8:	e3400005 	movt	r0, #5
    a3ac:	e3002102 	movw	r2, #258	; 0x102
    a3b0:	eb000c29 	bl	d45c <assertion_failed>
    a3b4:	e3580005 	cmp	r8, #5
    a3b8:	ca000025 	bgt	a454 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
    a3bc:	e5d4301c 	ldrb	r3, [r4, #28]
    a3c0:	e1530008 	cmp	r3, r8
    a3c4:	0a00002b 	beq	a478 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x138>
    a3c8:	e5943004 	ldr	r3, [r4, #4]
    a3cc:	e5c4801d 	strb	r8, [r4, #29]
    a3d0:	e3530035 	cmp	r3, #53	; 0x35
    a3d4:	8a000016 	bhi	a434 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    a3d8:	e3036c48 	movw	r6, #15432	; 0x3c48
    a3dc:	e3406005 	movt	r6, #5
    a3e0:	e203101f 	and	r1, r3, #31
    a3e4:	e3a05001 	mov	r5, #1
    a3e8:	e3a0700c 	mov	r7, #12
    a3ec:	e3a04013 	mov	r4, #19
    a3f0:	e3404fc8 	movt	r4, #4040	; 0xfc8
    a3f4:	e5962000 	ldr	r2, [r6]
    a3f8:	e1a05115 	lsl	r5, r5, r1
    a3fc:	e08442a3 	add	r4, r4, r3, lsr #5
    a400:	e0070897 	mul	r7, r7, r8
    a404:	e3520000 	cmp	r2, #0
    a408:	1a000007 	bne	a42c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xec>
    a40c:	e7973104 	ldr	r3, [r7, r4, lsl #2]
    a410:	e1855003 	orr	r5, r5, r3
    a414:	e7875104 	str	r5, [r7, r4, lsl #2]
    a418:	e5963000 	ldr	r3, [r6]
    a41c:	e3530000 	cmp	r3, #0
    a420:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a424:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a428:	ea00026f 	b	adec <LeaveCritical>
    a42c:	eb000261 	bl	adb8 <EnterCritical>
    a430:	eafffff5 	b	a40c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
    a434:	e3011e98 	movw	r1, #7832	; 0x1e98
    a438:	e3401005 	movt	r1, #5
    a43c:	e3010ee8 	movw	r0, #7912	; 0x1ee8
    a440:	e3400005 	movt	r0, #5
    a444:	e3002107 	movw	r2, #263	; 0x107
    a448:	eb000c03 	bl	d45c <assertion_failed>
    a44c:	e5943004 	ldr	r3, [r4, #4]
    a450:	eaffffe0 	b	a3d8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x98>
    a454:	e3011e98 	movw	r1, #7832	; 0x1e98
    a458:	e3401005 	movt	r1, #5
    a45c:	e3020000 	movw	r0, #8192	; 0x2000
    a460:	e3400005 	movt	r0, #5
    a464:	e3002103 	movw	r2, #259	; 0x103
    a468:	eb000bfb 	bl	d45c <assertion_failed>
    a46c:	e5d4301c 	ldrb	r3, [r4, #28]
    a470:	e1530008 	cmp	r3, r8
    a474:	1affffd3 	bne	a3c8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x88>
    a478:	e3011e98 	movw	r1, #7832	; 0x1e98
    a47c:	e3401005 	movt	r1, #5
    a480:	e3020064 	movw	r0, #8292	; 0x2064
    a484:	e3400005 	movt	r0, #5
    a488:	e3a02f41 	mov	r2, #260	; 0x104
    a48c:	eb000bf2 	bl	d45c <assertion_failed>
    a490:	eaffffcc 	b	a3c8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x88>
    a494:	e3011e98 	movw	r1, #7832	; 0x1e98
    a498:	e3401005 	movt	r1, #5
    a49c:	e3010fe0 	movw	r0, #8160	; 0x1fe0
    a4a0:	e3400005 	movt	r0, #5
    a4a4:	e3a020ff 	mov	r2, #255	; 0xff
    a4a8:	eb000beb 	bl	d45c <assertion_failed>
    a4ac:	eaffffb4 	b	a384 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x44>
    a4b0:	e3011e98 	movw	r1, #7832	; 0x1e98
    a4b4:	e3401005 	movt	r1, #5
    a4b8:	e3010ff0 	movw	r0, #8176	; 0x1ff0
    a4bc:	e3400005 	movt	r0, #5
    a4c0:	e3a02c01 	mov	r2, #256	; 0x100
    a4c4:	eb000be4 	bl	d45c <assertion_failed>
    a4c8:	eaffffb0 	b	a390 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x50>

0000a4cc <CGPIOPin::DisableInterrupt2()>:
    a4cc:	e5d03008 	ldrb	r3, [r0, #8]
    a4d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a4d4:	e1a04000 	mov	r4, r0
    a4d8:	e2432002 	sub	r2, r3, #2
    a4dc:	e3530000 	cmp	r3, #0
    a4e0:	13520001 	cmpne	r2, #1
    a4e4:	9a000005 	bls	a500 <CGPIOPin::DisableInterrupt2()+0x34>
    a4e8:	e3011e98 	movw	r1, #7832	; 0x1e98
    a4ec:	e3401005 	movt	r1, #5
    a4f0:	e3010efc 	movw	r0, #7932	; 0x1efc
    a4f4:	e3400005 	movt	r0, #5
    a4f8:	e3a02f46 	mov	r2, #280	; 0x118
    a4fc:	eb000bd6 	bl	d45c <assertion_failed>
    a500:	e5d4301d 	ldrb	r3, [r4, #29]
    a504:	e3530005 	cmp	r3, #5
    a508:	ca000024 	bgt	a5a0 <CGPIOPin::DisableInterrupt2()+0xd4>
    a50c:	e5943004 	ldr	r3, [r4, #4]
    a510:	e3530035 	cmp	r3, #53	; 0x35
    a514:	8a000019 	bhi	a580 <CGPIOPin::DisableInterrupt2()+0xb4>
    a518:	e3036c48 	movw	r6, #15432	; 0x3c48
    a51c:	e3406005 	movt	r6, #5
    a520:	e5d4201d 	ldrb	r2, [r4, #29]
    a524:	e203101f 	and	r1, r3, #31
    a528:	e3a08001 	mov	r8, #1
    a52c:	e3a0700c 	mov	r7, #12
    a530:	e5960000 	ldr	r0, [r6]
    a534:	e3a05013 	mov	r5, #19
    a538:	e3405fc8 	movt	r5, #4040	; 0xfc8
    a53c:	e3500000 	cmp	r0, #0
    a540:	e1a08118 	lsl	r8, r8, r1
    a544:	e08552a3 	add	r5, r5, r3, lsr #5
    a548:	e0070297 	mul	r7, r7, r2
    a54c:	1a000009 	bne	a578 <CGPIOPin::DisableInterrupt2()+0xac>
    a550:	e7973105 	ldr	r3, [r7, r5, lsl #2]
    a554:	e1c33008 	bic	r3, r3, r8
    a558:	e7873105 	str	r3, [r7, r5, lsl #2]
    a55c:	e5963000 	ldr	r3, [r6]
    a560:	e3530000 	cmp	r3, #0
    a564:	0a000000 	beq	a56c <CGPIOPin::DisableInterrupt2()+0xa0>
    a568:	eb00021f 	bl	adec <LeaveCritical>
    a56c:	e3a03006 	mov	r3, #6
    a570:	e5c4301d 	strb	r3, [r4, #29]
    a574:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a578:	eb00020e 	bl	adb8 <EnterCritical>
    a57c:	eafffff3 	b	a550 <CGPIOPin::DisableInterrupt2()+0x84>
    a580:	e3011e98 	movw	r1, #7832	; 0x1e98
    a584:	e3401005 	movt	r1, #5
    a588:	e3010ee8 	movw	r0, #7912	; 0x1ee8
    a58c:	e3400005 	movt	r0, #5
    a590:	e3a02f47 	mov	r2, #284	; 0x11c
    a594:	eb000bb0 	bl	d45c <assertion_failed>
    a598:	e5943004 	ldr	r3, [r4, #4]
    a59c:	eaffffdd 	b	a518 <CGPIOPin::DisableInterrupt2()+0x4c>
    a5a0:	e3011e98 	movw	r1, #7832	; 0x1e98
    a5a4:	e3401005 	movt	r1, #5
    a5a8:	e3020080 	movw	r0, #8320	; 0x2080
    a5ac:	e3400005 	movt	r0, #5
    a5b0:	e300211a 	movw	r2, #282	; 0x11a
    a5b4:	eb000ba8 	bl	d45c <assertion_failed>
    a5b8:	eaffffd3 	b	a50c <CGPIOPin::DisableInterrupt2()+0x40>

0000a5bc <CGPIOPin::SetPullUpMode(unsigned int)>:
    a5bc:	e5903004 	ldr	r3, [r0, #4]
    a5c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a5c4:	e1a08001 	mov	r8, r1
    a5c8:	e3530035 	cmp	r3, #53	; 0x35
    a5cc:	8a000026 	bhi	a66c <CGPIOPin::SetPullUpMode(unsigned int)+0xb0>
    a5d0:	e3035c48 	movw	r5, #15432	; 0x3c48
    a5d4:	e3405005 	movt	r5, #5
    a5d8:	e3a04026 	mov	r4, #38	; 0x26
    a5dc:	e3404fc8 	movt	r4, #4040	; 0xfc8
    a5e0:	e203701f 	and	r7, r3, #31
    a5e4:	e5952000 	ldr	r2, [r5]
    a5e8:	e08442a3 	add	r4, r4, r3, lsr #5
    a5ec:	e3520000 	cmp	r2, #0
    a5f0:	e1a04104 	lsl	r4, r4, #2
    a5f4:	1a00001a 	bne	a664 <CGPIOPin::SetPullUpMode(unsigned int)+0xa8>
    a5f8:	e3580002 	cmp	r8, #2
    a5fc:	8a000011 	bhi	a648 <CGPIOPin::SetPullUpMode(unsigned int)+0x8c>
    a600:	e3a06000 	mov	r6, #0
    a604:	e3436f20 	movt	r6, #16160	; 0x3f20
    a608:	e3a00005 	mov	r0, #5
    a60c:	e5868094 	str	r8, [r6, #148]	; 0x94
    a610:	eb0004e5 	bl	b9ac <CTimer::SimpleusDelay(unsigned int)>
    a614:	e3a03001 	mov	r3, #1
    a618:	e3a00005 	mov	r0, #5
    a61c:	e1a03713 	lsl	r3, r3, r7
    a620:	e5843000 	str	r3, [r4]
    a624:	eb0004e0 	bl	b9ac <CTimer::SimpleusDelay(unsigned int)>
    a628:	e3a03000 	mov	r3, #0
    a62c:	e5863094 	str	r3, [r6, #148]	; 0x94
    a630:	e5843000 	str	r3, [r4]
    a634:	e5953000 	ldr	r3, [r5]
    a638:	e3530000 	cmp	r3, #0
    a63c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a640:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a644:	ea0001e8 	b	adec <LeaveCritical>
    a648:	e3011e98 	movw	r1, #7832	; 0x1e98
    a64c:	e3401005 	movt	r1, #5
    a650:	e30200a4 	movw	r0, #8356	; 0x20a4
    a654:	e3400005 	movt	r0, #5
    a658:	e3002133 	movw	r2, #307	; 0x133
    a65c:	eb000b7e 	bl	d45c <assertion_failed>
    a660:	eaffffe6 	b	a600 <CGPIOPin::SetPullUpMode(unsigned int)+0x44>
    a664:	eb0001d3 	bl	adb8 <EnterCritical>
    a668:	eaffffe2 	b	a5f8 <CGPIOPin::SetPullUpMode(unsigned int)+0x3c>
    a66c:	e1a04000 	mov	r4, r0
    a670:	e3011e98 	movw	r1, #7832	; 0x1e98
    a674:	e3401005 	movt	r1, #5
    a678:	e3010ee8 	movw	r0, #7912	; 0x1ee8
    a67c:	e3400005 	movt	r0, #5
    a680:	e300212d 	movw	r2, #301	; 0x12d
    a684:	eb000b74 	bl	d45c <assertion_failed>
    a688:	e5943004 	ldr	r3, [r4, #4]
    a68c:	eaffffcf 	b	a5d0 <CGPIOPin::SetPullUpMode(unsigned int)+0x14>

0000a690 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    a690:	e5902004 	ldr	r2, [r0, #4]
    a694:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a698:	e1a06001 	mov	r6, r1
    a69c:	e3520035 	cmp	r2, #53	; 0x35
    a6a0:	8a000026 	bhi	a740 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
    a6a4:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    a6a8:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    a6ac:	e3a0100a 	mov	r1, #10
    a6b0:	e3560005 	cmp	r6, #5
    a6b4:	e0843293 	umull	r3, r4, r3, r2
    a6b8:	e1a041a4 	lsr	r4, r4, #3
    a6bc:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    a6c0:	e2833702 	add	r3, r3, #524288	; 0x80000
    a6c4:	e0642491 	mls	r4, r1, r4, r2
    a6c8:	e1a07103 	lsl	r7, r3, #2
    a6cc:	e0844084 	add	r4, r4, r4, lsl #1
    a6d0:	8a000013 	bhi	a724 <CGPIOPin::SetAlternateFunction(unsigned int)+0x94>
    a6d4:	e3035c48 	movw	r5, #15432	; 0x3c48
    a6d8:	e3405005 	movt	r5, #5
    a6dc:	e5953000 	ldr	r3, [r5]
    a6e0:	e3530000 	cmp	r3, #0
    a6e4:	1a00000c 	bne	a71c <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    a6e8:	e5973000 	ldr	r3, [r7]
    a6ec:	e3012e70 	movw	r2, #7792	; 0x1e70
    a6f0:	e3402005 	movt	r2, #5
    a6f4:	e3a01007 	mov	r1, #7
    a6f8:	e7922106 	ldr	r2, [r2, r6, lsl #2]
    a6fc:	e1c33411 	bic	r3, r3, r1, lsl r4
    a700:	e1834412 	orr	r4, r3, r2, lsl r4
    a704:	e5874000 	str	r4, [r7]
    a708:	e5953000 	ldr	r3, [r5]
    a70c:	e3530000 	cmp	r3, #0
    a710:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a714:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a718:	ea0001b3 	b	adec <LeaveCritical>
    a71c:	eb0001a5 	bl	adb8 <EnterCritical>
    a720:	eafffff0 	b	a6e8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
    a724:	e3011e98 	movw	r1, #7832	; 0x1e98
    a728:	e3401005 	movt	r1, #5
    a72c:	e30200b0 	movw	r0, #8368	; 0x20b0
    a730:	e3400005 	movt	r0, #5
    a734:	e3a02f51 	mov	r2, #324	; 0x144
    a738:	eb000b47 	bl	d45c <assertion_failed>
    a73c:	eaffffe4 	b	a6d4 <CGPIOPin::SetAlternateFunction(unsigned int)+0x44>
    a740:	e1a04000 	mov	r4, r0
    a744:	e3a02d05 	mov	r2, #320	; 0x140
    a748:	e3011e98 	movw	r1, #7832	; 0x1e98
    a74c:	e3401005 	movt	r1, #5
    a750:	e3010ee8 	movw	r0, #7912	; 0x1ee8
    a754:	e3400005 	movt	r0, #5
    a758:	eb000b3f 	bl	d45c <assertion_failed>
    a75c:	e5942004 	ldr	r2, [r4, #4]
    a760:	eaffffcf 	b	a6a4 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>

0000a764 <CGPIOPin::SetMode(TGPIOMode, int)>:
    a764:	e3510009 	cmp	r1, #9
    a768:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a76c:	e1a04001 	mov	r4, r1
    a770:	e1a05000 	mov	r5, r0
    a774:	e1a06002 	mov	r6, r2
    a778:	e1a07001 	mov	r7, r1
    a77c:	ca000037 	bgt	a860 <CGPIOPin::SetMode(TGPIOMode, int)+0xfc>
    a780:	e2443004 	sub	r3, r4, #4
    a784:	e5c54008 	strb	r4, [r5, #8]
    a788:	e3530005 	cmp	r3, #5
    a78c:	9a00002d 	bls	a848 <CGPIOPin::SetMode(TGPIOMode, int)+0xe4>
    a790:	e2963000 	adds	r3, r6, #0
    a794:	13a03001 	movne	r3, #1
    a798:	e3540001 	cmp	r4, #1
    a79c:	13a03000 	movne	r3, #0
    a7a0:	e3530000 	cmp	r3, #0
    a7a4:	1a00005b 	bne	a918 <CGPIOPin::SetMode(TGPIOMode, int)+0x1b4>
    a7a8:	e5952004 	ldr	r2, [r5, #4]
    a7ac:	e3520035 	cmp	r2, #53	; 0x35
    a7b0:	8a00003a 	bhi	a8a0 <CGPIOPin::SetMode(TGPIOMode, int)+0x13c>
    a7b4:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    a7b8:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    a7bc:	e3038c48 	movw	r8, #15432	; 0x3c48
    a7c0:	e3408005 	movt	r8, #5
    a7c4:	e3a0100a 	mov	r1, #10
    a7c8:	e0843293 	umull	r3, r4, r3, r2
    a7cc:	e5983000 	ldr	r3, [r8]
    a7d0:	e1a041a4 	lsr	r4, r4, #3
    a7d4:	e3530000 	cmp	r3, #0
    a7d8:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    a7dc:	e2833702 	add	r3, r3, #524288	; 0x80000
    a7e0:	e0642491 	mls	r4, r1, r4, r2
    a7e4:	e1a07103 	lsl	r7, r3, #2
    a7e8:	e0844084 	add	r4, r4, r4, lsl #1
    a7ec:	1a000033 	bne	a8c0 <CGPIOPin::SetMode(TGPIOMode, int)+0x15c>
    a7f0:	e5d52008 	ldrb	r2, [r5, #8]
    a7f4:	e3a01007 	mov	r1, #7
    a7f8:	e5973000 	ldr	r3, [r7]
    a7fc:	e2422001 	sub	r2, r2, #1
    a800:	e16f2f12 	clz	r2, r2
    a804:	e1c33411 	bic	r3, r3, r1, lsl r4
    a808:	e1a022a2 	lsr	r2, r2, #5
    a80c:	e1834412 	orr	r4, r3, r2, lsl r4
    a810:	e5874000 	str	r4, [r7]
    a814:	e5983000 	ldr	r3, [r8]
    a818:	e3530000 	cmp	r3, #0
    a81c:	1a000029 	bne	a8c8 <CGPIOPin::SetMode(TGPIOMode, int)+0x164>
    a820:	e3560000 	cmp	r6, #0
    a824:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a828:	e5d53008 	ldrb	r3, [r5, #8]
    a82c:	e3530003 	cmp	r3, #3
    a830:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a834:	ea000010 	b	a87c <CGPIOPin::SetMode(TGPIOMode, int)+0x118>
    a838:	0000a908 	.word	0x0000a908
    a83c:	0000a8f8 	.word	0x0000a8f8
    a840:	0000a8e8 	.word	0x0000a8e8
    a844:	0000a8d8 	.word	0x0000a8d8
    a848:	e3560000 	cmp	r6, #0
    a84c:	1a00000b 	bne	a880 <CGPIOPin::SetMode(TGPIOMode, int)+0x11c>
    a850:	e2471004 	sub	r1, r7, #4
    a854:	e1a00005 	mov	r0, r5
    a858:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a85c:	eaffff8b 	b	a690 <CGPIOPin::SetAlternateFunction(unsigned int)>
    a860:	e3011e98 	movw	r1, #7832	; 0x1e98
    a864:	e3401005 	movt	r1, #5
    a868:	e30200c0 	movw	r0, #8384	; 0x20c0
    a86c:	e3400005 	movt	r0, #5
    a870:	e3a0203a 	mov	r2, #58	; 0x3a
    a874:	eb000af8 	bl	d45c <assertion_failed>
    a878:	eaffffc0 	b	a780 <CGPIOPin::SetMode(TGPIOMode, int)+0x1c>
    a87c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a880:	e1a00005 	mov	r0, r5
    a884:	e3a01000 	mov	r1, #0
    a888:	ebffff4b 	bl	a5bc <CGPIOPin::SetPullUpMode(unsigned int)>
    a88c:	e5d57008 	ldrb	r7, [r5, #8]
    a890:	e1a00005 	mov	r0, r5
    a894:	e2471004 	sub	r1, r7, #4
    a898:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a89c:	eaffff7b 	b	a690 <CGPIOPin::SetAlternateFunction(unsigned int)>
    a8a0:	e3a02053 	mov	r2, #83	; 0x53
    a8a4:	e3011e98 	movw	r1, #7832	; 0x1e98
    a8a8:	e3401005 	movt	r1, #5
    a8ac:	e3010ee8 	movw	r0, #7912	; 0x1ee8
    a8b0:	e3400005 	movt	r0, #5
    a8b4:	eb000ae8 	bl	d45c <assertion_failed>
    a8b8:	e5952004 	ldr	r2, [r5, #4]
    a8bc:	eaffffbc 	b	a7b4 <CGPIOPin::SetMode(TGPIOMode, int)+0x50>
    a8c0:	eb00013c 	bl	adb8 <EnterCritical>
    a8c4:	eaffffc9 	b	a7f0 <CGPIOPin::SetMode(TGPIOMode, int)+0x8c>
    a8c8:	eb000147 	bl	adec <LeaveCritical>
    a8cc:	e3560000 	cmp	r6, #0
    a8d0:	1affffd4 	bne	a828 <CGPIOPin::SetMode(TGPIOMode, int)+0xc4>
    a8d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a8d8:	e1a00005 	mov	r0, r5
    a8dc:	e3a01001 	mov	r1, #1
    a8e0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a8e4:	eaffff34 	b	a5bc <CGPIOPin::SetPullUpMode(unsigned int)>
    a8e8:	e1a00005 	mov	r0, r5
    a8ec:	e3a01002 	mov	r1, #2
    a8f0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a8f4:	eaffff30 	b	a5bc <CGPIOPin::SetPullUpMode(unsigned int)>
    a8f8:	e1a00005 	mov	r0, r5
    a8fc:	e3a01000 	mov	r1, #0
    a900:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a904:	eafffd0e 	b	9d44 <CGPIOPin::Write(unsigned int)>
    a908:	e1a00005 	mov	r0, r5
    a90c:	e3a01000 	mov	r1, #0
    a910:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a914:	eaffff28 	b	a5bc <CGPIOPin::SetPullUpMode(unsigned int)>
    a918:	e3a01000 	mov	r1, #0
    a91c:	e1a00005 	mov	r0, r5
    a920:	ebffff25 	bl	a5bc <CGPIOPin::SetPullUpMode(unsigned int)>
    a924:	eaffff9f 	b	a7a8 <CGPIOPin::SetMode(TGPIOMode, int)+0x44>

0000a928 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    a928:	e92d4070 	push	{r4, r5, r6, lr}
    a92c:	e3510035 	cmp	r1, #53	; 0x35
    a930:	e1a04000 	mov	r4, r0
    a934:	e59fe07c 	ldr	lr, [pc, #124]	; a9b8 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x90>
    a938:	e1a05001 	mov	r5, r1
    a93c:	e3a0c00a 	mov	ip, #10
    a940:	e3a01006 	mov	r1, #6
    a944:	e3a00000 	mov	r0, #0
    a948:	e5845004 	str	r5, [r4, #4]
    a94c:	e5843010 	str	r3, [r4, #16]
    a950:	e1a06002 	mov	r6, r2
    a954:	e584e000 	str	lr, [r4]
    a958:	e5c4c008 	strb	ip, [r4, #8]
    a95c:	e5840014 	str	r0, [r4, #20]
    a960:	e5c4101c 	strb	r1, [r4, #28]
    a964:	e5c4101d 	strb	r1, [r4, #29]
    a968:	8a000005 	bhi	a984 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x5c>
    a96c:	e1a00004 	mov	r0, r4
    a970:	e1a01006 	mov	r1, r6
    a974:	e3a02001 	mov	r2, #1
    a978:	ebffff79 	bl	a764 <CGPIOPin::SetMode(TGPIOMode, int)>
    a97c:	e1a00004 	mov	r0, r4
    a980:	e8bd8070 	pop	{r4, r5, r6, pc}
    a984:	eb001552 	bl	fed4 <CMachineInfo::Get()>
    a988:	e6ef1075 	uxtb	r1, r5
    a98c:	eb001525 	bl	fe28 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    a990:	e3500035 	cmp	r0, #53	; 0x35
    a994:	e5840004 	str	r0, [r4, #4]
    a998:	9afffff3 	bls	a96c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    a99c:	e3011e98 	movw	r1, #7832	; 0x1e98
    a9a0:	e3401005 	movt	r1, #5
    a9a4:	e3010ee8 	movw	r0, #7912	; 0x1ee8
    a9a8:	e3400005 	movt	r0, #5
    a9ac:	e3a0202b 	mov	r2, #43	; 0x2b
    a9b0:	eb000aa9 	bl	d45c <assertion_failed>
    a9b4:	eaffffec 	b	a96c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    a9b8:	00051e90 	.word	0x00051e90

0000a9bc <CGPIOPin::InterruptHandler()>:
    a9bc:	e5d03008 	ldrb	r3, [r0, #8]
    a9c0:	e92d4010 	push	{r4, lr}
    a9c4:	e1a04000 	mov	r4, r0
    a9c8:	e2432002 	sub	r2, r3, #2
    a9cc:	e3530000 	cmp	r3, #0
    a9d0:	13520001 	cmpne	r2, #1
    a9d4:	9a000005 	bls	a9f0 <CGPIOPin::InterruptHandler()+0x34>
    a9d8:	e3011e98 	movw	r1, #7832	; 0x1e98
    a9dc:	e3401005 	movt	r1, #5
    a9e0:	e3010efc 	movw	r0, #7932	; 0x1efc
    a9e4:	e3400005 	movt	r0, #5
    a9e8:	e3002153 	movw	r2, #339	; 0x153
    a9ec:	eb000a9a 	bl	d45c <assertion_failed>
    a9f0:	e5d4301c 	ldrb	r3, [r4, #28]
    a9f4:	e3530005 	cmp	r3, #5
    a9f8:	da000002 	ble	aa08 <CGPIOPin::InterruptHandler()+0x4c>
    a9fc:	e5d4301d 	ldrb	r3, [r4, #29]
    aa00:	e3530005 	cmp	r3, #5
    aa04:	ca000005 	bgt	aa20 <CGPIOPin::InterruptHandler()+0x64>
    aa08:	e5943014 	ldr	r3, [r4, #20]
    aa0c:	e3530000 	cmp	r3, #0
    aa10:	0a00000b 	beq	aa44 <CGPIOPin::InterruptHandler()+0x88>
    aa14:	e5940018 	ldr	r0, [r4, #24]
    aa18:	e8bd4010 	pop	{r4, lr}
    aa1c:	e12fff13 	bx	r3
    aa20:	e3011e98 	movw	r1, #7832	; 0x1e98
    aa24:	e3401005 	movt	r1, #5
    aa28:	e30200d8 	movw	r0, #8408	; 0x20d8
    aa2c:	e3400005 	movt	r0, #5
    aa30:	e3002155 	movw	r2, #341	; 0x155
    aa34:	eb000a88 	bl	d45c <assertion_failed>
    aa38:	e5943014 	ldr	r3, [r4, #20]
    aa3c:	e3530000 	cmp	r3, #0
    aa40:	1afffff3 	bne	aa14 <CGPIOPin::InterruptHandler()+0x58>
    aa44:	e3011e98 	movw	r1, #7832	; 0x1e98
    aa48:	e3401005 	movt	r1, #5
    aa4c:	e3010ff0 	movw	r0, #8176	; 0x1ff0
    aa50:	e3400005 	movt	r0, #5
    aa54:	e3002157 	movw	r2, #343	; 0x157
    aa58:	eb000a7f 	bl	d45c <assertion_failed>
    aa5c:	e5943014 	ldr	r3, [r4, #20]
    aa60:	e5940018 	ldr	r0, [r4, #24]
    aa64:	e8bd4010 	pop	{r4, lr}
    aa68:	e12fff13 	bx	r3

0000aa6c <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    aa6c:	e3500035 	cmp	r0, #53	; 0x35
    aa70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    aa74:	e1a07000 	mov	r7, r0
    aa78:	8a000023 	bhi	ab0c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    aa7c:	e3036c48 	movw	r6, #15432	; 0x3c48
    aa80:	e3406005 	movt	r6, #5
    aa84:	e3a04013 	mov	r4, #19
    aa88:	e3404fc8 	movt	r4, #4040	; 0xfc8
    aa8c:	e207501f 	and	r5, r7, #31
    aa90:	e3a02001 	mov	r2, #1
    aa94:	e5963000 	ldr	r3, [r6]
    aa98:	e08442a7 	add	r4, r4, r7, lsr #5
    aa9c:	e3530000 	cmp	r3, #0
    aaa0:	e1a04104 	lsl	r4, r4, #2
    aaa4:	e1a05512 	lsl	r5, r2, r5
    aaa8:	1a000011 	bne	aaf4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
    aaac:	e3a0308b 	mov	r3, #139	; 0x8b
    aab0:	e3433f20 	movt	r3, #16160	; 0x3f20
    aab4:	e1540003 	cmp	r4, r3
    aab8:	8a00000c 	bhi	aaf0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
    aabc:	e3a0108b 	mov	r1, #139	; 0x8b
    aac0:	e3431f20 	movt	r1, #16160	; 0x3f20
    aac4:	e1e02005 	mvn	r2, r5
    aac8:	e5943000 	ldr	r3, [r4]
    aacc:	e0033002 	and	r3, r3, r2
    aad0:	e484300c 	str	r3, [r4], #12
    aad4:	e1540001 	cmp	r4, r1
    aad8:	9afffffa 	bls	aac8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x5c>
    aadc:	e5963000 	ldr	r3, [r6]
    aae0:	e3530000 	cmp	r3, #0
    aae4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    aae8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    aaec:	ea0000be 	b	adec <LeaveCritical>
    aaf0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    aaf4:	eb0000af 	bl	adb8 <EnterCritical>
    aaf8:	e3a0308b 	mov	r3, #139	; 0x8b
    aafc:	e3433f20 	movt	r3, #16160	; 0x3f20
    ab00:	e1540003 	cmp	r4, r3
    ab04:	9affffec 	bls	aabc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    ab08:	eafffff3 	b	aadc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
    ab0c:	e3011e98 	movw	r1, #7832	; 0x1e98
    ab10:	e3401005 	movt	r1, #5
    ab14:	e3020124 	movw	r0, #8484	; 0x2124
    ab18:	e3400005 	movt	r0, #5
    ab1c:	e300215d 	movw	r2, #349	; 0x15d
    ab20:	eb000a4d 	bl	d45c <assertion_failed>
    ab24:	eaffffd4 	b	aa7c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>

0000ab28 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    ab28:	e3033c48 	movw	r3, #15432	; 0x3c48
    ab2c:	e3403005 	movt	r3, #5
    ab30:	e3a02001 	mov	r2, #1
    ab34:	e5832000 	str	r2, [r3]
    ab38:	e12fff1e 	bx	lr

0000ab3c <CMemorySystem::~CMemorySystem()>:
    ab3c:	e5903000 	ldr	r3, [r0]
    ab40:	e92d4070 	push	{r4, r5, r6, lr}
    ab44:	e1a04000 	mov	r4, r0
    ab48:	e3530000 	cmp	r3, #0
    ab4c:	0a000005 	beq	ab68 <CMemorySystem::~CMemorySystem()+0x2c>
    ab50:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    ab54:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    ab58:	e3c33005 	bic	r3, r3, #5
    ab5c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    ab60:	e3a03000 	mov	r3, #0
    ab64:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    ab68:	e594500c 	ldr	r5, [r4, #12]
    ab6c:	e3550000 	cmp	r5, #0
    ab70:	0a000003 	beq	ab84 <CMemorySystem::~CMemorySystem()+0x48>
    ab74:	e1a00005 	mov	r0, r5
    ab78:	eb0005ae 	bl	c238 <CPageTable::~CPageTable()>
    ab7c:	e1a00005 	mov	r0, r5
    ab80:	eb00008a 	bl	adb0 <operator delete(void*)>
    ab84:	e5945008 	ldr	r5, [r4, #8]
    ab88:	e3a03000 	mov	r3, #0
    ab8c:	e584300c 	str	r3, [r4, #12]
    ab90:	e1550003 	cmp	r5, r3
    ab94:	0a000003 	beq	aba8 <CMemorySystem::~CMemorySystem()+0x6c>
    ab98:	e1a00005 	mov	r0, r5
    ab9c:	eb0005a5 	bl	c238 <CPageTable::~CPageTable()>
    aba0:	e1a00005 	mov	r0, r5
    aba4:	eb000081 	bl	adb0 <operator delete(void*)>
    aba8:	e1a00004 	mov	r0, r4
    abac:	e8bd8070 	pop	{r4, r5, r6, pc}

0000abb0 <CMemorySystem::GetMemSize() const>:
    abb0:	e5900004 	ldr	r0, [r0, #4]
    abb4:	e12fff1e 	bx	lr

0000abb8 <CMemorySystem::EnableMMU()>:
    abb8:	e5903000 	ldr	r3, [r0]
    abbc:	e92d4010 	push	{r4, lr}
    abc0:	e1a04000 	mov	r4, r0
    abc4:	e3530000 	cmp	r3, #0
    abc8:	0a00001f 	beq	ac4c <CMemorySystem::EnableMMU()+0x94>
    abcc:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    abd0:	e3833040 	orr	r3, r3, #64	; 0x40
    abd4:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    abd8:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    abdc:	e3130001 	tst	r3, #1
    abe0:	1a000020 	bne	ac68 <CMemorySystem::EnableMMU()+0xb0>
    abe4:	e3a03002 	mov	r3, #2
    abe8:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    abec:	e5940008 	ldr	r0, [r4, #8]
    abf0:	e3500000 	cmp	r0, #0
    abf4:	0a00002a 	beq	aca4 <CMemorySystem::EnableMMU()+0xec>
    abf8:	eb000597 	bl	c25c <CPageTable::GetBaseAddress() const>
    abfc:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    ac00:	e594000c 	ldr	r0, [r4, #12]
    ac04:	e3500000 	cmp	r0, #0
    ac08:	0a00001d 	beq	ac84 <CMemorySystem::EnableMMU()+0xcc>
    ac0c:	eb000592 	bl	c25c <CPageTable::GetBaseAddress() const>
    ac10:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    ac14:	e3a03005 	mov	r3, #5
    ac18:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    ac1c:	eb0014d5 	bl	ff78 <InvalidateDataCache>
    ac20:	e3a03000 	mov	r3, #0
    ac24:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    ac28:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    ac2c:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    ac30:	f57ff04f 	dsb	sy
    ac34:	f57ff06f 	isb	sy
    ac38:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    ac3c:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    ac40:	e3833005 	orr	r3, r3, #5
    ac44:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    ac48:	e8bd8010 	pop	{r4, pc}
    ac4c:	e3021138 	movw	r1, #8504	; 0x2138
    ac50:	e3401005 	movt	r1, #5
    ac54:	e3020144 	movw	r0, #8516	; 0x2144
    ac58:	e3400005 	movt	r0, #5
    ac5c:	e3a020c0 	mov	r2, #192	; 0xc0
    ac60:	eb0009fd 	bl	d45c <assertion_failed>
    ac64:	eaffffd8 	b	abcc <CMemorySystem::EnableMMU()+0x14>
    ac68:	e3021138 	movw	r1, #8504	; 0x2138
    ac6c:	e3401005 	movt	r1, #5
    ac70:	e3020154 	movw	r0, #8532	; 0x2154
    ac74:	e3400005 	movt	r0, #5
    ac78:	e3a020cd 	mov	r2, #205	; 0xcd
    ac7c:	eb0009f6 	bl	d45c <assertion_failed>
    ac80:	eaffffd7 	b	abe4 <CMemorySystem::EnableMMU()+0x2c>
    ac84:	e3021138 	movw	r1, #8504	; 0x2138
    ac88:	e3401005 	movt	r1, #5
    ac8c:	e302019c 	movw	r0, #8604	; 0x219c
    ac90:	e3400005 	movt	r0, #5
    ac94:	e3a020d7 	mov	r2, #215	; 0xd7
    ac98:	eb0009ef 	bl	d45c <assertion_failed>
    ac9c:	e594000c 	ldr	r0, [r4, #12]
    aca0:	eaffffd9 	b	ac0c <CMemorySystem::EnableMMU()+0x54>
    aca4:	e3021138 	movw	r1, #8504	; 0x2138
    aca8:	e3401005 	movt	r1, #5
    acac:	e3020180 	movw	r0, #8576	; 0x2180
    acb0:	e3400005 	movt	r0, #5
    acb4:	e3a020d3 	mov	r2, #211	; 0xd3
    acb8:	eb0009e7 	bl	d45c <assertion_failed>
    acbc:	e5940008 	ldr	r0, [r4, #8]
    acc0:	eaffffcc 	b	abf8 <CMemorySystem::EnableMMU()+0x40>

0000acc4 <CMemorySystem::CMemorySystem(int)>:
    acc4:	e92d4030 	push	{r4, r5, lr}
    acc8:	e1a04000 	mov	r4, r0
    accc:	e3a05000 	mov	r5, #0
    acd0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    acd4:	e8840022 	stm	r4, {r1, r5}
    acd8:	e28d000c 	add	r0, sp, #12
    acdc:	e5845008 	str	r5, [r4, #8]
    ace0:	e584500c 	str	r5, [r4, #12]
    ace4:	ebfffb9c 	bl	9b5c <CBcmPropertyTags::CBcmPropertyTags()>
    ace8:	e3a03014 	mov	r3, #20
    acec:	e58d5000 	str	r5, [sp]
    acf0:	e28d000c 	add	r0, sp, #12
    acf4:	e3a01005 	mov	r1, #5
    acf8:	e3401001 	movt	r1, #1
    acfc:	e08d2003 	add	r2, sp, r3
    ad00:	ebfffbdd 	bl	9c7c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ad04:	e3500000 	cmp	r0, #0
    ad08:	1a000019 	bne	ad74 <CMemorySystem::CMemorySystem(int)+0xb0>
    ad0c:	e3a01303 	mov	r1, #201326592	; 0xc000000
    ad10:	e58d0020 	str	r0, [sp, #32]
    ad14:	e58d1024 	str	r1, [sp, #36]	; 0x24
    ad18:	e5841004 	str	r1, [r4, #4]
    ad1c:	eb001639 	bl	10608 <mem_init>
    ad20:	e5943000 	ldr	r3, [r4]
    ad24:	e3530000 	cmp	r3, #0
    ad28:	0a00000c 	beq	ad60 <CMemorySystem::CMemorySystem(int)+0x9c>
    ad2c:	e3a00008 	mov	r0, #8
    ad30:	eb00001c 	bl	ada8 <operator new(unsigned int)>
    ad34:	e5941004 	ldr	r1, [r4, #4]
    ad38:	e1a05000 	mov	r5, r0
    ad3c:	eb0004ed 	bl	c0f8 <CPageTable::CPageTable(unsigned int)>
    ad40:	e5845008 	str	r5, [r4, #8]
    ad44:	e3a00008 	mov	r0, #8
    ad48:	eb000016 	bl	ada8 <operator new(unsigned int)>
    ad4c:	e1a05000 	mov	r5, r0
    ad50:	eb0004bc 	bl	c048 <CPageTable::CPageTable()>
    ad54:	e584500c 	str	r5, [r4, #12]
    ad58:	e1a00004 	mov	r0, r4
    ad5c:	ebffff95 	bl	abb8 <CMemorySystem::EnableMMU()>
    ad60:	e28d000c 	add	r0, sp, #12
    ad64:	ebfffb82 	bl	9b74 <CBcmPropertyTags::~CBcmPropertyTags()>
    ad68:	e1a00004 	mov	r0, r4
    ad6c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    ad70:	e8bd8030 	pop	{r4, r5, pc}
    ad74:	e59d0020 	ldr	r0, [sp, #32]
    ad78:	e3500000 	cmp	r0, #0
    ad7c:	059d1024 	ldreq	r1, [sp, #36]	; 0x24
    ad80:	0affffe4 	beq	ad18 <CMemorySystem::CMemorySystem(int)+0x54>
    ad84:	e3021138 	movw	r1, #8504	; 0x2138
    ad88:	e3401005 	movt	r1, #5
    ad8c:	e30201b0 	movw	r0, #8624	; 0x21b0
    ad90:	e3400005 	movt	r0, #5
    ad94:	e3a02042 	mov	r2, #66	; 0x42
    ad98:	eb0009af 	bl	d45c <assertion_failed>
    ad9c:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    ada0:	e59d0020 	ldr	r0, [sp, #32]
    ada4:	eaffffdb 	b	ad18 <CMemorySystem::CMemorySystem(int)+0x54>

0000ada8 <operator new(unsigned int)>:
    ada8:	ea00162f 	b	1066c <malloc>

0000adac <operator new[](unsigned int)>:
    adac:	ea00162e 	b	1066c <malloc>

0000adb0 <operator delete(void*)>:
    adb0:	ea00168f 	b	107f4 <free>

0000adb4 <operator delete[](void*)>:
    adb4:	ea00168e 	b	107f4 <free>

0000adb8 <EnterCritical>:
    adb8:	e10f1000 	mrs	r1, CPSR
    adbc:	f10c0080 	cpsid	i
    adc0:	e3033c4c 	movw	r3, #15436	; 0x3c4c
    adc4:	e3403005 	movt	r3, #5
    adc8:	e5932000 	ldr	r2, [r3]
    adcc:	e3520000 	cmp	r2, #0
    add0:	e2822001 	add	r2, r2, #1
    add4:	02211080 	eoreq	r1, r1, #128	; 0x80
    add8:	e5832000 	str	r2, [r3]
    addc:	07e013d1 	ubfxeq	r1, r1, #7, #1
    ade0:	05831004 	streq	r1, [r3, #4]
    ade4:	f57ff05f 	dmb	sy
    ade8:	e12fff1e 	bx	lr

0000adec <LeaveCritical>:
    adec:	e92d4010 	push	{r4, lr}
    adf0:	f57ff05f 	dmb	sy
    adf4:	e3034c4c 	movw	r4, #15436	; 0x3c4c
    adf8:	e3404005 	movt	r4, #5
    adfc:	e5943000 	ldr	r3, [r4]
    ae00:	e3530000 	cmp	r3, #0
    ae04:	0a000009 	beq	ae30 <LeaveCritical+0x44>
    ae08:	e5943000 	ldr	r3, [r4]
    ae0c:	e2433001 	sub	r3, r3, #1
    ae10:	e3530000 	cmp	r3, #0
    ae14:	e5843000 	str	r3, [r4]
    ae18:	18bd8010 	popne	{r4, pc}
    ae1c:	e5943004 	ldr	r3, [r4, #4]
    ae20:	e3530000 	cmp	r3, #0
    ae24:	08bd8010 	popeq	{r4, pc}
    ae28:	f1080080 	cpsie	i
    ae2c:	e8bd8010 	pop	{r4, pc}
    ae30:	e30211cc 	movw	r1, #8652	; 0x21cc
    ae34:	e3401005 	movt	r1, #5
    ae38:	e30201dc 	movw	r0, #8668	; 0x21dc
    ae3c:	e3400005 	movt	r0, #5
    ae40:	e3a0205b 	mov	r2, #91	; 0x5b
    ae44:	eb000984 	bl	d45c <assertion_failed>
    ae48:	eaffffee 	b	ae08 <LeaveCritical+0x1c>

0000ae4c <SyncDataAndInstructionCache>:
    ae4c:	e92d4010 	push	{r4, lr}
    ae50:	eb001472 	bl	10020 <CleanDataCache>
    ae54:	e3a03000 	mov	r3, #0
    ae58:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    ae5c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    ae60:	f57ff04f 	dsb	sy
    ae64:	f57ff06f 	isb	sy
    ae68:	e8bd8010 	pop	{r4, pc}

0000ae6c <__aeabi_atexit>:
    ae6c:	e12fff1e 	bx	lr

0000ae70 <halt>:
    ae70:	f10c0080 	cpsid	i
    ae74:	f57ff04f 	dsb	sy
    ae78:	e320f003 	wfi
    ae7c:	eafffffc 	b	ae74 <halt+0x4>

0000ae80 <reboot>:
    ae80:	e3a03000 	mov	r3, #0
    ae84:	e3433f10 	movt	r3, #16144	; 0x3f10
    ae88:	e3a01001 	mov	r1, #1
    ae8c:	e3451a00 	movt	r1, #23040	; 0x5a00
    ae90:	e3a02020 	mov	r2, #32
    ae94:	e3452a00 	movt	r2, #23040	; 0x5a00
    ae98:	e5831024 	str	r1, [r3, #36]	; 0x24
    ae9c:	e583201c 	str	r2, [r3, #28]
    aea0:	eafffffe 	b	aea0 <reboot+0x20>

0000aea4 <sysinit>:
    aea4:	e92d4030 	push	{r4, r5, lr}
    aea8:	e24dd01c 	sub	sp, sp, #28
    aeac:	eb001416 	bl	ff0c <InvalidateDataCacheL1Only>
    aeb0:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    aeb4:	e308305c 	movw	r3, #32860	; 0x805c
    aeb8:	e3403000 	movt	r3, #0
    aebc:	e582309c 	str	r3, [r2, #156]	; 0x9c
    aec0:	e58230ac 	str	r3, [r2, #172]	; 0xac
    aec4:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    aec8:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    aecc:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    aed0:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    aed4:	f57ff06f 	isb	sy
    aed8:	eee82a10 	vmsr	fpexc, r2
    aedc:	e3a01000 	mov	r1, #0
    aee0:	eee11a10 	vmsr	fpscr, r1
    aee4:	e3033c44 	movw	r3, #15428	; 0x3c44
    aee8:	e3403005 	movt	r3, #5
    aeec:	e3032c98 	movw	r2, #15512	; 0x3c98
    aef0:	e3402005 	movt	r2, #5
    aef4:	e1530002 	cmp	r3, r2
    aef8:	2a000002 	bcs	af08 <sysinit+0x64>
    aefc:	e4c31001 	strb	r1, [r3], #1
    af00:	e1530002 	cmp	r3, r2
    af04:	1afffffc 	bne	aefc <sysinit+0x58>
    af08:	e1a0000d 	mov	r0, sp
    af0c:	e3035b5c 	movw	r5, #15196	; 0x3b5c
    af10:	e3405005 	movt	r5, #5
    af14:	e3034b50 	movw	r4, #15184	; 0x3b50
    af18:	e3404005 	movt	r4, #5
    af1c:	eb0012fb 	bl	fb10 <CMachineInfo::CMachineInfo()>
    af20:	e1540005 	cmp	r4, r5
    af24:	2a000003 	bcs	af38 <sysinit+0x94>
    af28:	e4943004 	ldr	r3, [r4], #4
    af2c:	e12fff33 	blx	r3
    af30:	e1540005 	cmp	r4, r5
    af34:	3afffffb 	bcc	af28 <sysinit+0x84>
    af38:	ebfff44a 	bl	8068 <main>
    af3c:	e3500001 	cmp	r0, #1
    af40:	0a000000 	beq	af48 <sysinit+0xa4>
    af44:	ebffffc9 	bl	ae70 <halt>
    af48:	ebffffcc 	bl	ae80 <reboot>

0000af4c <CTimer::CTimer(CInterruptSystem*)>:
    af4c:	e92d4070 	push	{r4, r5, r6, lr}
    af50:	e1a04000 	mov	r4, r0
    af54:	e3035c58 	movw	r5, #15448	; 0x3c58
    af58:	e3405005 	movt	r5, #5
    af5c:	e3a03000 	mov	r3, #0
    af60:	e3a06001 	mov	r6, #1
    af64:	e5801000 	str	r1, [r0]
    af68:	e2800018 	add	r0, r0, #24
    af6c:	e5843004 	str	r3, [r4, #4]
    af70:	e5843014 	str	r3, [r4, #20]
    af74:	e5843008 	str	r3, [r4, #8]
    af78:	e5846010 	str	r6, [r4, #16]
    af7c:	e584300c 	str	r3, [r4, #12]
    af80:	eb00145e 	bl	10100 <CPtrList::CPtrList()>
    af84:	e5951000 	ldr	r1, [r5]
    af88:	e300215e 	movw	r2, #350	; 0x15e
    af8c:	e3053730 	movw	r3, #22320	; 0x5730
    af90:	e3403005 	movt	r3, #5
    af94:	e3510000 	cmp	r1, #0
    af98:	e584601c 	str	r6, [r4, #28]
    af9c:	e5843020 	str	r3, [r4, #32]
    afa0:	e5842024 	str	r2, [r4, #36]	; 0x24
    afa4:	0a000005 	beq	afc0 <CTimer::CTimer(CInterruptSystem*)+0x74>
    afa8:	e302122c 	movw	r1, #8748	; 0x222c
    afac:	e3401005 	movt	r1, #5
    afb0:	e3020238 	movw	r0, #8760	; 0x2238
    afb4:	e3400005 	movt	r0, #5
    afb8:	e3a0203b 	mov	r2, #59	; 0x3b
    afbc:	eb000926 	bl	d45c <assertion_failed>
    afc0:	e5854000 	str	r4, [r5]
    afc4:	e1a00004 	mov	r0, r4
    afc8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000afcc <CTimer::~CTimer()>:
    afcc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    afd0:	e1a09000 	mov	r9, r0
    afd4:	e5900000 	ldr	r0, [r0]
    afd8:	e3500000 	cmp	r0, #0
    afdc:	0a00002b 	beq	b090 <CTimer::~CTimer()+0xc4>
    afe0:	e3a01003 	mov	r1, #3
    afe4:	e302722c 	movw	r7, #8748	; 0x222c
    afe8:	e3407005 	movt	r7, #5
    afec:	e302a260 	movw	sl, #8800	; 0x2260
    aff0:	e340a005 	movt	sl, #5
    aff4:	e3048d43 	movw	r8, #19779	; 0x4d43
    aff8:	e3448b54 	movt	r8, #19284	; 0x4b54
    affc:	e2894018 	add	r4, r9, #24
    b000:	eb0010e2 	bl	f390 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    b004:	ea00000f 	b	b048 <CTimer::~CTimer()+0x7c>
    b008:	eb001465 	bl	101a4 <CPtrList::GetPtr(TPtrListElement*)>
    b00c:	e2506000 	subs	r6, r0, #0
    b010:	0a000019 	beq	b07c <CTimer::~CTimer()+0xb0>
    b014:	e5963000 	ldr	r3, [r6]
    b018:	e302026c 	movw	r0, #8812	; 0x226c
    b01c:	e3400005 	movt	r0, #5
    b020:	e1530008 	cmp	r3, r8
    b024:	e3a02049 	mov	r2, #73	; 0x49
    b028:	e1a01007 	mov	r1, r7
    b02c:	0a000000 	beq	b034 <CTimer::~CTimer()+0x68>
    b030:	eb000909 	bl	d45c <assertion_failed>
    b034:	e1a00004 	mov	r0, r4
    b038:	e1a01005 	mov	r1, r5
    b03c:	eb0014f8 	bl	10424 <CPtrList::Remove(TPtrListElement*)>
    b040:	e1a00006 	mov	r0, r6
    b044:	ebffff59 	bl	adb0 <operator delete(void*)>
    b048:	e1a00004 	mov	r0, r4
    b04c:	eb00143b 	bl	10140 <CPtrList::GetFirst()>
    b050:	e2505000 	subs	r5, r0, #0
    b054:	e1a01005 	mov	r1, r5
    b058:	e1a00004 	mov	r0, r4
    b05c:	1affffe9 	bne	b008 <CTimer::~CTimer()+0x3c>
    b060:	e3033c58 	movw	r3, #15448	; 0x3c58
    b064:	e3403005 	movt	r3, #5
    b068:	e1a00004 	mov	r0, r4
    b06c:	e5835000 	str	r5, [r3]
    b070:	eb001425 	bl	1010c <CPtrList::~CPtrList()>
    b074:	e1a00009 	mov	r0, r9
    b078:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b07c:	e3a02048 	mov	r2, #72	; 0x48
    b080:	e1a01007 	mov	r1, r7
    b084:	e1a0000a 	mov	r0, sl
    b088:	eb0008f3 	bl	d45c <assertion_failed>
    b08c:	eaffffe0 	b	b014 <CTimer::~CTimer()+0x48>
    b090:	e302122c 	movw	r1, #8748	; 0x222c
    b094:	e3401005 	movt	r1, #5
    b098:	e3020248 	movw	r0, #8776	; 0x2248
    b09c:	e3400005 	movt	r0, #5
    b0a0:	e3a02041 	mov	r2, #65	; 0x41
    b0a4:	eb0008ec 	bl	d45c <assertion_failed>
    b0a8:	e5990000 	ldr	r0, [r9]
    b0ac:	eaffffcb 	b	afe0 <CTimer::~CTimer()+0x14>

0000b0b0 <CTimer::SetTimeZone(int)>:
    b0b0:	e2813e59 	add	r3, r1, #1424	; 0x590
    b0b4:	e3002b3e 	movw	r2, #2878	; 0xb3e
    b0b8:	e283300f 	add	r3, r3, #15
    b0bc:	e1530002 	cmp	r3, r2
    b0c0:	95801014 	strls	r1, [r0, #20]
    b0c4:	93a00001 	movls	r0, #1
    b0c8:	83a00000 	movhi	r0, #0
    b0cc:	e12fff1e 	bx	lr

0000b0d0 <CTimer::GetTimeZone() const>:
    b0d0:	e5900014 	ldr	r0, [r0, #20]
    b0d4:	e12fff1e 	bx	lr

0000b0d8 <CTimer::SetTime(unsigned int, int)>:
    b0d8:	e3520000 	cmp	r2, #0
    b0dc:	e92d4070 	push	{r4, r5, r6, lr}
    b0e0:	e1a04000 	mov	r4, r0
    b0e4:	e1a05001 	mov	r5, r1
    b0e8:	1a000005 	bne	b104 <CTimer::SetTime(unsigned int, int)+0x2c>
    b0ec:	e5901014 	ldr	r1, [r0, #20]
    b0f0:	e3a0303c 	mov	r3, #60	; 0x3c
    b0f4:	e0030193 	mul	r3, r3, r1
    b0f8:	e3530000 	cmp	r3, #0
    b0fc:	ba00000e 	blt	b13c <CTimer::SetTime(unsigned int, int)+0x64>
    b100:	e0855003 	add	r5, r5, r3
    b104:	e5943010 	ldr	r3, [r4, #16]
    b108:	e3530000 	cmp	r3, #0
    b10c:	1a000002 	bne	b11c <CTimer::SetTime(unsigned int, int)+0x44>
    b110:	e3a00001 	mov	r0, #1
    b114:	e584500c 	str	r5, [r4, #12]
    b118:	e8bd8070 	pop	{r4, r5, r6, pc}
    b11c:	ebffff25 	bl	adb8 <EnterCritical>
    b120:	e5943010 	ldr	r3, [r4, #16]
    b124:	e584500c 	str	r5, [r4, #12]
    b128:	e3530000 	cmp	r3, #0
    b12c:	0a000007 	beq	b150 <CTimer::SetTime(unsigned int, int)+0x78>
    b130:	ebffff2d 	bl	adec <LeaveCritical>
    b134:	e3a00001 	mov	r0, #1
    b138:	e8bd8070 	pop	{r4, r5, r6, pc}
    b13c:	e2631000 	rsb	r1, r3, #0
    b140:	e1510005 	cmp	r1, r5
    b144:	daffffed 	ble	b100 <CTimer::SetTime(unsigned int, int)+0x28>
    b148:	e1a00002 	mov	r0, r2
    b14c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b150:	e3a00001 	mov	r0, #1
    b154:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b158 <CTimer::GetClockTicks()>:
    b158:	e3a03a03 	mov	r3, #12288	; 0x3000
    b15c:	e3433f00 	movt	r3, #16128	; 0x3f00
    b160:	e5930004 	ldr	r0, [r3, #4]
    b164:	e12fff1e 	bx	lr

0000b168 <CTimer::GetTicks() const>:
    b168:	e5900004 	ldr	r0, [r0, #4]
    b16c:	e12fff1e 	bx	lr

0000b170 <CTimer::GetUptime() const>:
    b170:	e5900008 	ldr	r0, [r0, #8]
    b174:	e12fff1e 	bx	lr

0000b178 <CTimer::GetTime() const>:
    b178:	e590000c 	ldr	r0, [r0, #12]
    b17c:	e12fff1e 	bx	lr

0000b180 <CTimer::GetUniversalTime() const>:
    b180:	e5902014 	ldr	r2, [r0, #20]
    b184:	e3a0303c 	mov	r3, #60	; 0x3c
    b188:	e590000c 	ldr	r0, [r0, #12]
    b18c:	e0030293 	mul	r3, r3, r2
    b190:	e1530000 	cmp	r3, r0
    b194:	d0400003 	suble	r0, r0, r3
    b198:	c3a00000 	movgt	r0, #0
    b19c:	e12fff1e 	bx	lr

0000b1a0 <CTimer::GetTimeString()>:
    b1a0:	e5903010 	ldr	r3, [r0, #16]
    b1a4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b1a8:	e1a04000 	mov	r4, r0
    b1ac:	e3530000 	cmp	r3, #0
    b1b0:	e24dd014 	sub	sp, sp, #20
    b1b4:	1a00006c 	bne	b36c <CTimer::GetTimeString()+0x1cc>
    b1b8:	e590500c 	ldr	r5, [r0, #12]
    b1bc:	e5909004 	ldr	r9, [r0, #4]
    b1c0:	e1950009 	orrs	r0, r5, r9
    b1c4:	0a000051 	beq	b310 <CTimer::GetTimeString()+0x170>
    b1c8:	e3086889 	movw	r6, #34953	; 0x8889
    b1cc:	e3486888 	movt	r6, #34952	; 0x8888
    b1d0:	e30b73c5 	movw	r7, #46021	; 0xb3c5
    b1d4:	e34971a2 	movt	r7, #37282	; 0x91a2
    b1d8:	e3044507 	movw	r4, #17671	; 0x4507
    b1dc:	e34c422e 	movt	r4, #49710	; 0xc22e
    b1e0:	e0813596 	umull	r3, r1, r6, r5
    b1e4:	e3a0003c 	mov	r0, #60	; 0x3c
    b1e8:	e0832695 	umull	r2, r3, r5, r6
    b1ec:	e308c51f 	movw	ip, #34079	; 0x851f
    b1f0:	e345c1eb 	movt	ip, #20971	; 0x51eb
    b1f4:	e1a012a1 	lsr	r1, r1, #5
    b1f8:	e1a082a3 	lsr	r8, r3, #5
    b1fc:	e0873597 	umull	r3, r7, r7, r5
    b200:	e3a0a064 	mov	sl, #100	; 0x64
    b204:	e0843594 	umull	r3, r4, r4, r5
    b208:	e3a0ee19 	mov	lr, #400	; 0x190
    b20c:	e0863196 	umull	r3, r6, r6, r1
    b210:	e1a075a7 	lsr	r7, r7, #11
    b214:	e0685890 	mls	r8, r0, r8, r5
    b218:	e1a04824 	lsr	r4, r4, #16
    b21c:	e1a062a6 	lsr	r6, r6, #5
    b220:	e30057b2 	movw	r5, #1970	; 0x7b2
    b224:	e300216d 	movw	r2, #365	; 0x16d
    b228:	e300316e 	movw	r3, #366	; 0x16e
    b22c:	e0661690 	mls	r6, r0, r6, r1
    b230:	ea000001 	b	b23c <CTimer::GetTimeString()+0x9c>
    b234:	e0444000 	sub	r4, r4, r0
    b238:	e2855001 	add	r5, r5, #1
    b23c:	e0810c95 	umull	r0, r1, r5, ip
    b240:	e1a002a1 	lsr	r0, r1, #5
    b244:	e1a013a1 	lsr	r1, r1, #7
    b248:	e060509a 	mls	r0, sl, r0, r5
    b24c:	e061519e 	mls	r1, lr, r1, r5
    b250:	e3500000 	cmp	r0, #0
    b254:	e16f1f11 	clz	r1, r1
    b258:	01a012a1 	lsreq	r1, r1, #5
    b25c:	0a000002 	beq	b26c <CTimer::GetTimeString()+0xcc>
    b260:	e3150003 	tst	r5, #3
    b264:	03a01001 	moveq	r1, #1
    b268:	13a01000 	movne	r1, #0
    b26c:	e3510000 	cmp	r1, #0
    b270:	01a00002 	moveq	r0, r2
    b274:	11a00003 	movne	r0, r3
    b278:	e1540000 	cmp	r4, r0
    b27c:	2affffec 	bcs	b234 <CTimer::GetTimeString()+0x94>
    b280:	e30201f4 	movw	r0, #8692	; 0x21f4
    b284:	e3400005 	movt	r0, #5
    b288:	e3a0a000 	mov	sl, #0
    b28c:	ea000001 	b	b298 <CTimer::GetTimeString()+0xf8>
    b290:	e0444003 	sub	r4, r4, r3
    b294:	e28aa001 	add	sl, sl, #1
    b298:	e35a0001 	cmp	sl, #1
    b29c:	13a02000 	movne	r2, #0
    b2a0:	02012001 	andeq	r2, r1, #1
    b2a4:	e3a0301d 	mov	r3, #29
    b2a8:	e3520000 	cmp	r2, #0
    b2ac:	0790310a 	ldreq	r3, [r0, sl, lsl #2]
    b2b0:	e1540003 	cmp	r4, r3
    b2b4:	2afffff5 	bcs	b290 <CTimer::GetTimeString()+0xf0>
    b2b8:	e308251f 	movw	r2, #34079	; 0x851f
    b2bc:	e34521eb 	movt	r2, #20971	; 0x51eb
    b2c0:	e3a01064 	mov	r1, #100	; 0x64
    b2c4:	e3a00010 	mov	r0, #16
    b2c8:	e0832299 	umull	r2, r3, r9, r2
    b2cc:	e1a0b2a3 	lsr	fp, r3, #5
    b2d0:	e06b9b91 	mls	fp, r1, fp, r9
    b2d4:	ebfffeb3 	bl	ada8 <operator new(unsigned int)>
    b2d8:	e1a09000 	mov	r9, r0
    b2dc:	eb000bc3 	bl	e1f0 <CString::CString()>
    b2e0:	e30037b7 	movw	r3, #1975	; 0x7b7
    b2e4:	e1550003 	cmp	r5, r3
    b2e8:	8a00000a 	bhi	b318 <CTimer::GetTimeString()+0x178>
    b2ec:	e1a00009 	mov	r0, r9
    b2f0:	e58db004 	str	fp, [sp, #4]
    b2f4:	e1a03006 	mov	r3, r6
    b2f8:	e58d8000 	str	r8, [sp]
    b2fc:	e1a02007 	mov	r2, r7
    b300:	e30212b0 	movw	r1, #8880	; 0x22b0
    b304:	e3401005 	movt	r1, #5
    b308:	eb000ecb 	bl	ee3c <CString::Format(char const*, ...)>
    b30c:	e1a00009 	mov	r0, r9
    b310:	e28dd014 	add	sp, sp, #20
    b314:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b318:	e30a0aab 	movw	r0, #43691	; 0xaaab
    b31c:	e34a0aaa 	movt	r0, #43690	; 0xaaaa
    b320:	e3a0c018 	mov	ip, #24
    b324:	e3032b5c 	movw	r2, #15196	; 0x3b5c
    b328:	e3402005 	movt	r2, #5
    b32c:	e0810097 	umull	r0, r1, r7, r0
    b330:	e58db00c 	str	fp, [sp, #12]
    b334:	e58d8008 	str	r8, [sp, #8]
    b338:	e2843001 	add	r3, r4, #1
    b33c:	e1a00221 	lsr	r0, r1, #4
    b340:	e3021294 	movw	r1, #8852	; 0x2294
    b344:	e3401005 	movt	r1, #5
    b348:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    b34c:	e067709c 	mls	r7, ip, r0, r7
    b350:	e58d6004 	str	r6, [sp, #4]
    b354:	e1a00009 	mov	r0, r9
    b358:	e58d7000 	str	r7, [sp]
    b35c:	eb000eb6 	bl	ee3c <CString::Format(char const*, ...)>
    b360:	e1a00009 	mov	r0, r9
    b364:	e28dd014 	add	sp, sp, #20
    b368:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b36c:	ebfffe91 	bl	adb8 <EnterCritical>
    b370:	e5943010 	ldr	r3, [r4, #16]
    b374:	e594500c 	ldr	r5, [r4, #12]
    b378:	e3530000 	cmp	r3, #0
    b37c:	e5949004 	ldr	r9, [r4, #4]
    b380:	0affff8e 	beq	b1c0 <CTimer::GetTimeString()+0x20>
    b384:	ebfffe98 	bl	adec <LeaveCritical>
    b388:	eaffff8c 	b	b1c0 <CTimer::GetTimeString()+0x20>

0000b38c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    b38c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b390:	e1a0a000 	mov	sl, r0
    b394:	e1a04002 	mov	r4, r2
    b398:	e24dd00c 	sub	sp, sp, #12
    b39c:	e3a00014 	mov	r0, #20
    b3a0:	e1a06001 	mov	r6, r1
    b3a4:	e1a07003 	mov	r7, r3
    b3a8:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
    b3ac:	ebfffe7d 	bl	ada8 <operator new(unsigned int)>
    b3b0:	e3540000 	cmp	r4, #0
    b3b4:	e59a1004 	ldr	r1, [sl, #4]
    b3b8:	e1a09000 	mov	r9, r0
    b3bc:	e0816006 	add	r6, r1, r6
    b3c0:	0a000042 	beq	b4d0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
    b3c4:	e59a301c 	ldr	r3, [sl, #28]
    b3c8:	e3042d43 	movw	r2, #19779	; 0x4d43
    b3cc:	e3442b54 	movt	r2, #19284	; 0x4b54
    b3d0:	e3530000 	cmp	r3, #0
    b3d4:	e98900d0 	stmib	r9, {r4, r6, r7}
    b3d8:	e5895010 	str	r5, [r9, #16]
    b3dc:	e5892000 	str	r2, [r9]
    b3e0:	1a000038 	bne	b4c8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
    b3e4:	e28a5018 	add	r5, sl, #24
    b3e8:	e1a00005 	mov	r0, r5
    b3ec:	eb001353 	bl	10140 <CPtrList::GetFirst()>
    b3f0:	e2504000 	subs	r4, r0, #0
    b3f4:	0a00002e 	beq	b4b4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    b3f8:	e30232c4 	movw	r3, #8900	; 0x22c4
    b3fc:	e3403005 	movt	r3, #5
    b400:	e302722c 	movw	r7, #8748	; 0x222c
    b404:	e3407005 	movt	r7, #5
    b408:	e3048d43 	movw	r8, #19779	; 0x4d43
    b40c:	e3448b54 	movt	r8, #19284	; 0x4b54
    b410:	e58d3004 	str	r3, [sp, #4]
    b414:	ea000011 	b	b460 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd4>
    b418:	e59bc000 	ldr	ip, [fp]
    b41c:	e30202d4 	movw	r0, #8916	; 0x22d4
    b420:	e3400005 	movt	r0, #5
    b424:	e15c0008 	cmp	ip, r8
    b428:	e3002116 	movw	r2, #278	; 0x116
    b42c:	e1a01007 	mov	r1, r7
    b430:	0a000000 	beq	b438 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xac>
    b434:	eb000808 	bl	d45c <assertion_failed>
    b438:	e59b3008 	ldr	r3, [fp, #8]
    b43c:	e1a01004 	mov	r1, r4
    b440:	e1a00005 	mov	r0, r5
    b444:	e0433006 	sub	r3, r3, r6
    b448:	e3530000 	cmp	r3, #0
    b44c:	ca00000d 	bgt	b488 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
    b450:	eb00133c 	bl	10148 <CPtrList::GetNext(TPtrListElement*)>
    b454:	e3500000 	cmp	r0, #0
    b458:	0a000015 	beq	b4b4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    b45c:	e1a04000 	mov	r4, r0
    b460:	e1a01004 	mov	r1, r4
    b464:	e1a00005 	mov	r0, r5
    b468:	eb00134d 	bl	101a4 <CPtrList::GetPtr(TPtrListElement*)>
    b46c:	e250b000 	subs	fp, r0, #0
    b470:	1affffe8 	bne	b418 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x8c>
    b474:	e3002115 	movw	r2, #277	; 0x115
    b478:	e1a01007 	mov	r1, r7
    b47c:	e59d0004 	ldr	r0, [sp, #4]
    b480:	eb0007f5 	bl	d45c <assertion_failed>
    b484:	eaffffe3 	b	b418 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x8c>
    b488:	e1a01004 	mov	r1, r4
    b48c:	e1a00005 	mov	r0, r5
    b490:	e1a02009 	mov	r2, r9
    b494:	eb001359 	bl	10200 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    b498:	e59a301c 	ldr	r3, [sl, #28]
    b49c:	e3530000 	cmp	r3, #0
    b4a0:	0a000000 	beq	b4a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x11c>
    b4a4:	ebfffe50 	bl	adec <LeaveCritical>
    b4a8:	e1a00009 	mov	r0, r9
    b4ac:	e28dd00c 	add	sp, sp, #12
    b4b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4b4:	e1a01004 	mov	r1, r4
    b4b8:	e1a00005 	mov	r0, r5
    b4bc:	e1a02009 	mov	r2, r9
    b4c0:	eb001394 	bl	10318 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    b4c4:	eafffff3 	b	b498 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
    b4c8:	ebfffe3a 	bl	adb8 <EnterCritical>
    b4cc:	eaffffc4 	b	b3e4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
    b4d0:	e302122c 	movw	r1, #8748	; 0x222c
    b4d4:	e3401005 	movt	r1, #5
    b4d8:	e3010fc0 	movw	r0, #8128	; 0x1fc0
    b4dc:	e3400005 	movt	r0, #5
    b4e0:	e3002105 	movw	r2, #261	; 0x105
    b4e4:	eb0007dc 	bl	d45c <assertion_failed>
    b4e8:	eaffffb5 	b	b3c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x38>

0000b4ec <CTimer::CancelKernelTimer(unsigned int)>:
    b4ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b4f0:	e2514000 	subs	r4, r1, #0
    b4f4:	e1a05000 	mov	r5, r0
    b4f8:	0a000021 	beq	b584 <CTimer::CancelKernelTimer(unsigned int)+0x98>
    b4fc:	e595301c 	ldr	r3, [r5, #28]
    b500:	e3530000 	cmp	r3, #0
    b504:	1a00001c 	bne	b57c <CTimer::CancelKernelTimer(unsigned int)+0x90>
    b508:	e2856018 	add	r6, r5, #24
    b50c:	e1a01004 	mov	r1, r4
    b510:	e1a00006 	mov	r0, r6
    b514:	eb00141d 	bl	10590 <CPtrList::Find(void*)>
    b518:	e2507000 	subs	r7, r0, #0
    b51c:	0a000011 	beq	b568 <CTimer::CancelKernelTimer(unsigned int)+0x7c>
    b520:	e5942000 	ldr	r2, [r4]
    b524:	e3043d43 	movw	r3, #19779	; 0x4d43
    b528:	e3443b54 	movt	r3, #19284	; 0x4b54
    b52c:	e1520003 	cmp	r2, r3
    b530:	0a000005 	beq	b54c <CTimer::CancelKernelTimer(unsigned int)+0x60>
    b534:	e302122c 	movw	r1, #8748	; 0x222c
    b538:	e3401005 	movt	r1, #5
    b53c:	e302026c 	movw	r0, #8812	; 0x226c
    b540:	e3400005 	movt	r0, #5
    b544:	e3002139 	movw	r2, #313	; 0x139
    b548:	eb0007c3 	bl	d45c <assertion_failed>
    b54c:	e1a00006 	mov	r0, r6
    b550:	e1a01007 	mov	r1, r7
    b554:	eb0013b2 	bl	10424 <CPtrList::Remove(TPtrListElement*)>
    b558:	e3a03000 	mov	r3, #0
    b55c:	e5843000 	str	r3, [r4]
    b560:	e1a00004 	mov	r0, r4
    b564:	ebfffe11 	bl	adb0 <operator delete(void*)>
    b568:	e595301c 	ldr	r3, [r5, #28]
    b56c:	e3530000 	cmp	r3, #0
    b570:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    b574:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b578:	eafffe1b 	b	adec <LeaveCritical>
    b57c:	ebfffe0d 	bl	adb8 <EnterCritical>
    b580:	eaffffe0 	b	b508 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    b584:	e302122c 	movw	r1, #8748	; 0x222c
    b588:	e3401005 	movt	r1, #5
    b58c:	e3020260 	movw	r0, #8800	; 0x2260
    b590:	e3400005 	movt	r0, #5
    b594:	e3002132 	movw	r2, #306	; 0x132
    b598:	eb0007af 	bl	d45c <assertion_failed>
    b59c:	eaffffd6 	b	b4fc <CTimer::CancelKernelTimer(unsigned int)+0x10>

0000b5a0 <CTimer::PollKernelTimers()>:
    b5a0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5a4:	e1a06000 	mov	r6, r0
    b5a8:	e590301c 	ldr	r3, [r0, #28]
    b5ac:	e3530000 	cmp	r3, #0
    b5b0:	1a00004e 	bne	b6f0 <CTimer::PollKernelTimers()+0x150>
    b5b4:	e2867018 	add	r7, r6, #24
    b5b8:	e1a00007 	mov	r0, r7
    b5bc:	eb0012df 	bl	10140 <CPtrList::GetFirst()>
    b5c0:	e2505000 	subs	r5, r0, #0
    b5c4:	0a00003f 	beq	b6c8 <CTimer::PollKernelTimers()+0x128>
    b5c8:	e302922c 	movw	r9, #8748	; 0x222c
    b5cc:	e3409005 	movt	r9, #5
    b5d0:	e302a260 	movw	sl, #8800	; 0x2260
    b5d4:	e340a005 	movt	sl, #5
    b5d8:	e3048d43 	movw	r8, #19779	; 0x4d43
    b5dc:	e3448b54 	movt	r8, #19284	; 0x4b54
    b5e0:	ea00000f 	b	b624 <CTimer::PollKernelTimers()+0x84>
    b5e4:	e5945004 	ldr	r5, [r4, #4]
    b5e8:	e3550000 	cmp	r5, #0
    b5ec:	0a00002c 	beq	b6a4 <CTimer::PollKernelTimers()+0x104>
    b5f0:	e5942010 	ldr	r2, [r4, #16]
    b5f4:	e1a00004 	mov	r0, r4
    b5f8:	e594100c 	ldr	r1, [r4, #12]
    b5fc:	e12fff35 	blx	r5
    b600:	e3a03000 	mov	r3, #0
    b604:	e5843000 	str	r3, [r4]
    b608:	e1a00004 	mov	r0, r4
    b60c:	ebfffde7 	bl	adb0 <operator delete(void*)>
    b610:	e596301c 	ldr	r3, [r6, #28]
    b614:	e3530000 	cmp	r3, #0
    b618:	1a000027 	bne	b6bc <CTimer::PollKernelTimers()+0x11c>
    b61c:	e25b5000 	subs	r5, fp, #0
    b620:	0a000028 	beq	b6c8 <CTimer::PollKernelTimers()+0x128>
    b624:	e1a01005 	mov	r1, r5
    b628:	e1a00007 	mov	r0, r7
    b62c:	eb0012dc 	bl	101a4 <CPtrList::GetPtr(TPtrListElement*)>
    b630:	e2504000 	subs	r4, r0, #0
    b634:	0a000028 	beq	b6dc <CTimer::PollKernelTimers()+0x13c>
    b638:	e5943000 	ldr	r3, [r4]
    b63c:	e1530008 	cmp	r3, r8
    b640:	0a000004 	beq	b658 <CTimer::PollKernelTimers()+0xb8>
    b644:	e302026c 	movw	r0, #8812	; 0x226c
    b648:	e3400005 	movt	r0, #5
    b64c:	e300214f 	movw	r2, #335	; 0x14f
    b650:	e1a01009 	mov	r1, r9
    b654:	eb000780 	bl	d45c <assertion_failed>
    b658:	e5962004 	ldr	r2, [r6, #4]
    b65c:	e5943008 	ldr	r3, [r4, #8]
    b660:	e0433002 	sub	r3, r3, r2
    b664:	e3530000 	cmp	r3, #0
    b668:	ca000016 	bgt	b6c8 <CTimer::PollKernelTimers()+0x128>
    b66c:	e1a01005 	mov	r1, r5
    b670:	e1a00007 	mov	r0, r7
    b674:	eb0012b3 	bl	10148 <CPtrList::GetNext(TPtrListElement*)>
    b678:	e1a01005 	mov	r1, r5
    b67c:	e1a0b000 	mov	fp, r0
    b680:	e1a00007 	mov	r0, r7
    b684:	eb001366 	bl	10424 <CPtrList::Remove(TPtrListElement*)>
    b688:	e596301c 	ldr	r3, [r6, #28]
    b68c:	e3530000 	cmp	r3, #0
    b690:	0affffd3 	beq	b5e4 <CTimer::PollKernelTimers()+0x44>
    b694:	ebfffdd4 	bl	adec <LeaveCritical>
    b698:	e5945004 	ldr	r5, [r4, #4]
    b69c:	e3550000 	cmp	r5, #0
    b6a0:	1affffd2 	bne	b5f0 <CTimer::PollKernelTimers()+0x50>
    b6a4:	e3010fc0 	movw	r0, #8128	; 0x1fc0
    b6a8:	e3400005 	movt	r0, #5
    b6ac:	e300215d 	movw	r2, #349	; 0x15d
    b6b0:	e1a01009 	mov	r1, r9
    b6b4:	eb000768 	bl	d45c <assertion_failed>
    b6b8:	eaffffcc 	b	b5f0 <CTimer::PollKernelTimers()+0x50>
    b6bc:	ebfffdbd 	bl	adb8 <EnterCritical>
    b6c0:	e25b5000 	subs	r5, fp, #0
    b6c4:	1affffd6 	bne	b624 <CTimer::PollKernelTimers()+0x84>
    b6c8:	e596301c 	ldr	r3, [r6, #28]
    b6cc:	e3530000 	cmp	r3, #0
    b6d0:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6d4:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6d8:	eafffdc3 	b	adec <LeaveCritical>
    b6dc:	e300214e 	movw	r2, #334	; 0x14e
    b6e0:	e1a01009 	mov	r1, r9
    b6e4:	e1a0000a 	mov	r0, sl
    b6e8:	eb00075b 	bl	d45c <assertion_failed>
    b6ec:	eaffffd1 	b	b638 <CTimer::PollKernelTimers()+0x98>
    b6f0:	ebfffdb0 	bl	adb8 <EnterCritical>
    b6f4:	eaffffae 	b	b5b4 <CTimer::PollKernelTimers()+0x14>

0000b6f8 <CTimer::InterruptHandler()>:
    b6f8:	e3a03a03 	mov	r3, #12288	; 0x3000
    b6fc:	e3433f00 	movt	r3, #16128	; 0x3f00
    b700:	e92d4010 	push	{r4, lr}
    b704:	e1a04000 	mov	r4, r0
    b708:	e5933000 	ldr	r3, [r3]
    b70c:	e3130008 	tst	r3, #8
    b710:	0a000036 	beq	b7f0 <CTimer::InterruptHandler()+0xf8>
    b714:	e3a03a03 	mov	r3, #12288	; 0x3000
    b718:	e3433f00 	movt	r3, #16128	; 0x3f00
    b71c:	e3021710 	movw	r1, #10000	; 0x2710
    b720:	e5932018 	ldr	r2, [r3, #24]
    b724:	e0822001 	add	r2, r2, r1
    b728:	e5832018 	str	r2, [r3, #24]
    b72c:	e5930004 	ldr	r0, [r3, #4]
    b730:	e1520000 	cmp	r2, r0
    b734:	35932004 	ldrcc	r2, [r3, #4]
    b738:	30821001 	addcc	r1, r2, r1
    b73c:	e3a02008 	mov	r2, #8
    b740:	35831018 	strcc	r1, [r3, #24]
    b744:	e3a03a03 	mov	r3, #12288	; 0x3000
    b748:	e3433f00 	movt	r3, #16128	; 0x3f00
    b74c:	e5832000 	str	r2, [r3]
    b750:	e5942010 	ldr	r2, [r4, #16]
    b754:	e3520000 	cmp	r2, #0
    b758:	1a000016 	bne	b7b8 <CTimer::InterruptHandler()+0xc0>
    b75c:	e5943004 	ldr	r3, [r4, #4]
    b760:	e308051f 	movw	r0, #34079	; 0x851f
    b764:	e34501eb 	movt	r0, #20971	; 0x51eb
    b768:	e2833001 	add	r3, r3, #1
    b76c:	e3a0c064 	mov	ip, #100	; 0x64
    b770:	e5843004 	str	r3, [r4, #4]
    b774:	e0810093 	umull	r0, r1, r3, r0
    b778:	e1a012a1 	lsr	r1, r1, #5
    b77c:	e063319c 	mls	r3, ip, r1, r3
    b780:	e3530000 	cmp	r3, #0
    b784:	1a000008 	bne	b7ac <CTimer::InterruptHandler()+0xb4>
    b788:	e5943008 	ldr	r3, [r4, #8]
    b78c:	e2833001 	add	r3, r3, #1
    b790:	e5843008 	str	r3, [r4, #8]
    b794:	e594300c 	ldr	r3, [r4, #12]
    b798:	e2833001 	add	r3, r3, #1
    b79c:	e584300c 	str	r3, [r4, #12]
    b7a0:	e3520000 	cmp	r2, #0
    b7a4:	0a000000 	beq	b7ac <CTimer::InterruptHandler()+0xb4>
    b7a8:	ebfffd8f 	bl	adec <LeaveCritical>
    b7ac:	e1a00004 	mov	r0, r4
    b7b0:	e8bd4010 	pop	{r4, lr}
    b7b4:	eaffff79 	b	b5a0 <CTimer::PollKernelTimers()>
    b7b8:	ebfffd7e 	bl	adb8 <EnterCritical>
    b7bc:	e5943004 	ldr	r3, [r4, #4]
    b7c0:	e308051f 	movw	r0, #34079	; 0x851f
    b7c4:	e34501eb 	movt	r0, #20971	; 0x51eb
    b7c8:	e2833001 	add	r3, r3, #1
    b7cc:	e3a0c064 	mov	ip, #100	; 0x64
    b7d0:	e5843004 	str	r3, [r4, #4]
    b7d4:	e5942010 	ldr	r2, [r4, #16]
    b7d8:	e0810093 	umull	r0, r1, r3, r0
    b7dc:	e1a012a1 	lsr	r1, r1, #5
    b7e0:	e063319c 	mls	r3, ip, r1, r3
    b7e4:	e3530000 	cmp	r3, #0
    b7e8:	1affffec 	bne	b7a0 <CTimer::InterruptHandler()+0xa8>
    b7ec:	eaffffe5 	b	b788 <CTimer::InterruptHandler()+0x90>
    b7f0:	e302122c 	movw	r1, #8748	; 0x222c
    b7f4:	e3401005 	movt	r1, #5
    b7f8:	e30202fc 	movw	r0, #8956	; 0x22fc
    b7fc:	e3400005 	movt	r0, #5
    b800:	e300216f 	movw	r2, #367	; 0x16f
    b804:	eb000714 	bl	d45c <assertion_failed>
    b808:	eaffffc1 	b	b714 <CTimer::InterruptHandler()+0x1c>

0000b80c <CTimer::InterruptHandler(void*)>:
    b80c:	e92d4010 	push	{r4, lr}
    b810:	e2504000 	subs	r4, r0, #0
    b814:	0a000002 	beq	b824 <CTimer::InterruptHandler(void*)+0x18>
    b818:	e1a00004 	mov	r0, r4
    b81c:	e8bd4010 	pop	{r4, lr}
    b820:	eaffffb4 	b	b6f8 <CTimer::InterruptHandler()>
    b824:	e302122c 	movw	r1, #8748	; 0x222c
    b828:	e3401005 	movt	r1, #5
    b82c:	e3020320 	movw	r0, #8992	; 0x2320
    b830:	e3400005 	movt	r0, #5
    b834:	e3002191 	movw	r2, #401	; 0x191
    b838:	eb000707 	bl	d45c <assertion_failed>
    b83c:	e1a00004 	mov	r0, r4
    b840:	e8bd4010 	pop	{r4, lr}
    b844:	eaffffab 	b	b6f8 <CTimer::InterruptHandler()>

0000b848 <CTimer::TuneMsDelay()>:
    b848:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b84c:	e1a06000 	mov	r6, r0
    b850:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    b854:	e24dd00c 	sub	sp, sp, #12
    b858:	e3025710 	movw	r5, #10000	; 0x2710
    b85c:	e5963020 	ldr	r3, [r6, #32]
    b860:	e308451f 	movw	r4, #34079	; 0x851f
    b864:	e34541eb 	movt	r4, #20971	; 0x51eb
    b868:	e5967004 	ldr	r7, [r6, #4]
    b86c:	e0000390 	mul	r0, r0, r3
    b870:	eb000d7e 	bl	ee70 <DelayLoop>
    b874:	e5962004 	ldr	r2, [r6, #4]
    b878:	e5963020 	ldr	r3, [r6, #32]
    b87c:	e3041dd3 	movw	r1, #19923	; 0x4dd3
    b880:	e3411062 	movt	r1, #4194	; 0x1062
    b884:	e0422007 	sub	r2, r2, r7
    b888:	e735f215 	udiv	r5, r5, r2
    b88c:	e0030593 	mul	r3, r3, r5
    b890:	e0832394 	umull	r2, r3, r4, r3
    b894:	e1a032a3 	lsr	r3, r3, #5
    b898:	e2832f7d 	add	r2, r3, #500	; 0x1f4
    b89c:	e5863020 	str	r3, [r6, #32]
    b8a0:	e0832291 	umull	r2, r3, r1, r2
    b8a4:	e1a03323 	lsr	r3, r3, #6
    b8a8:	e5863024 	str	r3, [r6, #36]	; 0x24
    b8ac:	eb000869 	bl	da58 <CLogger::Get()>
    b8b0:	e0832495 	umull	r2, r3, r5, r4
    b8b4:	e3a0c064 	mov	ip, #100	; 0x64
    b8b8:	e0841594 	umull	r1, r4, r4, r5
    b8bc:	e1a012a3 	lsr	r1, r3, #5
    b8c0:	e3a02003 	mov	r2, #3
    b8c4:	e1a042a4 	lsr	r4, r4, #5
    b8c8:	e302332c 	movw	r3, #9004	; 0x232c
    b8cc:	e3403005 	movt	r3, #5
    b8d0:	e065519c 	mls	r5, ip, r1, r5
    b8d4:	e58d4000 	str	r4, [sp]
    b8d8:	e59f100c 	ldr	r1, [pc, #12]	; b8ec <CTimer::TuneMsDelay()+0xa4>
    b8dc:	e58d5004 	str	r5, [sp, #4]
    b8e0:	eb000939 	bl	ddcc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b8e4:	e28dd00c 	add	sp, sp, #12
    b8e8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b8ec:	00052224 	.word	0x00052224

0000b8f0 <CTimer::Initialize()>:
    b8f0:	e92d4010 	push	{r4, lr}
    b8f4:	e1a04000 	mov	r4, r0
    b8f8:	e5900000 	ldr	r0, [r0]
    b8fc:	e3500000 	cmp	r0, #0
    b900:	0a000011 	beq	b94c <CTimer::Initialize()+0x5c>
    b904:	e1a03004 	mov	r3, r4
    b908:	e3a01003 	mov	r1, #3
    b90c:	e30b280c 	movw	r2, #47116	; 0xb80c
    b910:	e3402000 	movt	r2, #0
    b914:	eb000e64 	bl	f2ac <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    b918:	e3a02a03 	mov	r2, #12288	; 0x3000
    b91c:	e3432f00 	movt	r2, #16128	; 0x3f00
    b920:	e3a03df2 	mov	r3, #15488	; 0x3c80
    b924:	e34f3e36 	movt	r3, #65078	; 0xfe36
    b928:	e1a00004 	mov	r0, r4
    b92c:	e5823004 	str	r3, [r2, #4]
    b930:	e5923004 	ldr	r3, [r2, #4]
    b934:	e2833c27 	add	r3, r3, #9984	; 0x2700
    b938:	e2833010 	add	r3, r3, #16
    b93c:	e5823018 	str	r3, [r2, #24]
    b940:	ebffffc0 	bl	b848 <CTimer::TuneMsDelay()>
    b944:	e3a00001 	mov	r0, #1
    b948:	e8bd8010 	pop	{r4, pc}
    b94c:	e302122c 	movw	r1, #8748	; 0x222c
    b950:	e3401005 	movt	r1, #5
    b954:	e3020248 	movw	r0, #8776	; 0x2248
    b958:	e3400005 	movt	r0, #5
    b95c:	e3a02055 	mov	r2, #85	; 0x55
    b960:	eb0006bd 	bl	d45c <assertion_failed>
    b964:	e5940000 	ldr	r0, [r4]
    b968:	eaffffe5 	b	b904 <CTimer::Initialize()+0x14>

0000b96c <CTimer::SimpleMsDelay(unsigned int)>:
    b96c:	e2503000 	subs	r3, r0, #0
    b970:	012fff1e 	bxeq	lr
    b974:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    b978:	e0000390 	mul	r0, r0, r3
    b97c:	e3500000 	cmp	r0, #0
    b980:	012fff1e 	bxeq	lr
    b984:	e3a03a03 	mov	r3, #12288	; 0x3000
    b988:	e3433f00 	movt	r3, #16128	; 0x3f00
    b98c:	e2800001 	add	r0, r0, #1
    b990:	e1a01003 	mov	r1, r3
    b994:	e5932004 	ldr	r2, [r3, #4]
    b998:	e5913004 	ldr	r3, [r1, #4]
    b99c:	e0433002 	sub	r3, r3, r2
    b9a0:	e1500003 	cmp	r0, r3
    b9a4:	8afffffb 	bhi	b998 <CTimer::SimpleMsDelay(unsigned int)+0x2c>
    b9a8:	e12fff1e 	bx	lr

0000b9ac <CTimer::SimpleusDelay(unsigned int)>:
    b9ac:	e3500000 	cmp	r0, #0
    b9b0:	012fff1e 	bxeq	lr
    b9b4:	e3a03a03 	mov	r3, #12288	; 0x3000
    b9b8:	e3433f00 	movt	r3, #16128	; 0x3f00
    b9bc:	e2800001 	add	r0, r0, #1
    b9c0:	e1a01003 	mov	r1, r3
    b9c4:	e5932004 	ldr	r2, [r3, #4]
    b9c8:	e5913004 	ldr	r3, [r1, #4]
    b9cc:	e0433002 	sub	r3, r3, r2
    b9d0:	e1500003 	cmp	r0, r3
    b9d4:	8afffffb 	bhi	b9c8 <CTimer::SimpleusDelay(unsigned int)+0x1c>
    b9d8:	e12fff1e 	bx	lr

0000b9dc <CTimer::IsLeapYear(unsigned int)>:
    b9dc:	e308251f 	movw	r2, #34079	; 0x851f
    b9e0:	e34521eb 	movt	r2, #20971	; 0x51eb
    b9e4:	e3a01064 	mov	r1, #100	; 0x64
    b9e8:	e083c092 	umull	ip, r3, r2, r0
    b9ec:	e1a032a3 	lsr	r3, r3, #5
    b9f0:	e0630391 	mls	r3, r1, r3, r0
    b9f4:	e3530000 	cmp	r3, #0
    b9f8:	0a000003 	beq	ba0c <CTimer::IsLeapYear(unsigned int)+0x30>
    b9fc:	e3100003 	tst	r0, #3
    ba00:	03a00001 	moveq	r0, #1
    ba04:	13a00000 	movne	r0, #0
    ba08:	e12fff1e 	bx	lr
    ba0c:	e0832290 	umull	r2, r3, r0, r2
    ba10:	e3a02e19 	mov	r2, #400	; 0x190
    ba14:	e1a033a3 	lsr	r3, r3, #7
    ba18:	e0600392 	mls	r0, r2, r3, r0
    ba1c:	e16f0f10 	clz	r0, r0
    ba20:	e1a002a0 	lsr	r0, r0, #5
    ba24:	e12fff1e 	bx	lr

0000ba28 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    ba28:	e3500001 	cmp	r0, #1
    ba2c:	0a000003 	beq	ba40 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    ba30:	e30231f4 	movw	r3, #8692	; 0x21f4
    ba34:	e3403005 	movt	r3, #5
    ba38:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    ba3c:	e12fff1e 	bx	lr
    ba40:	e308251f 	movw	r2, #34079	; 0x851f
    ba44:	e34521eb 	movt	r2, #20971	; 0x51eb
    ba48:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ba4c:	e3a0e064 	mov	lr, #100	; 0x64
    ba50:	e0832291 	umull	r2, r3, r1, r2
    ba54:	e1a0c2a3 	lsr	ip, r3, #5
    ba58:	e06c1c9e 	mls	ip, lr, ip, r1
    ba5c:	e35c0000 	cmp	ip, #0
    ba60:	0a000008 	beq	ba88 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    ba64:	e3110003 	tst	r1, #3
    ba68:	03a01001 	moveq	r1, #1
    ba6c:	13a01000 	movne	r1, #0
    ba70:	e3510000 	cmp	r1, #0
    ba74:	13a0001d 	movne	r0, #29
    ba78:	030231f4 	movweq	r3, #8692	; 0x21f4
    ba7c:	03403005 	movteq	r3, #5
    ba80:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    ba84:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    ba88:	e1a033a3 	lsr	r3, r3, #7
    ba8c:	e3a02e19 	mov	r2, #400	; 0x190
    ba90:	e0611392 	mls	r1, r2, r3, r1
    ba94:	e16f1f11 	clz	r1, r1
    ba98:	e1a012a1 	lsr	r1, r1, #5
    ba9c:	eafffff3 	b	ba70 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

0000baa0 <CTimer::Get()>:
    baa0:	e92d4010 	push	{r4, lr}
    baa4:	e3034c58 	movw	r4, #15448	; 0x3c58
    baa8:	e3404005 	movt	r4, #5
    baac:	e5940000 	ldr	r0, [r4]
    bab0:	e3500000 	cmp	r0, #0
    bab4:	18bd8010 	popne	{r4, pc}
    bab8:	e30021d6 	movw	r2, #470	; 0x1d6
    babc:	e302122c 	movw	r1, #8748	; 0x222c
    bac0:	e3401005 	movt	r1, #5
    bac4:	e3020344 	movw	r0, #9028	; 0x2344
    bac8:	e3400005 	movt	r0, #5
    bacc:	eb000662 	bl	d45c <assertion_failed>
    bad0:	e5940000 	ldr	r0, [r4]
    bad4:	e8bd8010 	pop	{r4, pc}

0000bad8 <memcpy>:
    bad8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    badc:	e352007f 	cmp	r2, #127	; 0x7f
    bae0:	9a00000b 	bls	bb14 <memcpy+0x3c>
    bae4:	e3110003 	tst	r1, #3
    bae8:	1a000009 	bne	bb14 <memcpy+0x3c>
    baec:	e3100003 	tst	r0, #3
    baf0:	1a000007 	bne	bb14 <memcpy+0x3c>
    baf4:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    baf8:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    bafc:	e2422020 	sub	r2, r2, #32
    bb00:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    bb04:	f5d1f040 	pld	[r1, #64]	; 0x40
    bb08:	e352001f 	cmp	r2, #31
    bb0c:	8afffff9 	bhi	baf8 <memcpy+0x20>
    bb10:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    bb14:	e3520000 	cmp	r2, #0
    bb18:	0a000003 	beq	bb2c <memcpy+0x54>
    bb1c:	e4d13001 	ldrb	r3, [r1], #1
    bb20:	e2522001 	subs	r2, r2, #1
    bb24:	e4c03001 	strb	r3, [r0], #1
    bb28:	1afffffb 	bne	bb1c <memcpy+0x44>
    bb2c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    bb30:	e12fff1e 	bx	lr

0000bb34 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    bb34:	e3a01000 	mov	r1, #0
    bb38:	e3a0c00a 	mov	ip, #10
    bb3c:	ea000009 	b	bb68 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
    bb40:	e3530009 	cmp	r3, #9
    bb44:	8a00000f 	bhi	bb88 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
    bb48:	e3720001 	cmn	r2, #1
    bb4c:	13a03000 	movne	r3, #0
    bb50:	03a03001 	moveq	r3, #1
    bb54:	e1510002 	cmp	r1, r2
    bb58:	83833001 	orrhi	r3, r3, #1
    bb5c:	e1a01002 	mov	r1, r2
    bb60:	e3530000 	cmp	r3, #0
    bb64:	1a000007 	bne	bb88 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
    bb68:	e0d020d1 	ldrsb	r2, [r0], #1
    bb6c:	e3520000 	cmp	r2, #0
    bb70:	e2423030 	sub	r3, r2, #48	; 0x30
    bb74:	e022319c 	mla	r2, ip, r1, r3
    bb78:	e6ef3073 	uxtb	r3, r3
    bb7c:	1affffef 	bne	bb40 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0xc>
    bb80:	e1a00001 	mov	r0, r1
    bb84:	e12fff1e 	bx	lr
    bb88:	e3e01000 	mvn	r1, #0
    bb8c:	e1a00001 	mov	r0, r1
    bb90:	e12fff1e 	bx	lr

0000bb94 <CKernelOptions::~CKernelOptions()>:
    bb94:	e3033c5c 	movw	r3, #15452	; 0x3c5c
    bb98:	e3403005 	movt	r3, #5
    bb9c:	e3a02000 	mov	r2, #0
    bba0:	e5832000 	str	r2, [r3]
    bba4:	e12fff1e 	bx	lr

0000bba8 <CKernelOptions::GetWidth() const>:
    bba8:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    bbac:	e12fff1e 	bx	lr

0000bbb0 <CKernelOptions::GetHeight() const>:
    bbb0:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    bbb4:	e12fff1e 	bx	lr

0000bbb8 <CKernelOptions::GetLogDevice() const>:
    bbb8:	e2800e81 	add	r0, r0, #2064	; 0x810
    bbbc:	e2800008 	add	r0, r0, #8
    bbc0:	e12fff1e 	bx	lr

0000bbc4 <CKernelOptions::GetLogLevel() const>:
    bbc4:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    bbc8:	e12fff1e 	bx	lr

0000bbcc <CKernelOptions::GetKeyMap() const>:
    bbcc:	e2800e83 	add	r0, r0, #2096	; 0x830
    bbd0:	e12fff1e 	bx	lr

0000bbd4 <CKernelOptions::GetUSBPowerDelay() const>:
    bbd4:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    bbd8:	e12fff1e 	bx	lr

0000bbdc <CKernelOptions::GetCPUSpeed() const>:
    bbdc:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    bbe0:	e12fff1e 	bx	lr

0000bbe4 <CKernelOptions::GetSoCMaxTemp() const>:
    bbe4:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
    bbe8:	e12fff1e 	bx	lr

0000bbec <CKernelOptions::Get()>:
    bbec:	e3033c5c 	movw	r3, #15452	; 0x3c5c
    bbf0:	e3403005 	movt	r3, #5
    bbf4:	e5930000 	ldr	r0, [r3]
    bbf8:	e12fff1e 	bx	lr

0000bbfc <CKernelOptions::GetToken()>:
    bbfc:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    bc00:	e1d320d0 	ldrsb	r2, [r3]
    bc04:	e3520000 	cmp	r2, #0
    bc08:	1a000005 	bne	bc24 <CKernelOptions::GetToken()+0x28>
    bc0c:	ea000016 	b	bc6c <CKernelOptions::GetToken()+0x70>
    bc10:	e2833001 	add	r3, r3, #1
    bc14:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    bc18:	e1d320d0 	ldrsb	r2, [r3]
    bc1c:	e3520000 	cmp	r2, #0
    bc20:	0a000011 	beq	bc6c <CKernelOptions::GetToken()+0x70>
    bc24:	e3520020 	cmp	r2, #32
    bc28:	0afffff8 	beq	bc10 <CKernelOptions::GetToken()+0x14>
    bc2c:	e1a02003 	mov	r2, r3
    bc30:	ea000000 	b	bc38 <CKernelOptions::GetToken()+0x3c>
    bc34:	e1a02001 	mov	r2, r1
    bc38:	e2821001 	add	r1, r2, #1
    bc3c:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    bc40:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    bc44:	e35c0000 	cmp	ip, #0
    bc48:	0a000008 	beq	bc70 <CKernelOptions::GetToken()+0x74>
    bc4c:	e35c0020 	cmp	ip, #32
    bc50:	1afffff7 	bne	bc34 <CKernelOptions::GetToken()+0x38>
    bc54:	e2822002 	add	r2, r2, #2
    bc58:	e3a0c000 	mov	ip, #0
    bc5c:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    bc60:	e1a00003 	mov	r0, r3
    bc64:	e5c1c000 	strb	ip, [r1]
    bc68:	e12fff1e 	bx	lr
    bc6c:	e3a03000 	mov	r3, #0
    bc70:	e1a00003 	mov	r0, r3
    bc74:	e12fff1e 	bx	lr

0000bc78 <CKernelOptions::CKernelOptions()>:
    bc78:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc7c:	e1a05000 	mov	r5, r0
    bc80:	e2807e81 	add	r7, r0, #2064	; 0x810
    bc84:	e3a04000 	mov	r4, #0
    bc88:	e3a02004 	mov	r2, #4
    bc8c:	e3a0303c 	mov	r3, #60	; 0x3c
    bc90:	e2877008 	add	r7, r7, #8
    bc94:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    bc98:	e24dd01c 	sub	sp, sp, #28
    bc9c:	e585383c 	str	r3, [r5, #2108]	; 0x83c
    bca0:	e1a00007 	mov	r0, r7
    bca4:	e3021384 	movw	r1, #9092	; 0x2384
    bca8:	e3401005 	movt	r1, #5
    bcac:	e5854810 	str	r4, [r5, #2064]	; 0x810
    bcb0:	e2859e83 	add	r9, r5, #2096	; 0x830
    bcb4:	e5854814 	str	r4, [r5, #2068]	; 0x814
    bcb8:	e5854834 	str	r4, [r5, #2100]	; 0x834
    bcbc:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
    bcc0:	eb0013f4 	bl	10c98 <strcpy>
    bcc4:	e1a00009 	mov	r0, r9
    bcc8:	e302138c 	movw	r1, #9100	; 0x238c
    bccc:	e3401005 	movt	r1, #5
    bcd0:	eb0013f0 	bl	10c98 <strcpy>
    bcd4:	e3033c5c 	movw	r3, #15452	; 0x3c5c
    bcd8:	e3403005 	movt	r3, #5
    bcdc:	e28d0010 	add	r0, sp, #16
    bce0:	e5835000 	str	r5, [r3]
    bce4:	ebfff79c 	bl	9b5c <CBcmPropertyTags::CBcmPropertyTags()>
    bce8:	e58d4000 	str	r4, [sp]
    bcec:	e1a02005 	mov	r2, r5
    bcf0:	e28d0010 	add	r0, sp, #16
    bcf4:	e3a01001 	mov	r1, #1
    bcf8:	e3401005 	movt	r1, #5
    bcfc:	e300380c 	movw	r3, #2060	; 0x80c
    bd00:	ebfff7dd 	bl	9c7c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    bd04:	e1500004 	cmp	r0, r4
    bd08:	0a000040 	beq	be10 <CKernelOptions::CKernelOptions()+0x198>
    bd0c:	e5953008 	ldr	r3, [r5, #8]
    bd10:	e3530b02 	cmp	r3, #2048	; 0x800
    bd14:	2a00003d 	bcs	be10 <CKernelOptions::CKernelOptions()+0x198>
    bd18:	e0853003 	add	r3, r5, r3
    bd1c:	e285200c 	add	r2, r5, #12
    bd20:	e30263e0 	movw	r6, #9184	; 0x23e0
    bd24:	e3406005 	movt	r6, #5
    bd28:	e3028390 	movw	r8, #9104	; 0x2390
    bd2c:	e3408005 	movt	r8, #5
    bd30:	e302a398 	movw	sl, #9112	; 0x2398
    bd34:	e340a005 	movt	sl, #5
    bd38:	e5c3400c 	strb	r4, [r3, #12]
    bd3c:	e585280c 	str	r2, [r5, #2060]	; 0x80c
    bd40:	e1a00005 	mov	r0, r5
    bd44:	ebffffac 	bl	bbfc <CKernelOptions::GetToken()>
    bd48:	e250b000 	subs	fp, r0, #0
    bd4c:	0a00002f 	beq	be10 <CKernelOptions::CKernelOptions()+0x198>
    bd50:	e1db30d0 	ldrsb	r3, [fp]
    bd54:	e3530000 	cmp	r3, #0
    bd58:	0a000008 	beq	bd80 <CKernelOptions::CKernelOptions()+0x108>
    bd5c:	e353003d 	cmp	r3, #61	; 0x3d
    bd60:	e1a0400b 	mov	r4, fp
    bd64:	1a000002 	bne	bd74 <CKernelOptions::CKernelOptions()+0xfc>
    bd68:	ea00002d 	b	be24 <CKernelOptions::CKernelOptions()+0x1ac>
    bd6c:	e353003d 	cmp	r3, #61	; 0x3d
    bd70:	0a00002b 	beq	be24 <CKernelOptions::CKernelOptions()+0x1ac>
    bd74:	e1f430d1 	ldrsb	r3, [r4, #1]!
    bd78:	e3530000 	cmp	r3, #0
    bd7c:	1afffffa 	bne	bd6c <CKernelOptions::CKernelOptions()+0xf4>
    bd80:	e1a01006 	mov	r1, r6
    bd84:	e1a0000b 	mov	r0, fp
    bd88:	eb0013a7 	bl	10c2c <strcmp>
    bd8c:	e3500000 	cmp	r0, #0
    bd90:	0affffea 	beq	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    bd94:	e1a01008 	mov	r1, r8
    bd98:	e1a0000b 	mov	r0, fp
    bd9c:	eb0013a2 	bl	10c2c <strcmp>
    bda0:	e3500000 	cmp	r0, #0
    bda4:	13a03000 	movne	r3, #0
    bda8:	0affffe4 	beq	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    bdac:	e1a0100a 	mov	r1, sl
    bdb0:	e1a0000b 	mov	r0, fp
    bdb4:	e58d300c 	str	r3, [sp, #12]
    bdb8:	eb00139b 	bl	10c2c <strcmp>
    bdbc:	e2504000 	subs	r4, r0, #0
    bdc0:	e59d300c 	ldr	r3, [sp, #12]
    bdc4:	0a00002a 	beq	be74 <CKernelOptions::CKernelOptions()+0x1fc>
    bdc8:	e30213a0 	movw	r1, #9120	; 0x23a0
    bdcc:	e3401005 	movt	r1, #5
    bdd0:	e1a0000b 	mov	r0, fp
    bdd4:	e58d300c 	str	r3, [sp, #12]
    bdd8:	eb001393 	bl	10c2c <strcmp>
    bddc:	e3500000 	cmp	r0, #0
    bde0:	e59d300c 	ldr	r3, [sp, #12]
    bde4:	1a000028 	bne	be8c <CKernelOptions::CKernelOptions()+0x214>
    bde8:	e3530000 	cmp	r3, #0
    bdec:	0affffd3 	beq	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    bdf0:	e1d320d0 	ldrsb	r2, [r3]
    bdf4:	e3520000 	cmp	r2, #0
    bdf8:	0affffd0 	beq	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    bdfc:	e1a00003 	mov	r0, r3
    be00:	ebffff4b 	bl	bb34 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    be04:	e3500004 	cmp	r0, #4
    be08:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    be0c:	eaffffcb 	b	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    be10:	e28d0010 	add	r0, sp, #16
    be14:	ebfff756 	bl	9b74 <CBcmPropertyTags::~CBcmPropertyTags()>
    be18:	e1a00005 	mov	r0, r5
    be1c:	e28dd01c 	add	sp, sp, #28
    be20:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be24:	e3a03000 	mov	r3, #0
    be28:	e1a01006 	mov	r1, r6
    be2c:	e5c43000 	strb	r3, [r4]
    be30:	e1a0000b 	mov	r0, fp
    be34:	eb00137c 	bl	10c2c <strcmp>
    be38:	e3500000 	cmp	r0, #0
    be3c:	e2843001 	add	r3, r4, #1
    be40:	1a000058 	bne	bfa8 <CKernelOptions::CKernelOptions()+0x330>
    be44:	e3530000 	cmp	r3, #0
    be48:	0affffbc 	beq	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    be4c:	e1d420d1 	ldrsb	r2, [r4, #1]
    be50:	e3520000 	cmp	r2, #0
    be54:	0affffb9 	beq	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    be58:	e1a00003 	mov	r0, r3
    be5c:	ebffff34 	bl	bb34 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    be60:	e300353c 	movw	r3, #1340	; 0x53c
    be64:	e2402d0a 	sub	r2, r0, #640	; 0x280
    be68:	e1520003 	cmp	r2, r3
    be6c:	95850810 	strls	r0, [r5, #2064]	; 0x810
    be70:	eaffffb2 	b	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    be74:	e1a01003 	mov	r1, r3
    be78:	e3a02013 	mov	r2, #19
    be7c:	e1a00007 	mov	r0, r7
    be80:	eb00138f 	bl	10cc4 <strncpy>
    be84:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    be88:	eaffffac 	b	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    be8c:	e30213ac 	movw	r1, #9132	; 0x23ac
    be90:	e3401005 	movt	r1, #5
    be94:	e1a0000b 	mov	r0, fp
    be98:	e58d300c 	str	r3, [sp, #12]
    be9c:	eb001362 	bl	10c2c <strcmp>
    bea0:	e2504000 	subs	r4, r0, #0
    bea4:	e59d300c 	ldr	r3, [sp, #12]
    bea8:	1a000005 	bne	bec4 <CKernelOptions::CKernelOptions()+0x24c>
    beac:	e1a01003 	mov	r1, r3
    beb0:	e3a02002 	mov	r2, #2
    beb4:	e1a00009 	mov	r0, r9
    beb8:	eb001381 	bl	10cc4 <strncpy>
    bebc:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    bec0:	eaffff9e 	b	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    bec4:	e30213b4 	movw	r1, #9140	; 0x23b4
    bec8:	e3401005 	movt	r1, #5
    becc:	e1a0000b 	mov	r0, fp
    bed0:	e58d300c 	str	r3, [sp, #12]
    bed4:	eb001354 	bl	10c2c <strcmp>
    bed8:	e3500000 	cmp	r0, #0
    bedc:	e59d300c 	ldr	r3, [sp, #12]
    bee0:	1a00000b 	bne	bf14 <CKernelOptions::CKernelOptions()+0x29c>
    bee4:	e3530000 	cmp	r3, #0
    bee8:	0affff94 	beq	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    beec:	e1d320d0 	ldrsb	r2, [r3]
    bef0:	e3520000 	cmp	r2, #0
    bef4:	0affff91 	beq	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    bef8:	e1a00003 	mov	r0, r3
    befc:	ebffff0c 	bl	bb34 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    bf00:	e3013e78 	movw	r3, #7800	; 0x1e78
    bf04:	e24020c8 	sub	r2, r0, #200	; 0xc8
    bf08:	e1520003 	cmp	r2, r3
    bf0c:	95850834 	strls	r0, [r5, #2100]	; 0x834
    bf10:	eaffff8a 	b	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    bf14:	e30213c4 	movw	r1, #9156	; 0x23c4
    bf18:	e3401005 	movt	r1, #5
    bf1c:	e1a0000b 	mov	r0, fp
    bf20:	e58d300c 	str	r3, [sp, #12]
    bf24:	eb001340 	bl	10c2c <strcmp>
    bf28:	e3500000 	cmp	r0, #0
    bf2c:	e59d300c 	ldr	r3, [sp, #12]
    bf30:	1a000007 	bne	bf54 <CKernelOptions::CKernelOptions()+0x2dc>
    bf34:	e1a00003 	mov	r0, r3
    bf38:	e30213cc 	movw	r1, #9164	; 0x23cc
    bf3c:	e3401005 	movt	r1, #5
    bf40:	eb001339 	bl	10c2c <strcmp>
    bf44:	e3500000 	cmp	r0, #0
    bf48:	03a03001 	moveq	r3, #1
    bf4c:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    bf50:	eaffff7a 	b	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    bf54:	e1a0000b 	mov	r0, fp
    bf58:	e30213d4 	movw	r1, #9172	; 0x23d4
    bf5c:	e3401005 	movt	r1, #5
    bf60:	e58d300c 	str	r3, [sp, #12]
    bf64:	eb001330 	bl	10c2c <strcmp>
    bf68:	e59d300c 	ldr	r3, [sp, #12]
    bf6c:	e2902000 	adds	r2, r0, #0
    bf70:	13a02001 	movne	r2, #1
    bf74:	e3530000 	cmp	r3, #0
    bf78:	03822001 	orreq	r2, r2, #1
    bf7c:	e3520000 	cmp	r2, #0
    bf80:	1affff6e 	bne	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    bf84:	e1d320d0 	ldrsb	r2, [r3]
    bf88:	e3520000 	cmp	r2, #0
    bf8c:	0affff6b 	beq	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    bf90:	e1a00003 	mov	r0, r3
    bf94:	ebfffee6 	bl	bb34 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    bf98:	e2403028 	sub	r3, r0, #40	; 0x28
    bf9c:	e3530026 	cmp	r3, #38	; 0x26
    bfa0:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
    bfa4:	eaffff65 	b	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    bfa8:	e1a01008 	mov	r1, r8
    bfac:	e1a0000b 	mov	r0, fp
    bfb0:	e58d300c 	str	r3, [sp, #12]
    bfb4:	eb00131c 	bl	10c2c <strcmp>
    bfb8:	e3500000 	cmp	r0, #0
    bfbc:	e59d300c 	ldr	r3, [sp, #12]
    bfc0:	1affff79 	bne	bdac <CKernelOptions::CKernelOptions()+0x134>
    bfc4:	e3530000 	cmp	r3, #0
    bfc8:	0affff5c 	beq	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    bfcc:	e1d420d1 	ldrsb	r2, [r4, #1]
    bfd0:	e3520000 	cmp	r2, #0
    bfd4:	0affff59 	beq	bd40 <CKernelOptions::CKernelOptions()+0xc8>
    bfd8:	e1a00003 	mov	r0, r3
    bfdc:	ebfffed4 	bl	bb34 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    bfe0:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    bfe4:	e3530f96 	cmp	r3, #600	; 0x258
    bfe8:	95850814 	strls	r0, [r5, #2068]	; 0x814
    bfec:	eaffff53 	b	bd40 <CKernelOptions::CKernelOptions()+0xc8>

0000bff0 <CKernelOptions::GetOptionValue(char*)>:
    bff0:	e1d030d0 	ldrsb	r3, [r0]
    bff4:	e3530000 	cmp	r3, #0
    bff8:	1a000003 	bne	c00c <CKernelOptions::GetOptionValue(char*)+0x1c>
    bffc:	ea000007 	b	c020 <CKernelOptions::GetOptionValue(char*)+0x30>
    c000:	e1f030d1 	ldrsb	r3, [r0, #1]!
    c004:	e3530000 	cmp	r3, #0
    c008:	0a000004 	beq	c020 <CKernelOptions::GetOptionValue(char*)+0x30>
    c00c:	e353003d 	cmp	r3, #61	; 0x3d
    c010:	1afffffa 	bne	c000 <CKernelOptions::GetOptionValue(char*)+0x10>
    c014:	e3a02000 	mov	r2, #0
    c018:	e2803001 	add	r3, r0, #1
    c01c:	e5c02000 	strb	r2, [r0]
    c020:	e1a00003 	mov	r0, r3
    c024:	e12fff1e 	bx	lr

0000c028 <CKernelOptions::GetDecimal(char*)>:
    c028:	e2503000 	subs	r3, r0, #0
    c02c:	0a000002 	beq	c03c <CKernelOptions::GetDecimal(char*)+0x14>
    c030:	e1d330d0 	ldrsb	r3, [r3]
    c034:	e3530000 	cmp	r3, #0
    c038:	1a000001 	bne	c044 <CKernelOptions::GetDecimal(char*)+0x1c>
    c03c:	e3e00000 	mvn	r0, #0
    c040:	e12fff1e 	bx	lr
    c044:	eafffeba 	b	bb34 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000c048 <CPageTable::CPageTable()>:
    c048:	e92d4010 	push	{r4, lr}
    c04c:	e1a04000 	mov	r4, r0
    c050:	e3a01000 	mov	r1, #0
    c054:	e3a029b2 	mov	r2, #2916352	; 0x2c8000
    c058:	e1a0c001 	mov	ip, r1
    c05c:	e1a03002 	mov	r3, r2
    c060:	e3a0e002 	mov	lr, #2
    c064:	e3a00001 	mov	r0, #1
    c068:	e8840006 	stm	r4, {r1, r2}
    c06c:	e5d32000 	ldrb	r2, [r3]
    c070:	e35c0b01 	cmp	ip, #1024	; 0x400
    c074:	e5d31002 	ldrb	r1, [r3, #2]
    c078:	e2833004 	add	r3, r3, #4
    c07c:	e7c1201e 	bfi	r2, lr, #0, #2
    c080:	e3811001 	orr	r1, r1, #1
    c084:	e6ef2072 	uxtb	r2, r2
    c088:	e20110f9 	and	r1, r1, #249	; 0xf9
    c08c:	e3822004 	orr	r2, r2, #4
    c090:	e7c3119f 	bfc	r1, #3, #1
    c094:	e20220f7 	and	r2, r2, #247	; 0xf7
    c098:	e5431002 	strb	r1, [r3, #-2]
    c09c:	e7c4221f 	bfc	r2, #4, #1
    c0a0:	e5432004 	strb	r2, [r3, #-4]
    c0a4:	e15310b2 	ldrh	r1, [r3, #-2]
    c0a8:	e15320b4 	ldrh	r2, [r3, #-4]
    c0ac:	e7cf121c 	bfi	r1, ip, #4, #12
    c0b0:	e28cc001 	add	ip, ip, #1
    c0b4:	e7c8229f 	bfc	r2, #5, #4
    c0b8:	e14310b2 	strh	r1, [r3, #-2]
    c0bc:	e14320b4 	strh	r2, [r3, #-4]
    c0c0:	e1a02422 	lsr	r2, r2, #8
    c0c4:	e20220fd 	and	r2, r2, #253	; 0xfd
    c0c8:	e7c32110 	bfi	r2, r0, #2, #2
    c0cc:	e202208f 	and	r2, r2, #143	; 0x8f
    c0d0:	e7c7239f 	bfc	r2, #7, #1
    c0d4:	e5432003 	strb	r2, [r3, #-3]
    c0d8:	25532004 	ldrbcs	r2, [r3, #-4]
    c0dc:	23822010 	orrcs	r2, r2, #16
    c0e0:	25432004 	strbcs	r2, [r3, #-4]
    c0e4:	e35c0a01 	cmp	ip, #4096	; 0x1000
    c0e8:	1affffdf 	bne	c06c <CPageTable::CPageTable()+0x24>
    c0ec:	eb000fcb 	bl	10020 <CleanDataCache>
    c0f0:	e1a00004 	mov	r0, r4
    c0f4:	e8bd8010 	pop	{r4, pc}

0000c0f8 <CPageTable::CPageTable(unsigned int)>:
    c0f8:	e3a03001 	mov	r3, #1
    c0fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c100:	e1a04000 	mov	r4, r0
    c104:	e5803000 	str	r3, [r0]
    c108:	e1a05001 	mov	r5, r1
    c10c:	eb0011e7 	bl	108b0 <palloc>
    c110:	e3500000 	cmp	r0, #0
    c114:	e5840004 	str	r0, [r4, #4]
    c118:	0a00003e 	beq	c218 <CPageTable::CPageTable(unsigned int)+0x120>
    c11c:	e7eb3050 	ubfx	r3, r0, #0, #12
    c120:	e3530000 	cmp	r3, #0
    c124:	1a000033 	bne	c1f8 <CPageTable::CPageTable(unsigned int)+0x100>
    c128:	e3a02000 	mov	r2, #0
    c12c:	e301e3dc 	movw	lr, #5084	; 0x13dc
    c130:	e340e001 	movt	lr, #1
    c134:	e1a08002 	mov	r8, r2
    c138:	e3a07002 	mov	r7, #2
    c13c:	e3a06001 	mov	r6, #1
    c140:	ea000009 	b	c16c <CPageTable::CPageTable(unsigned int)+0x74>
    c144:	e6ef3071 	uxtb	r3, r1
    c148:	e5d01000 	ldrb	r1, [r0]
    c14c:	e3833001 	orr	r3, r3, #1
    c150:	e7c31198 	bfi	r1, r8, #3, #1
    c154:	e5c03002 	strb	r3, [r0, #2]
    c158:	e5c01000 	strb	r1, [r0]
    c15c:	e2822601 	add	r2, r2, #1048576	; 0x100000
    c160:	e2800004 	add	r0, r0, #4
    c164:	e3520101 	cmp	r2, #1073741824	; 0x40000000
    c168:	0a00001f 	beq	c1ec <CPageTable::CPageTable(unsigned int)+0xf4>
    c16c:	e5d03001 	ldrb	r3, [r0, #1]
    c170:	e7e31a52 	ubfx	r1, r2, #20, #4
    c174:	e152000e 	cmp	r2, lr
    c178:	e387c00c 	orr	ip, r7, #12
    c17c:	e20330fc 	and	r3, r3, #252	; 0xfc
    c180:	e1a09c22 	lsr	r9, r2, #24
    c184:	e7c33116 	bfi	r3, r6, #2, #2
    c188:	e1a01201 	lsl	r1, r1, #4
    c18c:	e203308f 	and	r3, r3, #143	; 0x8f
    c190:	e5c01002 	strb	r1, [r0, #2]
    c194:	e7c7339f 	bfc	r3, #7, #1
    c198:	e5c0c000 	strb	ip, [r0]
    c19c:	e5c03001 	strb	r3, [r0, #1]
    c1a0:	e5c09003 	strb	r9, [r0, #3]
    c1a4:	3affffec 	bcc	c15c <CPageTable::CPageTable(unsigned int)+0x64>
    c1a8:	e1520005 	cmp	r2, r5
    c1ac:	e6ef307c 	uxtb	r3, ip
    c1b0:	e3833010 	orr	r3, r3, #16
    c1b4:	e5c03000 	strb	r3, [r0]
    c1b8:	2affffe1 	bcs	c144 <CPageTable::CPageTable(unsigned int)+0x4c>
    c1bc:	e3520501 	cmp	r2, #4194304	; 0x400000
    c1c0:	1affffe5 	bne	c15c <CPageTable::CPageTable(unsigned int)+0x64>
    c1c4:	e5d03000 	ldrb	r3, [r0]
    c1c8:	e2800004 	add	r0, r0, #4
    c1cc:	e5502002 	ldrb	r2, [r0, #-2]
    c1d0:	e20330fb 	and	r3, r3, #251	; 0xfb
    c1d4:	e3822001 	orr	r2, r2, #1
    c1d8:	e7c33198 	bfi	r3, r8, #3, #1
    c1dc:	e5402002 	strb	r2, [r0, #-2]
    c1e0:	e3a02605 	mov	r2, #5242880	; 0x500000
    c1e4:	e5403004 	strb	r3, [r0, #-4]
    c1e8:	eaffffdf 	b	c16c <CPageTable::CPageTable(unsigned int)+0x74>
    c1ec:	eb000f8b 	bl	10020 <CleanDataCache>
    c1f0:	e1a00004 	mov	r0, r4
    c1f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    c1f8:	e30213e8 	movw	r1, #9192	; 0x23e8
    c1fc:	e3401005 	movt	r1, #5
    c200:	e3020408 	movw	r0, #9224	; 0x2408
    c204:	e3400005 	movt	r0, #5
    c208:	e3a02051 	mov	r2, #81	; 0x51
    c20c:	eb000492 	bl	d45c <assertion_failed>
    c210:	e5940004 	ldr	r0, [r4, #4]
    c214:	eaffffc3 	b	c128 <CPageTable::CPageTable(unsigned int)+0x30>
    c218:	e30213e8 	movw	r1, #9192	; 0x23e8
    c21c:	e3401005 	movt	r1, #5
    c220:	e30203f8 	movw	r0, #9208	; 0x23f8
    c224:	e3400005 	movt	r0, #5
    c228:	e3a02050 	mov	r2, #80	; 0x50
    c22c:	eb00048a 	bl	d45c <assertion_failed>
    c230:	e5940004 	ldr	r0, [r4, #4]
    c234:	eaffffb8 	b	c11c <CPageTable::CPageTable(unsigned int)+0x24>

0000c238 <CPageTable::~CPageTable()>:
    c238:	e5903000 	ldr	r3, [r0]
    c23c:	e92d4010 	push	{r4, lr}
    c240:	e1a04000 	mov	r4, r0
    c244:	e3530000 	cmp	r3, #0
    c248:	0a000001 	beq	c254 <CPageTable::~CPageTable()+0x1c>
    c24c:	e5900004 	ldr	r0, [r0, #4]
    c250:	eb0011d0 	bl	10998 <pfree>
    c254:	e1a00004 	mov	r0, r4
    c258:	e8bd8010 	pop	{r4, pc}

0000c25c <CPageTable::GetBaseAddress() const>:
    c25c:	e5900004 	ldr	r0, [r0, #4]
    c260:	e3800059 	orr	r0, r0, #89	; 0x59
    c264:	e12fff1e 	bx	lr

0000c268 <CScreenDevice::~CScreenDevice()>:
    c268:	e590300c 	ldr	r3, [r0, #12]
    c26c:	e59f2064 	ldr	r2, [pc, #100]	; c2d8 <CScreenDevice::~CScreenDevice()+0x70>
    c270:	e3530000 	cmp	r3, #0
    c274:	e92d4070 	push	{r4, r5, r6, lr}
    c278:	e1a04000 	mov	r4, r0
    c27c:	e5802000 	str	r2, [r0]
    c280:	0a000003 	beq	c294 <CScreenDevice::~CScreenDevice()+0x2c>
    c284:	e5900018 	ldr	r0, [r0, #24]
    c288:	e3500000 	cmp	r0, #0
    c28c:	0a000000 	beq	c294 <CScreenDevice::~CScreenDevice()+0x2c>
    c290:	ebfffac7 	bl	adb4 <operator delete[](void*)>
    c294:	e5945010 	ldr	r5, [r4, #16]
    c298:	e3a03000 	mov	r3, #0
    c29c:	e5843018 	str	r3, [r4, #24]
    c2a0:	e1550003 	cmp	r5, r3
    c2a4:	0a000003 	beq	c2b8 <CScreenDevice::~CScreenDevice()+0x50>
    c2a8:	e1a00005 	mov	r0, r5
    c2ac:	eb0013bb 	bl	111a0 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    c2b0:	e1a00005 	mov	r0, r5
    c2b4:	ebfffabd 	bl	adb0 <operator delete(void*)>
    c2b8:	e3a03000 	mov	r3, #0
    c2bc:	e2840014 	add	r0, r4, #20
    c2c0:	e5843010 	str	r3, [r4, #16]
    c2c4:	eb000489 	bl	d4f0 <CCharGenerator::~CCharGenerator()>
    c2c8:	e1a00004 	mov	r0, r4
    c2cc:	eb001433 	bl	113a0 <CDevice::~CDevice()>
    c2d0:	e1a00004 	mov	r0, r4
    c2d4:	e8bd8070 	pop	{r4, r5, r6, pc}
    c2d8:	00052430 	.word	0x00052430

0000c2dc <CScreenDevice::~CScreenDevice()>:
    c2dc:	e92d4010 	push	{r4, lr}
    c2e0:	e1a04000 	mov	r4, r0
    c2e4:	ebffffdf 	bl	c268 <CScreenDevice::~CScreenDevice()>
    c2e8:	e1a00004 	mov	r0, r4
    c2ec:	ebfffaaf 	bl	adb0 <operator delete(void*)>
    c2f0:	e1a00004 	mov	r0, r4
    c2f4:	e8bd8010 	pop	{r4, pc}

0000c2f8 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>:
    c2f8:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    c2fc:	e15c0002 	cmp	ip, r2
    c300:	8590c020 	ldrhi	ip, [r0, #32]
    c304:	85900018 	ldrhi	r0, [r0, #24]
    c308:	8022029c 	mlahi	r2, ip, r2, r0
    c30c:	87c23001 	strbhi	r3, [r2, r1]
    c310:	e12fff1e 	bx	lr

0000c314 <CScreenDevice::InvertCursor() [clone .part.6]>:
    c314:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c318:	e2806014 	add	r6, r0, #20
    c31c:	e1a04000 	mov	r4, r0
    c320:	e1a00006 	mov	r0, r6
    c324:	eb000476 	bl	d504 <CCharGenerator::GetUnderline() const>
    c328:	e1a07000 	mov	r7, r0
    c32c:	e1a00006 	mov	r0, r6
    c330:	eb000471 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    c334:	e1500007 	cmp	r0, r7
    c338:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
    c33c:	e3a05000 	mov	r5, #0
    c340:	ea000008 	b	c368 <CScreenDevice::InvertCursor() [clone .part.6]+0x54>
    c344:	e5948020 	ldr	r8, [r4, #32]
    c348:	e3a03000 	mov	r3, #0
    c34c:	e5949018 	ldr	r9, [r4, #24]
    c350:	e0289e98 	mla	r8, r8, lr, r9
    c354:	e7d8800c 	ldrb	r8, [r8, ip]
    c358:	e1580003 	cmp	r8, r3
    c35c:	0a000012 	beq	c3ac <CScreenDevice::InvertCursor() [clone .part.6]+0x98>
    c360:	ebffffe4 	bl	c2f8 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    c364:	e2855001 	add	r5, r5, #1
    c368:	e1a00006 	mov	r0, r6
    c36c:	eb000460 	bl	d4f4 <CCharGenerator::GetCharWidth() const>
    c370:	e1500005 	cmp	r0, r5
    c374:	9a00000f 	bls	c3b8 <CScreenDevice::InvertCursor() [clone .part.6]+0xa4>
    c378:	e594c03c 	ldr	ip, [r4, #60]	; 0x3c
    c37c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c380:	e085c00c 	add	ip, r5, ip
    c384:	e15c0003 	cmp	ip, r3
    c388:	2afffff5 	bcs	c364 <CScreenDevice::InvertCursor() [clone .part.6]+0x50>
    c38c:	e594e040 	ldr	lr, [r4, #64]	; 0x40
    c390:	e1a0100c 	mov	r1, ip
    c394:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c398:	e1a00004 	mov	r0, r4
    c39c:	e087e00e 	add	lr, r7, lr
    c3a0:	e15e0003 	cmp	lr, r3
    c3a4:	e1a0200e 	mov	r2, lr
    c3a8:	3affffe5 	bcc	c344 <CScreenDevice::InvertCursor() [clone .part.6]+0x30>
    c3ac:	e5d43048 	ldrb	r3, [r4, #72]	; 0x48
    c3b0:	ebffffd0 	bl	c2f8 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    c3b4:	eaffffea 	b	c364 <CScreenDevice::InvertCursor() [clone .part.6]+0x50>
    c3b8:	e2877001 	add	r7, r7, #1
    c3bc:	eaffffda 	b	c32c <CScreenDevice::InvertCursor() [clone .part.6]+0x18>

0000c3c0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
    c3c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c3c4:	e1a04000 	mov	r4, r0
    c3c8:	e1a06003 	mov	r6, r3
    c3cc:	e1a08001 	mov	r8, r1
    c3d0:	e1a07002 	mov	r7, r2
    c3d4:	eb0013fc 	bl	113cc <CDevice::CDevice()>
    c3d8:	e59fc050 	ldr	ip, [pc, #80]	; c430 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)+0x70>
    c3dc:	e3a05000 	mov	r5, #0
    c3e0:	e5848004 	str	r8, [r4, #4]
    c3e4:	e5847008 	str	r7, [r4, #8]
    c3e8:	e2840014 	add	r0, r4, #20
    c3ec:	e584600c 	str	r6, [r4, #12]
    c3f0:	e584c000 	str	ip, [r4]
    c3f4:	e5845010 	str	r5, [r4, #16]
    c3f8:	eb000439 	bl	d4e4 <CCharGenerator::CCharGenerator()>
    c3fc:	e3a03001 	mov	r3, #1
    c400:	e5845018 	str	r5, [r4, #24]
    c404:	e1a00004 	mov	r0, r4
    c408:	e5845030 	str	r5, [r4, #48]	; 0x30
    c40c:	e5845034 	str	r5, [r4, #52]	; 0x34
    c410:	e584503c 	str	r5, [r4, #60]	; 0x3c
    c414:	e5845040 	str	r5, [r4, #64]	; 0x40
    c418:	e584504c 	str	r5, [r4, #76]	; 0x4c
    c41c:	e5845058 	str	r5, [r4, #88]	; 0x58
    c420:	e5843044 	str	r3, [r4, #68]	; 0x44
    c424:	e5c43048 	strb	r3, [r4, #72]	; 0x48
    c428:	e584305c 	str	r3, [r4, #92]	; 0x5c
    c42c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c430:	00052430 	.word	0x00052430

0000c434 <CScreenDevice::GetWidth() const>:
    c434:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    c438:	e12fff1e 	bx	lr

0000c43c <CScreenDevice::GetHeight() const>:
    c43c:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    c440:	e12fff1e 	bx	lr

0000c444 <CScreenDevice::GetColumns() const>:
    c444:	e1a03000 	mov	r3, r0
    c448:	e92d4010 	push	{r4, lr}
    c44c:	e2800014 	add	r0, r0, #20
    c450:	e5934024 	ldr	r4, [r3, #36]	; 0x24
    c454:	eb000426 	bl	d4f4 <CCharGenerator::GetCharWidth() const>
    c458:	e730f014 	udiv	r0, r4, r0
    c45c:	e8bd8010 	pop	{r4, pc}

0000c460 <CScreenDevice::GetRows() const>:
    c460:	e1a03000 	mov	r3, r0
    c464:	e92d4010 	push	{r4, lr}
    c468:	e2800014 	add	r0, r0, #20
    c46c:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
    c470:	eb000421 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    c474:	e730f014 	udiv	r0, r4, r0
    c478:	e8bd8010 	pop	{r4, pc}

0000c47c <CScreenDevice::GetStatus()>:
    c47c:	e591c018 	ldr	ip, [r1, #24]
    c480:	e591201c 	ldr	r2, [r1, #28]
    c484:	e92d4070 	push	{r4, r5, r6, lr}
    c488:	e5915030 	ldr	r5, [r1, #48]	; 0x30
    c48c:	e5914034 	ldr	r4, [r1, #52]	; 0x34
    c490:	e591e038 	ldr	lr, [r1, #56]	; 0x38
    c494:	e580c000 	str	ip, [r0]
    c498:	e5802004 	str	r2, [r0, #4]
    c49c:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    c4a0:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    c4a4:	e5805008 	str	r5, [r0, #8]
    c4a8:	e5916044 	ldr	r6, [r1, #68]	; 0x44
    c4ac:	e580400c 	str	r4, [r0, #12]
    c4b0:	e5d15048 	ldrb	r5, [r1, #72]	; 0x48
    c4b4:	e580e010 	str	lr, [r0, #16]
    c4b8:	e591404c 	ldr	r4, [r1, #76]	; 0x4c
    c4bc:	e580c014 	str	ip, [r0, #20]
    c4c0:	e591e050 	ldr	lr, [r1, #80]	; 0x50
    c4c4:	e5802018 	str	r2, [r0, #24]
    c4c8:	e591c054 	ldr	ip, [r1, #84]	; 0x54
    c4cc:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    c4d0:	e580601c 	str	r6, [r0, #28]
    c4d4:	e5c05020 	strb	r5, [r0, #32]
    c4d8:	e5804024 	str	r4, [r0, #36]	; 0x24
    c4dc:	e580e028 	str	lr, [r0, #40]	; 0x28
    c4e0:	e580c02c 	str	ip, [r0, #44]	; 0x2c
    c4e4:	e5802030 	str	r2, [r0, #48]	; 0x30
    c4e8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c4ec <CScreenDevice::SetStatus(TScreenStatus)>:
    c4ec:	e24dd010 	sub	sp, sp, #16
    c4f0:	e92d4070 	push	{r4, r5, r6, lr}
    c4f4:	e28dc014 	add	ip, sp, #20
    c4f8:	e88c000e 	stm	ip, {r1, r2, r3}
    c4fc:	e590201c 	ldr	r2, [r0, #28]
    c500:	e59d3018 	ldr	r3, [sp, #24]
    c504:	e1520003 	cmp	r2, r3
    c508:	0a000003 	beq	c51c <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    c50c:	e3a00000 	mov	r0, #0
    c510:	e8bd4070 	pop	{r4, r5, r6, lr}
    c514:	e28dd010 	add	sp, sp, #16
    c518:	e12fff1e 	bx	lr
    c51c:	e5901020 	ldr	r1, [r0, #32]
    c520:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c524:	e1510003 	cmp	r1, r3
    c528:	1afffff7 	bne	c50c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    c52c:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    c530:	e1a04000 	mov	r4, r0
    c534:	e3530000 	cmp	r3, #0
    c538:	1a000020 	bne	c5c0 <CScreenDevice::SetStatus(TScreenStatus)+0xd4>
    c53c:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    c540:	e3530000 	cmp	r3, #0
    c544:	1afffff0 	bne	c50c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    c548:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    c54c:	e3530000 	cmp	r3, #0
    c550:	1affffed 	bne	c50c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    c554:	e59d1014 	ldr	r1, [sp, #20]
    c558:	e5940018 	ldr	r0, [r4, #24]
    c55c:	ebfffd5d 	bl	bad8 <memcpy>
    c560:	e28d2020 	add	r2, sp, #32
    c564:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    c568:	e59d101c 	ldr	r1, [sp, #28]
    c56c:	e3530000 	cmp	r3, #0
    c570:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
    c574:	e892402c 	ldm	r2, {r2, r3, r5, lr}
    c578:	e5841030 	str	r1, [r4, #48]	; 0x30
    c57c:	e5dd0034 	ldrb	r0, [sp, #52]	; 0x34
    c580:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    c584:	e5842034 	str	r2, [r4, #52]	; 0x34
    c588:	e5843038 	str	r3, [r4, #56]	; 0x38
    c58c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    c590:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    c594:	e584503c 	str	r5, [r4, #60]	; 0x3c
    c598:	e584e040 	str	lr, [r4, #64]	; 0x40
    c59c:	e584c044 	str	ip, [r4, #68]	; 0x44
    c5a0:	e5c40048 	strb	r0, [r4, #72]	; 0x48
    c5a4:	e584104c 	str	r1, [r4, #76]	; 0x4c
    c5a8:	e5842050 	str	r2, [r4, #80]	; 0x50
    c5ac:	e5843054 	str	r3, [r4, #84]	; 0x54
    c5b0:	1a00000f 	bne	c5f4 <CScreenDevice::SetStatus(TScreenStatus)+0x108>
    c5b4:	f57ff05f 	dmb	sy
    c5b8:	e3a00001 	mov	r0, #1
    c5bc:	eaffffd3 	b	c510 <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    c5c0:	ebfff9fc 	bl	adb8 <EnterCritical>
    c5c4:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    c5c8:	e3530000 	cmp	r3, #0
    c5cc:	1a000003 	bne	c5e0 <CScreenDevice::SetStatus(TScreenStatus)+0xf4>
    c5d0:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    c5d4:	e3530000 	cmp	r3, #0
    c5d8:	0594201c 	ldreq	r2, [r4, #28]
    c5dc:	0affffdc 	beq	c554 <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    c5e0:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    c5e4:	e3530000 	cmp	r3, #0
    c5e8:	0affffc7 	beq	c50c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    c5ec:	ebfff9fe 	bl	adec <LeaveCritical>
    c5f0:	eaffffc5 	b	c50c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    c5f4:	ebfff9fc 	bl	adec <LeaveCritical>
    c5f8:	eaffffed 	b	c5b4 <CScreenDevice::SetStatus(TScreenStatus)+0xc8>

0000c5fc <CScreenDevice::CarriageReturn()>:
    c5fc:	e3a03000 	mov	r3, #0
    c600:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c604:	e12fff1e 	bx	lr

0000c608 <CScreenDevice::CursorHome()>:
    c608:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c60c:	e3a02000 	mov	r2, #0
    c610:	e580203c 	str	r2, [r0, #60]	; 0x3c
    c614:	e5803040 	str	r3, [r0, #64]	; 0x40
    c618:	e12fff1e 	bx	lr

0000c61c <CScreenDevice::CursorLeft()>:
    c61c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    c620:	e92d4070 	push	{r4, r5, r6, lr}
    c624:	e1a04000 	mov	r4, r0
    c628:	e3530000 	cmp	r3, #0
    c62c:	1a00000f 	bne	c670 <CScreenDevice::CursorLeft()+0x54>
    c630:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    c634:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c638:	e1520003 	cmp	r2, r3
    c63c:	98bd8070 	popls	{r4, r5, r6, pc}
    c640:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    c644:	e2806014 	add	r6, r0, #20
    c648:	e1a00006 	mov	r0, r6
    c64c:	eb0003a8 	bl	d4f4 <CCharGenerator::GetCharWidth() const>
    c650:	e0450000 	sub	r0, r5, r0
    c654:	e584003c 	str	r0, [r4, #60]	; 0x3c
    c658:	e1a00006 	mov	r0, r6
    c65c:	eb0003a6 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    c660:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c664:	e0430000 	sub	r0, r3, r0
    c668:	e5840040 	str	r0, [r4, #64]	; 0x40
    c66c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c670:	e2800014 	add	r0, r0, #20
    c674:	eb00039e 	bl	d4f4 <CCharGenerator::GetCharWidth() const>
    c678:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    c67c:	e0430000 	sub	r0, r3, r0
    c680:	e584003c 	str	r0, [r4, #60]	; 0x3c
    c684:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c688 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    c688:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c68c:	e1a04002 	mov	r4, r2
    c690:	e2444001 	sub	r4, r4, #1
    c694:	e1a05000 	mov	r5, r0
    c698:	e2806014 	add	r6, r0, #20
    c69c:	e1a00006 	mov	r0, r6
    c6a0:	e1a07001 	mov	r7, r1
    c6a4:	eb000392 	bl	d4f4 <CCharGenerator::GetCharWidth() const>
    c6a8:	e0040490 	mul	r4, r0, r4
    c6ac:	e1a00006 	mov	r0, r6
    c6b0:	eb000391 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    c6b4:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c6b8:	e1540003 	cmp	r4, r3
    c6bc:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    c6c0:	e2477001 	sub	r7, r7, #1
    c6c4:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    c6c8:	e0000790 	mul	r0, r0, r7
    c6cc:	e1500003 	cmp	r0, r3
    c6d0:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    c6d4:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    c6d8:	e1500003 	cmp	r0, r3
    c6dc:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    c6e0:	35850040 	strcc	r0, [r5, #64]	; 0x40
    c6e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c6e8 <CScreenDevice::CursorUp()>:
    c6e8:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    c6ec:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c6f0:	e1520003 	cmp	r2, r3
    c6f4:	912fff1e 	bxls	lr
    c6f8:	e92d4010 	push	{r4, lr}
    c6fc:	e1a04000 	mov	r4, r0
    c700:	e2800014 	add	r0, r0, #20
    c704:	eb00037c 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    c708:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c70c:	e0430000 	sub	r0, r3, r0
    c710:	e5840040 	str	r0, [r4, #64]	; 0x40
    c714:	e8bd8010 	pop	{r4, pc}

0000c718 <CScreenDevice::DeleteChars(unsigned int)>:
    c718:	e12fff1e 	bx	lr

0000c71c <CScreenDevice::DeleteLines(unsigned int)>:
    c71c:	e12fff1e 	bx	lr

0000c720 <CScreenDevice::InsertLines(unsigned int)>:
    c720:	e12fff1e 	bx	lr

0000c724 <CScreenDevice::InsertMode(int)>:
    c724:	e580104c 	str	r1, [r0, #76]	; 0x4c
    c728:	e12fff1e 	bx	lr

0000c72c <CScreenDevice::ReverseScroll()>:
    c72c:	e12fff1e 	bx	lr

0000c730 <CScreenDevice::SetCursorMode(int)>:
    c730:	e5801044 	str	r1, [r0, #68]	; 0x44
    c734:	e12fff1e 	bx	lr

0000c738 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    c738:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c73c:	e1a04001 	mov	r4, r1
    c740:	e2444001 	sub	r4, r4, #1
    c744:	e1a06000 	mov	r6, r0
    c748:	e1a05002 	mov	r5, r2
    c74c:	e2807014 	add	r7, r0, #20
    c750:	e1a00007 	mov	r0, r7
    c754:	eb000368 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    c758:	e0040490 	mul	r4, r0, r4
    c75c:	e1a00007 	mov	r0, r7
    c760:	eb000365 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    c764:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    c768:	e0000095 	mul	r0, r5, r0
    c76c:	e3500000 	cmp	r0, #0
    c770:	11540002 	cmpne	r4, r2
    c774:	33a03001 	movcc	r3, #1
    c778:	23a03000 	movcs	r3, #0
    c77c:	e1500002 	cmp	r0, r2
    c780:	83a03000 	movhi	r3, #0
    c784:	92033001 	andls	r3, r3, #1
    c788:	e1540000 	cmp	r4, r0
    c78c:	23a03000 	movcs	r3, #0
    c790:	32033001 	andcc	r3, r3, #1
    c794:	e3530000 	cmp	r3, #0
    c798:	e3a03000 	mov	r3, #0
    c79c:	15864034 	strne	r4, [r6, #52]	; 0x34
    c7a0:	15860038 	strne	r0, [r6, #56]	; 0x38
    c7a4:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    c7a8:	e586303c 	str	r3, [r6, #60]	; 0x3c
    c7ac:	e5864040 	str	r4, [r6, #64]	; 0x40
    c7b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c7b4 <CScreenDevice::SetStandoutMode(unsigned int)>:
    c7b4:	e351001b 	cmp	r1, #27
    c7b8:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    c7bc:	ea00001d 	b	c838 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    c7c0:	0000c848 	.word	0x0000c848
    c7c4:	0000c83c 	.word	0x0000c83c
    c7c8:	0000c830 	.word	0x0000c830
    c7cc:	0000c838 	.word	0x0000c838
    c7d0:	0000c838 	.word	0x0000c838
    c7d4:	0000c838 	.word	0x0000c838
    c7d8:	0000c838 	.word	0x0000c838
    c7dc:	0000c838 	.word	0x0000c838
    c7e0:	0000c838 	.word	0x0000c838
    c7e4:	0000c838 	.word	0x0000c838
    c7e8:	0000c838 	.word	0x0000c838
    c7ec:	0000c838 	.word	0x0000c838
    c7f0:	0000c838 	.word	0x0000c838
    c7f4:	0000c838 	.word	0x0000c838
    c7f8:	0000c838 	.word	0x0000c838
    c7fc:	0000c838 	.word	0x0000c838
    c800:	0000c838 	.word	0x0000c838
    c804:	0000c838 	.word	0x0000c838
    c808:	0000c838 	.word	0x0000c838
    c80c:	0000c838 	.word	0x0000c838
    c810:	0000c838 	.word	0x0000c838
    c814:	0000c838 	.word	0x0000c838
    c818:	0000c838 	.word	0x0000c838
    c81c:	0000c838 	.word	0x0000c838
    c820:	0000c838 	.word	0x0000c838
    c824:	0000c838 	.word	0x0000c838
    c828:	0000c838 	.word	0x0000c838
    c82c:	0000c848 	.word	0x0000c848
    c830:	e3a03003 	mov	r3, #3
    c834:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    c838:	e12fff1e 	bx	lr
    c83c:	e3a03002 	mov	r3, #2
    c840:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    c844:	e12fff1e 	bx	lr
    c848:	e3a03001 	mov	r3, #1
    c84c:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    c850:	e12fff1e 	bx	lr

0000c854 <CScreenDevice::Scroll()>:
    c854:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c858:	e1a05000 	mov	r5, r0
    c85c:	e2800014 	add	r0, r0, #20
    c860:	eb000325 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    c864:	e1a06000 	mov	r6, r0
    c868:	e5952034 	ldr	r2, [r5, #52]	; 0x34
    c86c:	e5954038 	ldr	r4, [r5, #56]	; 0x38
    c870:	e5953020 	ldr	r3, [r5, #32]
    c874:	e0444002 	sub	r4, r4, r2
    c878:	e5951018 	ldr	r1, [r5, #24]
    c87c:	e0444000 	sub	r4, r4, r0
    c880:	e0271293 	mla	r7, r3, r2, r1
    c884:	e0040493 	mul	r4, r3, r4
    c888:	e3540000 	cmp	r4, #0
    c88c:	1a000007 	bne	c8b0 <CScreenDevice::Scroll()+0x5c>
    c890:	e0030693 	mul	r3, r3, r6
    c894:	e1b03123 	lsrs	r3, r3, #2
    c898:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    c89c:	e1a00007 	mov	r0, r7
    c8a0:	e1a02103 	lsl	r2, r3, #2
    c8a4:	e3a01000 	mov	r1, #0
    c8a8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    c8ac:	ea0010b4 	b	10b84 <memset>
    c8b0:	e0808002 	add	r8, r0, r2
    c8b4:	e3c4900f 	bic	r9, r4, #15
    c8b8:	e1a02009 	mov	r2, r9
    c8bc:	e1a00007 	mov	r0, r7
    c8c0:	e0281893 	mla	r8, r3, r8, r1
    c8c4:	e1a01008 	mov	r1, r8
    c8c8:	ebfffc82 	bl	bad8 <memcpy>
    c8cc:	e0870009 	add	r0, r7, r9
    c8d0:	e204200f 	and	r2, r4, #15
    c8d4:	e0881009 	add	r1, r8, r9
    c8d8:	e3c44003 	bic	r4, r4, #3
    c8dc:	ebfffc7d 	bl	bad8 <memcpy>
    c8e0:	e0877004 	add	r7, r7, r4
    c8e4:	e5953020 	ldr	r3, [r5, #32]
    c8e8:	eaffffe8 	b	c890 <CScreenDevice::Scroll()+0x3c>

0000c8ec <CScreenDevice::CursorDown()>:
    c8ec:	e92d4070 	push	{r4, r5, r6, lr}
    c8f0:	e1a04000 	mov	r4, r0
    c8f4:	e2805014 	add	r5, r0, #20
    c8f8:	e1a00005 	mov	r0, r5
    c8fc:	eb0002fe 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    c900:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c904:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    c908:	e0800003 	add	r0, r0, r3
    c90c:	e1500002 	cmp	r0, r2
    c910:	e5840040 	str	r0, [r4, #64]	; 0x40
    c914:	38bd8070 	popcc	{r4, r5, r6, pc}
    c918:	e1a00004 	mov	r0, r4
    c91c:	ebffffcc 	bl	c854 <CScreenDevice::Scroll()>
    c920:	e1a00005 	mov	r0, r5
    c924:	eb0002f4 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    c928:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c92c:	e0430000 	sub	r0, r3, r0
    c930:	e5840040 	str	r0, [r4, #64]	; 0x40
    c934:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c938 <CScreenDevice::NewLine()>:
    c938:	e3a02000 	mov	r2, #0
    c93c:	e580203c 	str	r2, [r0, #60]	; 0x3c
    c940:	eaffffe9 	b	c8ec <CScreenDevice::CursorDown()>

0000c944 <CScreenDevice::CursorRight()>:
    c944:	e92d4010 	push	{r4, lr}
    c948:	e1a04000 	mov	r4, r0
    c94c:	e2800014 	add	r0, r0, #20
    c950:	eb0002e7 	bl	d4f4 <CCharGenerator::GetCharWidth() const>
    c954:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    c958:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    c95c:	e0800003 	add	r0, r0, r3
    c960:	e1500002 	cmp	r0, r2
    c964:	e584003c 	str	r0, [r4, #60]	; 0x3c
    c968:	38bd8010 	popcc	{r4, pc}
    c96c:	e3a03000 	mov	r3, #0
    c970:	e1a00004 	mov	r0, r4
    c974:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c978:	e8bd4010 	pop	{r4, lr}
    c97c:	eaffffda 	b	c8ec <CScreenDevice::CursorDown()>

0000c980 <CScreenDevice::Tabulator()>:
    c980:	e92d4010 	push	{r4, lr}
    c984:	e1a04000 	mov	r4, r0
    c988:	e2800014 	add	r0, r0, #20
    c98c:	eb0002d8 	bl	d4f4 <CCharGenerator::GetCharWidth() const>
    c990:	e1a00180 	lsl	r0, r0, #3
    c994:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    c998:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    c99c:	e0803003 	add	r3, r0, r3
    c9a0:	e733f013 	udiv	r3, r3, r0
    c9a4:	e0000390 	mul	r0, r0, r3
    c9a8:	e1500002 	cmp	r0, r2
    c9ac:	e584003c 	str	r0, [r4, #60]	; 0x3c
    c9b0:	38bd8010 	popcc	{r4, pc}
    c9b4:	e3a03000 	mov	r3, #0
    c9b8:	e1a00004 	mov	r0, r4
    c9bc:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c9c0:	e8bd4010 	pop	{r4, lr}
    c9c4:	eaffffc8 	b	c8ec <CScreenDevice::CursorDown()>

0000c9c8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>:
    c9c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9cc:	e2806014 	add	r6, r0, #20
    c9d0:	e1a08000 	mov	r8, r0
    c9d4:	e24dd00c 	sub	sp, sp, #12
    c9d8:	e3a07000 	mov	r7, #0
    c9dc:	e1a00006 	mov	r0, r6
    c9e0:	e1a0a001 	mov	sl, r1
    c9e4:	e1a09002 	mov	r9, r2
    c9e8:	e5ddb030 	ldrb	fp, [sp, #48]	; 0x30
    c9ec:	e58d3004 	str	r3, [sp, #4]
    c9f0:	eb0002c1 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    c9f4:	e1570000 	cmp	r7, r0
    c9f8:	2a00001e 	bcs	ca78 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0xb0>
    c9fc:	e59d3004 	ldr	r3, [sp, #4]
    ca00:	e3a04000 	mov	r4, #0
    ca04:	e0873003 	add	r3, r7, r3
    ca08:	e58d3000 	str	r3, [sp]
    ca0c:	e1a00006 	mov	r0, r6
    ca10:	e0845009 	add	r5, r4, r9
    ca14:	eb0002b6 	bl	d4f4 <CCharGenerator::GetCharWidth() const>
    ca18:	e1540000 	cmp	r4, r0
    ca1c:	e1a02004 	mov	r2, r4
    ca20:	e1a03007 	mov	r3, r7
    ca24:	e1a0100a 	mov	r1, sl
    ca28:	e1a00006 	mov	r0, r6
    ca2c:	e2844001 	add	r4, r4, #1
    ca30:	2a00000b 	bcs	ca64 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x9c>
    ca34:	eb0002b4 	bl	d50c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    ca38:	e5982024 	ldr	r2, [r8, #36]	; 0x24
    ca3c:	e3500000 	cmp	r0, #0
    ca40:	11a0300b 	movne	r3, fp
    ca44:	03a03000 	moveq	r3, #0
    ca48:	e1550002 	cmp	r5, r2
    ca4c:	2affffee 	bcs	ca0c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x44>
    ca50:	e1a01005 	mov	r1, r5
    ca54:	e59d2000 	ldr	r2, [sp]
    ca58:	e1a00008 	mov	r0, r8
    ca5c:	ebfffe25 	bl	c2f8 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    ca60:	eaffffe9 	b	ca0c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x44>
    ca64:	e2877001 	add	r7, r7, #1
    ca68:	e1a00006 	mov	r0, r6
    ca6c:	eb0002a2 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    ca70:	e1570000 	cmp	r7, r0
    ca74:	3affffe0 	bcc	c9fc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x34>
    ca78:	e28dd00c 	add	sp, sp, #12
    ca7c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ca80 <CScreenDevice::DisplayChar(char)>:
    ca80:	e6ef3071 	uxtb	r3, r1
    ca84:	e353001f 	cmp	r3, #31
    ca88:	912fff1e 	bxls	lr
    ca8c:	e92d4010 	push	{r4, lr}
    ca90:	e1a04000 	mov	r4, r0
    ca94:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    ca98:	e24dd008 	sub	sp, sp, #8
    ca9c:	e5d0c048 	ldrb	ip, [r0, #72]	; 0x48
    caa0:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    caa4:	e58dc000 	str	ip, [sp]
    caa8:	ebffffc6 	bl	c9c8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    caac:	e1a00004 	mov	r0, r4
    cab0:	e28dd008 	add	sp, sp, #8
    cab4:	e8bd4010 	pop	{r4, lr}
    cab8:	eaffffa1 	b	c944 <CScreenDevice::CursorRight()>

0000cabc <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    cabc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    cac0:	e1a05000 	mov	r5, r0
    cac4:	e1a07001 	mov	r7, r1
    cac8:	e1a0a002 	mov	sl, r2
    cacc:	e2806014 	add	r6, r0, #20
    cad0:	e3a08000 	mov	r8, #0
    cad4:	e1a00006 	mov	r0, r6
    cad8:	eb000287 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    cadc:	e1580000 	cmp	r8, r0
    cae0:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
    cae4:	e3a04000 	mov	r4, #0
    cae8:	e088900a 	add	r9, r8, sl
    caec:	e1a00006 	mov	r0, r6
    caf0:	eb00027f 	bl	d4f4 <CCharGenerator::GetCharWidth() const>
    caf4:	e1540000 	cmp	r4, r0
    caf8:	e0841007 	add	r1, r4, r7
    cafc:	e2844001 	add	r4, r4, #1
    cb00:	2a000007 	bcs	cb24 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x68>
    cb04:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    cb08:	e1510003 	cmp	r1, r3
    cb0c:	2afffff6 	bcs	caec <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    cb10:	e3a03000 	mov	r3, #0
    cb14:	e1a02009 	mov	r2, r9
    cb18:	e1a00005 	mov	r0, r5
    cb1c:	ebfffdf5 	bl	c2f8 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    cb20:	eafffff1 	b	caec <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    cb24:	e2888001 	add	r8, r8, #1
    cb28:	eaffffe9 	b	cad4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x18>

0000cb2c <CScreenDevice::ClearLineEnd()>:
    cb2c:	e92d4070 	push	{r4, r5, r6, lr}
    cb30:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    cb34:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    cb38:	e1540003 	cmp	r4, r3
    cb3c:	28bd8070 	popcs	{r4, r5, r6, pc}
    cb40:	e1a05000 	mov	r5, r0
    cb44:	e2806014 	add	r6, r0, #20
    cb48:	e1a01004 	mov	r1, r4
    cb4c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    cb50:	e1a00005 	mov	r0, r5
    cb54:	ebffffd8 	bl	cabc <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    cb58:	e1a00006 	mov	r0, r6
    cb5c:	eb000264 	bl	d4f4 <CCharGenerator::GetCharWidth() const>
    cb60:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    cb64:	e0844000 	add	r4, r4, r0
    cb68:	e1530004 	cmp	r3, r4
    cb6c:	8afffff5 	bhi	cb48 <CScreenDevice::ClearLineEnd()+0x1c>
    cb70:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cb74 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    cb74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cb78:	e1a05000 	mov	r5, r0
    cb7c:	e1a06001 	mov	r6, r1
    cb80:	e2807014 	add	r7, r0, #20
    cb84:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    cb88:	e1a00007 	mov	r0, r7
    cb8c:	eb000258 	bl	d4f4 <CCharGenerator::GetCharWidth() const>
    cb90:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    cb94:	e0264096 	mla	r6, r6, r0, r4
    cb98:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    cb9c:	e1560003 	cmp	r6, r3
    cba0:	21a06003 	movcs	r6, r3
    cba4:	e1540006 	cmp	r4, r6
    cba8:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    cbac:	e1a01004 	mov	r1, r4
    cbb0:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    cbb4:	e1a00005 	mov	r0, r5
    cbb8:	ebffffbf 	bl	cabc <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    cbbc:	e1a00007 	mov	r0, r7
    cbc0:	eb00024b 	bl	d4f4 <CCharGenerator::GetCharWidth() const>
    cbc4:	e0844000 	add	r4, r4, r0
    cbc8:	e1540006 	cmp	r4, r6
    cbcc:	3afffff6 	bcc	cbac <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    cbd0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000cbd4 <CScreenDevice::EraseChars(unsigned int)>:
    cbd4:	e3510000 	cmp	r1, #0
    cbd8:	012fff1e 	bxeq	lr
    cbdc:	eaffffe4 	b	cb74 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000cbe0 <CScreenDevice::ClearDisplayEnd()>:
    cbe0:	e92d4070 	push	{r4, r5, r6, lr}
    cbe4:	e1a05000 	mov	r5, r0
    cbe8:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    cbec:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    cbf0:	e2806014 	add	r6, r0, #20
    cbf4:	e1540003 	cmp	r4, r3
    cbf8:	2a000009 	bcs	cc24 <CScreenDevice::ClearDisplayEnd()+0x44>
    cbfc:	e1a01004 	mov	r1, r4
    cc00:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    cc04:	e1a00005 	mov	r0, r5
    cc08:	ebffffab 	bl	cabc <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    cc0c:	e1a00006 	mov	r0, r6
    cc10:	eb000237 	bl	d4f4 <CCharGenerator::GetCharWidth() const>
    cc14:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    cc18:	e0844000 	add	r4, r4, r0
    cc1c:	e1530004 	cmp	r3, r4
    cc20:	8afffff5 	bhi	cbfc <CScreenDevice::ClearDisplayEnd()+0x1c>
    cc24:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    cc28:	e1a00006 	mov	r0, r6
    cc2c:	eb000232 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    cc30:	e5953020 	ldr	r3, [r5, #32]
    cc34:	e0840000 	add	r0, r4, r0
    cc38:	e595201c 	ldr	r2, [r5, #28]
    cc3c:	e5951018 	ldr	r1, [r5, #24]
    cc40:	e0000093 	mul	r0, r3, r0
    cc44:	e0522000 	subs	r2, r2, r0
    cc48:	0a000003 	beq	cc5c <CScreenDevice::ClearDisplayEnd()+0x7c>
    cc4c:	e0810000 	add	r0, r1, r0
    cc50:	e3a01000 	mov	r1, #0
    cc54:	e8bd4070 	pop	{r4, r5, r6, lr}
    cc58:	ea000fc9 	b	10b84 <memset>
    cc5c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cc60 <CScreenDevice::Write(char)>:
    cc60:	e92d4010 	push	{r4, lr}
    cc64:	e1a04000 	mov	r4, r0
    cc68:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    cc6c:	e24dd008 	sub	sp, sp, #8
    cc70:	e3530007 	cmp	r3, #7
    cc74:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    cc78:	ea000010 	b	ccc0 <CScreenDevice::Write(char)+0x60>
    cc7c:	0000cd0c 	.word	0x0000cd0c
    cc80:	0000cd6c 	.word	0x0000cd6c
    cc84:	0000cd88 	.word	0x0000cd88
    cc88:	0000cde0 	.word	0x0000cde0
    cc8c:	0000cebc 	.word	0x0000cebc
    cc90:	0000cedc 	.word	0x0000cedc
    cc94:	0000cefc 	.word	0x0000cefc
    cc98:	0000ccd0 	.word	0x0000ccd0
    cc9c:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    cca0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    cca4:	e1520003 	cmp	r2, r3
    cca8:	2a000004 	bcs	ccc0 <CScreenDevice::Write(char)+0x60>
    ccac:	e2800014 	add	r0, r0, #20
    ccb0:	eb000211 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    ccb4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ccb8:	e0433000 	sub	r3, r3, r0
    ccbc:	e5843040 	str	r3, [r4, #64]	; 0x40
    ccc0:	e3a03000 	mov	r3, #0
    ccc4:	e5843030 	str	r3, [r4, #48]	; 0x30
    ccc8:	e28dd008 	add	sp, sp, #8
    cccc:	e8bd8010 	pop	{r4, pc}
    ccd0:	e3510068 	cmp	r1, #104	; 0x68
    ccd4:	0a000097 	beq	cf38 <CScreenDevice::Write(char)+0x2d8>
    ccd8:	e351006c 	cmp	r1, #108	; 0x6c
    ccdc:	0a000095 	beq	cf38 <CScreenDevice::Write(char)+0x2d8>
    cce0:	e2411030 	sub	r1, r1, #48	; 0x30
    cce4:	e6ef3071 	uxtb	r3, r1
    cce8:	e3530009 	cmp	r3, #9
    ccec:	8afffff3 	bhi	ccc0 <CScreenDevice::Write(char)+0x60>
    ccf0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    ccf4:	e3a0200a 	mov	r2, #10
    ccf8:	e0211392 	mla	r1, r2, r3, r1
    ccfc:	e3510063 	cmp	r1, #99	; 0x63
    cd00:	e5841050 	str	r1, [r4, #80]	; 0x50
    cd04:	8affffed 	bhi	ccc0 <CScreenDevice::Write(char)+0x60>
    cd08:	eaffffee 	b	ccc8 <CScreenDevice::Write(char)+0x68>
    cd0c:	e2413008 	sub	r3, r1, #8
    cd10:	e3530013 	cmp	r3, #19
    cd14:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    cd18:	ea0000ec 	b	d0d0 <CScreenDevice::Write(char)+0x470>
    cd1c:	0000cfa4 	.word	0x0000cfa4
    cd20:	0000cf98 	.word	0x0000cf98
    cd24:	0000cf84 	.word	0x0000cf84
    cd28:	0000d0d0 	.word	0x0000d0d0
    cd2c:	0000d0d0 	.word	0x0000d0d0
    cd30:	0000cf78 	.word	0x0000cf78
    cd34:	0000d0d0 	.word	0x0000d0d0
    cd38:	0000d0d0 	.word	0x0000d0d0
    cd3c:	0000d0d0 	.word	0x0000d0d0
    cd40:	0000d0d0 	.word	0x0000d0d0
    cd44:	0000d0d0 	.word	0x0000d0d0
    cd48:	0000d0d0 	.word	0x0000d0d0
    cd4c:	0000d0d0 	.word	0x0000d0d0
    cd50:	0000d0d0 	.word	0x0000d0d0
    cd54:	0000d0d0 	.word	0x0000d0d0
    cd58:	0000d0d0 	.word	0x0000d0d0
    cd5c:	0000d0d0 	.word	0x0000d0d0
    cd60:	0000d0d0 	.word	0x0000d0d0
    cd64:	0000d0d0 	.word	0x0000d0d0
    cd68:	0000cf6c 	.word	0x0000cf6c
    cd6c:	e351004d 	cmp	r1, #77	; 0x4d
    cd70:	0affffd2 	beq	ccc0 <CScreenDevice::Write(char)+0x60>
    cd74:	e351005b 	cmp	r1, #91	; 0x5b
    cd78:	03a03002 	moveq	r3, #2
    cd7c:	05803030 	streq	r3, [r0, #48]	; 0x30
    cd80:	0affffd0 	beq	ccc8 <CScreenDevice::Write(char)+0x68>
    cd84:	eaffffcd 	b	ccc0 <CScreenDevice::Write(char)+0x60>
    cd88:	e241303f 	sub	r3, r1, #63	; 0x3f
    cd8c:	e3530011 	cmp	r3, #17
    cd90:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    cd94:	ea0000d9 	b	d100 <CScreenDevice::Write(char)+0x4a0>
    cd98:	0000d08c 	.word	0x0000d08c
    cd9c:	0000d100 	.word	0x0000d100
    cda0:	0000cc9c 	.word	0x0000cc9c
    cda4:	0000d0c0 	.word	0x0000d0c0
    cda8:	0000d0b0 	.word	0x0000d0b0
    cdac:	0000d100 	.word	0x0000d100
    cdb0:	0000d100 	.word	0x0000d100
    cdb4:	0000d100 	.word	0x0000d100
    cdb8:	0000d100 	.word	0x0000d100
    cdbc:	0000d098 	.word	0x0000d098
    cdc0:	0000d100 	.word	0x0000d100
    cdc4:	0000d07c 	.word	0x0000d07c
    cdc8:	0000d06c 	.word	0x0000d06c
    cdcc:	0000ccc0 	.word	0x0000ccc0
    cdd0:	0000ccc0 	.word	0x0000ccc0
    cdd4:	0000d100 	.word	0x0000d100
    cdd8:	0000d100 	.word	0x0000d100
    cddc:	0000ccc0 	.word	0x0000ccc0
    cde0:	e241303b 	sub	r3, r1, #59	; 0x3b
    cde4:	e3530032 	cmp	r3, #50	; 0x32
    cde8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    cdec:	eaffffbb 	b	cce0 <CScreenDevice::Write(char)+0x80>
    cdf0:	0000d060 	.word	0x0000d060
    cdf4:	0000cce0 	.word	0x0000cce0
    cdf8:	0000cce0 	.word	0x0000cce0
    cdfc:	0000cce0 	.word	0x0000cce0
    ce00:	0000cce0 	.word	0x0000cce0
    ce04:	0000cce0 	.word	0x0000cce0
    ce08:	0000cce0 	.word	0x0000cce0
    ce0c:	0000cce0 	.word	0x0000cce0
    ce10:	0000cce0 	.word	0x0000cce0
    ce14:	0000cce0 	.word	0x0000cce0
    ce18:	0000cce0 	.word	0x0000cce0
    ce1c:	0000cce0 	.word	0x0000cce0
    ce20:	0000cce0 	.word	0x0000cce0
    ce24:	0000cce0 	.word	0x0000cce0
    ce28:	0000cce0 	.word	0x0000cce0
    ce2c:	0000cce0 	.word	0x0000cce0
    ce30:	0000cce0 	.word	0x0000cce0
    ce34:	0000ccc0 	.word	0x0000ccc0
    ce38:	0000ccc0 	.word	0x0000ccc0
    ce3c:	0000cce0 	.word	0x0000cce0
    ce40:	0000cce0 	.word	0x0000cce0
    ce44:	0000ccc0 	.word	0x0000ccc0
    ce48:	0000cce0 	.word	0x0000cce0
    ce4c:	0000cce0 	.word	0x0000cce0
    ce50:	0000cce0 	.word	0x0000cce0
    ce54:	0000cce0 	.word	0x0000cce0
    ce58:	0000cce0 	.word	0x0000cce0
    ce5c:	0000cce0 	.word	0x0000cce0
    ce60:	0000cce0 	.word	0x0000cce0
    ce64:	0000cfb0 	.word	0x0000cfb0
    ce68:	0000cce0 	.word	0x0000cce0
    ce6c:	0000cce0 	.word	0x0000cce0
    ce70:	0000cce0 	.word	0x0000cce0
    ce74:	0000cce0 	.word	0x0000cce0
    ce78:	0000cce0 	.word	0x0000cce0
    ce7c:	0000cce0 	.word	0x0000cce0
    ce80:	0000cce0 	.word	0x0000cce0
    ce84:	0000cce0 	.word	0x0000cce0
    ce88:	0000cce0 	.word	0x0000cce0
    ce8c:	0000cce0 	.word	0x0000cce0
    ce90:	0000cce0 	.word	0x0000cce0
    ce94:	0000cce0 	.word	0x0000cce0
    ce98:	0000cce0 	.word	0x0000cce0
    ce9c:	0000cce0 	.word	0x0000cce0
    cea0:	0000cce0 	.word	0x0000cce0
    cea4:	0000cfc4 	.word	0x0000cfc4
    cea8:	0000cce0 	.word	0x0000cce0
    ceac:	0000cce0 	.word	0x0000cce0
    ceb0:	0000cce0 	.word	0x0000cce0
    ceb4:	0000cfc4 	.word	0x0000cfc4
    ceb8:	0000cfe0 	.word	0x0000cfe0
    cebc:	e2411030 	sub	r1, r1, #48	; 0x30
    cec0:	e6ef3071 	uxtb	r3, r1
    cec4:	e3530009 	cmp	r3, #9
    cec8:	8affff7c 	bhi	ccc0 <CScreenDevice::Write(char)+0x60>
    cecc:	e3a03007 	mov	r3, #7
    ced0:	e5801050 	str	r1, [r0, #80]	; 0x50
    ced4:	e5803030 	str	r3, [r0, #48]	; 0x30
    ced8:	eaffff7a 	b	ccc8 <CScreenDevice::Write(char)+0x68>
    cedc:	e2411030 	sub	r1, r1, #48	; 0x30
    cee0:	e6ef3071 	uxtb	r3, r1
    cee4:	e3530009 	cmp	r3, #9
    cee8:	8affff74 	bhi	ccc0 <CScreenDevice::Write(char)+0x60>
    ceec:	e3a03006 	mov	r3, #6
    cef0:	e5801054 	str	r1, [r0, #84]	; 0x54
    cef4:	e5803030 	str	r3, [r0, #48]	; 0x30
    cef8:	eaffff72 	b	ccc8 <CScreenDevice::Write(char)+0x68>
    cefc:	e3510048 	cmp	r1, #72	; 0x48
    cf00:	0a00008f 	beq	d144 <CScreenDevice::Write(char)+0x4e4>
    cf04:	e3510072 	cmp	r1, #114	; 0x72
    cf08:	0a000011 	beq	cf54 <CScreenDevice::Write(char)+0x2f4>
    cf0c:	e2411030 	sub	r1, r1, #48	; 0x30
    cf10:	e6ef3071 	uxtb	r3, r1
    cf14:	e3530009 	cmp	r3, #9
    cf18:	8affff68 	bhi	ccc0 <CScreenDevice::Write(char)+0x60>
    cf1c:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    cf20:	e3a0200a 	mov	r2, #10
    cf24:	e0211392 	mla	r1, r2, r3, r1
    cf28:	e35100c7 	cmp	r1, #199	; 0xc7
    cf2c:	e5801054 	str	r1, [r0, #84]	; 0x54
    cf30:	8affff62 	bhi	ccc0 <CScreenDevice::Write(char)+0x60>
    cf34:	eaffff63 	b	ccc8 <CScreenDevice::Write(char)+0x68>
    cf38:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    cf3c:	e3530019 	cmp	r3, #25
    cf40:	02411068 	subeq	r1, r1, #104	; 0x68
    cf44:	016f1f11 	clzeq	r1, r1
    cf48:	01a012a1 	lsreq	r1, r1, #5
    cf4c:	05841044 	streq	r1, [r4, #68]	; 0x44
    cf50:	eaffff5a 	b	ccc0 <CScreenDevice::Write(char)+0x60>
    cf54:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    cf58:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    cf5c:	ebfffdf5 	bl	c738 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    cf60:	e3a03000 	mov	r3, #0
    cf64:	e5843030 	str	r3, [r4, #48]	; 0x30
    cf68:	eaffff56 	b	ccc8 <CScreenDevice::Write(char)+0x68>
    cf6c:	e3a03001 	mov	r3, #1
    cf70:	e5803030 	str	r3, [r0, #48]	; 0x30
    cf74:	eaffff53 	b	ccc8 <CScreenDevice::Write(char)+0x68>
    cf78:	e3a03000 	mov	r3, #0
    cf7c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    cf80:	eaffff50 	b	ccc8 <CScreenDevice::Write(char)+0x68>
    cf84:	e3a03000 	mov	r3, #0
    cf88:	e580303c 	str	r3, [r0, #60]	; 0x3c
    cf8c:	e28dd008 	add	sp, sp, #8
    cf90:	e8bd4010 	pop	{r4, lr}
    cf94:	eafffe54 	b	c8ec <CScreenDevice::CursorDown()>
    cf98:	e28dd008 	add	sp, sp, #8
    cf9c:	e8bd4010 	pop	{r4, lr}
    cfa0:	eafffe76 	b	c980 <CScreenDevice::Tabulator()>
    cfa4:	e28dd008 	add	sp, sp, #8
    cfa8:	e8bd4010 	pop	{r4, lr}
    cfac:	eafffd9a 	b	c61c <CScreenDevice::CursorLeft()>
    cfb0:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    cfb4:	e3510000 	cmp	r1, #0
    cfb8:	0affff40 	beq	ccc0 <CScreenDevice::Write(char)+0x60>
    cfbc:	ebfffeec 	bl	cb74 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    cfc0:	eaffff3e 	b	ccc0 <CScreenDevice::Write(char)+0x60>
    cfc4:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    cfc8:	e3530004 	cmp	r3, #4
    cfcc:	02411068 	subeq	r1, r1, #104	; 0x68
    cfd0:	016f1f11 	clzeq	r1, r1
    cfd4:	01a012a1 	lsreq	r1, r1, #5
    cfd8:	0580104c 	streq	r1, [r0, #76]	; 0x4c
    cfdc:	eaffff37 	b	ccc0 <CScreenDevice::Write(char)+0x60>
    cfe0:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    cfe4:	e353001b 	cmp	r3, #27
    cfe8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    cfec:	eaffff33 	b	ccc0 <CScreenDevice::Write(char)+0x60>
    cff0:	0000d138 	.word	0x0000d138
    cff4:	0000d12c 	.word	0x0000d12c
    cff8:	0000d120 	.word	0x0000d120
    cffc:	0000ccc0 	.word	0x0000ccc0
    d000:	0000ccc0 	.word	0x0000ccc0
    d004:	0000ccc0 	.word	0x0000ccc0
    d008:	0000ccc0 	.word	0x0000ccc0
    d00c:	0000ccc0 	.word	0x0000ccc0
    d010:	0000ccc0 	.word	0x0000ccc0
    d014:	0000ccc0 	.word	0x0000ccc0
    d018:	0000ccc0 	.word	0x0000ccc0
    d01c:	0000ccc0 	.word	0x0000ccc0
    d020:	0000ccc0 	.word	0x0000ccc0
    d024:	0000ccc0 	.word	0x0000ccc0
    d028:	0000ccc0 	.word	0x0000ccc0
    d02c:	0000ccc0 	.word	0x0000ccc0
    d030:	0000ccc0 	.word	0x0000ccc0
    d034:	0000ccc0 	.word	0x0000ccc0
    d038:	0000ccc0 	.word	0x0000ccc0
    d03c:	0000ccc0 	.word	0x0000ccc0
    d040:	0000ccc0 	.word	0x0000ccc0
    d044:	0000ccc0 	.word	0x0000ccc0
    d048:	0000ccc0 	.word	0x0000ccc0
    d04c:	0000ccc0 	.word	0x0000ccc0
    d050:	0000ccc0 	.word	0x0000ccc0
    d054:	0000ccc0 	.word	0x0000ccc0
    d058:	0000ccc0 	.word	0x0000ccc0
    d05c:	0000d138 	.word	0x0000d138
    d060:	e3a03005 	mov	r3, #5
    d064:	e5803030 	str	r3, [r0, #48]	; 0x30
    d068:	eaffff16 	b	ccc8 <CScreenDevice::Write(char)+0x68>
    d06c:	ebfffeae 	bl	cb2c <CScreenDevice::ClearLineEnd()>
    d070:	e3a03000 	mov	r3, #0
    d074:	e5843030 	str	r3, [r4, #48]	; 0x30
    d078:	eaffff12 	b	ccc8 <CScreenDevice::Write(char)+0x68>
    d07c:	ebfffed7 	bl	cbe0 <CScreenDevice::ClearDisplayEnd()>
    d080:	e3a03000 	mov	r3, #0
    d084:	e5843030 	str	r3, [r4, #48]	; 0x30
    d088:	eaffff0e 	b	ccc8 <CScreenDevice::Write(char)+0x68>
    d08c:	e3a03004 	mov	r3, #4
    d090:	e5803030 	str	r3, [r0, #48]	; 0x30
    d094:	eaffff0b 	b	ccc8 <CScreenDevice::Write(char)+0x68>
    d098:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    d09c:	e3a03000 	mov	r3, #0
    d0a0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    d0a4:	e5802040 	str	r2, [r0, #64]	; 0x40
    d0a8:	e5803030 	str	r3, [r0, #48]	; 0x30
    d0ac:	eaffff05 	b	ccc8 <CScreenDevice::Write(char)+0x68>
    d0b0:	ebfffe23 	bl	c944 <CScreenDevice::CursorRight()>
    d0b4:	e3a03000 	mov	r3, #0
    d0b8:	e5843030 	str	r3, [r4, #48]	; 0x30
    d0bc:	eaffff01 	b	ccc8 <CScreenDevice::Write(char)+0x68>
    d0c0:	ebfffe09 	bl	c8ec <CScreenDevice::CursorDown()>
    d0c4:	e3a03000 	mov	r3, #0
    d0c8:	e5843030 	str	r3, [r4, #48]	; 0x30
    d0cc:	eafffefd 	b	ccc8 <CScreenDevice::Write(char)+0x68>
    d0d0:	e6ef3071 	uxtb	r3, r1
    d0d4:	e353001f 	cmp	r3, #31
    d0d8:	9afffefa 	bls	ccc8 <CScreenDevice::Write(char)+0x68>
    d0dc:	e5d0c048 	ldrb	ip, [r0, #72]	; 0x48
    d0e0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    d0e4:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    d0e8:	e58dc000 	str	ip, [sp]
    d0ec:	ebfffe35 	bl	c9c8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    d0f0:	e1a00004 	mov	r0, r4
    d0f4:	e28dd008 	add	sp, sp, #8
    d0f8:	e8bd4010 	pop	{r4, lr}
    d0fc:	eafffe10 	b	c944 <CScreenDevice::CursorRight()>
    d100:	e2411030 	sub	r1, r1, #48	; 0x30
    d104:	e6ef3071 	uxtb	r3, r1
    d108:	e3530009 	cmp	r3, #9
    d10c:	8afffeeb 	bhi	ccc0 <CScreenDevice::Write(char)+0x60>
    d110:	e3a03003 	mov	r3, #3
    d114:	e5801050 	str	r1, [r0, #80]	; 0x50
    d118:	e5803030 	str	r3, [r0, #48]	; 0x30
    d11c:	eafffee9 	b	ccc8 <CScreenDevice::Write(char)+0x68>
    d120:	e3a03003 	mov	r3, #3
    d124:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    d128:	eafffee4 	b	ccc0 <CScreenDevice::Write(char)+0x60>
    d12c:	e3a03002 	mov	r3, #2
    d130:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    d134:	eafffee1 	b	ccc0 <CScreenDevice::Write(char)+0x60>
    d138:	e3a03001 	mov	r3, #1
    d13c:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    d140:	eafffede 	b	ccc0 <CScreenDevice::Write(char)+0x60>
    d144:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    d148:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    d14c:	ebfffd4d 	bl	c688 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    d150:	e3a03000 	mov	r3, #0
    d154:	e5843030 	str	r3, [r4, #48]	; 0x30
    d158:	eafffeda 	b	ccc8 <CScreenDevice::Write(char)+0x68>

0000d15c <CScreenDevice::Write(void const*, unsigned int)>:
    d15c:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    d160:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d164:	e1a05000 	mov	r5, r0
    d168:	e3530000 	cmp	r3, #0
    d16c:	e1a06001 	mov	r6, r1
    d170:	e1a08002 	mov	r8, r2
    d174:	1a000026 	bne	d214 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    d178:	e5954044 	ldr	r4, [r5, #68]	; 0x44
    d17c:	e3a03001 	mov	r3, #1
    d180:	e5853058 	str	r3, [r5, #88]	; 0x58
    d184:	e3540000 	cmp	r4, #0
    d188:	1a00001a 	bne	d1f8 <CScreenDevice::Write(void const*, unsigned int)+0x9c>
    d18c:	e3580000 	cmp	r8, #0
    d190:	e2487001 	sub	r7, r8, #1
    d194:	0a00000b 	beq	d1c8 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    d198:	e1a04006 	mov	r4, r6
    d19c:	e0d410d1 	ldrsb	r1, [r4], #1
    d1a0:	e1a00005 	mov	r0, r5
    d1a4:	ebfffead 	bl	cc60 <CScreenDevice::Write(char)>
    d1a8:	e2643001 	rsb	r3, r4, #1
    d1ac:	e0833007 	add	r3, r3, r7
    d1b0:	e1760003 	cmn	r6, r3
    d1b4:	1afffff8 	bne	d19c <CScreenDevice::Write(void const*, unsigned int)+0x40>
    d1b8:	e2874001 	add	r4, r7, #1
    d1bc:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    d1c0:	e3530000 	cmp	r3, #0
    d1c4:	1a000008 	bne	d1ec <CScreenDevice::Write(void const*, unsigned int)+0x90>
    d1c8:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
    d1cc:	e3a02000 	mov	r2, #0
    d1d0:	e5852058 	str	r2, [r5, #88]	; 0x58
    d1d4:	e1530002 	cmp	r3, r2
    d1d8:	0a000000 	beq	d1e0 <CScreenDevice::Write(void const*, unsigned int)+0x84>
    d1dc:	ebfff702 	bl	adec <LeaveCritical>
    d1e0:	f57ff05f 	dmb	sy
    d1e4:	e1a00004 	mov	r0, r4
    d1e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d1ec:	e1a00005 	mov	r0, r5
    d1f0:	ebfffc47 	bl	c314 <CScreenDevice::InvertCursor() [clone .part.6]>
    d1f4:	eafffff3 	b	d1c8 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    d1f8:	e1a00005 	mov	r0, r5
    d1fc:	e2487001 	sub	r7, r8, #1
    d200:	ebfffc43 	bl	c314 <CScreenDevice::InvertCursor() [clone .part.6]>
    d204:	e3580000 	cmp	r8, #0
    d208:	1affffe2 	bne	d198 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    d20c:	e1a04008 	mov	r4, r8
    d210:	eaffffe9 	b	d1bc <CScreenDevice::Write(void const*, unsigned int)+0x60>
    d214:	ebfff6e7 	bl	adb8 <EnterCritical>
    d218:	eaffffd6 	b	d178 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000d21c <CScreenDevice::Initialize()>:
    d21c:	e92d4070 	push	{r4, r5, r6, lr}
    d220:	e1a04000 	mov	r4, r0
    d224:	e590500c 	ldr	r5, [r0, #12]
    d228:	e24dd008 	sub	sp, sp, #8
    d22c:	e3550000 	cmp	r5, #0
    d230:	1a00001c 	bne	d2a8 <CScreenDevice::Initialize()+0x8c>
    d234:	e3a00024 	mov	r0, #36	; 0x24
    d238:	ebfff6da 	bl	ada8 <operator new(unsigned int)>
    d23c:	e3a03008 	mov	r3, #8
    d240:	e5942008 	ldr	r2, [r4, #8]
    d244:	e1a06000 	mov	r6, r0
    d248:	e5941004 	ldr	r1, [r4, #4]
    d24c:	e58d5004 	str	r5, [sp, #4]
    d250:	e58d5000 	str	r5, [sp]
    d254:	eb000f83 	bl	11068 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    d258:	e1a00006 	mov	r0, r6
    d25c:	e30f2fdf 	movw	r2, #65503	; 0xffdf
    d260:	e3a01001 	mov	r1, #1
    d264:	e5846010 	str	r6, [r4, #16]
    d268:	eb000fd2 	bl	111b8 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    d26c:	e3a02b3e 	mov	r2, #63488	; 0xf800
    d270:	e3a01002 	mov	r1, #2
    d274:	e5940010 	ldr	r0, [r4, #16]
    d278:	eb000fce 	bl	111b8 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    d27c:	e3a0201f 	mov	r2, #31
    d280:	e3a01003 	mov	r1, #3
    d284:	e5940010 	ldr	r0, [r4, #16]
    d288:	eb000fca 	bl	111b8 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    d28c:	e5940010 	ldr	r0, [r4, #16]
    d290:	eb000fdd 	bl	1120c <CBcmFrameBuffer::Initialize()>
    d294:	e3500000 	cmp	r0, #0
    d298:	1a000028 	bne	d340 <CScreenDevice::Initialize()+0x124>
    d29c:	e1a00005 	mov	r0, r5
    d2a0:	e28dd008 	add	sp, sp, #8
    d2a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d2a8:	e5903004 	ldr	r3, [r0, #4]
    d2ac:	e5900008 	ldr	r0, [r0, #8]
    d2b0:	e5843024 	str	r3, [r4, #36]	; 0x24
    d2b4:	e5840028 	str	r0, [r4, #40]	; 0x28
    d2b8:	e5843020 	str	r3, [r4, #32]
    d2bc:	e0000390 	mul	r0, r0, r3
    d2c0:	e584001c 	str	r0, [r4, #28]
    d2c4:	ebfff6b8 	bl	adac <operator new[](unsigned int)>
    d2c8:	e5946028 	ldr	r6, [r4, #40]	; 0x28
    d2cc:	e5840018 	str	r0, [r4, #24]
    d2d0:	e2845014 	add	r5, r4, #20
    d2d4:	e1a00005 	mov	r0, r5
    d2d8:	eb000087 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    d2dc:	e736f016 	udiv	r6, r6, r0
    d2e0:	e1a00005 	mov	r0, r5
    d2e4:	eb000084 	bl	d4fc <CCharGenerator::GetCharHeight() const>
    d2e8:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    d2ec:	e3a02000 	mov	r2, #0
    d2f0:	e5843040 	str	r3, [r4, #64]	; 0x40
    d2f4:	e0060690 	mul	r6, r0, r6
    d2f8:	e584203c 	str	r2, [r4, #60]	; 0x3c
    d2fc:	e1a00004 	mov	r0, r4
    d300:	e584602c 	str	r6, [r4, #44]	; 0x2c
    d304:	e5846038 	str	r6, [r4, #56]	; 0x38
    d308:	ebfffe34 	bl	cbe0 <CScreenDevice::ClearDisplayEnd()>
    d30c:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    d310:	e3530000 	cmp	r3, #0
    d314:	1a000021 	bne	d3a0 <CScreenDevice::Initialize()+0x184>
    d318:	eb0001a2 	bl	d9a8 <CDeviceNameService::Get()>
    d31c:	e3a05001 	mov	r5, #1
    d320:	e1a02004 	mov	r2, r4
    d324:	e3a03000 	mov	r3, #0
    d328:	e3021384 	movw	r1, #9092	; 0x2384
    d32c:	e3401005 	movt	r1, #5
    d330:	eb000128 	bl	d7d8 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    d334:	e1a00005 	mov	r0, r5
    d338:	e28dd008 	add	sp, sp, #8
    d33c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d340:	e5940010 	ldr	r0, [r4, #16]
    d344:	eb000feb 	bl	112f8 <CBcmFrameBuffer::GetDepth() const>
    d348:	e3500008 	cmp	r0, #8
    d34c:	1affffd2 	bne	d29c <CScreenDevice::Initialize()+0x80>
    d350:	e5940010 	ldr	r0, [r4, #16]
    d354:	eb000fe9 	bl	11300 <CBcmFrameBuffer::GetBuffer() const>
    d358:	e5840018 	str	r0, [r4, #24]
    d35c:	e5940010 	ldr	r0, [r4, #16]
    d360:	eb000fe8 	bl	11308 <CBcmFrameBuffer::GetSize() const>
    d364:	e584001c 	str	r0, [r4, #28]
    d368:	e5940010 	ldr	r0, [r4, #16]
    d36c:	eb000fdf 	bl	112f0 <CBcmFrameBuffer::GetPitch() const>
    d370:	e5840020 	str	r0, [r4, #32]
    d374:	e5940010 	ldr	r0, [r4, #16]
    d378:	eb000fd4 	bl	112d0 <CBcmFrameBuffer::GetWidth() const>
    d37c:	e5840024 	str	r0, [r4, #36]	; 0x24
    d380:	e5940010 	ldr	r0, [r4, #16]
    d384:	eb000fd3 	bl	112d8 <CBcmFrameBuffer::GetHeight() const>
    d388:	e5943020 	ldr	r3, [r4, #32]
    d38c:	e1a06000 	mov	r6, r0
    d390:	e5840028 	str	r0, [r4, #40]	; 0x28
    d394:	e3130003 	tst	r3, #3
    d398:	0affffcc 	beq	d2d0 <CScreenDevice::Initialize()+0xb4>
    d39c:	eaffffbe 	b	d29c <CScreenDevice::Initialize()+0x80>
    d3a0:	e1a00004 	mov	r0, r4
    d3a4:	ebfffbda 	bl	c314 <CScreenDevice::InvertCursor() [clone .part.6]>
    d3a8:	eaffffda 	b	d318 <CScreenDevice::Initialize()+0xfc>

0000d3ac <CScreenDevice::InvertCursor()>:
    d3ac:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    d3b0:	e3530000 	cmp	r3, #0
    d3b4:	012fff1e 	bxeq	lr
    d3b8:	eafffbd5 	b	c314 <CScreenDevice::InvertCursor() [clone .part.6]>

0000d3bc <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char)>:
    d3bc:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    d3c0:	e15c0001 	cmp	ip, r1
    d3c4:	912fff1e 	bxls	lr
    d3c8:	eafffbca 	b	c2f8 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>

0000d3cc <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    d3cc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d3d0:	e1530001 	cmp	r3, r1
    d3d4:	9a000007 	bls	d3f8 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x2c>
    d3d8:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    d3dc:	e1530002 	cmp	r3, r2
    d3e0:	9a000004 	bls	d3f8 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x2c>
    d3e4:	e590c020 	ldr	ip, [r0, #32]
    d3e8:	e5903018 	ldr	r3, [r0, #24]
    d3ec:	e022329c 	mla	r2, ip, r2, r3
    d3f0:	e7d20001 	ldrb	r0, [r2, r1]
    d3f4:	e12fff1e 	bx	lr
    d3f8:	e3a00000 	mov	r0, #0
    d3fc:	e12fff1e 	bx	lr

0000d400 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    d400:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d404:	e1a05000 	mov	r5, r0
    d408:	e1a04001 	mov	r4, r1
    d40c:	e24dd00c 	sub	sp, sp, #12
    d410:	e1a06002 	mov	r6, r2
    d414:	e2800014 	add	r0, r0, #20
    d418:	e2044003 	and	r4, r4, #3
    d41c:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    d420:	eb000033 	bl	d4f4 <CCharGenerator::GetCharWidth() const>
    d424:	e2061003 	and	r1, r6, #3
    d428:	e3023428 	movw	r3, #9256	; 0x2428
    d42c:	e3403005 	movt	r3, #5
    d430:	e0831001 	add	r1, r3, r1
    d434:	e0240094 	mla	r4, r4, r0, r0
    d438:	e3a02002 	mov	r2, #2
    d43c:	e3a03000 	mov	r3, #0
    d440:	e58d2000 	str	r2, [sp]
    d444:	e1a00005 	mov	r0, r5
    d448:	e1d111dc 	ldrsb	r1, [r1, #28]
    d44c:	e0472004 	sub	r2, r7, r4
    d450:	ebfffd5c 	bl	c9c8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    d454:	e28dd00c 	add	sp, sp, #12
    d458:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000d45c <assertion_failed>:
    d45c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d460:	e1a05000 	mov	r5, r0
    d464:	e1a06001 	mov	r6, r1
    d468:	e24dd01c 	sub	sp, sp, #28
    d46c:	e1a07002 	mov	r7, r2
    d470:	e1a0400d 	mov	r4, sp
    d474:	e28d0008 	add	r0, sp, #8
    d478:	eb00035c 	bl	e1f0 <CString::CString()>
    d47c:	e1a03007 	mov	r3, r7
    d480:	e1a02006 	mov	r2, r6
    d484:	e28d0008 	add	r0, sp, #8
    d488:	e302144c 	movw	r1, #9292	; 0x244c
    d48c:	e3401005 	movt	r1, #5
    d490:	eb000669 	bl	ee3c <CString::Format(char const*, ...)>
    d494:	e28d0008 	add	r0, sp, #8
    d498:	eb00036a 	bl	e248 <CString::operator char const*() const>
    d49c:	e1a01000 	mov	r1, r0
    d4a0:	e1a00004 	mov	r0, r4
    d4a4:	eb00007b 	bl	d698 <debug_stacktrace(unsigned int const*, char const*)>
    d4a8:	eb00016a 	bl	da58 <CLogger::Get()>
    d4ac:	e1a04000 	mov	r4, r0
    d4b0:	e28d0008 	add	r0, sp, #8
    d4b4:	eb000363 	bl	e248 <CString::operator char const*() const>
    d4b8:	e3a02000 	mov	r2, #0
    d4bc:	e1a01000 	mov	r1, r0
    d4c0:	e58d5000 	str	r5, [sp]
    d4c4:	e1a00004 	mov	r0, r4
    d4c8:	e3023454 	movw	r3, #9300	; 0x2454
    d4cc:	e3403005 	movt	r3, #5
    d4d0:	eb00023d 	bl	ddcc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d4d4:	e28d0008 	add	r0, sp, #8
    d4d8:	eb000312 	bl	e128 <CString::~CString()>
    d4dc:	e28dd01c 	add	sp, sp, #28
    d4e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000d4e4 <CCharGenerator::CCharGenerator()>:
    d4e4:	e3a03008 	mov	r3, #8
    d4e8:	e5803000 	str	r3, [r0]
    d4ec:	e12fff1e 	bx	lr

0000d4f0 <CCharGenerator::~CCharGenerator()>:
    d4f0:	e12fff1e 	bx	lr

0000d4f4 <CCharGenerator::GetCharWidth() const>:
    d4f4:	e5900000 	ldr	r0, [r0]
    d4f8:	e12fff1e 	bx	lr

0000d4fc <CCharGenerator::GetCharHeight() const>:
    d4fc:	e3a00013 	mov	r0, #19
    d500:	e12fff1e 	bx	lr

0000d504 <CCharGenerator::GetUnderline() const>:
    d504:	e3a00010 	mov	r0, #16
    d508:	e12fff1e 	bx	lr

0000d50c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    d50c:	e6ef1071 	uxtb	r1, r1
    d510:	e92d4070 	push	{r4, r5, r6, lr}
    d514:	e2414021 	sub	r4, r1, #33	; 0x21
    d518:	e35400de 	cmp	r4, #222	; 0xde
    d51c:	8a00000f 	bhi	d560 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    d520:	e1a06003 	mov	r6, r3
    d524:	e5903000 	ldr	r3, [r0]
    d528:	e1a05002 	mov	r5, r2
    d52c:	e1530002 	cmp	r3, r2
    d530:	9a00000c 	bls	d568 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x5c>
    d534:	e356000f 	cmp	r6, #15
    d538:	8a000008 	bhi	d560 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    d53c:	e302146c 	movw	r1, #9324	; 0x246c
    d540:	e3401005 	movt	r1, #5
    d544:	e3a02080 	mov	r2, #128	; 0x80
    d548:	e0811204 	add	r1, r1, r4, lsl #4
    d54c:	e7d13006 	ldrb	r3, [r1, r6]
    d550:	e0133552 	ands	r3, r3, r2, asr r5
    d554:	13a00001 	movne	r0, #1
    d558:	03a00000 	moveq	r0, #0
    d55c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d560:	e3a00000 	mov	r0, #0
    d564:	e8bd8070 	pop	{r4, r5, r6, pc}
    d568:	e303125c 	movw	r1, #12892	; 0x325c
    d56c:	e3401005 	movt	r1, #5
    d570:	e3030270 	movw	r0, #12912	; 0x3270
    d574:	e3400005 	movt	r0, #5
    d578:	e3a0204e 	mov	r2, #78	; 0x4e
    d57c:	ebffffb6 	bl	d45c <assertion_failed>
    d580:	e356000f 	cmp	r6, #15
    d584:	9affffec 	bls	d53c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
    d588:	eafffff4 	b	d560 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>

0000d58c <debug_hexdump(void const*, unsigned int, char const*)>:
    d58c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d590:	e3520000 	cmp	r2, #0
    d594:	e1a05001 	mov	r5, r1
    d598:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    d59c:	e1a04000 	mov	r4, r0
    d5a0:	e3037288 	movw	r7, #12936	; 0x3288
    d5a4:	e3407005 	movt	r7, #5
    d5a8:	11a07002 	movne	r7, r2
    d5ac:	eb000129 	bl	da58 <CLogger::Get()>
    d5b0:	e58d4004 	str	r4, [sp, #4]
    d5b4:	e1a01007 	mov	r1, r7
    d5b8:	e58d5000 	str	r5, [sp]
    d5bc:	e3033290 	movw	r3, #12944	; 0x3290
    d5c0:	e3403005 	movt	r3, #5
    d5c4:	e3a02004 	mov	r2, #4
    d5c8:	eb0001ff 	bl	ddcc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d5cc:	e3550000 	cmp	r5, #0
    d5d0:	0a00002a 	beq	d680 <debug_hexdump(void const*, unsigned int, char const*)+0xf4>
    d5d4:	e30382b4 	movw	r8, #12980	; 0x32b4
    d5d8:	e3408005 	movt	r8, #5
    d5dc:	eb00011d 	bl	da58 <CLogger::Get()>
    d5e0:	e5d4e00f 	ldrb	lr, [r4, #15]
    d5e4:	e5d4b00e 	ldrb	fp, [r4, #14]
    d5e8:	e6ffc074 	uxth	ip, r4
    d5ec:	e5d4a00d 	ldrb	sl, [r4, #13]
    d5f0:	e1a03008 	mov	r3, r8
    d5f4:	e5d4900c 	ldrb	r9, [r4, #12]
    d5f8:	e3a02004 	mov	r2, #4
    d5fc:	e5d4600b 	ldrb	r6, [r4, #11]
    d600:	e1a01007 	mov	r1, r7
    d604:	e58de040 	str	lr, [sp, #64]	; 0x40
    d608:	e2844010 	add	r4, r4, #16
    d60c:	e554e006 	ldrb	lr, [r4, #-6]
    d610:	e58db03c 	str	fp, [sp, #60]	; 0x3c
    d614:	e554b007 	ldrb	fp, [r4, #-7]
    d618:	e58da038 	str	sl, [sp, #56]	; 0x38
    d61c:	e554a008 	ldrb	sl, [r4, #-8]
    d620:	e58d9034 	str	r9, [sp, #52]	; 0x34
    d624:	e5549009 	ldrb	r9, [r4, #-9]
    d628:	e58d6030 	str	r6, [sp, #48]	; 0x30
    d62c:	e554600a 	ldrb	r6, [r4, #-10]
    d630:	e58de02c 	str	lr, [sp, #44]	; 0x2c
    d634:	e554e00b 	ldrb	lr, [r4, #-11]
    d638:	e58db028 	str	fp, [sp, #40]	; 0x28
    d63c:	e554b00c 	ldrb	fp, [r4, #-12]
    d640:	e58da024 	str	sl, [sp, #36]	; 0x24
    d644:	e554a00d 	ldrb	sl, [r4, #-13]
    d648:	e58d9020 	str	r9, [sp, #32]
    d64c:	e554900e 	ldrb	r9, [r4, #-14]
    d650:	e58d601c 	str	r6, [sp, #28]
    d654:	e554600f 	ldrb	r6, [r4, #-15]
    d658:	e58de018 	str	lr, [sp, #24]
    d65c:	e554e010 	ldrb	lr, [r4, #-16]
    d660:	e58db014 	str	fp, [sp, #20]
    d664:	e58da010 	str	sl, [sp, #16]
    d668:	e58d900c 	str	r9, [sp, #12]
    d66c:	e58d6008 	str	r6, [sp, #8]
    d670:	e88d5000 	stm	sp, {ip, lr}
    d674:	eb0001d4 	bl	ddcc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d678:	e355000f 	cmp	r5, #15
    d67c:	8a000001 	bhi	d688 <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
    d680:	e28dd04c 	add	sp, sp, #76	; 0x4c
    d684:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d688:	e2555010 	subs	r5, r5, #16
    d68c:	1affffd2 	bne	d5dc <debug_hexdump(void const*, unsigned int, char const*)+0x50>
    d690:	e28dd04c 	add	sp, sp, #76	; 0x4c
    d694:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d698 <debug_stacktrace(unsigned int const*, char const*)>:
    d698:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d69c:	e3510000 	cmp	r1, #0
    d6a0:	e3037288 	movw	r7, #12936	; 0x3288
    d6a4:	e3407005 	movt	r7, #5
    d6a8:	11a07001 	movne	r7, r1
    d6ac:	e30163dc 	movw	r6, #5084	; 0x13dc
    d6b0:	e3406001 	movt	r6, #1
    d6b4:	e303830c 	movw	r8, #13068	; 0x330c
    d6b8:	e3408005 	movt	r8, #5
    d6bc:	e24dd008 	sub	sp, sp, #8
    d6c0:	e1a05000 	mov	r5, r0
    d6c4:	e3a04000 	mov	r4, #0
    d6c8:	ea000003 	b	d6dc <debug_stacktrace(unsigned int const*, char const*)+0x44>
    d6cc:	e2844001 	add	r4, r4, #1
    d6d0:	e2855004 	add	r5, r5, #4
    d6d4:	e3540040 	cmp	r4, #64	; 0x40
    d6d8:	0a000010 	beq	d720 <debug_stacktrace(unsigned int const*, char const*)+0x88>
    d6dc:	e5953000 	ldr	r3, [r5]
    d6e0:	e3530902 	cmp	r3, #32768	; 0x8000
    d6e4:	3afffff8 	bcc	d6cc <debug_stacktrace(unsigned int const*, char const*)+0x34>
    d6e8:	e1530006 	cmp	r3, r6
    d6ec:	2afffff6 	bcs	d6cc <debug_stacktrace(unsigned int const*, char const*)+0x34>
    d6f0:	eb0000d8 	bl	da58 <CLogger::Get()>
    d6f4:	e5952000 	ldr	r2, [r5]
    d6f8:	e1a03008 	mov	r3, r8
    d6fc:	e58d4000 	str	r4, [sp]
    d700:	e58d2004 	str	r2, [sp, #4]
    d704:	e1a01007 	mov	r1, r7
    d708:	e3a02004 	mov	r2, #4
    d70c:	e2844001 	add	r4, r4, #1
    d710:	eb0001ad 	bl	ddcc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d714:	e3540040 	cmp	r4, #64	; 0x40
    d718:	e2855004 	add	r5, r5, #4
    d71c:	1affffee 	bne	d6dc <debug_stacktrace(unsigned int const*, char const*)+0x44>
    d720:	e28dd008 	add	sp, sp, #8
    d724:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d728 <CDeviceNameService::CDeviceNameService()>:
    d728:	e92d4070 	push	{r4, r5, r6, lr}
    d72c:	e3035c60 	movw	r5, #15456	; 0x3c60
    d730:	e3405005 	movt	r5, #5
    d734:	e3a03000 	mov	r3, #0
    d738:	e1a04000 	mov	r4, r0
    d73c:	e5803004 	str	r3, [r0, #4]
    d740:	e5952000 	ldr	r2, [r5]
    d744:	e5803000 	str	r3, [r0]
    d748:	e1520003 	cmp	r2, r3
    d74c:	0a000005 	beq	d768 <CDeviceNameService::CDeviceNameService()+0x40>
    d750:	e3031320 	movw	r1, #13088	; 0x3320
    d754:	e3401005 	movt	r1, #5
    d758:	e3030338 	movw	r0, #13112	; 0x3338
    d75c:	e3400005 	movt	r0, #5
    d760:	e3a0201e 	mov	r2, #30
    d764:	ebffff3c 	bl	d45c <assertion_failed>
    d768:	e5854000 	str	r4, [r5]
    d76c:	e1a00004 	mov	r0, r4
    d770:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d774 <CDeviceNameService::~CDeviceNameService()>:
    d774:	e5903000 	ldr	r3, [r0]
    d778:	e92d4070 	push	{r4, r5, r6, lr}
    d77c:	e1a05000 	mov	r5, r0
    d780:	e3530000 	cmp	r3, #0
    d784:	0a00000d 	beq	d7c0 <CDeviceNameService::~CDeviceNameService()+0x4c>
    d788:	e3a06000 	mov	r6, #0
    d78c:	e5930004 	ldr	r0, [r3, #4]
    d790:	e5934000 	ldr	r4, [r3]
    d794:	e3500000 	cmp	r0, #0
    d798:	0a000000 	beq	d7a0 <CDeviceNameService::~CDeviceNameService()+0x2c>
    d79c:	ebfff584 	bl	adb4 <operator delete[](void*)>
    d7a0:	e5953000 	ldr	r3, [r5]
    d7a4:	e1a00003 	mov	r0, r3
    d7a8:	e5836004 	str	r6, [r3, #4]
    d7ac:	e5836008 	str	r6, [r3, #8]
    d7b0:	ebfff57e 	bl	adb0 <operator delete(void*)>
    d7b4:	e2543000 	subs	r3, r4, #0
    d7b8:	e5854000 	str	r4, [r5]
    d7bc:	1afffff2 	bne	d78c <CDeviceNameService::~CDeviceNameService()+0x18>
    d7c0:	e3033c60 	movw	r3, #15456	; 0x3c60
    d7c4:	e3403005 	movt	r3, #5
    d7c8:	e3a02000 	mov	r2, #0
    d7cc:	e1a00005 	mov	r0, r5
    d7d0:	e5832000 	str	r2, [r3]
    d7d4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d7d8 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
    d7d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d7dc:	e1a08003 	mov	r8, r3
    d7e0:	e5903004 	ldr	r3, [r0, #4]
    d7e4:	e1a05000 	mov	r5, r0
    d7e8:	e1a06001 	mov	r6, r1
    d7ec:	e3530000 	cmp	r3, #0
    d7f0:	e1a07002 	mov	r7, r2
    d7f4:	1a000017 	bne	d858 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x80>
    d7f8:	e3a00010 	mov	r0, #16
    d7fc:	ebfff569 	bl	ada8 <operator new(unsigned int)>
    d800:	e3560000 	cmp	r6, #0
    d804:	e1a04000 	mov	r4, r0
    d808:	0a00001b 	beq	d87c <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xa4>
    d80c:	e1a00006 	mov	r0, r6
    d810:	eb000cfb 	bl	10c04 <strlen>
    d814:	e2800001 	add	r0, r0, #1
    d818:	ebfff563 	bl	adac <operator new[](unsigned int)>
    d81c:	e1a01006 	mov	r1, r6
    d820:	e5840004 	str	r0, [r4, #4]
    d824:	eb000d1b 	bl	10c98 <strcpy>
    d828:	e3570000 	cmp	r7, #0
    d82c:	0a00000b 	beq	d860 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x88>
    d830:	e5952004 	ldr	r2, [r5, #4]
    d834:	e5953000 	ldr	r3, [r5]
    d838:	e3520000 	cmp	r2, #0
    d83c:	e5847008 	str	r7, [r4, #8]
    d840:	e584800c 	str	r8, [r4, #12]
    d844:	e5843000 	str	r3, [r4]
    d848:	e5854000 	str	r4, [r5]
    d84c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    d850:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    d854:	eafff564 	b	adec <LeaveCritical>
    d858:	ebfff556 	bl	adb8 <EnterCritical>
    d85c:	eaffffe5 	b	d7f8 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x20>
    d860:	e3031320 	movw	r1, #13088	; 0x3320
    d864:	e3401005 	movt	r1, #5
    d868:	e3030350 	movw	r0, #13136	; 0x3350
    d86c:	e3400005 	movt	r0, #5
    d870:	e3a0203f 	mov	r2, #63	; 0x3f
    d874:	ebfffef8 	bl	d45c <assertion_failed>
    d878:	eaffffec 	b	d830 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x58>
    d87c:	e3031320 	movw	r1, #13088	; 0x3320
    d880:	e3401005 	movt	r1, #5
    d884:	e3030344 	movw	r0, #13124	; 0x3344
    d888:	e3400005 	movt	r0, #5
    d88c:	e3a0203a 	mov	r2, #58	; 0x3a
    d890:	ebfffef1 	bl	d45c <assertion_failed>
    d894:	eaffffdc 	b	d80c <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x34>

0000d898 <CDeviceNameService::GetDevice(char const*, int)>:
    d898:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d89c:	e2515000 	subs	r5, r1, #0
    d8a0:	e1a07000 	mov	r7, r0
    d8a4:	e1a06002 	mov	r6, r2
    d8a8:	0a000037 	beq	d98c <CDeviceNameService::GetDevice(char const*, int)+0xf4>
    d8ac:	e5973004 	ldr	r3, [r7, #4]
    d8b0:	e3530000 	cmp	r3, #0
    d8b4:	1a00001a 	bne	d924 <CDeviceNameService::GetDevice(char const*, int)+0x8c>
    d8b8:	e5974000 	ldr	r4, [r7]
    d8bc:	e3540000 	cmp	r4, #0
    d8c0:	0a00001f 	beq	d944 <CDeviceNameService::GetDevice(char const*, int)+0xac>
    d8c4:	e3039320 	movw	r9, #13088	; 0x3320
    d8c8:	e3409005 	movt	r9, #5
    d8cc:	e3038360 	movw	r8, #13152	; 0x3360
    d8d0:	e3408005 	movt	r8, #5
    d8d4:	ea000009 	b	d900 <CDeviceNameService::GetDevice(char const*, int)+0x68>
    d8d8:	e1a00005 	mov	r0, r5
    d8dc:	eb000cd2 	bl	10c2c <strcmp>
    d8e0:	e3500000 	cmp	r0, #0
    d8e4:	1a000002 	bne	d8f4 <CDeviceNameService::GetDevice(char const*, int)+0x5c>
    d8e8:	e594300c 	ldr	r3, [r4, #12]
    d8ec:	e1530006 	cmp	r3, r6
    d8f0:	0a000016 	beq	d950 <CDeviceNameService::GetDevice(char const*, int)+0xb8>
    d8f4:	e5944000 	ldr	r4, [r4]
    d8f8:	e3540000 	cmp	r4, #0
    d8fc:	0a00000c 	beq	d934 <CDeviceNameService::GetDevice(char const*, int)+0x9c>
    d900:	e5941004 	ldr	r1, [r4, #4]
    d904:	e3510000 	cmp	r1, #0
    d908:	1afffff2 	bne	d8d8 <CDeviceNameService::GetDevice(char const*, int)+0x40>
    d90c:	e1a01009 	mov	r1, r9
    d910:	e3a02053 	mov	r2, #83	; 0x53
    d914:	e1a00008 	mov	r0, r8
    d918:	ebfffecf 	bl	d45c <assertion_failed>
    d91c:	e5941004 	ldr	r1, [r4, #4]
    d920:	eaffffec 	b	d8d8 <CDeviceNameService::GetDevice(char const*, int)+0x40>
    d924:	ebfff523 	bl	adb8 <EnterCritical>
    d928:	e5974000 	ldr	r4, [r7]
    d92c:	e3540000 	cmp	r4, #0
    d930:	1affffe3 	bne	d8c4 <CDeviceNameService::GetDevice(char const*, int)+0x2c>
    d934:	e5973004 	ldr	r3, [r7, #4]
    d938:	e3530000 	cmp	r3, #0
    d93c:	0a000000 	beq	d944 <CDeviceNameService::GetDevice(char const*, int)+0xac>
    d940:	ebfff529 	bl	adec <LeaveCritical>
    d944:	e3a04000 	mov	r4, #0
    d948:	e1a00004 	mov	r0, r4
    d94c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d950:	e5973004 	ldr	r3, [r7, #4]
    d954:	e5944008 	ldr	r4, [r4, #8]
    d958:	e3530000 	cmp	r3, #0
    d95c:	1a000008 	bne	d984 <CDeviceNameService::GetDevice(char const*, int)+0xec>
    d960:	e3540000 	cmp	r4, #0
    d964:	1afffff7 	bne	d948 <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    d968:	e3031320 	movw	r1, #13088	; 0x3320
    d96c:	e3401005 	movt	r1, #5
    d970:	e3030374 	movw	r0, #13172	; 0x3374
    d974:	e3400005 	movt	r0, #5
    d978:	e3a0205b 	mov	r2, #91	; 0x5b
    d97c:	ebfffeb6 	bl	d45c <assertion_failed>
    d980:	eafffff0 	b	d948 <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    d984:	ebfff518 	bl	adec <LeaveCritical>
    d988:	eafffff4 	b	d960 <CDeviceNameService::GetDevice(char const*, int)+0xc8>
    d98c:	e3031320 	movw	r1, #13088	; 0x3320
    d990:	e3401005 	movt	r1, #5
    d994:	e3030344 	movw	r0, #13124	; 0x3344
    d998:	e3400005 	movt	r0, #5
    d99c:	e3a0204c 	mov	r2, #76	; 0x4c
    d9a0:	ebfffead 	bl	d45c <assertion_failed>
    d9a4:	eaffffc0 	b	d8ac <CDeviceNameService::GetDevice(char const*, int)+0x14>

0000d9a8 <CDeviceNameService::Get()>:
    d9a8:	e92d4010 	push	{r4, lr}
    d9ac:	e3034c60 	movw	r4, #15456	; 0x3c60
    d9b0:	e3404005 	movt	r4, #5
    d9b4:	e5940000 	ldr	r0, [r4]
    d9b8:	e3500000 	cmp	r0, #0
    d9bc:	18bd8010 	popne	{r4, pc}
    d9c0:	e3a02069 	mov	r2, #105	; 0x69
    d9c4:	e3031320 	movw	r1, #13088	; 0x3320
    d9c8:	e3401005 	movt	r1, #5
    d9cc:	e3030384 	movw	r0, #13188	; 0x3384
    d9d0:	e3400005 	movt	r0, #5
    d9d4:	ebfffea0 	bl	d45c <assertion_failed>
    d9d8:	e5940000 	ldr	r0, [r4]
    d9dc:	e8bd8010 	pop	{r4, pc}

0000d9e0 <CLogger::CLogger(unsigned int, CTimer*)>:
    d9e0:	e92d4010 	push	{r4, lr}
    d9e4:	e1a04000 	mov	r4, r0
    d9e8:	e3a03000 	mov	r3, #0
    d9ec:	e3a0c001 	mov	ip, #1
    d9f0:	e3a00901 	mov	r0, #16384	; 0x4000
    d9f4:	e5843008 	str	r3, [r4, #8]
    d9f8:	e584300c 	str	r3, [r4, #12]
    d9fc:	e5843010 	str	r3, [r4, #16]
    da00:	e5843014 	str	r3, [r4, #20]
    da04:	e8840006 	stm	r4, {r1, r2}
    da08:	e584c018 	str	ip, [r4, #24]
    da0c:	ebfff4e6 	bl	adac <operator new[](unsigned int)>
    da10:	e3033c64 	movw	r3, #15460	; 0x3c64
    da14:	e3403005 	movt	r3, #5
    da18:	e584000c 	str	r0, [r4, #12]
    da1c:	e1a00004 	mov	r0, r4
    da20:	e5834000 	str	r4, [r3]
    da24:	e8bd8010 	pop	{r4, pc}

0000da28 <CLogger::~CLogger()>:
    da28:	e92d4010 	push	{r4, lr}
    da2c:	e1a04000 	mov	r4, r0
    da30:	e590000c 	ldr	r0, [r0, #12]
    da34:	e3a02000 	mov	r2, #0
    da38:	e3033c64 	movw	r3, #15460	; 0x3c64
    da3c:	e3403005 	movt	r3, #5
    da40:	e1500002 	cmp	r0, r2
    da44:	e5832000 	str	r2, [r3]
    da48:	0a000000 	beq	da50 <CLogger::~CLogger()+0x28>
    da4c:	ebfff4d8 	bl	adb4 <operator delete[](void*)>
    da50:	e1a00004 	mov	r0, r4
    da54:	e8bd8010 	pop	{r4, pc}

0000da58 <CLogger::Get()>:
    da58:	e3033c64 	movw	r3, #15460	; 0x3c64
    da5c:	e3403005 	movt	r3, #5
    da60:	e5930000 	ldr	r0, [r3]
    da64:	e12fff1e 	bx	lr

0000da68 <CLogger::Write(char const*)>:
    da68:	e92d4070 	push	{r4, r5, r6, lr}
    da6c:	e1a04000 	mov	r4, r0
    da70:	e1a00001 	mov	r0, r1
    da74:	e1a05001 	mov	r5, r1
    da78:	eb000c61 	bl	10c04 <strlen>
    da7c:	e5943008 	ldr	r3, [r4, #8]
    da80:	e1a02000 	mov	r2, r0
    da84:	e1a06000 	mov	r6, r0
    da88:	e1a01005 	mov	r1, r5
    da8c:	e1a00003 	mov	r0, r3
    da90:	e5933000 	ldr	r3, [r3]
    da94:	e593300c 	ldr	r3, [r3, #12]
    da98:	e12fff33 	blx	r3
    da9c:	e5943018 	ldr	r3, [r4, #24]
    daa0:	e3530000 	cmp	r3, #0
    daa4:	1a000017 	bne	db08 <CLogger::Write(char const*)+0xa0>
    daa8:	e0850006 	add	r0, r5, r6
    daac:	e1550000 	cmp	r5, r0
    dab0:	0a00000f 	beq	daf4 <CLogger::Write(char const*)+0x8c>
    dab4:	e0d530d1 	ldrsb	r3, [r5], #1
    dab8:	e353000d 	cmp	r3, #13
    dabc:	0afffffa 	beq	daac <CLogger::Write(char const*)+0x44>
    dac0:	e5941010 	ldr	r1, [r4, #16]
    dac4:	e594c00c 	ldr	ip, [r4, #12]
    dac8:	e7cc3001 	strb	r3, [ip, r1]
    dacc:	e5943010 	ldr	r3, [r4, #16]
    dad0:	e5941014 	ldr	r1, [r4, #20]
    dad4:	e2833001 	add	r3, r3, #1
    dad8:	e7ed3053 	ubfx	r3, r3, #0, #14
    dadc:	e1530001 	cmp	r3, r1
    dae0:	e5843010 	str	r3, [r4, #16]
    dae4:	1afffff0 	bne	daac <CLogger::Write(char const*)+0x44>
    dae8:	e2433001 	sub	r3, r3, #1
    daec:	e7ed3053 	ubfx	r3, r3, #0, #14
    daf0:	e5843010 	str	r3, [r4, #16]
    daf4:	e5943018 	ldr	r3, [r4, #24]
    daf8:	e3530000 	cmp	r3, #0
    dafc:	08bd8070 	popeq	{r4, r5, r6, pc}
    db00:	e8bd4070 	pop	{r4, r5, r6, lr}
    db04:	eafff4b8 	b	adec <LeaveCritical>
    db08:	ebfff4aa 	bl	adb8 <EnterCritical>
    db0c:	eaffffe5 	b	daa8 <CLogger::Write(char const*)+0x40>

0000db10 <CLogger::Read(void*, unsigned int)>:
    db10:	e5903018 	ldr	r3, [r0, #24]
    db14:	e92d4070 	push	{r4, r5, r6, lr}
    db18:	e1a04000 	mov	r4, r0
    db1c:	e3530000 	cmp	r3, #0
    db20:	e1a05001 	mov	r5, r1
    db24:	e1a06002 	mov	r6, r2
    db28:	1a00001b 	bne	db9c <CLogger::Read(void*, unsigned int)+0x8c>
    db2c:	e5902010 	ldr	r2, [r0, #16]
    db30:	e5903014 	ldr	r3, [r0, #20]
    db34:	e1520003 	cmp	r2, r3
    db38:	0a000020 	beq	dbc0 <CLogger::Read(void*, unsigned int)+0xb0>
    db3c:	e1a01005 	mov	r1, r5
    db40:	e3a05000 	mov	r5, #0
    db44:	ea00000a 	b	db74 <CLogger::Read(void*, unsigned int)+0x64>
    db48:	e594000c 	ldr	r0, [r4, #12]
    db4c:	e2855001 	add	r5, r5, #1
    db50:	e19030d3 	ldrsb	r3, [r0, r3]
    db54:	e4c13001 	strb	r3, [r1], #1
    db58:	e5943014 	ldr	r3, [r4, #20]
    db5c:	e5940010 	ldr	r0, [r4, #16]
    db60:	e2833001 	add	r3, r3, #1
    db64:	e7ed3053 	ubfx	r3, r3, #0, #14
    db68:	e1530000 	cmp	r3, r0
    db6c:	e5843014 	str	r3, [r4, #20]
    db70:	0a000001 	beq	db7c <CLogger::Read(void*, unsigned int)+0x6c>
    db74:	e1550006 	cmp	r5, r6
    db78:	1afffff2 	bne	db48 <CLogger::Read(void*, unsigned int)+0x38>
    db7c:	e5943018 	ldr	r3, [r4, #24]
    db80:	e3530000 	cmp	r3, #0
    db84:	1a000001 	bne	db90 <CLogger::Read(void*, unsigned int)+0x80>
    db88:	e1a00005 	mov	r0, r5
    db8c:	e8bd8070 	pop	{r4, r5, r6, pc}
    db90:	ebfff495 	bl	adec <LeaveCritical>
    db94:	e1a00005 	mov	r0, r5
    db98:	e8bd8070 	pop	{r4, r5, r6, pc}
    db9c:	ebfff485 	bl	adb8 <EnterCritical>
    dba0:	e5942010 	ldr	r2, [r4, #16]
    dba4:	e5943014 	ldr	r3, [r4, #20]
    dba8:	e1520003 	cmp	r2, r3
    dbac:	1affffe2 	bne	db3c <CLogger::Read(void*, unsigned int)+0x2c>
    dbb0:	e5943018 	ldr	r3, [r4, #24]
    dbb4:	e3530000 	cmp	r3, #0
    dbb8:	0a000000 	beq	dbc0 <CLogger::Read(void*, unsigned int)+0xb0>
    dbbc:	ebfff48a 	bl	adec <LeaveCritical>
    dbc0:	e3e05000 	mvn	r5, #0
    dbc4:	e1a00005 	mov	r0, r5
    dbc8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dbcc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    dbcc:	e590c000 	ldr	ip, [r0]
    dbd0:	e152000c 	cmp	r2, ip
    dbd4:	812fff1e 	bxhi	lr
    dbd8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dbdc:	e1a05002 	mov	r5, r2
    dbe0:	e1a04000 	mov	r4, r0
    dbe4:	e24dd020 	sub	sp, sp, #32
    dbe8:	e1a07003 	mov	r7, r3
    dbec:	e1a0000d 	mov	r0, sp
    dbf0:	e1a06001 	mov	r6, r1
    dbf4:	eb00017d 	bl	e1f0 <CString::CString()>
    dbf8:	e3550000 	cmp	r5, #0
    dbfc:	0a000049 	beq	dd28 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
    dc00:	e5940004 	ldr	r0, [r4, #4]
    dc04:	e3500000 	cmp	r0, #0
    dc08:	0a000032 	beq	dcd8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    dc0c:	ebfff563 	bl	b1a0 <CTimer::GetTimeString()>
    dc10:	e2508000 	subs	r8, r0, #0
    dc14:	0a00000b 	beq	dc48 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
    dc18:	eb00018a 	bl	e248 <CString::operator char const*() const>
    dc1c:	e1a01000 	mov	r1, r0
    dc20:	e1a0000d 	mov	r0, sp
    dc24:	eb0001a2 	bl	e2b4 <CString::Append(char const*)>
    dc28:	e1a0000d 	mov	r0, sp
    dc2c:	e3031398 	movw	r1, #13208	; 0x3398
    dc30:	e3401005 	movt	r1, #5
    dc34:	eb00019e 	bl	e2b4 <CString::Append(char const*)>
    dc38:	e5983000 	ldr	r3, [r8]
    dc3c:	e1a00008 	mov	r0, r8
    dc40:	e5933004 	ldr	r3, [r3, #4]
    dc44:	e12fff33 	blx	r3
    dc48:	e1a01006 	mov	r1, r6
    dc4c:	e1a0000d 	mov	r0, sp
    dc50:	eb000197 	bl	e2b4 <CString::Append(char const*)>
    dc54:	e28d6010 	add	r6, sp, #16
    dc58:	e1a0000d 	mov	r0, sp
    dc5c:	e303139c 	movw	r1, #13212	; 0x339c
    dc60:	e3401005 	movt	r1, #5
    dc64:	eb000192 	bl	e2b4 <CString::Append(char const*)>
    dc68:	e1a00006 	mov	r0, r6
    dc6c:	eb00015f 	bl	e1f0 <CString::CString()>
    dc70:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    dc74:	e1a01007 	mov	r1, r7
    dc78:	e1a00006 	mov	r0, r6
    dc7c:	eb000293 	bl	e6d0 <CString::FormatV(char const*, std::__va_list)>
    dc80:	e1a00006 	mov	r0, r6
    dc84:	eb00016f 	bl	e248 <CString::operator char const*() const>
    dc88:	e1a01000 	mov	r1, r0
    dc8c:	e1a0000d 	mov	r0, sp
    dc90:	eb000187 	bl	e2b4 <CString::Append(char const*)>
    dc94:	e3550000 	cmp	r5, #0
    dc98:	0a00003c 	beq	dd90 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    dc9c:	e1a0000d 	mov	r0, sp
    dca0:	e30313a8 	movw	r1, #13224	; 0x33a8
    dca4:	e3401005 	movt	r1, #5
    dca8:	eb000181 	bl	e2b4 <CString::Append(char const*)>
    dcac:	e1a0000d 	mov	r0, sp
    dcb0:	eb000164 	bl	e248 <CString::operator char const*() const>
    dcb4:	e1a01000 	mov	r1, r0
    dcb8:	e1a00004 	mov	r0, r4
    dcbc:	ebffff69 	bl	da68 <CLogger::Write(char const*)>
    dcc0:	e1a00006 	mov	r0, r6
    dcc4:	eb000117 	bl	e128 <CString::~CString()>
    dcc8:	e1a0000d 	mov	r0, sp
    dccc:	eb000115 	bl	e128 <CString::~CString()>
    dcd0:	e28dd020 	add	sp, sp, #32
    dcd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dcd8:	e1a01006 	mov	r1, r6
    dcdc:	e1a0000d 	mov	r0, sp
    dce0:	eb000173 	bl	e2b4 <CString::Append(char const*)>
    dce4:	e28d6010 	add	r6, sp, #16
    dce8:	e1a0000d 	mov	r0, sp
    dcec:	e303139c 	movw	r1, #13212	; 0x339c
    dcf0:	e3401005 	movt	r1, #5
    dcf4:	eb00016e 	bl	e2b4 <CString::Append(char const*)>
    dcf8:	e1a00006 	mov	r0, r6
    dcfc:	eb00013b 	bl	e1f0 <CString::CString()>
    dd00:	e1a01007 	mov	r1, r7
    dd04:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    dd08:	e1a00006 	mov	r0, r6
    dd0c:	eb00026f 	bl	e6d0 <CString::FormatV(char const*, std::__va_list)>
    dd10:	e1a00006 	mov	r0, r6
    dd14:	eb00014b 	bl	e248 <CString::operator char const*() const>
    dd18:	e1a01000 	mov	r1, r0
    dd1c:	e1a0000d 	mov	r0, sp
    dd20:	eb000163 	bl	e2b4 <CString::Append(char const*)>
    dd24:	eaffffdc 	b	dc9c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
    dd28:	e3031390 	movw	r1, #13200	; 0x3390
    dd2c:	e3401005 	movt	r1, #5
    dd30:	e1a0000d 	mov	r0, sp
    dd34:	eb000149 	bl	e260 <CString::operator=(char const*)>
    dd38:	e5940004 	ldr	r0, [r4, #4]
    dd3c:	e3500000 	cmp	r0, #0
    dd40:	1affffb1 	bne	dc0c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    dd44:	e1a01006 	mov	r1, r6
    dd48:	e1a0000d 	mov	r0, sp
    dd4c:	eb000158 	bl	e2b4 <CString::Append(char const*)>
    dd50:	e28d6010 	add	r6, sp, #16
    dd54:	e1a0000d 	mov	r0, sp
    dd58:	e303139c 	movw	r1, #13212	; 0x339c
    dd5c:	e3401005 	movt	r1, #5
    dd60:	eb000153 	bl	e2b4 <CString::Append(char const*)>
    dd64:	e1a00006 	mov	r0, r6
    dd68:	eb000120 	bl	e1f0 <CString::CString()>
    dd6c:	e1a01007 	mov	r1, r7
    dd70:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    dd74:	e1a00006 	mov	r0, r6
    dd78:	eb000254 	bl	e6d0 <CString::FormatV(char const*, std::__va_list)>
    dd7c:	e1a00006 	mov	r0, r6
    dd80:	eb000130 	bl	e248 <CString::operator char const*() const>
    dd84:	e1a01000 	mov	r1, r0
    dd88:	e1a0000d 	mov	r0, sp
    dd8c:	eb000148 	bl	e2b4 <CString::Append(char const*)>
    dd90:	e1a0000d 	mov	r0, sp
    dd94:	e30313a0 	movw	r1, #13216	; 0x33a0
    dd98:	e3401005 	movt	r1, #5
    dd9c:	eb000144 	bl	e2b4 <CString::Append(char const*)>
    dda0:	e1a0000d 	mov	r0, sp
    dda4:	e30313a8 	movw	r1, #13224	; 0x33a8
    dda8:	e3401005 	movt	r1, #5
    ddac:	eb000140 	bl	e2b4 <CString::Append(char const*)>
    ddb0:	e1a0000d 	mov	r0, sp
    ddb4:	eb000123 	bl	e248 <CString::operator char const*() const>
    ddb8:	e1a01000 	mov	r1, r0
    ddbc:	e1a00004 	mov	r0, r4
    ddc0:	ebffff28 	bl	da68 <CLogger::Write(char const*)>
    ddc4:	ebfff429 	bl	ae70 <halt>
    ddc8:	eaffffbc 	b	dcc0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

0000ddcc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    ddcc:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    ddd0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ddd4:	e24dd010 	sub	sp, sp, #16
    ddd8:	e28dc018 	add	ip, sp, #24
    dddc:	e59d3014 	ldr	r3, [sp, #20]
    dde0:	e58dc000 	str	ip, [sp]
    dde4:	e58dc00c 	str	ip, [sp, #12]
    dde8:	ebffff77 	bl	dbcc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    ddec:	e28dd010 	add	sp, sp, #16
    ddf0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ddf4:	e28dd004 	add	sp, sp, #4
    ddf8:	e12fff1e 	bx	lr

0000ddfc <CLogger::Initialize(CDevice*)>:
    ddfc:	e92d4010 	push	{r4, lr}
    de00:	e1a04000 	mov	r4, r0
    de04:	e24dd008 	sub	sp, sp, #8
    de08:	e5801008 	str	r1, [r0, #8]
    de0c:	eb000830 	bl	fed4 <CMachineInfo::Get()>
    de10:	eb0007bd 	bl	fd0c <CMachineInfo::GetMachineName() const>
    de14:	e3a02003 	mov	r2, #3
    de18:	e58d0000 	str	r0, [sp]
    de1c:	e30333ac 	movw	r3, #13228	; 0x33ac
    de20:	e3403005 	movt	r3, #5
    de24:	e1a00004 	mov	r0, r4
    de28:	e30313c4 	movw	r1, #13252	; 0x33c4
    de2c:	e3401005 	movt	r1, #5
    de30:	ebffffe5 	bl	ddcc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    de34:	e3a00001 	mov	r0, #1
    de38:	e28dd008 	add	sp, sp, #8
    de3c:	e8bd8010 	pop	{r4, pc}

0000de40 <CSerialDevice::Write(void const*, unsigned int)>:
    de40:	e5903084 	ldr	r3, [r0, #132]	; 0x84
    de44:	e92d4070 	push	{r4, r5, r6, lr}
    de48:	e1a06000 	mov	r6, r0
    de4c:	e3530000 	cmp	r3, #0
    de50:	e1a04001 	mov	r4, r1
    de54:	e1a05002 	mov	r5, r2
    de58:	1a00001d 	bne	ded4 <CSerialDevice::Write(void const*, unsigned int)+0x94>
    de5c:	e3540000 	cmp	r4, #0
    de60:	0a00001d 	beq	dedc <CSerialDevice::Write(void const*, unsigned int)+0x9c>
    de64:	e3550000 	cmp	r5, #0
    de68:	0a00000e 	beq	dea8 <CSerialDevice::Write(void const*, unsigned int)+0x68>
    de6c:	e3a02a01 	mov	r2, #4096	; 0x1000
    de70:	e3432f20 	movt	r2, #16160	; 0x3f20
    de74:	e084c005 	add	ip, r4, r5
    de78:	e1a01004 	mov	r1, r4
    de7c:	e3a0e00d 	mov	lr, #13
    de80:	e5d10000 	ldrb	r0, [r1]
    de84:	e5923018 	ldr	r3, [r2, #24]
    de88:	e3130020 	tst	r3, #32
    de8c:	1afffffc 	bne	de84 <CSerialDevice::Write(void const*, unsigned int)+0x44>
    de90:	e5820000 	str	r0, [r2]
    de94:	e4d13001 	ldrb	r3, [r1], #1
    de98:	e353000a 	cmp	r3, #10
    de9c:	0a000007 	beq	dec0 <CSerialDevice::Write(void const*, unsigned int)+0x80>
    dea0:	e15c0001 	cmp	ip, r1
    dea4:	1afffff5 	bne	de80 <CSerialDevice::Write(void const*, unsigned int)+0x40>
    dea8:	e5963084 	ldr	r3, [r6, #132]	; 0x84
    deac:	e3530000 	cmp	r3, #0
    deb0:	0a000000 	beq	deb8 <CSerialDevice::Write(void const*, unsigned int)+0x78>
    deb4:	ebfff3cc 	bl	adec <LeaveCritical>
    deb8:	e1a00005 	mov	r0, r5
    debc:	e8bd8070 	pop	{r4, r5, r6, pc}
    dec0:	e5923018 	ldr	r3, [r2, #24]
    dec4:	e3130020 	tst	r3, #32
    dec8:	1afffffc 	bne	dec0 <CSerialDevice::Write(void const*, unsigned int)+0x80>
    decc:	e582e000 	str	lr, [r2]
    ded0:	eafffff2 	b	dea0 <CSerialDevice::Write(void const*, unsigned int)+0x60>
    ded4:	ebfff3b7 	bl	adb8 <EnterCritical>
    ded8:	eaffffdf 	b	de5c <CSerialDevice::Write(void const*, unsigned int)+0x1c>
    dedc:	e30313e8 	movw	r1, #13288	; 0x33e8
    dee0:	e3401005 	movt	r1, #5
    dee4:	e30303f4 	movw	r0, #13300	; 0x33f4
    dee8:	e3400005 	movt	r0, #5
    deec:	e3a02090 	mov	r2, #144	; 0x90
    def0:	ebfffd59 	bl	d45c <assertion_failed>
    def4:	eaffffda 	b	de64 <CSerialDevice::Write(void const*, unsigned int)+0x24>

0000def8 <CSerialDevice::CSerialDevice()>:
    def8:	e92d4010 	push	{r4, lr}
    defc:	e1a04000 	mov	r4, r0
    df00:	eb000d31 	bl	113cc <CDevice::CDevice()>
    df04:	e1a00004 	mov	r0, r4
    df08:	e59fc05c 	ldr	ip, [pc, #92]	; df6c <CSerialDevice::CSerialDevice()+0x74>
    df0c:	e3a03000 	mov	r3, #0
    df10:	e3a01020 	mov	r1, #32
    df14:	e1a02003 	mov	r2, r3
    df18:	e480c004 	str	ip, [r0], #4
    df1c:	ebfff281 	bl	a928 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    df20:	e3a03000 	mov	r3, #0
    df24:	e1a02003 	mov	r2, r3
    df28:	e2840024 	add	r0, r4, #36	; 0x24
    df2c:	e3a01021 	mov	r1, #33	; 0x21
    df30:	ebfff27c 	bl	a928 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    df34:	e2840044 	add	r0, r4, #68	; 0x44
    df38:	e3a03000 	mov	r3, #0
    df3c:	e3a02004 	mov	r2, #4
    df40:	e3a0100e 	mov	r1, #14
    df44:	ebfff277 	bl	a928 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    df48:	e2840064 	add	r0, r4, #100	; 0x64
    df4c:	e3a03000 	mov	r3, #0
    df50:	e3a02004 	mov	r2, #4
    df54:	e3a0100f 	mov	r1, #15
    df58:	ebfff272 	bl	a928 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    df5c:	e3a03001 	mov	r3, #1
    df60:	e5843084 	str	r3, [r4, #132]	; 0x84
    df64:	e1a00004 	mov	r0, r4
    df68:	e8bd8010 	pop	{r4, pc}
    df6c:	000533d4 	.word	0x000533d4

0000df70 <CSerialDevice::Initialize(unsigned int)>:
    df70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    df74:	e1a07001 	mov	r7, r1
    df78:	e1a05000 	mov	r5, r0
    df7c:	eb0007d4 	bl	fed4 <CMachineInfo::Get()>
    df80:	e3a01002 	mov	r1, #2
    df84:	eb000776 	bl	fd64 <CMachineInfo::GetClockRate(unsigned int) const>
    df88:	e2508000 	subs	r8, r0, #0
    df8c:	0a00003a 	beq	e07c <CSerialDevice::Initialize(unsigned int)+0x10c>
    df90:	e30c3594 	movw	r3, #50580	; 0xc594
    df94:	e340302d 	movt	r3, #45	; 0x2d
    df98:	e2472f4b 	sub	r2, r7, #300	; 0x12c
    df9c:	e1520003 	cmp	r2, r3
    dfa0:	8a00002e 	bhi	e060 <CSerialDevice::Initialize(unsigned int)+0xf0>
    dfa4:	e1a04207 	lsl	r4, r7, #4
    dfa8:	e30f3ffe 	movw	r3, #65534	; 0xfffe
    dfac:	e736f418 	udiv	r6, r8, r4
    dfb0:	e2462001 	sub	r2, r6, #1
    dfb4:	e1520003 	cmp	r2, r3
    dfb8:	8a000021 	bhi	e044 <CSerialDevice::Initialize(unsigned int)+0xd4>
    dfbc:	e0618694 	mls	r1, r4, r6, r8
    dfc0:	e1a01181 	lsl	r1, r1, #3
    dfc4:	e731f711 	udiv	r1, r1, r7
    dfc8:	e2014001 	and	r4, r1, #1
    dfcc:	e08440a1 	add	r4, r4, r1, lsr #1
    dfd0:	e354003f 	cmp	r4, #63	; 0x3f
    dfd4:	9a000005 	bls	dff0 <CSerialDevice::Initialize(unsigned int)+0x80>
    dfd8:	e30313e8 	movw	r1, #13288	; 0x33e8
    dfdc:	e3401005 	movt	r1, #5
    dfe0:	e3030460 	movw	r0, #13408	; 0x3460
    dfe4:	e3400005 	movt	r0, #5
    dfe8:	e3a02076 	mov	r2, #118	; 0x76
    dfec:	ebfffd1a 	bl	d45c <assertion_failed>
    dff0:	e3a02a01 	mov	r2, #4096	; 0x1000
    dff4:	e3432f20 	movt	r2, #16160	; 0x3f20
    dff8:	e3003301 	movw	r3, #769	; 0x301
    dffc:	e30007ff 	movw	r0, #2047	; 0x7ff
    e000:	e3a07000 	mov	r7, #0
    e004:	e3a01060 	mov	r1, #96	; 0x60
    e008:	e5827038 	str	r7, [r2, #56]	; 0x38
    e00c:	e5820044 	str	r0, [r2, #68]	; 0x44
    e010:	e5826024 	str	r6, [r2, #36]	; 0x24
    e014:	e5824028 	str	r4, [r2, #40]	; 0x28
    e018:	e582102c 	str	r1, [r2, #44]	; 0x2c
    e01c:	e5827034 	str	r7, [r2, #52]	; 0x34
    e020:	e5823030 	str	r3, [r2, #48]	; 0x30
    e024:	ebfffe5f 	bl	d9a8 <CDeviceNameService::Get()>
    e028:	e1a03007 	mov	r3, r7
    e02c:	e1a02005 	mov	r2, r5
    e030:	e3031474 	movw	r1, #13428	; 0x3474
    e034:	e3401005 	movt	r1, #5
    e038:	ebfffde6 	bl	d7d8 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    e03c:	e3a00001 	mov	r0, #1
    e040:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e044:	e30313e8 	movw	r1, #13288	; 0x33e8
    e048:	e3401005 	movt	r1, #5
    e04c:	e303043c 	movw	r0, #13372	; 0x343c
    e050:	e3400005 	movt	r0, #5
    e054:	e3a02073 	mov	r2, #115	; 0x73
    e058:	ebfffcff 	bl	d45c <assertion_failed>
    e05c:	eaffffd6 	b	dfbc <CSerialDevice::Initialize(unsigned int)+0x4c>
    e060:	e30313e8 	movw	r1, #13288	; 0x33e8
    e064:	e3401005 	movt	r1, #5
    e068:	e3030410 	movw	r0, #13328	; 0x3410
    e06c:	e3400005 	movt	r0, #5
    e070:	e3a02070 	mov	r2, #112	; 0x70
    e074:	ebfffcf8 	bl	d45c <assertion_failed>
    e078:	eaffffc9 	b	dfa4 <CSerialDevice::Initialize(unsigned int)+0x34>
    e07c:	e30313e8 	movw	r1, #13288	; 0x33e8
    e080:	e3401005 	movt	r1, #5
    e084:	e3030400 	movw	r0, #13312	; 0x3400
    e088:	e3400005 	movt	r0, #5
    e08c:	e3a0206e 	mov	r2, #110	; 0x6e
    e090:	ebfffcf1 	bl	d45c <assertion_failed>
    e094:	eaffffbd 	b	df90 <CSerialDevice::Initialize(unsigned int)+0x20>

0000e098 <CSerialDevice::Write(unsigned char)>:
    e098:	e3a02a01 	mov	r2, #4096	; 0x1000
    e09c:	e3432f20 	movt	r2, #16160	; 0x3f20
    e0a0:	e5923018 	ldr	r3, [r2, #24]
    e0a4:	e3130020 	tst	r3, #32
    e0a8:	1afffffc 	bne	e0a0 <CSerialDevice::Write(unsigned char)+0x8>
    e0ac:	e5821000 	str	r1, [r2]
    e0b0:	e12fff1e 	bx	lr

0000e0b4 <CSerialDevice::~CSerialDevice()>:
    e0b4:	e3a03a01 	mov	r3, #4096	; 0x1000
    e0b8:	e3433f20 	movt	r3, #16160	; 0x3f20
    e0bc:	e59f1040 	ldr	r1, [pc, #64]	; e104 <CSerialDevice::~CSerialDevice()+0x50>
    e0c0:	e3a02000 	mov	r2, #0
    e0c4:	e92d4010 	push	{r4, lr}
    e0c8:	e1a04000 	mov	r4, r0
    e0cc:	e4801064 	str	r1, [r0], #100	; 0x64
    e0d0:	e5832038 	str	r2, [r3, #56]	; 0x38
    e0d4:	e5832030 	str	r2, [r3, #48]	; 0x30
    e0d8:	ebffef13 	bl	9d2c <CGPIOPin::~CGPIOPin()>
    e0dc:	e2840044 	add	r0, r4, #68	; 0x44
    e0e0:	ebffef11 	bl	9d2c <CGPIOPin::~CGPIOPin()>
    e0e4:	e2840024 	add	r0, r4, #36	; 0x24
    e0e8:	ebffef0f 	bl	9d2c <CGPIOPin::~CGPIOPin()>
    e0ec:	e2840004 	add	r0, r4, #4
    e0f0:	ebffef0d 	bl	9d2c <CGPIOPin::~CGPIOPin()>
    e0f4:	e1a00004 	mov	r0, r4
    e0f8:	eb000ca8 	bl	113a0 <CDevice::~CDevice()>
    e0fc:	e1a00004 	mov	r0, r4
    e100:	e8bd8010 	pop	{r4, pc}
    e104:	000533d4 	.word	0x000533d4

0000e108 <CSerialDevice::~CSerialDevice()>:
    e108:	e92d4010 	push	{r4, lr}
    e10c:	e1a04000 	mov	r4, r0
    e110:	ebffffe7 	bl	e0b4 <CSerialDevice::~CSerialDevice()>
    e114:	e1a00004 	mov	r0, r4
    e118:	ebfff324 	bl	adb0 <operator delete(void*)>
    e11c:	e1a00004 	mov	r0, r4
    e120:	e8bd8010 	pop	{r4, pc}
    e124:	00000000 	andeq	r0, r0, r0

0000e128 <CString::~CString()>:
    e128:	e92d4010 	push	{r4, lr}
    e12c:	e1a04000 	mov	r4, r0
    e130:	e5900004 	ldr	r0, [r0, #4]
    e134:	e59f3014 	ldr	r3, [pc, #20]	; e150 <CString::~CString()+0x28>
    e138:	e3500000 	cmp	r0, #0
    e13c:	e5843000 	str	r3, [r4]
    e140:	0a000000 	beq	e148 <CString::~CString()+0x20>
    e144:	ebfff31a 	bl	adb4 <operator delete[](void*)>
    e148:	e1a00004 	mov	r0, r4
    e14c:	e8bd8010 	pop	{r4, pc}
    e150:	00053484 	.word	0x00053484

0000e154 <CString::~CString()>:
    e154:	e92d4010 	push	{r4, lr}
    e158:	e1a04000 	mov	r4, r0
    e15c:	e5900004 	ldr	r0, [r0, #4]
    e160:	e59f301c 	ldr	r3, [pc, #28]	; e184 <CString::~CString()+0x30>
    e164:	e3500000 	cmp	r0, #0
    e168:	e5843000 	str	r3, [r4]
    e16c:	0a000000 	beq	e174 <CString::~CString()+0x20>
    e170:	ebfff30f 	bl	adb4 <operator delete[](void*)>
    e174:	e1a00004 	mov	r0, r4
    e178:	ebfff30c 	bl	adb0 <operator delete(void*)>
    e17c:	e1a00004 	mov	r0, r4
    e180:	e8bd8010 	pop	{r4, pc}
    e184:	00053484 	.word	0x00053484

0000e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    e188:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e18c:	e990002c 	ldmib	r0, {r2, r3, r5}
    e190:	e0455002 	sub	r5, r5, r2
    e194:	e0851001 	add	r1, r5, r1
    e198:	e2812001 	add	r2, r1, #1
    e19c:	e1520003 	cmp	r2, r3
    e1a0:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    e1a4:	e1a04000 	mov	r4, r0
    e1a8:	e2816041 	add	r6, r1, #65	; 0x41
    e1ac:	e1a00006 	mov	r0, r6
    e1b0:	ebfff2fd 	bl	adac <operator new[](unsigned int)>
    e1b4:	e3a02000 	mov	r2, #0
    e1b8:	e594300c 	ldr	r3, [r4, #12]
    e1bc:	e1a07000 	mov	r7, r0
    e1c0:	e5c32000 	strb	r2, [r3]
    e1c4:	e5941004 	ldr	r1, [r4, #4]
    e1c8:	eb000ab2 	bl	10c98 <strcpy>
    e1cc:	e5940004 	ldr	r0, [r4, #4]
    e1d0:	e3500000 	cmp	r0, #0
    e1d4:	0a000000 	beq	e1dc <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    e1d8:	ebfff2f5 	bl	adb4 <operator delete[](void*)>
    e1dc:	e0875005 	add	r5, r7, r5
    e1e0:	e5847004 	str	r7, [r4, #4]
    e1e4:	e584500c 	str	r5, [r4, #12]
    e1e8:	e5846008 	str	r6, [r4, #8]
    e1ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000e1f0 <CString::CString()>:
    e1f0:	e59f100c 	ldr	r1, [pc, #12]	; e204 <CString::CString()+0x14>
    e1f4:	e3a02000 	mov	r2, #0
    e1f8:	e5802008 	str	r2, [r0, #8]
    e1fc:	e8800006 	stm	r0, {r1, r2}
    e200:	e12fff1e 	bx	lr
    e204:	00053484 	.word	0x00053484

0000e208 <CString::CString(char const*)>:
    e208:	e92d4070 	push	{r4, r5, r6, lr}
    e20c:	e1a04000 	mov	r4, r0
    e210:	e59f302c 	ldr	r3, [pc, #44]	; e244 <CString::CString(char const*)+0x3c>
    e214:	e1a00001 	mov	r0, r1
    e218:	e1a05001 	mov	r5, r1
    e21c:	e5843000 	str	r3, [r4]
    e220:	eb000a77 	bl	10c04 <strlen>
    e224:	e2800001 	add	r0, r0, #1
    e228:	e5840008 	str	r0, [r4, #8]
    e22c:	ebfff2de 	bl	adac <operator new[](unsigned int)>
    e230:	e1a01005 	mov	r1, r5
    e234:	e5840004 	str	r0, [r4, #4]
    e238:	eb000a96 	bl	10c98 <strcpy>
    e23c:	e1a00004 	mov	r0, r4
    e240:	e8bd8070 	pop	{r4, r5, r6, pc}
    e244:	00053484 	.word	0x00053484

0000e248 <CString::operator char const*() const>:
    e248:	e5900004 	ldr	r0, [r0, #4]
    e24c:	e302317c 	movw	r3, #8572	; 0x217c
    e250:	e3403005 	movt	r3, #5
    e254:	e3500000 	cmp	r0, #0
    e258:	01a00003 	moveq	r0, r3
    e25c:	e12fff1e 	bx	lr

0000e260 <CString::operator=(char const*)>:
    e260:	e92d4070 	push	{r4, r5, r6, lr}
    e264:	e1a04000 	mov	r4, r0
    e268:	e5900004 	ldr	r0, [r0, #4]
    e26c:	e1a05001 	mov	r5, r1
    e270:	e3500000 	cmp	r0, #0
    e274:	0a000000 	beq	e27c <CString::operator=(char const*)+0x1c>
    e278:	ebfff2cd 	bl	adb4 <operator delete[](void*)>
    e27c:	e1a00005 	mov	r0, r5
    e280:	eb000a5f 	bl	10c04 <strlen>
    e284:	e2800001 	add	r0, r0, #1
    e288:	e5840008 	str	r0, [r4, #8]
    e28c:	ebfff2c6 	bl	adac <operator new[](unsigned int)>
    e290:	e1a01005 	mov	r1, r5
    e294:	e5840004 	str	r0, [r4, #4]
    e298:	eb000a7e 	bl	10c98 <strcpy>
    e29c:	e5940004 	ldr	r0, [r4, #4]
    e2a0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e2a4 <CString::GetLength() const>:
    e2a4:	e5900004 	ldr	r0, [r0, #4]
    e2a8:	e3500000 	cmp	r0, #0
    e2ac:	012fff1e 	bxeq	lr
    e2b0:	ea000a53 	b	10c04 <strlen>

0000e2b4 <CString::Append(char const*)>:
    e2b4:	e92d4070 	push	{r4, r5, r6, lr}
    e2b8:	e1a04000 	mov	r4, r0
    e2bc:	e5900004 	ldr	r0, [r0, #4]
    e2c0:	e3a03001 	mov	r3, #1
    e2c4:	e1a06001 	mov	r6, r1
    e2c8:	e3500000 	cmp	r0, #0
    e2cc:	e5843008 	str	r3, [r4, #8]
    e2d0:	0a000003 	beq	e2e4 <CString::Append(char const*)+0x30>
    e2d4:	eb000a4a 	bl	10c04 <strlen>
    e2d8:	e5943008 	ldr	r3, [r4, #8]
    e2dc:	e0830000 	add	r0, r3, r0
    e2e0:	e5840008 	str	r0, [r4, #8]
    e2e4:	e1a00006 	mov	r0, r6
    e2e8:	eb000a45 	bl	10c04 <strlen>
    e2ec:	e5943008 	ldr	r3, [r4, #8]
    e2f0:	e0800003 	add	r0, r0, r3
    e2f4:	e5840008 	str	r0, [r4, #8]
    e2f8:	ebfff2ab 	bl	adac <operator new[](unsigned int)>
    e2fc:	e5941004 	ldr	r1, [r4, #4]
    e300:	e1a05000 	mov	r5, r0
    e304:	e3510000 	cmp	r1, #0
    e308:	05c01000 	strbeq	r1, [r0]
    e30c:	0a000004 	beq	e324 <CString::Append(char const*)+0x70>
    e310:	eb000a60 	bl	10c98 <strcpy>
    e314:	e5940004 	ldr	r0, [r4, #4]
    e318:	e3500000 	cmp	r0, #0
    e31c:	0a000000 	beq	e324 <CString::Append(char const*)+0x70>
    e320:	ebfff2a3 	bl	adb4 <operator delete[](void*)>
    e324:	e1a01006 	mov	r1, r6
    e328:	e1a00005 	mov	r0, r5
    e32c:	eb000a77 	bl	10d10 <strcat>
    e330:	e5845004 	str	r5, [r4, #4]
    e334:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e338 <CString::Compare(char const*) const>:
    e338:	e5900004 	ldr	r0, [r0, #4]
    e33c:	ea000a3a 	b	10c2c <strcmp>

0000e340 <CString::Find(char) const>:
    e340:	e5902004 	ldr	r2, [r0, #4]
    e344:	e1d230d0 	ldrsb	r3, [r2]
    e348:	e3530000 	cmp	r3, #0
    e34c:	0a000009 	beq	e378 <CString::Find(char) const+0x38>
    e350:	e1510003 	cmp	r1, r3
    e354:	e3a00000 	mov	r0, #0
    e358:	1a000002 	bne	e368 <CString::Find(char) const+0x28>
    e35c:	ea000007 	b	e380 <CString::Find(char) const+0x40>
    e360:	e1530001 	cmp	r3, r1
    e364:	012fff1e 	bxeq	lr
    e368:	e1f230d1 	ldrsb	r3, [r2, #1]!
    e36c:	e2800001 	add	r0, r0, #1
    e370:	e3530000 	cmp	r3, #0
    e374:	1afffff9 	bne	e360 <CString::Find(char) const+0x20>
    e378:	e3e00000 	mvn	r0, #0
    e37c:	e12fff1e 	bx	lr
    e380:	e12fff1e 	bx	lr

0000e384 <CString::PutChar(char, unsigned int)>:
    e384:	e92d4070 	push	{r4, r5, r6, lr}
    e388:	e2524000 	subs	r4, r2, #0
    e38c:	08bd8070 	popeq	{r4, r5, r6, pc}
    e390:	e1a06001 	mov	r6, r1
    e394:	e1a01004 	mov	r1, r4
    e398:	e1a05000 	mov	r5, r0
    e39c:	ebffff79 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e3a0:	e2443001 	sub	r3, r4, #1
    e3a4:	e595200c 	ldr	r2, [r5, #12]
    e3a8:	e2433001 	sub	r3, r3, #1
    e3ac:	e3730001 	cmn	r3, #1
    e3b0:	e2820001 	add	r0, r2, #1
    e3b4:	e585000c 	str	r0, [r5, #12]
    e3b8:	e5c26000 	strb	r6, [r2]
    e3bc:	1afffff8 	bne	e3a4 <CString::PutChar(char, unsigned int)+0x20>
    e3c0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e3c4 <CString::PutString(char const*)>:
    e3c4:	e92d4070 	push	{r4, r5, r6, lr}
    e3c8:	e1a04000 	mov	r4, r0
    e3cc:	e1a00001 	mov	r0, r1
    e3d0:	e1a05001 	mov	r5, r1
    e3d4:	eb000a0a 	bl	10c04 <strlen>
    e3d8:	e2506000 	subs	r6, r0, #0
    e3dc:	0a000002 	beq	e3ec <CString::PutString(char const*)+0x28>
    e3e0:	e1a01006 	mov	r1, r6
    e3e4:	e1a00004 	mov	r0, r4
    e3e8:	ebffff66 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e3ec:	e1a01005 	mov	r1, r5
    e3f0:	e594000c 	ldr	r0, [r4, #12]
    e3f4:	eb000a27 	bl	10c98 <strcpy>
    e3f8:	e594100c 	ldr	r1, [r4, #12]
    e3fc:	e0811006 	add	r1, r1, r6
    e400:	e584100c 	str	r1, [r4, #12]
    e404:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e408 <CString::ReserveSpace(unsigned int)>:
    e408:	e3510000 	cmp	r1, #0
    e40c:	012fff1e 	bxeq	lr
    e410:	eaffff5c 	b	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000e414 <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    e414:	e1510002 	cmp	r1, r2
    e418:	e92d4070 	push	{r4, r5, r6, lr}
    e41c:	23a0c001 	movcs	ip, #1
    e420:	3a000018 	bcc	e488 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x74>
    e424:	e00c0c92 	mul	ip, r2, ip
    e428:	e734fc11 	udiv	r4, r1, ip
    e42c:	e1540002 	cmp	r4, r2
    e430:	e1a0e004 	mov	lr, r4
    e434:	2afffffa 	bcs	e424 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x10>
    e438:	e3530000 	cmp	r3, #0
    e43c:	e1a05000 	mov	r5, r0
    e440:	13a06037 	movne	r6, #55	; 0x37
    e444:	03a06057 	moveq	r6, #87	; 0x57
    e448:	ea000001 	b	e454 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x40>
    e44c:	e734fc11 	udiv	r4, r1, ip
    e450:	e1a0e004 	mov	lr, r4
    e454:	e061149c 	mls	r1, ip, r4, r1
    e458:	e35e0009 	cmp	lr, #9
    e45c:	e73cf21c 	udiv	ip, ip, r2
    e460:	e086300e 	add	r3, r6, lr
    e464:	e28ee030 	add	lr, lr, #48	; 0x30
    e468:	e2855001 	add	r5, r5, #1
    e46c:	e6af3073 	sxtb	r3, r3
    e470:	96af307e 	sxtbls	r3, lr
    e474:	e35c0000 	cmp	ip, #0
    e478:	e5453001 	strb	r3, [r5, #-1]
    e47c:	1afffff2 	bne	e44c <CString::ntoa(char*, unsigned long, unsigned int, int)+0x38>
    e480:	e5c5c000 	strb	ip, [r5]
    e484:	e8bd8070 	pop	{r4, r5, r6, pc}
    e488:	e1a0e001 	mov	lr, r1
    e48c:	e3a0c001 	mov	ip, #1
    e490:	e1a04001 	mov	r4, r1
    e494:	eaffffe7 	b	e438 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x24>

0000e498 <CString::ftoa(char*, double, unsigned int)>:
    e498:	eeb50bc0 	vcmpe.f64	d0, #0.0
    e49c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e4a0:	eddf0b88 	vldr	d16, [pc, #544]	; e6c8 <CString::ftoa(char*, double, unsigned int)+0x230>
    e4a4:	ed2d8b02 	vpush	{d8}
    e4a8:	eeb08b40 	vmov.f64	d8, d0
    e4ac:	e24dd010 	sub	sp, sp, #16
    e4b0:	e1a05000 	mov	r5, r0
    e4b4:	e1a06001 	mov	r6, r1
    e4b8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    e4bc:	4eb18b40 	vnegmi.f64	d8, d0
    e4c0:	43a0302d 	movmi	r3, #45	; 0x2d
    e4c4:	45c03000 	strbmi	r3, [r0]
    e4c8:	42807001 	addmi	r7, r0, #1
    e4cc:	51a07000 	movpl	r7, r0
    e4d0:	eeb48be0 	vcmpe.f64	d8, d16
    e4d4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    e4d8:	ca000068 	bgt	e680 <CString::ftoa(char*, double, unsigned int)+0x1e8>
    e4dc:	eefc7bc8 	vcvt.u32.f64	s15, d8
    e4e0:	ee174a90 	vmov	r4, s15
    e4e4:	e3540009 	cmp	r4, #9
    e4e8:	83a03001 	movhi	r3, #1
    e4ec:	83a0100a 	movhi	r1, #10
    e4f0:	9a00006a 	bls	e6a0 <CString::ftoa(char*, double, unsigned int)+0x208>
    e4f4:	e0030391 	mul	r3, r1, r3
    e4f8:	e732f314 	udiv	r2, r4, r3
    e4fc:	e3520009 	cmp	r2, #9
    e500:	8afffffb 	bhi	e4f4 <CString::ftoa(char*, double, unsigned int)+0x5c>
    e504:	e30c8ccd 	movw	r8, #52429	; 0xcccd
    e508:	e34c8ccc 	movt	r8, #52428	; 0xcccc
    e50c:	e1a0c007 	mov	ip, r7
    e510:	e1a01004 	mov	r1, r4
    e514:	e73ef314 	udiv	lr, r4, r3
    e518:	ea000001 	b	e524 <CString::ftoa(char*, double, unsigned int)+0x8c>
    e51c:	e73ef311 	udiv	lr, r1, r3
    e520:	e1a0200e 	mov	r2, lr
    e524:	e3520009 	cmp	r2, #9
    e528:	e2820057 	add	r0, r2, #87	; 0x57
    e52c:	e2822030 	add	r2, r2, #48	; 0x30
    e530:	e0611e93 	mls	r1, r3, lr, r1
    e534:	e6af0070 	sxtb	r0, r0
    e538:	e28cc001 	add	ip, ip, #1
    e53c:	96af0072 	sxtbls	r0, r2
    e540:	e0832398 	umull	r2, r3, r8, r3
    e544:	e1b031a3 	lsrs	r3, r3, #3
    e548:	e54c0001 	strb	r0, [ip, #-1]
    e54c:	1afffff2 	bne	e51c <CString::ftoa(char*, double, unsigned int)+0x84>
    e550:	e3560000 	cmp	r6, #0
    e554:	e5cc3000 	strb	r3, [ip]
    e558:	1a000003 	bne	e56c <CString::ftoa(char*, double, unsigned int)+0xd4>
    e55c:	e1a00005 	mov	r0, r5
    e560:	e28dd010 	add	sp, sp, #16
    e564:	ecbd8b02 	vpop	{d8}
    e568:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e56c:	e1a00007 	mov	r0, r7
    e570:	eb0009a3 	bl	10c04 <strlen>
    e574:	e3560009 	cmp	r6, #9
    e578:	23a06009 	movcs	r6, #9
    e57c:	e3a0302e 	mov	r3, #46	; 0x2e
    e580:	e3560001 	cmp	r6, #1
    e584:	e0878000 	add	r8, r7, r0
    e588:	e7c73000 	strb	r3, [r7, r0]
    e58c:	e2887001 	add	r7, r8, #1
    e590:	0a000049 	beq	e6bc <CString::ftoa(char*, double, unsigned int)+0x224>
    e594:	e3a0200a 	mov	r2, #10
    e598:	e3a03002 	mov	r3, #2
    e59c:	e1a01002 	mov	r1, r2
    e5a0:	e2833001 	add	r3, r3, #1
    e5a4:	e0020291 	mul	r2, r1, r2
    e5a8:	e1530006 	cmp	r3, r6
    e5ac:	9afffffb 	bls	e5a0 <CString::ftoa(char*, double, unsigned int)+0x108>
    e5b0:	ee072a90 	vmov	s15, r2
    e5b4:	eef81b67 	vcvt.f64.u32	d17, s15
    e5b8:	ee074a90 	vmov	s15, r4
    e5bc:	eef80b67 	vcvt.f64.u32	d16, s15
    e5c0:	ee388b60 	vsub.f64	d8, d8, d16
    e5c4:	ee288b21 	vmul.f64	d8, d8, d17
    e5c8:	eefc7bc8 	vcvt.u32.f64	s15, d8
    e5cc:	ee17ca90 	vmov	ip, s15
    e5d0:	e35c0009 	cmp	ip, #9
    e5d4:	83a03001 	movhi	r3, #1
    e5d8:	83a0000a 	movhi	r0, #10
    e5dc:	9a000032 	bls	e6ac <CString::ftoa(char*, double, unsigned int)+0x214>
    e5e0:	e0030390 	mul	r3, r0, r3
    e5e4:	e731f31c 	udiv	r1, ip, r3
    e5e8:	e3510009 	cmp	r1, #9
    e5ec:	e1a02001 	mov	r2, r1
    e5f0:	8afffffa 	bhi	e5e0 <CString::ftoa(char*, double, unsigned int)+0x148>
    e5f4:	e30c4ccd 	movw	r4, #52429	; 0xcccd
    e5f8:	e34c4ccc 	movt	r4, #52428	; 0xcccc
    e5fc:	e28de004 	add	lr, sp, #4
    e600:	ea000001 	b	e60c <CString::ftoa(char*, double, unsigned int)+0x174>
    e604:	e731f31c 	udiv	r1, ip, r3
    e608:	e1a02001 	mov	r2, r1
    e60c:	e3520009 	cmp	r2, #9
    e610:	e2820057 	add	r0, r2, #87	; 0x57
    e614:	e2822030 	add	r2, r2, #48	; 0x30
    e618:	e06cc193 	mls	ip, r3, r1, ip
    e61c:	e6af1070 	sxtb	r1, r0
    e620:	e28ee001 	add	lr, lr, #1
    e624:	96af1072 	sxtbls	r1, r2
    e628:	e0832394 	umull	r2, r3, r4, r3
    e62c:	e1b031a3 	lsrs	r3, r3, #3
    e630:	e54e1001 	strb	r1, [lr, #-1]
    e634:	1afffff2 	bne	e604 <CString::ftoa(char*, double, unsigned int)+0x16c>
    e638:	e28d0004 	add	r0, sp, #4
    e63c:	e5ce3000 	strb	r3, [lr]
    e640:	eb00096f 	bl	10c04 <strlen>
    e644:	e0566000 	subs	r6, r6, r0
    e648:	0a000005 	beq	e664 <CString::ftoa(char*, double, unsigned int)+0x1cc>
    e64c:	e3a02030 	mov	r2, #48	; 0x30
    e650:	e0883006 	add	r3, r8, r6
    e654:	e5e82001 	strb	r2, [r8, #1]!
    e658:	e1580003 	cmp	r8, r3
    e65c:	1afffffc 	bne	e654 <CString::ftoa(char*, double, unsigned int)+0x1bc>
    e660:	e0877006 	add	r7, r7, r6
    e664:	e28d1004 	add	r1, sp, #4
    e668:	e1a00007 	mov	r0, r7
    e66c:	eb000989 	bl	10c98 <strcpy>
    e670:	e1a00005 	mov	r0, r5
    e674:	e28dd010 	add	sp, sp, #16
    e678:	ecbd8b02 	vpop	{d8}
    e67c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e680:	e1a00007 	mov	r0, r7
    e684:	e303148c 	movw	r1, #13452	; 0x348c
    e688:	e3401005 	movt	r1, #5
    e68c:	eb000981 	bl	10c98 <strcpy>
    e690:	e1a00005 	mov	r0, r5
    e694:	e28dd010 	add	sp, sp, #16
    e698:	ecbd8b02 	vpop	{d8}
    e69c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e6a0:	ee172a90 	vmov	r2, s15
    e6a4:	e3a03001 	mov	r3, #1
    e6a8:	eaffff95 	b	e504 <CString::ftoa(char*, double, unsigned int)+0x6c>
    e6ac:	ee172a90 	vmov	r2, s15
    e6b0:	e3a03001 	mov	r3, #1
    e6b4:	ee171a90 	vmov	r1, s15
    e6b8:	eaffffcd 	b	e5f4 <CString::ftoa(char*, double, unsigned int)+0x15c>
    e6bc:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    e6c0:	eaffffbc 	b	e5b8 <CString::ftoa(char*, double, unsigned int)+0x120>
    e6c4:	e320f000 	nop	{0}
    e6c8:	ffe00000 	.word	0xffe00000
    e6cc:	41efffff 	.word	0x41efffff

0000e6d0 <CString::FormatV(char const*, std::__va_list)>:
    e6d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6d4:	e1a06000 	mov	r6, r0
    e6d8:	e5900004 	ldr	r0, [r0, #4]
    e6dc:	e24dd024 	sub	sp, sp, #36	; 0x24
    e6e0:	e1a05001 	mov	r5, r1
    e6e4:	e3500000 	cmp	r0, #0
    e6e8:	e1a09002 	mov	r9, r2
    e6ec:	0a000000 	beq	e6f4 <CString::FormatV(char const*, std::__va_list)+0x24>
    e6f0:	ebfff1af 	bl	adb4 <operator delete[](void*)>
    e6f4:	e3a00040 	mov	r0, #64	; 0x40
    e6f8:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    e6fc:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    e700:	e5860008 	str	r0, [r6, #8]
    e704:	e58d3004 	str	r3, [sp, #4]
    e708:	ebfff1a7 	bl	adac <operator new[](unsigned int)>
    e70c:	e5860004 	str	r0, [r6, #4]
    e710:	e586000c 	str	r0, [r6, #12]
    e714:	e1d540d0 	ldrsb	r4, [r5]
    e718:	e3540000 	cmp	r4, #0
    e71c:	0a00008a 	beq	e94c <CString::FormatV(char const*, std::__va_list)+0x27c>
    e720:	e3540025 	cmp	r4, #37	; 0x25
    e724:	13a01001 	movne	r1, #1
    e728:	11a00006 	movne	r0, r6
    e72c:	1a000129 	bne	ebd8 <CString::FormatV(char const*, std::__va_list)+0x508>
    e730:	e1d570d1 	ldrsb	r7, [r5, #1]
    e734:	e3570025 	cmp	r7, #37	; 0x25
    e738:	0a00013c 	beq	ec30 <CString::FormatV(char const*, std::__va_list)+0x560>
    e73c:	e357002d 	cmp	r7, #45	; 0x2d
    e740:	e3a04000 	mov	r4, #0
    e744:	12855001 	addne	r5, r5, #1
    e748:	13a08000 	movne	r8, #0
    e74c:	03a08001 	moveq	r8, #1
    e750:	01d570d2 	ldrsbeq	r7, [r5, #2]
    e754:	02855002 	addeq	r5, r5, #2
    e758:	e3570030 	cmp	r7, #48	; 0x30
    e75c:	03a03001 	moveq	r3, #1
    e760:	13a03000 	movne	r3, #0
    e764:	058d3000 	streq	r3, [sp]
    e768:	01d570d1 	ldrsbeq	r7, [r5, #1]
    e76c:	00855003 	addeq	r5, r5, r3
    e770:	158d3000 	strne	r3, [sp]
    e774:	e2473030 	sub	r3, r7, #48	; 0x30
    e778:	e6ef3073 	uxtb	r3, r3
    e77c:	e3530009 	cmp	r3, #9
    e780:	8a000007 	bhi	e7a4 <CString::FormatV(char const*, std::__va_list)+0xd4>
    e784:	e3a0200a 	mov	r2, #10
    e788:	e0247492 	mla	r4, r2, r4, r7
    e78c:	e1f570d1 	ldrsb	r7, [r5, #1]!
    e790:	e2473030 	sub	r3, r7, #48	; 0x30
    e794:	e2444030 	sub	r4, r4, #48	; 0x30
    e798:	e6ef3073 	uxtb	r3, r3
    e79c:	e3530009 	cmp	r3, #9
    e7a0:	9afffff8 	bls	e788 <CString::FormatV(char const*, std::__va_list)+0xb8>
    e7a4:	e357002e 	cmp	r7, #46	; 0x2e
    e7a8:	0a000110 	beq	ebf0 <CString::FormatV(char const*, std::__va_list)+0x520>
    e7ac:	e1d500d0 	ldrsb	r0, [r5]
    e7b0:	e3a01006 	mov	r1, #6
    e7b4:	e350006c 	cmp	r0, #108	; 0x6c
    e7b8:	03a02001 	moveq	r2, #1
    e7bc:	01d500d1 	ldrsbeq	r0, [r5, #1]
    e7c0:	00855002 	addeq	r5, r5, r2
    e7c4:	e2403058 	sub	r3, r0, #88	; 0x58
    e7c8:	e3530020 	cmp	r3, #32
    e7cc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e7d0:	ea0000f5 	b	ebac <CString::FormatV(char const*, std::__va_list)+0x4dc>
    e7d4:	0000eb34 	.word	0x0000eb34
    e7d8:	0000ebac 	.word	0x0000ebac
    e7dc:	0000ebac 	.word	0x0000ebac
    e7e0:	0000ebac 	.word	0x0000ebac
    e7e4:	0000ebac 	.word	0x0000ebac
    e7e8:	0000ebac 	.word	0x0000ebac
    e7ec:	0000ebac 	.word	0x0000ebac
    e7f0:	0000ebac 	.word	0x0000ebac
    e7f4:	0000ebac 	.word	0x0000ebac
    e7f8:	0000ebac 	.word	0x0000ebac
    e7fc:	0000ebac 	.word	0x0000ebac
    e800:	0000eac8 	.word	0x0000eac8
    e804:	0000e9cc 	.word	0x0000e9cc
    e808:	0000ebac 	.word	0x0000ebac
    e80c:	0000e95c 	.word	0x0000e95c
    e810:	0000ebac 	.word	0x0000ebac
    e814:	0000ebac 	.word	0x0000ebac
    e818:	0000ebac 	.word	0x0000ebac
    e81c:	0000ebac 	.word	0x0000ebac
    e820:	0000ebac 	.word	0x0000ebac
    e824:	0000ebac 	.word	0x0000ebac
    e828:	0000ebac 	.word	0x0000ebac
    e82c:	0000ebac 	.word	0x0000ebac
    e830:	0000e858 	.word	0x0000e858
    e834:	0000ebac 	.word	0x0000ebac
    e838:	0000ebac 	.word	0x0000ebac
    e83c:	0000ebac 	.word	0x0000ebac
    e840:	0000eb44 	.word	0x0000eb44
    e844:	0000ebac 	.word	0x0000ebac
    e848:	0000eb3c 	.word	0x0000eb3c
    e84c:	0000ebac 	.word	0x0000ebac
    e850:	0000ebac 	.word	0x0000ebac
    e854:	0000eb34 	.word	0x0000eb34
    e858:	e3a0a008 	mov	sl, #8
    e85c:	e599c000 	ldr	ip, [r9]
    e860:	e2899004 	add	r9, r9, #4
    e864:	e15c000a 	cmp	ip, sl
    e868:	23a03001 	movcs	r3, #1
    e86c:	3a00016e 	bcc	ee2c <CString::FormatV(char const*, std::__va_list)+0x75c>
    e870:	e003039a 	mul	r3, sl, r3
    e874:	e731f31c 	udiv	r1, ip, r3
    e878:	e15a0001 	cmp	sl, r1
    e87c:	e1a02001 	mov	r2, r1
    e880:	9afffffa 	bls	e870 <CString::FormatV(char const*, std::__va_list)+0x1a0>
    e884:	e3500058 	cmp	r0, #88	; 0x58
    e888:	e28d7008 	add	r7, sp, #8
    e88c:	13a0b057 	movne	fp, #87	; 0x57
    e890:	03a0b037 	moveq	fp, #55	; 0x37
    e894:	e1a0e007 	mov	lr, r7
    e898:	ea000001 	b	e8a4 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    e89c:	e731f31c 	udiv	r1, ip, r3
    e8a0:	e1a02001 	mov	r2, r1
    e8a4:	e06cc193 	mls	ip, r3, r1, ip
    e8a8:	e3520009 	cmp	r2, #9
    e8ac:	e733fa13 	udiv	r3, r3, sl
    e8b0:	e08b0002 	add	r0, fp, r2
    e8b4:	e2822030 	add	r2, r2, #48	; 0x30
    e8b8:	e28ee001 	add	lr, lr, #1
    e8bc:	e6af0070 	sxtb	r0, r0
    e8c0:	96af0072 	sxtbls	r0, r2
    e8c4:	e3530000 	cmp	r3, #0
    e8c8:	e54e0001 	strb	r0, [lr, #-1]
    e8cc:	1afffff2 	bne	e89c <CString::FormatV(char const*, std::__va_list)+0x1cc>
    e8d0:	e1a00007 	mov	r0, r7
    e8d4:	e5ce3000 	strb	r3, [lr]
    e8d8:	eb0008c9 	bl	10c04 <strlen>
    e8dc:	e3580000 	cmp	r8, #0
    e8e0:	e1a0a000 	mov	sl, r0
    e8e4:	1a0000f4 	bne	ecbc <CString::FormatV(char const*, std::__va_list)+0x5ec>
    e8e8:	e1500004 	cmp	r0, r4
    e8ec:	2a00000f 	bcs	e930 <CString::FormatV(char const*, std::__va_list)+0x260>
    e8f0:	e59d3000 	ldr	r3, [sp]
    e8f4:	e0444000 	sub	r4, r4, r0
    e8f8:	e1a01004 	mov	r1, r4
    e8fc:	e1a00006 	mov	r0, r6
    e900:	e3530000 	cmp	r3, #0
    e904:	03a08020 	moveq	r8, #32
    e908:	13a08030 	movne	r8, #48	; 0x30
    e90c:	ebfffe1d 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e910:	e2443001 	sub	r3, r4, #1
    e914:	e596200c 	ldr	r2, [r6, #12]
    e918:	e2433001 	sub	r3, r3, #1
    e91c:	e3730001 	cmn	r3, #1
    e920:	e2821001 	add	r1, r2, #1
    e924:	e586100c 	str	r1, [r6, #12]
    e928:	e5c28000 	strb	r8, [r2]
    e92c:	1afffff8 	bne	e914 <CString::FormatV(char const*, std::__va_list)+0x244>
    e930:	e1a01007 	mov	r1, r7
    e934:	e1a00006 	mov	r0, r6
    e938:	ebfffea1 	bl	e3c4 <CString::PutString(char const*)>
    e93c:	e2855001 	add	r5, r5, #1
    e940:	e1d540d0 	ldrsb	r4, [r5]
    e944:	e3540000 	cmp	r4, #0
    e948:	1affff74 	bne	e720 <CString::FormatV(char const*, std::__va_list)+0x50>
    e94c:	e596300c 	ldr	r3, [r6, #12]
    e950:	e5c34000 	strb	r4, [r3]
    e954:	e28dd024 	add	sp, sp, #36	; 0x24
    e958:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e95c:	e2893007 	add	r3, r9, #7
    e960:	e28d7008 	add	r7, sp, #8
    e964:	e3c33007 	bic	r3, r3, #7
    e968:	e1a00007 	mov	r0, r7
    e96c:	e2839008 	add	r9, r3, #8
    e970:	ed930b00 	vldr	d0, [r3]
    e974:	ebfffec7 	bl	e498 <CString::ftoa(char*, double, unsigned int)>
    e978:	e1a00007 	mov	r0, r7
    e97c:	eb0008a0 	bl	10c04 <strlen>
    e980:	e3580000 	cmp	r8, #0
    e984:	e1a0a000 	mov	sl, r0
    e988:	1a000108 	bne	edb0 <CString::FormatV(char const*, std::__va_list)+0x6e0>
    e98c:	e1500004 	cmp	r0, r4
    e990:	2affffe6 	bcs	e930 <CString::FormatV(char const*, std::__va_list)+0x260>
    e994:	e0444000 	sub	r4, r4, r0
    e998:	e1a00006 	mov	r0, r6
    e99c:	e1a01004 	mov	r1, r4
    e9a0:	ebfffdf8 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e9a4:	e2443001 	sub	r3, r4, #1
    e9a8:	e3a00020 	mov	r0, #32
    e9ac:	e596200c 	ldr	r2, [r6, #12]
    e9b0:	e2433001 	sub	r3, r3, #1
    e9b4:	e3730001 	cmn	r3, #1
    e9b8:	e2821001 	add	r1, r2, #1
    e9bc:	e586100c 	str	r1, [r6, #12]
    e9c0:	e5c20000 	strb	r0, [r2]
    e9c4:	1afffff8 	bne	e9ac <CString::FormatV(char const*, std::__va_list)+0x2dc>
    e9c8:	eaffffd8 	b	e930 <CString::FormatV(char const*, std::__va_list)+0x260>
    e9cc:	e5990000 	ldr	r0, [r9]
    e9d0:	e2899004 	add	r9, r9, #4
    e9d4:	e3500000 	cmp	r0, #0
    e9d8:	b2600000 	rsblt	r0, r0, #0
    e9dc:	b3a0b001 	movlt	fp, #1
    e9e0:	a3a0b000 	movge	fp, #0
    e9e4:	e3500009 	cmp	r0, #9
    e9e8:	e1a0a00b 	mov	sl, fp
    e9ec:	e1a0e000 	mov	lr, r0
    e9f0:	c3a03001 	movgt	r3, #1
    e9f4:	c3a0100a 	movgt	r1, #10
    e9f8:	da000108 	ble	ee20 <CString::FormatV(char const*, std::__va_list)+0x750>
    e9fc:	e0030391 	mul	r3, r1, r3
    ea00:	e732f310 	udiv	r2, r0, r3
    ea04:	e3520009 	cmp	r2, #9
    ea08:	8afffffb 	bhi	e9fc <CString::FormatV(char const*, std::__va_list)+0x32c>
    ea0c:	e28d7008 	add	r7, sp, #8
    ea10:	e58d8000 	str	r8, [sp]
    ea14:	e730f310 	udiv	r0, r0, r3
    ea18:	e1a0c007 	mov	ip, r7
    ea1c:	e59d8004 	ldr	r8, [sp, #4]
    ea20:	ea000001 	b	ea2c <CString::FormatV(char const*, std::__va_list)+0x35c>
    ea24:	e730f31e 	udiv	r0, lr, r3
    ea28:	e1a02000 	mov	r2, r0
    ea2c:	e3520009 	cmp	r2, #9
    ea30:	e2821057 	add	r1, r2, #87	; 0x57
    ea34:	e2822030 	add	r2, r2, #48	; 0x30
    ea38:	e06ee093 	mls	lr, r3, r0, lr
    ea3c:	e6af1071 	sxtb	r1, r1
    ea40:	e28cc001 	add	ip, ip, #1
    ea44:	96af1072 	sxtbls	r1, r2
    ea48:	e0832398 	umull	r2, r3, r8, r3
    ea4c:	e1b031a3 	lsrs	r3, r3, #3
    ea50:	e54c1001 	strb	r1, [ip, #-1]
    ea54:	1afffff2 	bne	ea24 <CString::FormatV(char const*, std::__va_list)+0x354>
    ea58:	e59d8000 	ldr	r8, [sp]
    ea5c:	e1a00007 	mov	r0, r7
    ea60:	e5cc3000 	strb	r3, [ip]
    ea64:	eb000866 	bl	10c04 <strlen>
    ea68:	e3580000 	cmp	r8, #0
    ea6c:	e080b00b 	add	fp, r0, fp
    ea70:	0a000077 	beq	ec54 <CString::FormatV(char const*, std::__va_list)+0x584>
    ea74:	e35a0000 	cmp	sl, #0
    ea78:	1a0000df 	bne	edfc <CString::FormatV(char const*, std::__va_list)+0x72c>
    ea7c:	e1a01007 	mov	r1, r7
    ea80:	e1a00006 	mov	r0, r6
    ea84:	ebfffe4e 	bl	e3c4 <CString::PutString(char const*)>
    ea88:	e15b0004 	cmp	fp, r4
    ea8c:	2affffaa 	bcs	e93c <CString::FormatV(char const*, std::__va_list)+0x26c>
    ea90:	e044b00b 	sub	fp, r4, fp
    ea94:	e1a00006 	mov	r0, r6
    ea98:	e1a0100b 	mov	r1, fp
    ea9c:	ebfffdb9 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eaa0:	e24b3001 	sub	r3, fp, #1
    eaa4:	e3a00020 	mov	r0, #32
    eaa8:	e596200c 	ldr	r2, [r6, #12]
    eaac:	e2433001 	sub	r3, r3, #1
    eab0:	e3730001 	cmn	r3, #1
    eab4:	e2821001 	add	r1, r2, #1
    eab8:	e586100c 	str	r1, [r6, #12]
    eabc:	e5c20000 	strb	r0, [r2]
    eac0:	1afffff8 	bne	eaa8 <CString::FormatV(char const*, std::__va_list)+0x3d8>
    eac4:	eaffff9c 	b	e93c <CString::FormatV(char const*, std::__va_list)+0x26c>
    eac8:	e3580000 	cmp	r8, #0
    eacc:	e2897004 	add	r7, r9, #4
    ead0:	e1d980d0 	ldrsb	r8, [r9]
    ead4:	1a00008b 	bne	ed08 <CString::FormatV(char const*, std::__va_list)+0x638>
    ead8:	e3540001 	cmp	r4, #1
    eadc:	9a00000b 	bls	eb10 <CString::FormatV(char const*, std::__va_list)+0x440>
    eae0:	e2441001 	sub	r1, r4, #1
    eae4:	e1a00006 	mov	r0, r6
    eae8:	ebfffda6 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eaec:	e2444002 	sub	r4, r4, #2
    eaf0:	e3a01020 	mov	r1, #32
    eaf4:	e596300c 	ldr	r3, [r6, #12]
    eaf8:	e2444001 	sub	r4, r4, #1
    eafc:	e3740001 	cmn	r4, #1
    eb00:	e2832001 	add	r2, r3, #1
    eb04:	e586200c 	str	r2, [r6, #12]
    eb08:	e5c31000 	strb	r1, [r3]
    eb0c:	1afffff8 	bne	eaf4 <CString::FormatV(char const*, std::__va_list)+0x424>
    eb10:	e3a01001 	mov	r1, #1
    eb14:	e1a00006 	mov	r0, r6
    eb18:	ebfffd9a 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eb1c:	e596300c 	ldr	r3, [r6, #12]
    eb20:	e1a09007 	mov	r9, r7
    eb24:	e2832001 	add	r2, r3, #1
    eb28:	e586200c 	str	r2, [r6, #12]
    eb2c:	e5c38000 	strb	r8, [r3]
    eb30:	eaffff81 	b	e93c <CString::FormatV(char const*, std::__va_list)+0x26c>
    eb34:	e3a0a010 	mov	sl, #16
    eb38:	eaffff47 	b	e85c <CString::FormatV(char const*, std::__va_list)+0x18c>
    eb3c:	e3a0a00a 	mov	sl, #10
    eb40:	eaffff45 	b	e85c <CString::FormatV(char const*, std::__va_list)+0x18c>
    eb44:	e599a000 	ldr	sl, [r9]
    eb48:	e2899004 	add	r9, r9, #4
    eb4c:	e1a0000a 	mov	r0, sl
    eb50:	eb00082b 	bl	10c04 <strlen>
    eb54:	e3580000 	cmp	r8, #0
    eb58:	e1a07000 	mov	r7, r0
    eb5c:	1a000080 	bne	ed64 <CString::FormatV(char const*, std::__va_list)+0x694>
    eb60:	e1500004 	cmp	r0, r4
    eb64:	2a00000c 	bcs	eb9c <CString::FormatV(char const*, std::__va_list)+0x4cc>
    eb68:	e0444000 	sub	r4, r4, r0
    eb6c:	e1a00006 	mov	r0, r6
    eb70:	e1a01004 	mov	r1, r4
    eb74:	ebfffd83 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eb78:	e2443001 	sub	r3, r4, #1
    eb7c:	e3a00020 	mov	r0, #32
    eb80:	e596200c 	ldr	r2, [r6, #12]
    eb84:	e2433001 	sub	r3, r3, #1
    eb88:	e3730001 	cmn	r3, #1
    eb8c:	e2821001 	add	r1, r2, #1
    eb90:	e586100c 	str	r1, [r6, #12]
    eb94:	e5c20000 	strb	r0, [r2]
    eb98:	1afffff8 	bne	eb80 <CString::FormatV(char const*, std::__va_list)+0x4b0>
    eb9c:	e1a0100a 	mov	r1, sl
    eba0:	e1a00006 	mov	r0, r6
    eba4:	ebfffe06 	bl	e3c4 <CString::PutString(char const*)>
    eba8:	eaffff63 	b	e93c <CString::FormatV(char const*, std::__va_list)+0x26c>
    ebac:	e3a01001 	mov	r1, #1
    ebb0:	e1a00006 	mov	r0, r6
    ebb4:	ebfffd73 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ebb8:	e596300c 	ldr	r3, [r6, #12]
    ebbc:	e3a01001 	mov	r1, #1
    ebc0:	e3a02025 	mov	r2, #37	; 0x25
    ebc4:	e0830001 	add	r0, r3, r1
    ebc8:	e586000c 	str	r0, [r6, #12]
    ebcc:	e1a00006 	mov	r0, r6
    ebd0:	e5c32000 	strb	r2, [r3]
    ebd4:	e1d540d0 	ldrsb	r4, [r5]
    ebd8:	ebfffd6a 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ebdc:	e596300c 	ldr	r3, [r6, #12]
    ebe0:	e2832001 	add	r2, r3, #1
    ebe4:	e586200c 	str	r2, [r6, #12]
    ebe8:	e5c34000 	strb	r4, [r3]
    ebec:	eaffff52 	b	e93c <CString::FormatV(char const*, std::__va_list)+0x26c>
    ebf0:	e1d500d1 	ldrsb	r0, [r5, #1]
    ebf4:	e3a01000 	mov	r1, #0
    ebf8:	e2855001 	add	r5, r5, #1
    ebfc:	e2403030 	sub	r3, r0, #48	; 0x30
    ec00:	e6ef3073 	uxtb	r3, r3
    ec04:	e3530009 	cmp	r3, #9
    ec08:	8afffee9 	bhi	e7b4 <CString::FormatV(char const*, std::__va_list)+0xe4>
    ec0c:	e3a0200a 	mov	r2, #10
    ec10:	e0210192 	mla	r1, r2, r1, r0
    ec14:	e1f500d1 	ldrsb	r0, [r5, #1]!
    ec18:	e2403030 	sub	r3, r0, #48	; 0x30
    ec1c:	e2411030 	sub	r1, r1, #48	; 0x30
    ec20:	e6ef3073 	uxtb	r3, r3
    ec24:	e3530009 	cmp	r3, #9
    ec28:	9afffff8 	bls	ec10 <CString::FormatV(char const*, std::__va_list)+0x540>
    ec2c:	eafffee0 	b	e7b4 <CString::FormatV(char const*, std::__va_list)+0xe4>
    ec30:	e3a01001 	mov	r1, #1
    ec34:	e1a00006 	mov	r0, r6
    ec38:	ebfffd52 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ec3c:	e596300c 	ldr	r3, [r6, #12]
    ec40:	e2855002 	add	r5, r5, #2
    ec44:	e2832001 	add	r2, r3, #1
    ec48:	e586200c 	str	r2, [r6, #12]
    ec4c:	e5c37000 	strb	r7, [r3]
    ec50:	eafffeaf 	b	e714 <CString::FormatV(char const*, std::__va_list)+0x44>
    ec54:	e15b0004 	cmp	fp, r4
    ec58:	2a00000c 	bcs	ec90 <CString::FormatV(char const*, std::__va_list)+0x5c0>
    ec5c:	e044b00b 	sub	fp, r4, fp
    ec60:	e1a00006 	mov	r0, r6
    ec64:	e1a0100b 	mov	r1, fp
    ec68:	ebfffd46 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ec6c:	e24b3001 	sub	r3, fp, #1
    ec70:	e3a00020 	mov	r0, #32
    ec74:	e596200c 	ldr	r2, [r6, #12]
    ec78:	e2433001 	sub	r3, r3, #1
    ec7c:	e3730001 	cmn	r3, #1
    ec80:	e2821001 	add	r1, r2, #1
    ec84:	e586100c 	str	r1, [r6, #12]
    ec88:	e5c20000 	strb	r0, [r2]
    ec8c:	1afffff8 	bne	ec74 <CString::FormatV(char const*, std::__va_list)+0x5a4>
    ec90:	e35a0000 	cmp	sl, #0
    ec94:	0affff25 	beq	e930 <CString::FormatV(char const*, std::__va_list)+0x260>
    ec98:	e3a01001 	mov	r1, #1
    ec9c:	e1a00006 	mov	r0, r6
    eca0:	ebfffd38 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eca4:	e596300c 	ldr	r3, [r6, #12]
    eca8:	e3a0202d 	mov	r2, #45	; 0x2d
    ecac:	e2831001 	add	r1, r3, #1
    ecb0:	e586100c 	str	r1, [r6, #12]
    ecb4:	e5c32000 	strb	r2, [r3]
    ecb8:	eaffff1c 	b	e930 <CString::FormatV(char const*, std::__va_list)+0x260>
    ecbc:	e1a01007 	mov	r1, r7
    ecc0:	e1a00006 	mov	r0, r6
    ecc4:	ebfffdbe 	bl	e3c4 <CString::PutString(char const*)>
    ecc8:	e15a0004 	cmp	sl, r4
    eccc:	2affff1a 	bcs	e93c <CString::FormatV(char const*, std::__va_list)+0x26c>
    ecd0:	e044400a 	sub	r4, r4, sl
    ecd4:	e1a00006 	mov	r0, r6
    ecd8:	e1a01004 	mov	r1, r4
    ecdc:	ebfffd29 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ece0:	e2443001 	sub	r3, r4, #1
    ece4:	e3a00020 	mov	r0, #32
    ece8:	e596200c 	ldr	r2, [r6, #12]
    ecec:	e2433001 	sub	r3, r3, #1
    ecf0:	e3730001 	cmn	r3, #1
    ecf4:	e2821001 	add	r1, r2, #1
    ecf8:	e586100c 	str	r1, [r6, #12]
    ecfc:	e5c20000 	strb	r0, [r2]
    ed00:	1afffff8 	bne	ece8 <CString::FormatV(char const*, std::__va_list)+0x618>
    ed04:	eaffff0c 	b	e93c <CString::FormatV(char const*, std::__va_list)+0x26c>
    ed08:	e3a01001 	mov	r1, #1
    ed0c:	e1a00006 	mov	r0, r6
    ed10:	ebfffd1c 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ed14:	e596300c 	ldr	r3, [r6, #12]
    ed18:	e3540001 	cmp	r4, #1
    ed1c:	e2832001 	add	r2, r3, #1
    ed20:	e586200c 	str	r2, [r6, #12]
    ed24:	e5c38000 	strb	r8, [r3]
    ed28:	9a00000b 	bls	ed5c <CString::FormatV(char const*, std::__va_list)+0x68c>
    ed2c:	e2441001 	sub	r1, r4, #1
    ed30:	e1a00006 	mov	r0, r6
    ed34:	ebfffd13 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ed38:	e2444002 	sub	r4, r4, #2
    ed3c:	e3a01020 	mov	r1, #32
    ed40:	e596300c 	ldr	r3, [r6, #12]
    ed44:	e2444001 	sub	r4, r4, #1
    ed48:	e3740001 	cmn	r4, #1
    ed4c:	e2832001 	add	r2, r3, #1
    ed50:	e586200c 	str	r2, [r6, #12]
    ed54:	e5c31000 	strb	r1, [r3]
    ed58:	1afffff8 	bne	ed40 <CString::FormatV(char const*, std::__va_list)+0x670>
    ed5c:	e1a09007 	mov	r9, r7
    ed60:	eafffef5 	b	e93c <CString::FormatV(char const*, std::__va_list)+0x26c>
    ed64:	e1a0100a 	mov	r1, sl
    ed68:	e1a00006 	mov	r0, r6
    ed6c:	ebfffd94 	bl	e3c4 <CString::PutString(char const*)>
    ed70:	e1570004 	cmp	r7, r4
    ed74:	2afffef0 	bcs	e93c <CString::FormatV(char const*, std::__va_list)+0x26c>
    ed78:	e0444007 	sub	r4, r4, r7
    ed7c:	e1a00006 	mov	r0, r6
    ed80:	e1a01004 	mov	r1, r4
    ed84:	ebfffcff 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ed88:	e2443001 	sub	r3, r4, #1
    ed8c:	e3a00020 	mov	r0, #32
    ed90:	e596200c 	ldr	r2, [r6, #12]
    ed94:	e2433001 	sub	r3, r3, #1
    ed98:	e3730001 	cmn	r3, #1
    ed9c:	e2821001 	add	r1, r2, #1
    eda0:	e586100c 	str	r1, [r6, #12]
    eda4:	e5c20000 	strb	r0, [r2]
    eda8:	1afffff8 	bne	ed90 <CString::FormatV(char const*, std::__va_list)+0x6c0>
    edac:	eafffee2 	b	e93c <CString::FormatV(char const*, std::__va_list)+0x26c>
    edb0:	e1a01007 	mov	r1, r7
    edb4:	e1a00006 	mov	r0, r6
    edb8:	ebfffd81 	bl	e3c4 <CString::PutString(char const*)>
    edbc:	e15a0004 	cmp	sl, r4
    edc0:	2afffedd 	bcs	e93c <CString::FormatV(char const*, std::__va_list)+0x26c>
    edc4:	e044400a 	sub	r4, r4, sl
    edc8:	e1a00006 	mov	r0, r6
    edcc:	e1a01004 	mov	r1, r4
    edd0:	ebfffcec 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    edd4:	e2443001 	sub	r3, r4, #1
    edd8:	e3a00020 	mov	r0, #32
    eddc:	e596200c 	ldr	r2, [r6, #12]
    ede0:	e2433001 	sub	r3, r3, #1
    ede4:	e3730001 	cmn	r3, #1
    ede8:	e2821001 	add	r1, r2, #1
    edec:	e586100c 	str	r1, [r6, #12]
    edf0:	e5c20000 	strb	r0, [r2]
    edf4:	1afffff8 	bne	eddc <CString::FormatV(char const*, std::__va_list)+0x70c>
    edf8:	eafffecf 	b	e93c <CString::FormatV(char const*, std::__va_list)+0x26c>
    edfc:	e3a01001 	mov	r1, #1
    ee00:	e1a00006 	mov	r0, r6
    ee04:	ebfffcdf 	bl	e188 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ee08:	e596300c 	ldr	r3, [r6, #12]
    ee0c:	e3a0202d 	mov	r2, #45	; 0x2d
    ee10:	e2831001 	add	r1, r3, #1
    ee14:	e586100c 	str	r1, [r6, #12]
    ee18:	e5c32000 	strb	r2, [r3]
    ee1c:	eaffff16 	b	ea7c <CString::FormatV(char const*, std::__va_list)+0x3ac>
    ee20:	e1a02000 	mov	r2, r0
    ee24:	e3a03001 	mov	r3, #1
    ee28:	eafffef7 	b	ea0c <CString::FormatV(char const*, std::__va_list)+0x33c>
    ee2c:	e1a0200c 	mov	r2, ip
    ee30:	e3a03001 	mov	r3, #1
    ee34:	e1a0100c 	mov	r1, ip
    ee38:	eafffe91 	b	e884 <CString::FormatV(char const*, std::__va_list)+0x1b4>

0000ee3c <CString::Format(char const*, ...)>:
    ee3c:	e92d000e 	push	{r1, r2, r3}
    ee40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ee44:	e24dd008 	sub	sp, sp, #8
    ee48:	e28d3010 	add	r3, sp, #16
    ee4c:	e1a02003 	mov	r2, r3
    ee50:	e59d100c 	ldr	r1, [sp, #12]
    ee54:	e58d3004 	str	r3, [sp, #4]
    ee58:	ebfffe1c 	bl	e6d0 <CString::FormatV(char const*, std::__va_list)>
    ee5c:	e28dd008 	add	sp, sp, #8
    ee60:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ee64:	e28dd00c 	add	sp, sp, #12
    ee68:	e12fff1e 	bx	lr
    ee6c:	00000000 	andeq	r0, r0, r0

0000ee70 <DelayLoop>:
    ee70:	e2500001 	subs	r0, r0, #1
    ee74:	8afffffd 	bhi	ee70 <DelayLoop>
    ee78:	e1a0f00e 	mov	pc, lr

0000ee7c <CExceptionHandler::CExceptionHandler()>:
    ee7c:	e92d4070 	push	{r4, r5, r6, lr}
    ee80:	e3035c68 	movw	r5, #15464	; 0x3c68
    ee84:	e3405005 	movt	r5, #5
    ee88:	e1a04000 	mov	r4, r0
    ee8c:	e5953000 	ldr	r3, [r5]
    ee90:	e3530000 	cmp	r3, #0
    ee94:	0a000005 	beq	eeb0 <CExceptionHandler::CExceptionHandler()+0x34>
    ee98:	e30314a0 	movw	r1, #13472	; 0x34a0
    ee9c:	e3401005 	movt	r1, #5
    eea0:	e3020238 	movw	r0, #8760	; 0x2238
    eea4:	e3400005 	movt	r0, #5
    eea8:	e3a0202e 	mov	r2, #46	; 0x2e
    eeac:	ebfff96a 	bl	d45c <assertion_failed>
    eeb0:	e59f1048 	ldr	r1, [pc, #72]	; ef00 <CExceptionHandler::CExceptionHandler()+0x84>
    eeb4:	e3a00000 	mov	r0, #0
    eeb8:	e59f2044 	ldr	r2, [pc, #68]	; ef04 <CExceptionHandler::CExceptionHandler()+0x88>
    eebc:	e59f3044 	ldr	r3, [pc, #68]	; ef08 <CExceptionHandler::CExceptionHandler()+0x8c>
    eec0:	e1a01141 	asr	r1, r1, #2
    eec4:	e5854000 	str	r4, [r5]
    eec8:	e1a02142 	asr	r2, r2, #2
    eecc:	e2411002 	sub	r1, r1, #2
    eed0:	e1a03143 	asr	r3, r3, #2
    eed4:	e2422002 	sub	r2, r2, #2
    eed8:	e2433002 	sub	r3, r3, #2
    eedc:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    eee0:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    eee4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    eee8:	e5801004 	str	r1, [r0, #4]
    eeec:	e580200c 	str	r2, [r0, #12]
    eef0:	e5803010 	str	r3, [r0, #16]
    eef4:	ebffefd4 	bl	ae4c <SyncDataAndInstructionCache>
    eef8:	e1a00004 	mov	r0, r4
    eefc:	e8bd8070 	pop	{r4, r5, r6, pc}
    ef00:	0000f0d0 	.word	0x0000f0d0
    ef04:	0000f108 	.word	0x0000f108
    ef08:	0000f144 	.word	0x0000f144

0000ef0c <CExceptionHandler::~CExceptionHandler()>:
    ef0c:	e3033c68 	movw	r3, #15464	; 0x3c68
    ef10:	e3403005 	movt	r3, #5
    ef14:	e3a02000 	mov	r2, #0
    ef18:	e5832000 	str	r2, [r3]
    ef1c:	e12fff1e 	bx	lr

0000ef20 <CExceptionHandler::Throw(unsigned int)>:
    ef20:	e92d4010 	push	{r4, lr}
    ef24:	e1a04001 	mov	r4, r1
    ef28:	e24dd008 	sub	sp, sp, #8
    ef2c:	ebfffac9 	bl	da58 <CLogger::Get()>
    ef30:	e3032b8c 	movw	r2, #15244	; 0x3b8c
    ef34:	e3402005 	movt	r2, #5
    ef38:	e30334b8 	movw	r3, #13496	; 0x34b8
    ef3c:	e3403005 	movt	r3, #5
    ef40:	e3031498 	movw	r1, #13464	; 0x3498
    ef44:	e3401005 	movt	r1, #5
    ef48:	e792c104 	ldr	ip, [r2, r4, lsl #2]
    ef4c:	e3a02000 	mov	r2, #0
    ef50:	e58dc000 	str	ip, [sp]
    ef54:	ebfffb9c 	bl	ddcc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ef58:	e28dd008 	add	sp, sp, #8
    ef5c:	e8bd8010 	pop	{r4, pc}

0000ef60 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    ef60:	e3510002 	cmp	r1, #2
    ef64:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    ef68:	e1a05001 	mov	r5, r1
    ef6c:	e24dd024 	sub	sp, sp, #36	; 0x24
    ef70:	e1a04002 	mov	r4, r2
    ef74:	0a000027 	beq	f018 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb8>
    ef78:	e3510003 	cmp	r1, #3
    ef7c:	0a000022 	beq	f00c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
    ef80:	e3a07000 	mov	r7, #0
    ef84:	e1a08007 	mov	r8, r7
    ef88:	e3540000 	cmp	r4, #0
    ef8c:	0a000024 	beq	f024 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
    ef90:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    ef94:	e3031498 	movw	r1, #13464	; 0x3498
    ef98:	e3401005 	movt	r1, #5
    ef9c:	e203301f 	and	r3, r3, #31
    efa0:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    efa4:	e3530012 	cmp	r3, #18
    efa8:	e5949040 	ldr	r9, [r4, #64]	; 0x40
    efac:	08940240 	ldmeq	r4, {r6, r9}
    efb0:	e1a00006 	mov	r0, r6
    efb4:	ebfff9b7 	bl	d698 <debug_stacktrace(unsigned int const*, char const*)>
    efb8:	ebfffaa6 	bl	da58 <CLogger::Get()>
    efbc:	e3033b8c 	movw	r3, #15244	; 0x3b8c
    efc0:	e3403005 	movt	r3, #5
    efc4:	e594e044 	ldr	lr, [r4, #68]	; 0x44
    efc8:	e3a02000 	mov	r2, #0
    efcc:	e594c048 	ldr	ip, [r4, #72]	; 0x48
    efd0:	e3031498 	movw	r1, #13464	; 0x3498
    efd4:	e3401005 	movt	r1, #5
    efd8:	e7934105 	ldr	r4, [r3, r5, lsl #2]
    efdc:	e30334d4 	movw	r3, #13524	; 0x34d4
    efe0:	e3403005 	movt	r3, #5
    efe4:	e58d9014 	str	r9, [sp, #20]
    efe8:	e58d6010 	str	r6, [sp, #16]
    efec:	e58d700c 	str	r7, [sp, #12]
    eff0:	e58d8008 	str	r8, [sp, #8]
    eff4:	e58d4000 	str	r4, [sp]
    eff8:	e58de018 	str	lr, [sp, #24]
    effc:	e58dc004 	str	ip, [sp, #4]
    f000:	ebfffb71 	bl	ddcc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f004:	e28dd024 	add	sp, sp, #36	; 0x24
    f008:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    f00c:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
    f010:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
    f014:	eaffffdb 	b	ef88 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    f018:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
    f01c:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
    f020:	eaffffd8 	b	ef88 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    f024:	e30314a0 	movw	r1, #13472	; 0x34a0
    f028:	e3401005 	movt	r1, #5
    f02c:	e30304c8 	movw	r0, #13512	; 0x34c8
    f030:	e3400005 	movt	r0, #5
    f034:	e3a02067 	mov	r2, #103	; 0x67
    f038:	ebfff907 	bl	d45c <assertion_failed>
    f03c:	eaffffd3 	b	ef90 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>

0000f040 <CExceptionHandler::Get()>:
    f040:	e92d4010 	push	{r4, lr}
    f044:	e3034c68 	movw	r4, #15464	; 0x3c68
    f048:	e3404005 	movt	r4, #5
    f04c:	e5940000 	ldr	r0, [r4]
    f050:	e3500000 	cmp	r0, #0
    f054:	18bd8010 	popne	{r4, pc}
    f058:	e3a0207e 	mov	r2, #126	; 0x7e
    f05c:	e30314a0 	movw	r1, #13472	; 0x34a0
    f060:	e3401005 	movt	r1, #5
    f064:	e3020344 	movw	r0, #9028	; 0x2344
    f068:	e3400005 	movt	r0, #5
    f06c:	ebfff8fa 	bl	d45c <assertion_failed>
    f070:	e5940000 	ldr	r0, [r4]
    f074:	e8bd8010 	pop	{r4, pc}

0000f078 <ExceptionHandler>:
    f078:	e92d4070 	push	{r4, r5, r6, lr}
    f07c:	e3034c68 	movw	r4, #15464	; 0x3c68
    f080:	e3404005 	movt	r4, #5
    f084:	e1a05000 	mov	r5, r0
    f088:	e1a06001 	mov	r6, r1
    f08c:	e5940000 	ldr	r0, [r4]
    f090:	e3500000 	cmp	r0, #0
    f094:	0a000003 	beq	f0a8 <ExceptionHandler+0x30>
    f098:	e1a02006 	mov	r2, r6
    f09c:	e1a01005 	mov	r1, r5
    f0a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    f0a4:	eaffffad 	b	ef60 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
    f0a8:	e3a0207e 	mov	r2, #126	; 0x7e
    f0ac:	e30314a0 	movw	r1, #13472	; 0x34a0
    f0b0:	e3401005 	movt	r1, #5
    f0b4:	e3020344 	movw	r0, #9028	; 0x2344
    f0b8:	e3400005 	movt	r0, #5
    f0bc:	ebfff8e6 	bl	d45c <assertion_failed>
    f0c0:	e5940000 	ldr	r0, [r4]
    f0c4:	e1a02006 	mov	r2, r6
    f0c8:	e1a01005 	mov	r1, r5
    f0cc:	e8bd4070 	pop	{r4, r5, r6, lr}
    f0d0:	eaffffa2 	b	ef60 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

0000f0d4 <UndefinedInstructionStub>:
    f0d4:	e24ee004 	sub	lr, lr, #4
    f0d8:	e92d4000 	stmfd	sp!, {lr}
    f0dc:	e14fe000 	mrs	lr, SPSR
    f0e0:	e92d4000 	stmfd	sp!, {lr}
    f0e4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    f0e8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    f0ec:	e1a0100d 	mov	r1, sp
    f0f0:	f1020012 	cps	#18
    f0f4:	e1a0200d 	mov	r2, sp
    f0f8:	e1a0300e 	mov	r3, lr
    f0fc:	f102001f 	cps	#31
    f100:	e1a0d001 	mov	sp, r1
    f104:	e92d000c 	push	{r2, r3}
    f108:	e1a0100d 	mov	r1, sp
    f10c:	e3a00001 	mov	r0, #1
    f110:	eaffffd8 	b	f078 <ExceptionHandler>

0000f114 <PrefetchAbortStub>:
    f114:	e24ee004 	sub	lr, lr, #4
    f118:	e92d4000 	stmfd	sp!, {lr}
    f11c:	e14fe000 	mrs	lr, SPSR
    f120:	e92d4000 	stmfd	sp!, {lr}
    f124:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    f128:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    f12c:	e1a0100d 	mov	r1, sp
    f130:	f1020012 	cps	#18
    f134:	e1a0200d 	mov	r2, sp
    f138:	e1a0300e 	mov	r3, lr
    f13c:	f102001f 	cps	#31
    f140:	e1a0d001 	mov	sp, r1
    f144:	e92d000c 	push	{r2, r3}
    f148:	e1a0100d 	mov	r1, sp
    f14c:	e3a00002 	mov	r0, #2
    f150:	eaffffc8 	b	f078 <ExceptionHandler>

0000f154 <DataAbortStub>:
    f154:	e24ee008 	sub	lr, lr, #8
    f158:	e92d4000 	stmfd	sp!, {lr}
    f15c:	e14fe000 	mrs	lr, SPSR
    f160:	e92d4000 	stmfd	sp!, {lr}
    f164:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    f168:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    f16c:	e1a0100d 	mov	r1, sp
    f170:	f1020012 	cps	#18
    f174:	e1a0200d 	mov	r2, sp
    f178:	e1a0300e 	mov	r3, lr
    f17c:	f102001f 	cps	#31
    f180:	e1a0d001 	mov	sp, r1
    f184:	e92d000c 	push	{r2, r3}
    f188:	e1a0100d 	mov	r1, sp
    f18c:	e3a00003 	mov	r0, #3
    f190:	eaffffb8 	b	f078 <ExceptionHandler>

0000f194 <IRQStub>:
    f194:	e24ee004 	sub	lr, lr, #4
    f198:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f19c:	eb0000f2 	bl	f56c <InterruptHandler>
    f1a0:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000f1a4 <CInterruptSystem::CInterruptSystem()>:
    f1a4:	e2802f47 	add	r2, r0, #284	; 0x11c
    f1a8:	e1a0c000 	mov	ip, r0
    f1ac:	e2403004 	sub	r3, r0, #4
    f1b0:	e3a01000 	mov	r1, #0
    f1b4:	e1a00002 	mov	r0, r2
    f1b8:	e5a31004 	str	r1, [r3, #4]!
    f1bc:	e5a21004 	str	r1, [r2, #4]!
    f1c0:	e1530000 	cmp	r3, r0
    f1c4:	1afffffb 	bne	f1b8 <CInterruptSystem::CInterruptSystem()+0x14>
    f1c8:	e3033c6c 	movw	r3, #15468	; 0x3c6c
    f1cc:	e3403005 	movt	r3, #5
    f1d0:	e1a0000c 	mov	r0, ip
    f1d4:	e583c000 	str	ip, [r3]
    f1d8:	e12fff1e 	bx	lr

0000f1dc <CInterruptSystem::~CInterruptSystem()>:
    f1dc:	e3033c6c 	movw	r3, #15468	; 0x3c6c
    f1e0:	e3403005 	movt	r3, #5
    f1e4:	e3a02000 	mov	r2, #0
    f1e8:	e5832000 	str	r2, [r3]
    f1ec:	e12fff1e 	bx	lr

0000f1f0 <CInterruptSystem::Initialize()>:
    f1f0:	e59f3040 	ldr	r3, [pc, #64]	; f238 <CInterruptSystem::Initialize()+0x48>
    f1f4:	e92d4010 	push	{r4, lr}
    f1f8:	e3a04000 	mov	r4, #0
    f1fc:	e1a03143 	asr	r3, r3, #2
    f200:	e2433002 	sub	r3, r3, #2
    f204:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    f208:	e5843018 	str	r3, [r4, #24]
    f20c:	ebffef0e 	bl	ae4c <SyncDataAndInstructionCache>
    f210:	e3a03a0b 	mov	r3, #45056	; 0xb000
    f214:	e3433f00 	movt	r3, #16128	; 0x3f00
    f218:	e3e02000 	mvn	r2, #0
    f21c:	e583420c 	str	r4, [r3, #524]	; 0x20c
    f220:	e583221c 	str	r2, [r3, #540]	; 0x21c
    f224:	e5832220 	str	r2, [r3, #544]	; 0x220
    f228:	e5832224 	str	r2, [r3, #548]	; 0x224
    f22c:	f1080080 	cpsie	i
    f230:	e3a00001 	mov	r0, #1
    f234:	e8bd8010 	pop	{r4, pc}
    f238:	0000f17c 	.word	0x0000f17c

0000f23c <CInterruptSystem::EnableIRQ(unsigned int)>:
    f23c:	e3500047 	cmp	r0, #71	; 0x47
    f240:	e92d4010 	push	{r4, lr}
    f244:	e1a04000 	mov	r4, r0
    f248:	8a00000e 	bhi	f288 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
    f24c:	e350001f 	cmp	r0, #31
    f250:	930b2210 	movwls	r2, #45584	; 0xb210
    f254:	93432f00 	movtls	r2, #16128	; 0x3f00
    f258:	8a000004 	bhi	f270 <CInterruptSystem::EnableIRQ(unsigned int)+0x34>
    f25c:	e204401f 	and	r4, r4, #31
    f260:	e3a03001 	mov	r3, #1
    f264:	e1a04413 	lsl	r4, r3, r4
    f268:	e5824000 	str	r4, [r2]
    f26c:	e8bd8010 	pop	{r4, pc}
    f270:	e350003f 	cmp	r0, #63	; 0x3f
    f274:	930b2214 	movwls	r2, #45588	; 0xb214
    f278:	93432f00 	movtls	r2, #16128	; 0x3f00
    f27c:	830b2218 	movwhi	r2, #45592	; 0xb218
    f280:	83432f00 	movthi	r2, #16128	; 0x3f00
    f284:	eafffff4 	b	f25c <CInterruptSystem::EnableIRQ(unsigned int)+0x20>
    f288:	e3a02074 	mov	r2, #116	; 0x74
    f28c:	e303155c 	movw	r1, #13660	; 0x355c
    f290:	e3401005 	movt	r1, #5
    f294:	e303056c 	movw	r0, #13676	; 0x356c
    f298:	e3400005 	movt	r0, #5
    f29c:	ebfff86e 	bl	d45c <assertion_failed>
    f2a0:	e30b2218 	movw	r2, #45592	; 0xb218
    f2a4:	e3432f00 	movt	r2, #16128	; 0x3f00
    f2a8:	eaffffeb 	b	f25c <CInterruptSystem::EnableIRQ(unsigned int)+0x20>

0000f2ac <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    f2ac:	e3510047 	cmp	r1, #71	; 0x47
    f2b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f2b4:	e1a04001 	mov	r4, r1
    f2b8:	e1a05000 	mov	r5, r0
    f2bc:	e1a08002 	mov	r8, r2
    f2c0:	e1a07003 	mov	r7, r3
    f2c4:	8a00000e 	bhi	f304 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
    f2c8:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    f2cc:	e0856104 	add	r6, r5, r4, lsl #2
    f2d0:	e3530000 	cmp	r3, #0
    f2d4:	0a000005 	beq	f2f0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x44>
    f2d8:	e303155c 	movw	r1, #13660	; 0x355c
    f2dc:	e3401005 	movt	r1, #5
    f2e0:	e3030580 	movw	r0, #13696	; 0x3580
    f2e4:	e3400005 	movt	r0, #5
    f2e8:	e3a0205d 	mov	r2, #93	; 0x5d
    f2ec:	ebfff85a 	bl	d45c <assertion_failed>
    f2f0:	e7858104 	str	r8, [r5, r4, lsl #2]
    f2f4:	e1a00004 	mov	r0, r4
    f2f8:	e5867120 	str	r7, [r6, #288]	; 0x120
    f2fc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    f300:	eaffffcd 	b	f23c <CInterruptSystem::EnableIRQ(unsigned int)>
    f304:	e303155c 	movw	r1, #13660	; 0x355c
    f308:	e3401005 	movt	r1, #5
    f30c:	e303056c 	movw	r0, #13676	; 0x356c
    f310:	e3400005 	movt	r0, #5
    f314:	e3a0205c 	mov	r2, #92	; 0x5c
    f318:	ebfff84f 	bl	d45c <assertion_failed>
    f31c:	eaffffe9 	b	f2c8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>

0000f320 <CInterruptSystem::DisableIRQ(unsigned int)>:
    f320:	e3500047 	cmp	r0, #71	; 0x47
    f324:	e92d4010 	push	{r4, lr}
    f328:	e1a04000 	mov	r4, r0
    f32c:	8a00000e 	bhi	f36c <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
    f330:	e350001f 	cmp	r0, #31
    f334:	930b221c 	movwls	r2, #45596	; 0xb21c
    f338:	93432f00 	movtls	r2, #16128	; 0x3f00
    f33c:	8a000004 	bhi	f354 <CInterruptSystem::DisableIRQ(unsigned int)+0x34>
    f340:	e204401f 	and	r4, r4, #31
    f344:	e3a03001 	mov	r3, #1
    f348:	e1a04413 	lsl	r4, r3, r4
    f34c:	e5824000 	str	r4, [r2]
    f350:	e8bd8010 	pop	{r4, pc}
    f354:	e350003f 	cmp	r0, #63	; 0x3f
    f358:	930b2220 	movwls	r2, #45600	; 0xb220
    f35c:	93432f00 	movtls	r2, #16128	; 0x3f00
    f360:	830b2224 	movwhi	r2, #45604	; 0xb224
    f364:	83432f00 	movthi	r2, #16128	; 0x3f00
    f368:	eafffff4 	b	f340 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>
    f36c:	e3a0207f 	mov	r2, #127	; 0x7f
    f370:	e303155c 	movw	r1, #13660	; 0x355c
    f374:	e3401005 	movt	r1, #5
    f378:	e303056c 	movw	r0, #13676	; 0x356c
    f37c:	e3400005 	movt	r0, #5
    f380:	ebfff835 	bl	d45c <assertion_failed>
    f384:	e30b2224 	movw	r2, #45604	; 0xb224
    f388:	e3432f00 	movt	r2, #16128	; 0x3f00
    f38c:	eaffffeb 	b	f340 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>

0000f390 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    f390:	e3510047 	cmp	r1, #71	; 0x47
    f394:	e92d4070 	push	{r4, r5, r6, lr}
    f398:	e1a04001 	mov	r4, r1
    f39c:	e1a05000 	mov	r5, r0
    f3a0:	8a000009 	bhi	f3cc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    f3a4:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    f3a8:	e0856104 	add	r6, r5, r4, lsl #2
    f3ac:	e3530000 	cmp	r3, #0
    f3b0:	0a00000f 	beq	f3f4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
    f3b4:	e1a00004 	mov	r0, r4
    f3b8:	ebffffd8 	bl	f320 <CInterruptSystem::DisableIRQ(unsigned int)>
    f3bc:	e3a03000 	mov	r3, #0
    f3c0:	e7853104 	str	r3, [r5, r4, lsl #2]
    f3c4:	e5863120 	str	r3, [r6, #288]	; 0x120
    f3c8:	e8bd8070 	pop	{r4, r5, r6, pc}
    f3cc:	e303155c 	movw	r1, #13660	; 0x355c
    f3d0:	e3401005 	movt	r1, #5
    f3d4:	e303056c 	movw	r0, #13676	; 0x356c
    f3d8:	e3400005 	movt	r0, #5
    f3dc:	e3a02067 	mov	r2, #103	; 0x67
    f3e0:	e0856104 	add	r6, r5, r4, lsl #2
    f3e4:	ebfff81c 	bl	d45c <assertion_failed>
    f3e8:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    f3ec:	e3530000 	cmp	r3, #0
    f3f0:	1affffef 	bne	f3b4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    f3f4:	e303155c 	movw	r1, #13660	; 0x355c
    f3f8:	e3401005 	movt	r1, #5
    f3fc:	e303059c 	movw	r0, #13724	; 0x359c
    f400:	e3400005 	movt	r0, #5
    f404:	e3a02068 	mov	r2, #104	; 0x68
    f408:	ebfff813 	bl	d45c <assertion_failed>
    f40c:	eaffffe8 	b	f3b4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>

0000f410 <CInterruptSystem::Get()>:
    f410:	e92d4010 	push	{r4, lr}
    f414:	e3034c6c 	movw	r4, #15468	; 0x3c6c
    f418:	e3404005 	movt	r4, #5
    f41c:	e5940000 	ldr	r0, [r4]
    f420:	e3500000 	cmp	r0, #0
    f424:	18bd8010 	popne	{r4, pc}
    f428:	e3a02088 	mov	r2, #136	; 0x88
    f42c:	e303155c 	movw	r1, #13660	; 0x355c
    f430:	e3401005 	movt	r1, #5
    f434:	e3020344 	movw	r0, #9028	; 0x2344
    f438:	e3400005 	movt	r0, #5
    f43c:	ebfff806 	bl	d45c <assertion_failed>
    f440:	e5940000 	ldr	r0, [r4]
    f444:	e8bd8010 	pop	{r4, pc}

0000f448 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    f448:	e3510047 	cmp	r1, #71	; 0x47
    f44c:	e92d4070 	push	{r4, r5, r6, lr}
    f450:	e1a06001 	mov	r6, r1
    f454:	e1a05000 	mov	r5, r0
    f458:	8a000007 	bhi	f47c <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    f45c:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    f460:	e0855106 	add	r5, r5, r6, lsl #2
    f464:	e3540000 	cmp	r4, #0
    f468:	0a00000d 	beq	f4a4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x5c>
    f46c:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    f470:	e12fff34 	blx	r4
    f474:	e3a00001 	mov	r0, #1
    f478:	e8bd8070 	pop	{r4, r5, r6, pc}
    f47c:	e303155c 	movw	r1, #13660	; 0x355c
    f480:	e3401005 	movt	r1, #5
    f484:	e303056c 	movw	r0, #13676	; 0x356c
    f488:	e3400005 	movt	r0, #5
    f48c:	e3a0208e 	mov	r2, #142	; 0x8e
    f490:	ebfff7f1 	bl	d45c <assertion_failed>
    f494:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    f498:	e0855106 	add	r5, r5, r6, lsl #2
    f49c:	e3540000 	cmp	r4, #0
    f4a0:	1afffff1 	bne	f46c <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    f4a4:	e1a00006 	mov	r0, r6
    f4a8:	ebffff9c 	bl	f320 <CInterruptSystem::DisableIRQ(unsigned int)>
    f4ac:	e1a00004 	mov	r0, r4
    f4b0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f4b4 <CInterruptSystem::InterruptHandler()>:
    f4b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f4b8:	e3036c6c 	movw	r6, #15468	; 0x3c6c
    f4bc:	e3406005 	movt	r6, #5
    f4c0:	e24dd010 	sub	sp, sp, #16
    f4c4:	e5963000 	ldr	r3, [r6]
    f4c8:	e3530000 	cmp	r3, #0
    f4cc:	0a00001f 	beq	f550 <CInterruptSystem::InterruptHandler()+0x9c>
    f4d0:	e3a03a0b 	mov	r3, #45056	; 0xb000
    f4d4:	e3433f00 	movt	r3, #16128	; 0x3f00
    f4d8:	e28d8008 	add	r8, sp, #8
    f4dc:	e3a07000 	mov	r7, #0
    f4e0:	e5934204 	ldr	r4, [r3, #516]	; 0x204
    f4e4:	e58d4004 	str	r4, [sp, #4]
    f4e8:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    f4ec:	e58d2008 	str	r2, [sp, #8]
    f4f0:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    f4f4:	e6ef3073 	uxtb	r3, r3
    f4f8:	e58d300c 	str	r3, [sp, #12]
    f4fc:	e3540000 	cmp	r4, #0
    f500:	0a00000d 	beq	f53c <CInterruptSystem::InterruptHandler()+0x88>
    f504:	e1a05007 	mov	r5, r7
    f508:	ea000002 	b	f518 <CInterruptSystem::InterruptHandler()+0x64>
    f50c:	e1b040a4 	lsrs	r4, r4, #1
    f510:	e2855001 	add	r5, r5, #1
    f514:	0a000008 	beq	f53c <CInterruptSystem::InterruptHandler()+0x88>
    f518:	e3140001 	tst	r4, #1
    f51c:	0afffffa 	beq	f50c <CInterruptSystem::InterruptHandler()+0x58>
    f520:	e1a01005 	mov	r1, r5
    f524:	e5960000 	ldr	r0, [r6]
    f528:	ebffffc6 	bl	f448 <CInterruptSystem::CallIRQHandler(unsigned int)>
    f52c:	e3500000 	cmp	r0, #0
    f530:	0afffff5 	beq	f50c <CInterruptSystem::InterruptHandler()+0x58>
    f534:	e28dd010 	add	sp, sp, #16
    f538:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f53c:	e2877020 	add	r7, r7, #32
    f540:	e3570060 	cmp	r7, #96	; 0x60
    f544:	0afffffa 	beq	f534 <CInterruptSystem::InterruptHandler()+0x80>
    f548:	e4984004 	ldr	r4, [r8], #4
    f54c:	eaffffea 	b	f4fc <CInterruptSystem::InterruptHandler()+0x48>
    f550:	e303155c 	movw	r1, #13660	; 0x355c
    f554:	e3401005 	movt	r1, #5
    f558:	e3020344 	movw	r0, #9028	; 0x2344
    f55c:	e3400005 	movt	r0, #5
    f560:	e3a020a1 	mov	r2, #161	; 0xa1
    f564:	ebfff7bc 	bl	d45c <assertion_failed>
    f568:	eaffffd8 	b	f4d0 <CInterruptSystem::InterruptHandler()+0x1c>

0000f56c <InterruptHandler>:
    f56c:	eaffffd0 	b	f4b4 <CInterruptSystem::InterruptHandler()>

0000f570 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    f570:	e1a03000 	mov	r3, r0
    f574:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    f578:	e3a0e000 	mov	lr, #0
    f57c:	e1a0c00e 	mov	ip, lr
    f580:	e28020dc 	add	r2, r0, #220	; 0xdc
    f584:	e5801000 	str	r1, [r0]
    f588:	e5a3e004 	str	lr, [r3, #4]!
    f58c:	e5a3c004 	str	ip, [r3, #4]!
    f590:	e1530002 	cmp	r3, r2
    f594:	1afffffc 	bne	f58c <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    f598:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000f59c <CGPIOManager::~CGPIOManager()>:
    f59c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f5a0:	e30365b8 	movw	r6, #13752	; 0x35b8
    f5a4:	e3406005 	movt	r6, #5
    f5a8:	e30355c8 	movw	r5, #13768	; 0x35c8
    f5ac:	e3405005 	movt	r5, #5
    f5b0:	e1a08000 	mov	r8, r0
    f5b4:	e2804004 	add	r4, r0, #4
    f5b8:	e28070dc 	add	r7, r0, #220	; 0xdc
    f5bc:	e5b43004 	ldr	r3, [r4, #4]!
    f5c0:	e3a0202c 	mov	r2, #44	; 0x2c
    f5c4:	e1a01006 	mov	r1, r6
    f5c8:	e1a00005 	mov	r0, r5
    f5cc:	e3530000 	cmp	r3, #0
    f5d0:	0a000000 	beq	f5d8 <CGPIOManager::~CGPIOManager()+0x3c>
    f5d4:	ebfff7a0 	bl	d45c <assertion_failed>
    f5d8:	e1540007 	cmp	r4, r7
    f5dc:	1afffff6 	bne	f5bc <CGPIOManager::~CGPIOManager()+0x20>
    f5e0:	e5983004 	ldr	r3, [r8, #4]
    f5e4:	e3530000 	cmp	r3, #0
    f5e8:	0a000004 	beq	f600 <CGPIOManager::~CGPIOManager()+0x64>
    f5ec:	e5980000 	ldr	r0, [r8]
    f5f0:	e3500000 	cmp	r0, #0
    f5f4:	0a000003 	beq	f608 <CGPIOManager::~CGPIOManager()+0x6c>
    f5f8:	e3a01034 	mov	r1, #52	; 0x34
    f5fc:	ebffff63 	bl	f390 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    f600:	e1a00008 	mov	r0, r8
    f604:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f608:	e30315b8 	movw	r1, #13752	; 0x35b8
    f60c:	e3401005 	movt	r1, #5
    f610:	e30305dc 	movw	r0, #13788	; 0x35dc
    f614:	e3400005 	movt	r0, #5
    f618:	e3a02032 	mov	r2, #50	; 0x32
    f61c:	ebfff78e 	bl	d45c <assertion_failed>
    f620:	e5980000 	ldr	r0, [r8]
    f624:	eafffff3 	b	f5f8 <CGPIOManager::~CGPIOManager()+0x5c>

0000f628 <CGPIOManager::Initialize()>:
    f628:	e5903004 	ldr	r3, [r0, #4]
    f62c:	e92d4010 	push	{r4, lr}
    f630:	e1a04000 	mov	r4, r0
    f634:	e3530000 	cmp	r3, #0
    f638:	1a00000a 	bne	f668 <CGPIOManager::Initialize()+0x40>
    f63c:	e5940000 	ldr	r0, [r4]
    f640:	e3500000 	cmp	r0, #0
    f644:	0a000010 	beq	f68c <CGPIOManager::Initialize()+0x64>
    f648:	e1a03004 	mov	r3, r4
    f64c:	e3a01034 	mov	r1, #52	; 0x34
    f650:	e30f28cc 	movw	r2, #63692	; 0xf8cc
    f654:	e3402000 	movt	r2, #0
    f658:	ebffff13 	bl	f2ac <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    f65c:	e3a00001 	mov	r0, #1
    f660:	e5840004 	str	r0, [r4, #4]
    f664:	e8bd8010 	pop	{r4, pc}
    f668:	e30315b8 	movw	r1, #13752	; 0x35b8
    f66c:	e3401005 	movt	r1, #5
    f670:	e30305f0 	movw	r0, #13808	; 0x35f0
    f674:	e3400005 	movt	r0, #5
    f678:	e3a0203b 	mov	r2, #59	; 0x3b
    f67c:	ebfff776 	bl	d45c <assertion_failed>
    f680:	e5940000 	ldr	r0, [r4]
    f684:	e3500000 	cmp	r0, #0
    f688:	1affffee 	bne	f648 <CGPIOManager::Initialize()+0x20>
    f68c:	e30315b8 	movw	r1, #13752	; 0x35b8
    f690:	e3401005 	movt	r1, #5
    f694:	e30305dc 	movw	r0, #13788	; 0x35dc
    f698:	e3400005 	movt	r0, #5
    f69c:	e3a0203c 	mov	r2, #60	; 0x3c
    f6a0:	ebfff76d 	bl	d45c <assertion_failed>
    f6a4:	e5940000 	ldr	r0, [r4]
    f6a8:	eaffffe6 	b	f648 <CGPIOManager::Initialize()+0x20>

0000f6ac <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    f6ac:	e5903004 	ldr	r3, [r0, #4]
    f6b0:	e92d4070 	push	{r4, r5, r6, lr}
    f6b4:	e1a04000 	mov	r4, r0
    f6b8:	e3530000 	cmp	r3, #0
    f6bc:	e1a05001 	mov	r5, r1
    f6c0:	0a000010 	beq	f708 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
    f6c4:	e3550000 	cmp	r5, #0
    f6c8:	0a00001c 	beq	f740 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    f6cc:	e5956004 	ldr	r6, [r5, #4]
    f6d0:	e3560035 	cmp	r6, #53	; 0x35
    f6d4:	8a000012 	bhi	f724 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x78>
    f6d8:	e0844106 	add	r4, r4, r6, lsl #2
    f6dc:	e5943008 	ldr	r3, [r4, #8]
    f6e0:	e3530000 	cmp	r3, #0
    f6e4:	0a000005 	beq	f700 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
    f6e8:	e30315b8 	movw	r1, #13752	; 0x35b8
    f6ec:	e3401005 	movt	r1, #5
    f6f0:	e30305c8 	movw	r0, #13768	; 0x35c8
    f6f4:	e3400005 	movt	r0, #5
    f6f8:	e3a0204b 	mov	r2, #75	; 0x4b
    f6fc:	ebfff756 	bl	d45c <assertion_failed>
    f700:	e5845008 	str	r5, [r4, #8]
    f704:	e8bd8070 	pop	{r4, r5, r6, pc}
    f708:	e30315b8 	movw	r1, #13752	; 0x35b8
    f70c:	e3401005 	movt	r1, #5
    f710:	e3030604 	movw	r0, #13828	; 0x3604
    f714:	e3400005 	movt	r0, #5
    f718:	e3a02045 	mov	r2, #69	; 0x45
    f71c:	ebfff74e 	bl	d45c <assertion_failed>
    f720:	eaffffe7 	b	f6c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
    f724:	e30315b8 	movw	r1, #13752	; 0x35b8
    f728:	e3401005 	movt	r1, #5
    f72c:	e3020124 	movw	r0, #8484	; 0x2124
    f730:	e3400005 	movt	r0, #5
    f734:	e3a02049 	mov	r2, #73	; 0x49
    f738:	ebfff747 	bl	d45c <assertion_failed>
    f73c:	eaffffe5 	b	f6d8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
    f740:	e30315b8 	movw	r1, #13752	; 0x35b8
    f744:	e3401005 	movt	r1, #5
    f748:	e3030614 	movw	r0, #13844	; 0x3614
    f74c:	e3400005 	movt	r0, #5
    f750:	e3a02047 	mov	r2, #71	; 0x47
    f754:	ebfff740 	bl	d45c <assertion_failed>
    f758:	eaffffdb 	b	f6cc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>

0000f75c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    f75c:	e5903004 	ldr	r3, [r0, #4]
    f760:	e92d4070 	push	{r4, r5, r6, lr}
    f764:	e1a04000 	mov	r4, r0
    f768:	e3530000 	cmp	r3, #0
    f76c:	e1a05001 	mov	r5, r1
    f770:	0a00000b 	beq	f7a4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
    f774:	e3550000 	cmp	r5, #0
    f778:	0a000021 	beq	f804 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    f77c:	e5955004 	ldr	r5, [r5, #4]
    f780:	e3550035 	cmp	r5, #53	; 0x35
    f784:	8a00000d 	bhi	f7c0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x64>
    f788:	e0844105 	add	r4, r4, r5, lsl #2
    f78c:	e5943008 	ldr	r3, [r4, #8]
    f790:	e3530000 	cmp	r3, #0
    f794:	0a000013 	beq	f7e8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
    f798:	e3a03000 	mov	r3, #0
    f79c:	e5843008 	str	r3, [r4, #8]
    f7a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    f7a4:	e30315b8 	movw	r1, #13752	; 0x35b8
    f7a8:	e3401005 	movt	r1, #5
    f7ac:	e3030604 	movw	r0, #13828	; 0x3604
    f7b0:	e3400005 	movt	r0, #5
    f7b4:	e3a02052 	mov	r2, #82	; 0x52
    f7b8:	ebfff727 	bl	d45c <assertion_failed>
    f7bc:	eaffffec 	b	f774 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
    f7c0:	e0844105 	add	r4, r4, r5, lsl #2
    f7c4:	e30315b8 	movw	r1, #13752	; 0x35b8
    f7c8:	e3401005 	movt	r1, #5
    f7cc:	e3020124 	movw	r0, #8484	; 0x2124
    f7d0:	e3400005 	movt	r0, #5
    f7d4:	e3a02056 	mov	r2, #86	; 0x56
    f7d8:	ebfff71f 	bl	d45c <assertion_failed>
    f7dc:	e5943008 	ldr	r3, [r4, #8]
    f7e0:	e3530000 	cmp	r3, #0
    f7e4:	1affffeb 	bne	f798 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    f7e8:	e30315b8 	movw	r1, #13752	; 0x35b8
    f7ec:	e3401005 	movt	r1, #5
    f7f0:	e3030620 	movw	r0, #13856	; 0x3620
    f7f4:	e3400005 	movt	r0, #5
    f7f8:	e3a02058 	mov	r2, #88	; 0x58
    f7fc:	ebfff716 	bl	d45c <assertion_failed>
    f800:	eaffffe4 	b	f798 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    f804:	e30315b8 	movw	r1, #13752	; 0x35b8
    f808:	e3401005 	movt	r1, #5
    f80c:	e3030614 	movw	r0, #13844	; 0x3614
    f810:	e3400005 	movt	r0, #5
    f814:	e3a02054 	mov	r2, #84	; 0x54
    f818:	ebfff70f 	bl	d45c <assertion_failed>
    f81c:	eaffffd6 	b	f77c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>

0000f820 <CGPIOManager::InterruptHandler()>:
    f820:	e5903004 	ldr	r3, [r0, #4]
    f824:	e92d4070 	push	{r4, r5, r6, lr}
    f828:	e1a06000 	mov	r6, r0
    f82c:	e3530000 	cmp	r3, #0
    f830:	0a00001b 	beq	f8a4 <CGPIOManager::InterruptHandler()+0x84>
    f834:	e3a03000 	mov	r3, #0
    f838:	e3433f20 	movt	r3, #16160	; 0x3f20
    f83c:	e1a02003 	mov	r2, r3
    f840:	e3a04000 	mov	r4, #0
    f844:	e5933040 	ldr	r3, [r3, #64]	; 0x40
    f848:	ea000004 	b	f860 <CGPIOManager::InterruptHandler()+0x40>
    f84c:	e2844001 	add	r4, r4, #1
    f850:	e314001f 	tst	r4, #31
    f854:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    f858:	e3540036 	cmp	r4, #54	; 0x36
    f85c:	08bd8070 	popeq	{r4, r5, r6, pc}
    f860:	e3130001 	tst	r3, #1
    f864:	e1a030a3 	lsr	r3, r3, #1
    f868:	0afffff7 	beq	f84c <CGPIOManager::InterruptHandler()+0x2c>
    f86c:	e2843002 	add	r3, r4, #2
    f870:	e204501f 	and	r5, r4, #31
    f874:	e3a02001 	mov	r2, #1
    f878:	e7960103 	ldr	r0, [r6, r3, lsl #2]
    f87c:	e1a05512 	lsl	r5, r2, r5
    f880:	e3500000 	cmp	r0, #0
    f884:	0a00000d 	beq	f8c0 <CGPIOManager::InterruptHandler()+0xa0>
    f888:	ebffec4b 	bl	a9bc <CGPIOPin::InterruptHandler()>
    f88c:	e3a03010 	mov	r3, #16
    f890:	e3403fc8 	movt	r3, #4040	; 0xfc8
    f894:	e08332a4 	add	r3, r3, r4, lsr #5
    f898:	e1a03103 	lsl	r3, r3, #2
    f89c:	e5835000 	str	r5, [r3]
    f8a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    f8a4:	e30315b8 	movw	r1, #13752	; 0x35b8
    f8a8:	e3401005 	movt	r1, #5
    f8ac:	e3030604 	movw	r0, #13828	; 0x3604
    f8b0:	e3400005 	movt	r0, #5
    f8b4:	e3a0205e 	mov	r2, #94	; 0x5e
    f8b8:	ebfff6e7 	bl	d45c <assertion_failed>
    f8bc:	eaffffdc 	b	f834 <CGPIOManager::InterruptHandler()+0x14>
    f8c0:	e1a00004 	mov	r0, r4
    f8c4:	ebffec68 	bl	aa6c <CGPIOPin::DisableAllInterrupts(unsigned int)>
    f8c8:	eaffffef 	b	f88c <CGPIOManager::InterruptHandler()+0x6c>

0000f8cc <CGPIOManager::InterruptStub(void*)>:
    f8cc:	e92d4010 	push	{r4, lr}
    f8d0:	e2504000 	subs	r4, r0, #0
    f8d4:	0a000002 	beq	f8e4 <CGPIOManager::InterruptStub(void*)+0x18>
    f8d8:	e1a00004 	mov	r0, r4
    f8dc:	e8bd4010 	pop	{r4, lr}
    f8e0:	eaffffce 	b	f820 <CGPIOManager::InterruptHandler()>
    f8e4:	e30315b8 	movw	r1, #13752	; 0x35b8
    f8e8:	e3401005 	movt	r1, #5
    f8ec:	e3030634 	movw	r0, #13876	; 0x3634
    f8f0:	e3400005 	movt	r0, #5
    f8f4:	e3a0208a 	mov	r2, #138	; 0x8a
    f8f8:	ebfff6d7 	bl	d45c <assertion_failed>
    f8fc:	e1a00004 	mov	r0, r4
    f900:	e8bd4010 	pop	{r4, lr}
    f904:	eaffffc5 	b	f820 <CGPIOManager::InterruptHandler()>

0000f908 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    f908:	e12fff1e 	bx	lr

0000f90c <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    f90c:	e92d4010 	push	{r4, lr}
    f910:	e1a04000 	mov	r4, r0
    f914:	ebffed25 	bl	adb0 <operator delete(void*)>
    f918:	e1a00004 	mov	r0, r4
    f91c:	e8bd8010 	pop	{r4, pc}

0000f920 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
    f920:	e92d4070 	push	{r4, r5, r6, lr}
    f924:	e3034c70 	movw	r4, #15472	; 0x3c70
    f928:	e3404005 	movt	r4, #5
    f92c:	e1a05000 	mov	r5, r0
    f930:	e1a06001 	mov	r6, r1
    f934:	e5943000 	ldr	r3, [r4]
    f938:	e3530000 	cmp	r3, #0
    f93c:	1a00001a 	bne	f9ac <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x8c>
    f940:	e1d500bc 	ldrh	r0, [r5, #12]
    f944:	e1d530be 	ldrh	r3, [r5, #14]
    f948:	e5856008 	str	r6, [r5, #8]
    f94c:	e0402003 	sub	r2, r0, r3
    f950:	e6bf2072 	sxth	r2, r2
    f954:	e3520000 	cmp	r2, #0
    f958:	da00000c 	ble	f990 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x70>
    f95c:	e3560000 	cmp	r6, #0
    f960:	1a00000c 	bne	f998 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x78>
    f964:	e2833001 	add	r3, r3, #1
    f968:	e6ff3073 	uxth	r3, r3
    f96c:	e1c530be 	strh	r3, [r5, #14]
    f970:	e5951004 	ldr	r1, [r5, #4]
    f974:	e1833800 	orr	r3, r3, r0, lsl #16
    f978:	e5942004 	ldr	r2, [r4, #4]
    f97c:	e7823101 	str	r3, [r2, r1, lsl #2]
    f980:	e5943000 	ldr	r3, [r4]
    f984:	e3530000 	cmp	r3, #0
    f988:	1a000005 	bne	f9a4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x84>
    f98c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f990:	e3560000 	cmp	r6, #0
    f994:	1a000006 	bne	f9b4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x94>
    f998:	e5943000 	ldr	r3, [r4]
    f99c:	e3530000 	cmp	r3, #0
    f9a0:	08bd8070 	popeq	{r4, r5, r6, pc}
    f9a4:	e8bd4070 	pop	{r4, r5, r6, lr}
    f9a8:	eaffed0f 	b	adec <LeaveCritical>
    f9ac:	ebffed01 	bl	adb8 <EnterCritical>
    f9b0:	eaffffe2 	b	f940 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x20>
    f9b4:	e2800001 	add	r0, r0, #1
    f9b8:	e6ff0070 	uxth	r0, r0
    f9bc:	e1c500bc 	strh	r0, [r5, #12]
    f9c0:	eaffffea 	b	f970 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x50>

0000f9c4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    f9c4:	e3510001 	cmp	r1, #1
    f9c8:	e92d4030 	push	{r4, r5, lr}
    f9cc:	e59f20dc 	ldr	r2, [pc, #220]	; fab0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xec>
    f9d0:	e3a03000 	mov	r3, #0
    f9d4:	e24dd024 	sub	sp, sp, #36	; 0x24
    f9d8:	e1a04000 	mov	r4, r0
    f9dc:	e5801004 	str	r1, [r0, #4]
    f9e0:	e5802000 	str	r2, [r0]
    f9e4:	e1c030bc 	strh	r3, [r0, #12]
    f9e8:	e1c030be 	strh	r3, [r0, #14]
    f9ec:	9a000002 	bls	f9fc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
    f9f0:	e1a00004 	mov	r0, r4
    f9f4:	e28dd024 	add	sp, sp, #36	; 0x24
    f9f8:	e8bd8030 	pop	{r4, r5, pc}
    f9fc:	e3035c70 	movw	r5, #15472	; 0x3c70
    fa00:	e3405005 	movt	r5, #5
    fa04:	e5953000 	ldr	r3, [r5]
    fa08:	e3530000 	cmp	r3, #0
    fa0c:	1a000009 	bne	fa38 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x74>
    fa10:	e5953004 	ldr	r3, [r5, #4]
    fa14:	e3530000 	cmp	r3, #0
    fa18:	0a00000a 	beq	fa48 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x84>
    fa1c:	e5953004 	ldr	r3, [r5, #4]
    fa20:	e3530000 	cmp	r3, #0
    fa24:	0afffff1 	beq	f9f0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    fa28:	e3a01000 	mov	r1, #0
    fa2c:	e1a00004 	mov	r0, r4
    fa30:	ebffffba 	bl	f920 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
    fa34:	eaffffed 	b	f9f0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    fa38:	ebffecde 	bl	adb8 <EnterCritical>
    fa3c:	e5953004 	ldr	r3, [r5, #4]
    fa40:	e3530000 	cmp	r3, #0
    fa44:	1a00000f 	bne	fa88 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xc4>
    fa48:	e28d0008 	add	r0, sp, #8
    fa4c:	ebffe842 	bl	9b5c <CBcmPropertyTags::CBcmPropertyTags()>
    fa50:	e3a03000 	mov	r3, #0
    fa54:	e58d3000 	str	r3, [sp]
    fa58:	e3a03010 	mov	r3, #16
    fa5c:	e08d2003 	add	r2, sp, r3
    fa60:	e28d0008 	add	r0, sp, #8
    fa64:	e3a01010 	mov	r1, #16
    fa68:	e3401004 	movt	r1, #4
    fa6c:	ebffe882 	bl	9c7c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    fa70:	e3500000 	cmp	r0, #0
    fa74:	e28d0008 	add	r0, sp, #8
    fa78:	159d301c 	ldrne	r3, [sp, #28]
    fa7c:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    fa80:	15853004 	strne	r3, [r5, #4]
    fa84:	ebffe83a 	bl	9b74 <CBcmPropertyTags::~CBcmPropertyTags()>
    fa88:	e5953000 	ldr	r3, [r5]
    fa8c:	e3530000 	cmp	r3, #0
    fa90:	0a000000 	beq	fa98 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xd4>
    fa94:	ebffecd4 	bl	adec <LeaveCritical>
    fa98:	e5943004 	ldr	r3, [r4, #4]
    fa9c:	e3530001 	cmp	r3, #1
    faa0:	9affffdd 	bls	fa1c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x58>
    faa4:	e1a00004 	mov	r0, r4
    faa8:	e28dd024 	add	sp, sp, #36	; 0x24
    faac:	e8bd8030 	pop	{r4, r5, pc}
    fab0:	00053648 	.word	0x00053648

0000fab4 <CVirtualGPIOPin::Write(unsigned int)>:
    fab4:	e5902004 	ldr	r2, [r0, #4]
    fab8:	e1a03001 	mov	r3, r1
    fabc:	e3520001 	cmp	r2, #1
    fac0:	812fff1e 	bxhi	lr
    fac4:	e3032c70 	movw	r2, #15472	; 0x3c70
    fac8:	e3402005 	movt	r2, #5
    facc:	e3510001 	cmp	r1, #1
    fad0:	93a03000 	movls	r3, #0
    fad4:	83a03001 	movhi	r3, #1
    fad8:	e5922004 	ldr	r2, [r2, #4]
    fadc:	e3520000 	cmp	r2, #0
    fae0:	03833001 	orreq	r3, r3, #1
    fae4:	e3530000 	cmp	r3, #0
    fae8:	112fff1e 	bxne	lr
    faec:	eaffff8b 	b	f920 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>

0000faf0 <CVirtualGPIOPin::Invert()>:
    faf0:	e5901008 	ldr	r1, [r0, #8]
    faf4:	e2211001 	eor	r1, r1, #1
    faf8:	eaffffed 	b	fab4 <CVirtualGPIOPin::Write(unsigned int)>

0000fafc <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    fafc:	e3033c70 	movw	r3, #15472	; 0x3c70
    fb00:	e3403005 	movt	r3, #5
    fb04:	e3a02000 	mov	r2, #0
    fb08:	e5832000 	str	r2, [r3]
    fb0c:	e12fff1e 	bx	lr

0000fb10 <CMachineInfo::CMachineInfo()>:
    fb10:	e3032c78 	movw	r2, #15480	; 0x3c78
    fb14:	e3402005 	movt	r2, #5
    fb18:	e92d4030 	push	{r4, r5, lr}
    fb1c:	e3a03000 	mov	r3, #0
    fb20:	e1a04000 	mov	r4, r0
    fb24:	e5925000 	ldr	r5, [r2]
    fb28:	e3a0000a 	mov	r0, #10
    fb2c:	e3a01003 	mov	r1, #3
    fb30:	e24dd024 	sub	sp, sp, #36	; 0x24
    fb34:	e1550003 	cmp	r5, r3
    fb38:	e5c40004 	strb	r0, [r4, #4]
    fb3c:	e5c41010 	strb	r1, [r4, #16]
    fb40:	e5843000 	str	r3, [r4]
    fb44:	e5843008 	str	r3, [r4, #8]
    fb48:	e584300c 	str	r3, [r4, #12]
    fb4c:	e5843014 	str	r3, [r4, #20]
    fb50:	0a00000e 	beq	fb90 <CMachineInfo::CMachineInfo()+0x80>
    fb54:	e595e000 	ldr	lr, [r5]
    fb58:	e5d5c004 	ldrb	ip, [r5, #4]
    fb5c:	e5950008 	ldr	r0, [r5, #8]
    fb60:	e595100c 	ldr	r1, [r5, #12]
    fb64:	e5d52010 	ldrb	r2, [r5, #16]
    fb68:	e5953014 	ldr	r3, [r5, #20]
    fb6c:	e584e000 	str	lr, [r4]
    fb70:	e5c4c004 	strb	ip, [r4, #4]
    fb74:	e5840008 	str	r0, [r4, #8]
    fb78:	e584100c 	str	r1, [r4, #12]
    fb7c:	e5c42010 	strb	r2, [r4, #16]
    fb80:	e5843014 	str	r3, [r4, #20]
    fb84:	e1a00004 	mov	r0, r4
    fb88:	e28dd024 	add	sp, sp, #36	; 0x24
    fb8c:	e8bd8030 	pop	{r4, r5, pc}
    fb90:	e28d0008 	add	r0, sp, #8
    fb94:	e5824000 	str	r4, [r2]
    fb98:	ebffe7ef 	bl	9b5c <CBcmPropertyTags::CBcmPropertyTags()>
    fb9c:	e3a03010 	mov	r3, #16
    fba0:	e58d5000 	str	r5, [sp]
    fba4:	e28d0008 	add	r0, sp, #8
    fba8:	e3a01002 	mov	r1, #2
    fbac:	e3401001 	movt	r1, #1
    fbb0:	e08d2003 	add	r2, sp, r3
    fbb4:	ebffe830 	bl	9c7c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    fbb8:	e3500000 	cmp	r0, #0
    fbbc:	0a00000c 	beq	fbf4 <CMachineInfo::CMachineInfo()+0xe4>
    fbc0:	e59d201c 	ldr	r2, [sp, #28]
    fbc4:	e2123502 	ands	r3, r2, #8388608	; 0x800000
    fbc8:	e5842000 	str	r2, [r4]
    fbcc:	1a00000b 	bne	fc00 <CMachineInfo::CMachineInfo()+0xf0>
    fbd0:	e3a01002 	mov	r1, #2
    fbd4:	e59f00fc 	ldr	r0, [pc, #252]	; fcd8 <CMachineInfo::CMachineInfo()+0x1c8>
    fbd8:	ea000000 	b	fbe0 <CMachineInfo::CMachineInfo()+0xd0>
    fbdc:	e7901203 	ldr	r1, [r0, r3, lsl #4]
    fbe0:	e1520001 	cmp	r2, r1
    fbe4:	0a000011 	beq	fc30 <CMachineInfo::CMachineInfo()+0x120>
    fbe8:	e2833001 	add	r3, r3, #1
    fbec:	e3530011 	cmp	r3, #17
    fbf0:	1afffff9 	bne	fbdc <CMachineInfo::CMachineInfo()+0xcc>
    fbf4:	e28d0008 	add	r0, sp, #8
    fbf8:	ebffe7dd 	bl	9b74 <CBcmPropertyTags::~CBcmPropertyTags()>
    fbfc:	eaffffe0 	b	fb84 <CMachineInfo::CMachineInfo()+0x74>
    fc00:	e59f10d4 	ldr	r1, [pc, #212]	; fcdc <CMachineInfo::CMachineInfo()+0x1cc>
    fc04:	e1a03005 	mov	r3, r5
    fc08:	e7e70252 	ubfx	r0, r2, #4, #8
    fc0c:	ea000000 	b	fc14 <CMachineInfo::CMachineInfo()+0x104>
    fc10:	e511500c 	ldr	r5, [r1, #-12]
    fc14:	e1550000 	cmp	r5, r0
    fc18:	e281100c 	add	r1, r1, #12
    fc1c:	0a000011 	beq	fc68 <CMachineInfo::CMachineInfo()+0x158>
    fc20:	e2833001 	add	r3, r3, #1
    fc24:	e3530008 	cmp	r3, #8
    fc28:	1afffff8 	bne	fc10 <CMachineInfo::CMachineInfo()+0x100>
    fc2c:	eafffff0 	b	fbf4 <CMachineInfo::CMachineInfo()+0xe4>
    fc30:	e3032650 	movw	r2, #13904	; 0x3650
    fc34:	e3402005 	movt	r2, #5
    fc38:	e3a01000 	mov	r1, #0
    fc3c:	e3a00001 	mov	r0, #1
    fc40:	e0823203 	add	r3, r2, r3, lsl #4
    fc44:	e5c41010 	strb	r1, [r4, #16]
    fc48:	e5840008 	str	r0, [r4, #8]
    fc4c:	e5d31064 	ldrb	r1, [r3, #100]	; 0x64
    fc50:	e5932068 	ldr	r2, [r3, #104]	; 0x68
    fc54:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    fc58:	e5c41004 	strb	r1, [r4, #4]
    fc5c:	e584200c 	str	r2, [r4, #12]
    fc60:	e5843014 	str	r3, [r4, #20]
    fc64:	eaffffe2 	b	fbf4 <CMachineInfo::CMachineInfo()+0xe4>
    fc68:	e3a0c00c 	mov	ip, #12
    fc6c:	e7e2ea52 	ubfx	lr, r2, #20, #3
    fc70:	e3031650 	movw	r1, #13904	; 0x3650
    fc74:	e3401005 	movt	r1, #5
    fc78:	e3a00c01 	mov	r0, #256	; 0x100
    fc7c:	e7e35652 	ubfx	r5, r2, #12, #4
    fc80:	e021139c 	mla	r1, ip, r3, r1
    fc84:	e3550002 	cmp	r5, #2
    fc88:	e202300f 	and	r3, r2, #15
    fc8c:	e5c45010 	strb	r5, [r4, #16]
    fc90:	e5d1c004 	ldrb	ip, [r1, #4]
    fc94:	e1a02e10 	lsl	r2, r0, lr
    fc98:	e5842014 	str	r2, [r4, #20]
    fc9c:	83a02003 	movhi	r2, #3
    fca0:	85c42010 	strbhi	r2, [r4, #16]
    fca4:	e35e0000 	cmp	lr, #0
    fca8:	035c0003 	cmpeq	ip, #3
    fcac:	e5911008 	ldr	r1, [r1, #8]
    fcb0:	e2833001 	add	r3, r3, #1
    fcb4:	e5c4c004 	strb	ip, [r4, #4]
    fcb8:	e5841008 	str	r1, [r4, #8]
    fcbc:	e584300c 	str	r3, [r4, #12]
    fcc0:	1affffcb 	bne	fbf4 <CMachineInfo::CMachineInfo()+0xe4>
    fcc4:	e3530001 	cmp	r3, #1
    fcc8:	13a03002 	movne	r3, #2
    fccc:	03a03001 	moveq	r3, #1
    fcd0:	e5c43004 	strb	r3, [r4, #4]
    fcd4:	eaffffc6 	b	fbf4 <CMachineInfo::CMachineInfo()+0xe4>
    fcd8:	000536b0 	.word	0x000536b0
    fcdc:	0005365c 	.word	0x0005365c

0000fce0 <CMachineInfo::~CMachineInfo()>:
    fce0:	e3033c78 	movw	r3, #15480	; 0x3c78
    fce4:	e3403005 	movt	r3, #5
    fce8:	e3a0100a 	mov	r1, #10
    fcec:	e5c01004 	strb	r1, [r0, #4]
    fcf0:	e5932000 	ldr	r2, [r3]
    fcf4:	e1500002 	cmp	r0, r2
    fcf8:	03a02000 	moveq	r2, #0
    fcfc:	05832000 	streq	r2, [r3]
    fd00:	e12fff1e 	bx	lr

0000fd04 <CMachineInfo::GetMachineModel() const>:
    fd04:	e5d00004 	ldrb	r0, [r0, #4]
    fd08:	e12fff1e 	bx	lr

0000fd0c <CMachineInfo::GetMachineName() const>:
    fd0c:	e5d02004 	ldrb	r2, [r0, #4]
    fd10:	e3033650 	movw	r3, #13904	; 0x3650
    fd14:	e3403005 	movt	r3, #5
    fd18:	e0833102 	add	r3, r3, r2, lsl #2
    fd1c:	e5930170 	ldr	r0, [r3, #368]	; 0x170
    fd20:	e12fff1e 	bx	lr

0000fd24 <CMachineInfo::GetModelMajor() const>:
    fd24:	e5900008 	ldr	r0, [r0, #8]
    fd28:	e12fff1e 	bx	lr

0000fd2c <CMachineInfo::GetModelRevision() const>:
    fd2c:	e590000c 	ldr	r0, [r0, #12]
    fd30:	e12fff1e 	bx	lr

0000fd34 <CMachineInfo::GetSoCType() const>:
    fd34:	e5d00010 	ldrb	r0, [r0, #16]
    fd38:	e12fff1e 	bx	lr

0000fd3c <CMachineInfo::GetRAMSize() const>:
    fd3c:	e5900014 	ldr	r0, [r0, #20]
    fd40:	e12fff1e 	bx	lr

0000fd44 <CMachineInfo::GetSoCName() const>:
    fd44:	e5d02010 	ldrb	r2, [r0, #16]
    fd48:	e3033650 	movw	r3, #13904	; 0x3650
    fd4c:	e3403005 	movt	r3, #5
    fd50:	e0833102 	add	r3, r3, r2, lsl #2
    fd54:	e593019c 	ldr	r0, [r3, #412]	; 0x19c
    fd58:	e12fff1e 	bx	lr

0000fd5c <CMachineInfo::GetRevisionRaw() const>:
    fd5c:	e5900000 	ldr	r0, [r0]
    fd60:	e12fff1e 	bx	lr

0000fd64 <CMachineInfo::GetClockRate(unsigned int) const>:
    fd64:	e92d4070 	push	{r4, r5, r6, lr}
    fd68:	e1a06000 	mov	r6, r0
    fd6c:	e1a05001 	mov	r5, r1
    fd70:	e24dd028 	sub	sp, sp, #40	; 0x28
    fd74:	e28d000c 	add	r0, sp, #12
    fd78:	ebffe777 	bl	9b5c <CBcmPropertyTags::CBcmPropertyTags()>
    fd7c:	e3a03004 	mov	r3, #4
    fd80:	e58d3000 	str	r3, [sp]
    fd84:	e3a03014 	mov	r3, #20
    fd88:	e28d000c 	add	r0, sp, #12
    fd8c:	e3a01002 	mov	r1, #2
    fd90:	e3401003 	movt	r1, #3
    fd94:	e08d2003 	add	r2, sp, r3
    fd98:	e58d5020 	str	r5, [sp, #32]
    fd9c:	ebffe7b6 	bl	9c7c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    fda0:	e2504000 	subs	r4, r0, #0
    fda4:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
    fda8:	1a00000b 	bne	fddc <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    fdac:	e3550002 	cmp	r5, #2
    fdb0:	0a00000e 	beq	fdf0 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    fdb4:	e3550004 	cmp	r5, #4
    fdb8:	0a000012 	beq	fe08 <CMachineInfo::GetClockRate(unsigned int) const+0xa4>
    fdbc:	e3550001 	cmp	r5, #1
    fdc0:	0a00000d 	beq	fdfc <CMachineInfo::GetClockRate(unsigned int) const+0x98>
    fdc4:	e30317fc 	movw	r1, #14332	; 0x37fc
    fdc8:	e3401005 	movt	r1, #5
    fdcc:	e30305b4 	movw	r0, #13748	; 0x35b4
    fdd0:	e3400005 	movt	r0, #5
    fdd4:	e3a02f43 	mov	r2, #268	; 0x10c
    fdd8:	ebfff59f 	bl	d45c <assertion_failed>
    fddc:	e28d000c 	add	r0, sp, #12
    fde0:	ebffe763 	bl	9b74 <CBcmPropertyTags::~CBcmPropertyTags()>
    fde4:	e1a00004 	mov	r0, r4
    fde8:	e28dd028 	add	sp, sp, #40	; 0x28
    fdec:	e8bd8070 	pop	{r4, r5, r6, pc}
    fdf0:	e3a04b1b 	mov	r4, #27648	; 0x6c00
    fdf4:	e34042dc 	movt	r4, #732	; 0x2dc
    fdf8:	eafffff7 	b	fddc <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    fdfc:	e3a04ce1 	mov	r4, #57600	; 0xe100
    fe00:	e34045f5 	movt	r4, #1525	; 0x5f5
    fe04:	eafffff4 	b	fddc <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    fe08:	e5962008 	ldr	r2, [r6, #8]
    fe0c:	e3a03ca3 	mov	r3, #41728	; 0xa300
    fe10:	e34131e1 	movt	r3, #4577	; 0x11e1
    fe14:	e3520002 	cmp	r2, #2
    fe18:	e30b4280 	movw	r4, #45696	; 0xb280
    fe1c:	e3404ee6 	movt	r4, #3814	; 0xee6
    fe20:	81a04003 	movhi	r4, r3
    fe24:	eaffffec 	b	fddc <CMachineInfo::GetClockRate(unsigned int) const+0x78>

0000fe28 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    fe28:	e3510036 	cmp	r1, #54	; 0x36
    fe2c:	0a00000f 	beq	fe70 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x48>
    fe30:	e3510037 	cmp	r1, #55	; 0x37
    fe34:	1a000004 	bne	fe4c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    fe38:	e5d03004 	ldrb	r3, [r0, #4]
    fe3c:	e3530003 	cmp	r3, #3
    fe40:	c3a00028 	movgt	r0, #40	; 0x28
    fe44:	d3a0002d 	movle	r0, #45	; 0x2d
    fe48:	e12fff1e 	bx	lr
    fe4c:	e92d4010 	push	{r4, lr}
    fe50:	e3002137 	movw	r2, #311	; 0x137
    fe54:	e30317fc 	movw	r1, #14332	; 0x37fc
    fe58:	e3401005 	movt	r1, #5
    fe5c:	e30305b4 	movw	r0, #13748	; 0x35b4
    fe60:	e3400005 	movt	r0, #5
    fe64:	ebfff57c 	bl	d45c <assertion_failed>
    fe68:	e3a00000 	mov	r0, #0
    fe6c:	e8bd8010 	pop	{r4, pc}
    fe70:	e5d03004 	ldrb	r3, [r0, #4]
    fe74:	e3530003 	cmp	r3, #3
    fe78:	ca000001 	bgt	fe84 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
    fe7c:	e3a00028 	mov	r0, #40	; 0x28
    fe80:	e12fff1e 	bx	lr
    fe84:	e5903008 	ldr	r3, [r0, #8]
    fe88:	e3530003 	cmp	r3, #3
    fe8c:	33a0002d 	movcc	r0, #45	; 0x2d
    fe90:	23a00029 	movcs	r0, #41	; 0x29
    fe94:	e12fff1e 	bx	lr

0000fe98 <CMachineInfo::GetDevice(TDeviceId) const>:
    fe98:	e3510000 	cmp	r1, #0
    fe9c:	1a000003 	bne	feb0 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    fea0:	e5d00004 	ldrb	r0, [r0, #4]
    fea4:	e2500001 	subs	r0, r0, #1
    fea8:	13a00001 	movne	r0, #1
    feac:	e12fff1e 	bx	lr
    feb0:	e92d4010 	push	{r4, lr}
    feb4:	e3a02e15 	mov	r2, #336	; 0x150
    feb8:	e30317fc 	movw	r1, #14332	; 0x37fc
    febc:	e3401005 	movt	r1, #5
    fec0:	e30305b4 	movw	r0, #13748	; 0x35b4
    fec4:	e3400005 	movt	r0, #5
    fec8:	ebfff563 	bl	d45c <assertion_failed>
    fecc:	e3a00000 	mov	r0, #0
    fed0:	e8bd8010 	pop	{r4, pc}

0000fed4 <CMachineInfo::Get()>:
    fed4:	e92d4010 	push	{r4, lr}
    fed8:	e3034c78 	movw	r4, #15480	; 0x3c78
    fedc:	e3404005 	movt	r4, #5
    fee0:	e5940000 	ldr	r0, [r4]
    fee4:	e3500000 	cmp	r0, #0
    fee8:	18bd8010 	popne	{r4, pc}
    feec:	e3002159 	movw	r2, #345	; 0x159
    fef0:	e30317fc 	movw	r1, #14332	; 0x37fc
    fef4:	e3401005 	movt	r1, #5
    fef8:	e3020344 	movw	r0, #9028	; 0x2344
    fefc:	e3400005 	movt	r0, #5
    ff00:	ebfff555 	bl	d45c <assertion_failed>
    ff04:	e5940000 	ldr	r0, [r4]
    ff08:	e8bd8010 	pop	{r4, pc}

0000ff0c <InvalidateDataCacheL1Only>:
    ff0c:	e92d0070 	push	{r4, r5, r6}
    ff10:	e3a00000 	mov	r0, #0
    ff14:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
    ff18:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
    ff1c:	e3071fff 	movw	r1, #32767	; 0x7fff
    ff20:	e00126a0 	and	r2, r1, r0, lsr #13
    ff24:	e30013ff 	movw	r1, #1023	; 0x3ff
    ff28:	e00131a0 	and	r3, r1, r0, lsr #3
    ff2c:	e2822001 	add	r2, r2, #1
    ff30:	e2000007 	and	r0, r0, #7
    ff34:	e2800004 	add	r0, r0, #4
    ff38:	e16f1f13 	clz	r1, r3
    ff3c:	e2834001 	add	r4, r3, #1
    ff40:	e2422001 	sub	r2, r2, #1
    ff44:	e1a03004 	mov	r3, r4
    ff48:	e2533001 	subs	r3, r3, #1
    ff4c:	e1a05113 	lsl	r5, r3, r1
    ff50:	e1a06012 	lsl	r6, r2, r0
    ff54:	e1855006 	orr	r5, r5, r6
    ff58:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
    ff5c:	cafffff9 	bgt	ff48 <InvalidateDataCacheL1Only+0x3c>
    ff60:	e3520000 	cmp	r2, #0
    ff64:	cafffff5 	bgt	ff40 <InvalidateDataCacheL1Only+0x34>
    ff68:	f57ff04e 	dsb	st
    ff6c:	f57ff06f 	isb	sy
    ff70:	e8bd0070 	pop	{r4, r5, r6}
    ff74:	e12fff1e 	bx	lr

0000ff78 <InvalidateDataCache>:
    ff78:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    ff7c:	f57ff05f 	dmb	sy
    ff80:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    ff84:	e1a03ba0 	lsr	r3, r0, #23
    ff88:	e213300e 	ands	r3, r3, #14
    ff8c:	0a00001d 	beq	10008 <InvalidateDataCache+0x90>
    ff90:	e3a0a000 	mov	sl, #0
    ff94:	e08a20aa 	add	r2, sl, sl, lsr #1
    ff98:	e1a01230 	lsr	r1, r0, r2
    ff9c:	e2011007 	and	r1, r1, #7
    ffa0:	e3510002 	cmp	r1, #2
    ffa4:	ba000014 	blt	fffc <InvalidateDataCache+0x84>
    ffa8:	e10f9000 	mrs	r9, CPSR
    ffac:	f10c0080 	cpsid	i
    ffb0:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    ffb4:	f57ff06f 	isb	sy
    ffb8:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    ffbc:	e121f009 	msr	CPSR_c, r9
    ffc0:	e2012007 	and	r2, r1, #7
    ffc4:	e2822004 	add	r2, r2, #4
    ffc8:	e30043ff 	movw	r4, #1023	; 0x3ff
    ffcc:	e01441a1 	ands	r4, r4, r1, lsr #3
    ffd0:	e16f5f14 	clz	r5, r4
    ffd4:	e3077fff 	movw	r7, #32767	; 0x7fff
    ffd8:	e01776a1 	ands	r7, r7, r1, lsr #13
    ffdc:	e1a09007 	mov	r9, r7
    ffe0:	e18ab514 	orr	fp, sl, r4, lsl r5
    ffe4:	e18bb219 	orr	fp, fp, r9, lsl r2
    ffe8:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
    ffec:	e2599001 	subs	r9, r9, #1
    fff0:	aafffffa 	bge	ffe0 <InvalidateDataCache+0x68>
    fff4:	e2544001 	subs	r4, r4, #1
    fff8:	aafffff7 	bge	ffdc <InvalidateDataCache+0x64>
    fffc:	e28aa002 	add	sl, sl, #2
   10000:	e153000a 	cmp	r3, sl
   10004:	caffffe2 	bgt	ff94 <InvalidateDataCache+0x1c>
   10008:	e3a0a000 	mov	sl, #0
   1000c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   10010:	f57ff04e 	dsb	st
   10014:	f57ff06f 	isb	sy
   10018:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   1001c:	e12fff1e 	bx	lr

00010020 <CleanDataCache>:
   10020:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   10024:	f57ff05f 	dmb	sy
   10028:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   1002c:	e1a03ba0 	lsr	r3, r0, #23
   10030:	e213300e 	ands	r3, r3, #14
   10034:	0a00001d 	beq	100b0 <CleanDataCache+0x90>
   10038:	e3a0a000 	mov	sl, #0
   1003c:	e08a20aa 	add	r2, sl, sl, lsr #1
   10040:	e1a01230 	lsr	r1, r0, r2
   10044:	e2011007 	and	r1, r1, #7
   10048:	e3510002 	cmp	r1, #2
   1004c:	ba000014 	blt	100a4 <CleanDataCache+0x84>
   10050:	e10f9000 	mrs	r9, CPSR
   10054:	f10c0080 	cpsid	i
   10058:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   1005c:	f57ff06f 	isb	sy
   10060:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   10064:	e121f009 	msr	CPSR_c, r9
   10068:	e2012007 	and	r2, r1, #7
   1006c:	e2822004 	add	r2, r2, #4
   10070:	e30043ff 	movw	r4, #1023	; 0x3ff
   10074:	e01441a1 	ands	r4, r4, r1, lsr #3
   10078:	e16f5f14 	clz	r5, r4
   1007c:	e3077fff 	movw	r7, #32767	; 0x7fff
   10080:	e01776a1 	ands	r7, r7, r1, lsr #13
   10084:	e1a09007 	mov	r9, r7
   10088:	e18ab514 	orr	fp, sl, r4, lsl r5
   1008c:	e18bb219 	orr	fp, fp, r9, lsl r2
   10090:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   10094:	e2599001 	subs	r9, r9, #1
   10098:	aafffffa 	bge	10088 <CleanDataCache+0x68>
   1009c:	e2544001 	subs	r4, r4, #1
   100a0:	aafffff7 	bge	10084 <CleanDataCache+0x64>
   100a4:	e28aa002 	add	sl, sl, #2
   100a8:	e153000a 	cmp	r3, sl
   100ac:	caffffe2 	bgt	1003c <CleanDataCache+0x1c>
   100b0:	e3a0a000 	mov	sl, #0
   100b4:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   100b8:	f57ff04e 	dsb	st
   100bc:	f57ff06f 	isb	sy
   100c0:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   100c4:	e12fff1e 	bx	lr

000100c8 <CleanAndInvalidateDataCacheRange>:
   100c8:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   100cc:	e1a03823 	lsr	r3, r3, #16
   100d0:	e203300f 	and	r3, r3, #15
   100d4:	e3a02004 	mov	r2, #4
   100d8:	e1a02312 	lsl	r2, r2, r3
   100dc:	e0801001 	add	r1, r0, r1
   100e0:	e2423001 	sub	r3, r2, #1
   100e4:	e1c00003 	bic	r0, r0, r3
   100e8:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   100ec:	e0800002 	add	r0, r0, r2
   100f0:	e1500001 	cmp	r0, r1
   100f4:	3afffffb 	bcc	100e8 <CleanAndInvalidateDataCacheRange+0x20>
   100f8:	f57ff04e 	dsb	st
   100fc:	e12fff1e 	bx	lr

00010100 <CPtrList::CPtrList()>:
   10100:	e3a02000 	mov	r2, #0
   10104:	e5802000 	str	r2, [r0]
   10108:	e12fff1e 	bx	lr

0001010c <CPtrList::~CPtrList()>:
   1010c:	e5903000 	ldr	r3, [r0]
   10110:	e92d4010 	push	{r4, lr}
   10114:	e1a04000 	mov	r4, r0
   10118:	e3530000 	cmp	r3, #0
   1011c:	0a000005 	beq	10138 <CPtrList::~CPtrList()+0x2c>
   10120:	e30318f0 	movw	r1, #14576	; 0x38f0
   10124:	e3401005 	movt	r1, #5
   10128:	e30308fc 	movw	r0, #14588	; 0x38fc
   1012c:	e3400005 	movt	r0, #5
   10130:	e3a0202a 	mov	r2, #42	; 0x2a
   10134:	ebfff4c8 	bl	d45c <assertion_failed>
   10138:	e1a00004 	mov	r0, r4
   1013c:	e8bd8010 	pop	{r4, pc}

00010140 <CPtrList::GetFirst()>:
   10140:	e5900000 	ldr	r0, [r0]
   10144:	e12fff1e 	bx	lr

00010148 <CPtrList::GetNext(TPtrListElement*)>:
   10148:	e92d4010 	push	{r4, lr}
   1014c:	e2514000 	subs	r4, r1, #0
   10150:	0a00000c 	beq	10188 <CPtrList::GetNext(TPtrListElement*)+0x40>
   10154:	e5942000 	ldr	r2, [r4]
   10158:	e3043d43 	movw	r3, #19779	; 0x4d43
   1015c:	e345304c 	movt	r3, #20556	; 0x504c
   10160:	e1520003 	cmp	r2, r3
   10164:	0a000005 	beq	10180 <CPtrList::GetNext(TPtrListElement*)+0x38>
   10168:	e30318f0 	movw	r1, #14576	; 0x38f0
   1016c:	e3401005 	movt	r1, #5
   10170:	e303091c 	movw	r0, #14620	; 0x391c
   10174:	e3400005 	movt	r0, #5
   10178:	e3a02035 	mov	r2, #53	; 0x35
   1017c:	ebfff4b6 	bl	d45c <assertion_failed>
   10180:	e5940008 	ldr	r0, [r4, #8]
   10184:	e8bd8010 	pop	{r4, pc}
   10188:	e30318f0 	movw	r1, #14576	; 0x38f0
   1018c:	e3401005 	movt	r1, #5
   10190:	e303090c 	movw	r0, #14604	; 0x390c
   10194:	e3400005 	movt	r0, #5
   10198:	e3a02034 	mov	r2, #52	; 0x34
   1019c:	ebfff4ae 	bl	d45c <assertion_failed>
   101a0:	eaffffeb 	b	10154 <CPtrList::GetNext(TPtrListElement*)+0xc>

000101a4 <CPtrList::GetPtr(TPtrListElement*)>:
   101a4:	e92d4010 	push	{r4, lr}
   101a8:	e2514000 	subs	r4, r1, #0
   101ac:	0a00000c 	beq	101e4 <CPtrList::GetPtr(TPtrListElement*)+0x40>
   101b0:	e5942000 	ldr	r2, [r4]
   101b4:	e3043d43 	movw	r3, #19779	; 0x4d43
   101b8:	e345304c 	movt	r3, #20556	; 0x504c
   101bc:	e1520003 	cmp	r2, r3
   101c0:	0a000005 	beq	101dc <CPtrList::GetPtr(TPtrListElement*)+0x38>
   101c4:	e30318f0 	movw	r1, #14576	; 0x38f0
   101c8:	e3401005 	movt	r1, #5
   101cc:	e303091c 	movw	r0, #14620	; 0x391c
   101d0:	e3400005 	movt	r0, #5
   101d4:	e3a0203d 	mov	r2, #61	; 0x3d
   101d8:	ebfff49f 	bl	d45c <assertion_failed>
   101dc:	e594000c 	ldr	r0, [r4, #12]
   101e0:	e8bd8010 	pop	{r4, pc}
   101e4:	e30318f0 	movw	r1, #14576	; 0x38f0
   101e8:	e3401005 	movt	r1, #5
   101ec:	e303090c 	movw	r0, #14604	; 0x390c
   101f0:	e3400005 	movt	r0, #5
   101f4:	e3a0203c 	mov	r2, #60	; 0x3c
   101f8:	ebfff497 	bl	d45c <assertion_failed>
   101fc:	eaffffeb 	b	101b0 <CPtrList::GetPtr(TPtrListElement*)+0xc>

00010200 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   10200:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10204:	e1a06000 	mov	r6, r0
   10208:	e3a00010 	mov	r0, #16
   1020c:	e1a07002 	mov	r7, r2
   10210:	e1a04001 	mov	r4, r1
   10214:	ebffeae3 	bl	ada8 <operator new(unsigned int)>
   10218:	e5962000 	ldr	r2, [r6]
   1021c:	e3043d43 	movw	r3, #19779	; 0x4d43
   10220:	e345304c 	movt	r3, #20556	; 0x504c
   10224:	e3520000 	cmp	r2, #0
   10228:	e1a05000 	mov	r5, r0
   1022c:	e580700c 	str	r7, [r0, #12]
   10230:	e5803000 	str	r3, [r0]
   10234:	0a000029 	beq	102e0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   10238:	e3540000 	cmp	r4, #0
   1023c:	0a00002e 	beq	102fc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   10240:	e5942000 	ldr	r2, [r4]
   10244:	e3043d43 	movw	r3, #19779	; 0x4d43
   10248:	e345304c 	movt	r3, #20556	; 0x504c
   1024c:	e1520003 	cmp	r2, r3
   10250:	0a000005 	beq	1026c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x6c>
   10254:	e30318f0 	movw	r1, #14576	; 0x38f0
   10258:	e3401005 	movt	r1, #5
   1025c:	e303095c 	movw	r0, #14684	; 0x395c
   10260:	e3400005 	movt	r0, #5
   10264:	e3a0204e 	mov	r2, #78	; 0x4e
   10268:	ebfff47b 	bl	d45c <assertion_failed>
   1026c:	e5963000 	ldr	r3, [r6]
   10270:	e1540003 	cmp	r4, r3
   10274:	0a000013 	beq	102c8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
   10278:	e5943004 	ldr	r3, [r4, #4]
   1027c:	e5854008 	str	r4, [r5, #8]
   10280:	e3530000 	cmp	r3, #0
   10284:	e5853004 	str	r3, [r5, #4]
   10288:	0a00000c 	beq	102c0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   1028c:	e5931000 	ldr	r1, [r3]
   10290:	e3042d43 	movw	r2, #19779	; 0x4d43
   10294:	e345204c 	movt	r2, #20556	; 0x504c
   10298:	e1510002 	cmp	r1, r2
   1029c:	0a000006 	beq	102bc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xbc>
   102a0:	e30318f0 	movw	r1, #14576	; 0x38f0
   102a4:	e3401005 	movt	r1, #5
   102a8:	e3030980 	movw	r0, #14720	; 0x3980
   102ac:	e3400005 	movt	r0, #5
   102b0:	e3a02060 	mov	r2, #96	; 0x60
   102b4:	ebfff468 	bl	d45c <assertion_failed>
   102b8:	e5943004 	ldr	r3, [r4, #4]
   102bc:	e5835008 	str	r5, [r3, #8]
   102c0:	e5845004 	str	r5, [r4, #4]
   102c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   102c8:	e3a03000 	mov	r3, #0
   102cc:	e5845004 	str	r5, [r4, #4]
   102d0:	e5854008 	str	r4, [r5, #8]
   102d4:	e5865000 	str	r5, [r6]
   102d8:	e5853004 	str	r3, [r5, #4]
   102dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   102e0:	e30318f0 	movw	r1, #14576	; 0x38f0
   102e4:	e3401005 	movt	r1, #5
   102e8:	e3030940 	movw	r0, #14656	; 0x3940
   102ec:	e3400005 	movt	r0, #5
   102f0:	e3a0204c 	mov	r2, #76	; 0x4c
   102f4:	ebfff458 	bl	d45c <assertion_failed>
   102f8:	eaffffce 	b	10238 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x38>
   102fc:	e30318f0 	movw	r1, #14576	; 0x38f0
   10300:	e3401005 	movt	r1, #5
   10304:	e3030950 	movw	r0, #14672	; 0x3950
   10308:	e3400005 	movt	r0, #5
   1030c:	e3a0204d 	mov	r2, #77	; 0x4d
   10310:	ebfff451 	bl	d45c <assertion_failed>
   10314:	eaffffc9 	b	10240 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x40>

00010318 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   10318:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1031c:	e1a06000 	mov	r6, r0
   10320:	e1a05001 	mov	r5, r1
   10324:	e3a00010 	mov	r0, #16
   10328:	e1a07002 	mov	r7, r2
   1032c:	ebffea9d 	bl	ada8 <operator new(unsigned int)>
   10330:	e3550000 	cmp	r5, #0
   10334:	e3043d43 	movw	r3, #19779	; 0x4d43
   10338:	e345304c 	movt	r3, #20556	; 0x504c
   1033c:	e5803000 	str	r3, [r0]
   10340:	e1a04000 	mov	r4, r0
   10344:	e580700c 	str	r7, [r0, #12]
   10348:	e5963000 	ldr	r3, [r6]
   1034c:	0a000020 	beq	103d4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   10350:	e3530000 	cmp	r3, #0
   10354:	0a00002b 	beq	10408 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   10358:	e5952000 	ldr	r2, [r5]
   1035c:	e3043d43 	movw	r3, #19779	; 0x4d43
   10360:	e345304c 	movt	r3, #20556	; 0x504c
   10364:	e1520003 	cmp	r2, r3
   10368:	0a000005 	beq	10384 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
   1036c:	e30318f0 	movw	r1, #14576	; 0x38f0
   10370:	e3401005 	movt	r1, #5
   10374:	e30309a8 	movw	r0, #14760	; 0x39a8
   10378:	e3400005 	movt	r0, #5
   1037c:	e3a0207e 	mov	r2, #126	; 0x7e
   10380:	ebfff435 	bl	d45c <assertion_failed>
   10384:	e5953008 	ldr	r3, [r5, #8]
   10388:	e5845004 	str	r5, [r4, #4]
   1038c:	e3530000 	cmp	r3, #0
   10390:	e5843008 	str	r3, [r4, #8]
   10394:	0a00000c 	beq	103cc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>
   10398:	e5931000 	ldr	r1, [r3]
   1039c:	e3042d43 	movw	r2, #19779	; 0x4d43
   103a0:	e345204c 	movt	r2, #20556	; 0x504c
   103a4:	e1510002 	cmp	r1, r2
   103a8:	0a000006 	beq	103c8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb0>
   103ac:	e30318f0 	movw	r1, #14576	; 0x38f0
   103b0:	e3401005 	movt	r1, #5
   103b4:	e30309cc 	movw	r0, #14796	; 0x39cc
   103b8:	e3400005 	movt	r0, #5
   103bc:	e3a02085 	mov	r2, #133	; 0x85
   103c0:	ebfff425 	bl	d45c <assertion_failed>
   103c4:	e5953008 	ldr	r3, [r5, #8]
   103c8:	e5834004 	str	r4, [r3, #4]
   103cc:	e5854008 	str	r4, [r5, #8]
   103d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   103d4:	e3530000 	cmp	r3, #0
   103d8:	0a000005 	beq	103f4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   103dc:	e30318f0 	movw	r1, #14576	; 0x38f0
   103e0:	e3401005 	movt	r1, #5
   103e4:	e30308fc 	movw	r0, #14588	; 0x38fc
   103e8:	e3400005 	movt	r0, #5
   103ec:	e3a02074 	mov	r2, #116	; 0x74
   103f0:	ebfff419 	bl	d45c <assertion_failed>
   103f4:	e3a03000 	mov	r3, #0
   103f8:	e5864000 	str	r4, [r6]
   103fc:	e5843004 	str	r3, [r4, #4]
   10400:	e5843008 	str	r3, [r4, #8]
   10404:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10408:	e30318f0 	movw	r1, #14576	; 0x38f0
   1040c:	e3401005 	movt	r1, #5
   10410:	e3030940 	movw	r0, #14656	; 0x3940
   10414:	e3400005 	movt	r0, #5
   10418:	e3a0207d 	mov	r2, #125	; 0x7d
   1041c:	ebfff40e 	bl	d45c <assertion_failed>
   10420:	eaffffcc 	b	10358 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x40>

00010424 <CPtrList::Remove(TPtrListElement*)>:
   10424:	e92d4070 	push	{r4, r5, r6, lr}
   10428:	e2514000 	subs	r4, r1, #0
   1042c:	e1a05000 	mov	r5, r0
   10430:	0a000047 	beq	10554 <CPtrList::Remove(TPtrListElement*)+0x130>
   10434:	e5942000 	ldr	r2, [r4]
   10438:	e3043d43 	movw	r3, #19779	; 0x4d43
   1043c:	e345304c 	movt	r3, #20556	; 0x504c
   10440:	e1520003 	cmp	r2, r3
   10444:	0a000005 	beq	10460 <CPtrList::Remove(TPtrListElement*)+0x3c>
   10448:	e30318f0 	movw	r1, #14576	; 0x38f0
   1044c:	e3401005 	movt	r1, #5
   10450:	e303091c 	movw	r0, #14620	; 0x391c
   10454:	e3400005 	movt	r0, #5
   10458:	e3a02090 	mov	r2, #144	; 0x90
   1045c:	ebfff3fe 	bl	d45c <assertion_failed>
   10460:	e5953000 	ldr	r3, [r5]
   10464:	e1540003 	cmp	r4, r3
   10468:	0a000026 	beq	10508 <CPtrList::Remove(TPtrListElement*)+0xe4>
   1046c:	e5943004 	ldr	r3, [r4, #4]
   10470:	e3530000 	cmp	r3, #0
   10474:	0a00003d 	beq	10570 <CPtrList::Remove(TPtrListElement*)+0x14c>
   10478:	e5931000 	ldr	r1, [r3]
   1047c:	e3042d43 	movw	r2, #19779	; 0x4d43
   10480:	e345204c 	movt	r2, #20556	; 0x504c
   10484:	e1510002 	cmp	r1, r2
   10488:	0a000006 	beq	104a8 <CPtrList::Remove(TPtrListElement*)+0x84>
   1048c:	e30318f0 	movw	r1, #14576	; 0x38f0
   10490:	e3401005 	movt	r1, #5
   10494:	e3030a3c 	movw	r0, #14908	; 0x3a3c
   10498:	e3400005 	movt	r0, #5
   1049c:	e3a0209f 	mov	r2, #159	; 0x9f
   104a0:	ebfff3ed 	bl	d45c <assertion_failed>
   104a4:	e5943004 	ldr	r3, [r4, #4]
   104a8:	e5942008 	ldr	r2, [r4, #8]
   104ac:	e5832008 	str	r2, [r3, #8]
   104b0:	e5942008 	ldr	r2, [r4, #8]
   104b4:	e3520000 	cmp	r2, #0
   104b8:	0a00000d 	beq	104f4 <CPtrList::Remove(TPtrListElement*)+0xd0>
   104bc:	e5920000 	ldr	r0, [r2]
   104c0:	e3041d43 	movw	r1, #19779	; 0x4d43
   104c4:	e345104c 	movt	r1, #20556	; 0x504c
   104c8:	e1500001 	cmp	r0, r1
   104cc:	0a000007 	beq	104f0 <CPtrList::Remove(TPtrListElement*)+0xcc>
   104d0:	e3a020a4 	mov	r2, #164	; 0xa4
   104d4:	e30318f0 	movw	r1, #14576	; 0x38f0
   104d8:	e3401005 	movt	r1, #5
   104dc:	e30309f8 	movw	r0, #14840	; 0x39f8
   104e0:	e3400005 	movt	r0, #5
   104e4:	ebfff3dc 	bl	d45c <assertion_failed>
   104e8:	e5942008 	ldr	r2, [r4, #8]
   104ec:	e5943004 	ldr	r3, [r4, #4]
   104f0:	e5823004 	str	r3, [r2, #4]
   104f4:	e3a03000 	mov	r3, #0
   104f8:	e1a00004 	mov	r0, r4
   104fc:	e5843000 	str	r3, [r4]
   10500:	e8bd4070 	pop	{r4, r5, r6, lr}
   10504:	eaffea29 	b	adb0 <operator delete(void*)>
   10508:	e5943008 	ldr	r3, [r4, #8]
   1050c:	e3530000 	cmp	r3, #0
   10510:	e5853000 	str	r3, [r5]
   10514:	0afffff6 	beq	104f4 <CPtrList::Remove(TPtrListElement*)+0xd0>
   10518:	e5931000 	ldr	r1, [r3]
   1051c:	e3042d43 	movw	r2, #19779	; 0x4d43
   10520:	e345204c 	movt	r2, #20556	; 0x504c
   10524:	e1510002 	cmp	r1, r2
   10528:	0a000006 	beq	10548 <CPtrList::Remove(TPtrListElement*)+0x124>
   1052c:	e30318f0 	movw	r1, #14576	; 0x38f0
   10530:	e3401005 	movt	r1, #5
   10534:	e30309f8 	movw	r0, #14840	; 0x39f8
   10538:	e3400005 	movt	r0, #5
   1053c:	e3a02098 	mov	r2, #152	; 0x98
   10540:	ebfff3c5 	bl	d45c <assertion_failed>
   10544:	e5943008 	ldr	r3, [r4, #8]
   10548:	e3a02000 	mov	r2, #0
   1054c:	e5832004 	str	r2, [r3, #4]
   10550:	eaffffe7 	b	104f4 <CPtrList::Remove(TPtrListElement*)+0xd0>
   10554:	e30318f0 	movw	r1, #14576	; 0x38f0
   10558:	e3401005 	movt	r1, #5
   1055c:	e303090c 	movw	r0, #14604	; 0x390c
   10560:	e3400005 	movt	r0, #5
   10564:	e3a0208f 	mov	r2, #143	; 0x8f
   10568:	ebfff3bb 	bl	d45c <assertion_failed>
   1056c:	eaffffb0 	b	10434 <CPtrList::Remove(TPtrListElement*)+0x10>
   10570:	e30318f0 	movw	r1, #14576	; 0x38f0
   10574:	e3401005 	movt	r1, #5
   10578:	e3030a24 	movw	r0, #14884	; 0x3a24
   1057c:	e3400005 	movt	r0, #5
   10580:	e3a0209e 	mov	r2, #158	; 0x9e
   10584:	ebfff3b4 	bl	d45c <assertion_failed>
   10588:	e5943004 	ldr	r3, [r4, #4]
   1058c:	eaffffb9 	b	10478 <CPtrList::Remove(TPtrListElement*)+0x54>

00010590 <CPtrList::Find(void*)>:
   10590:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10594:	e5904000 	ldr	r4, [r0]
   10598:	e3540000 	cmp	r4, #0
   1059c:	0a000016 	beq	105fc <CPtrList::Find(void*)+0x6c>
   105a0:	e3048d43 	movw	r8, #19779	; 0x4d43
   105a4:	e345804c 	movt	r8, #20556	; 0x504c
   105a8:	e30378f0 	movw	r7, #14576	; 0x38f0
   105ac:	e3407005 	movt	r7, #5
   105b0:	e303691c 	movw	r6, #14620	; 0x391c
   105b4:	e3406005 	movt	r6, #5
   105b8:	e1a05001 	mov	r5, r1
   105bc:	ea000002 	b	105cc <CPtrList::Find(void*)+0x3c>
   105c0:	e5944008 	ldr	r4, [r4, #8]
   105c4:	e3540000 	cmp	r4, #0
   105c8:	0a00000b 	beq	105fc <CPtrList::Find(void*)+0x6c>
   105cc:	e5943000 	ldr	r3, [r4]
   105d0:	e3a020b3 	mov	r2, #179	; 0xb3
   105d4:	e1a01007 	mov	r1, r7
   105d8:	e1a00006 	mov	r0, r6
   105dc:	e1530008 	cmp	r3, r8
   105e0:	0a000000 	beq	105e8 <CPtrList::Find(void*)+0x58>
   105e4:	ebfff39c 	bl	d45c <assertion_failed>
   105e8:	e594300c 	ldr	r3, [r4, #12]
   105ec:	e1530005 	cmp	r3, r5
   105f0:	1afffff2 	bne	105c0 <CPtrList::Find(void*)+0x30>
   105f4:	e1a00004 	mov	r0, r4
   105f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   105fc:	e3a04000 	mov	r4, #0
   10600:	e1a00004 	mov	r0, r4
   10604:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00010608 <mem_init>:
   10608:	e0801001 	add	r1, r0, r1
   1060c:	e3032c7c 	movw	r2, #15484	; 0x3c7c
   10610:	e3402005 	movt	r2, #5
   10614:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   10618:	e3500605 	cmp	r0, #5242880	; 0x500000
   1061c:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   10620:	33a00605 	movcc	r0, #5242880	; 0x500000
   10624:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   10628:	e241c501 	sub	ip, r1, #4194304	; 0x400000
   1062c:	e3c3300f 	bic	r3, r3, #15
   10630:	e5820000 	str	r0, [r2]
   10634:	e582100c 	str	r1, [r2, #12]
   10638:	e582c004 	str	ip, [r2, #4]
   1063c:	e5823008 	str	r3, [r2, #8]
   10640:	e12fff1e 	bx	lr

00010644 <mem_get_size>:
   10644:	e3033c7c 	movw	r3, #15484	; 0x3c7c
   10648:	e3403005 	movt	r3, #5
   1064c:	e5930004 	ldr	r0, [r3, #4]
   10650:	e5931000 	ldr	r1, [r3]
   10654:	e593200c 	ldr	r2, [r3, #12]
   10658:	e5933008 	ldr	r3, [r3, #8]
   1065c:	e0400001 	sub	r0, r0, r1
   10660:	e0423003 	sub	r3, r2, r3
   10664:	e0800003 	add	r0, r0, r3
   10668:	e12fff1e 	bx	lr

0001066c <malloc>:
   1066c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10670:	e3037c7c 	movw	r7, #15484	; 0x3c7c
   10674:	e3407005 	movt	r7, #5
   10678:	e1a05000 	mov	r5, r0
   1067c:	e5973000 	ldr	r3, [r7]
   10680:	e3530000 	cmp	r3, #0
   10684:	0a000053 	beq	107d8 <malloc+0x16c>
   10688:	e5973010 	ldr	r3, [r7, #16]
   1068c:	e3530000 	cmp	r3, #0
   10690:	1a00004b 	bne	107c4 <malloc+0x158>
   10694:	e3034b9c 	movw	r4, #15260	; 0x3b9c
   10698:	e3404005 	movt	r4, #5
   1069c:	e5943000 	ldr	r3, [r4]
   106a0:	e3530000 	cmp	r3, #0
   106a4:	0a000007 	beq	106c8 <malloc+0x5c>
   106a8:	e1550003 	cmp	r5, r3
   106ac:	8a000002 	bhi	106bc <malloc+0x50>
   106b0:	ea000011 	b	106fc <malloc+0x90>
   106b4:	e1530005 	cmp	r3, r5
   106b8:	2a00000f 	bcs	106fc <malloc+0x90>
   106bc:	e5b43008 	ldr	r3, [r4, #8]!
   106c0:	e3530000 	cmp	r3, #0
   106c4:	1afffffa 	bne	106b4 <malloc+0x48>
   106c8:	e5976000 	ldr	r6, [r7]
   106cc:	e285301f 	add	r3, r5, #31
   106d0:	e3c3300f 	bic	r3, r3, #15
   106d4:	e5972004 	ldr	r2, [r7, #4]
   106d8:	e0863003 	add	r3, r6, r3
   106dc:	e1530002 	cmp	r3, r2
   106e0:	e5873000 	str	r3, [r7]
   106e4:	9a000028 	bls	1078c <malloc+0x120>
   106e8:	e5974010 	ldr	r4, [r7, #16]
   106ec:	e3540000 	cmp	r4, #0
   106f0:	1a000035 	bne	107cc <malloc+0x160>
   106f4:	e1a00004 	mov	r0, r4
   106f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   106fc:	e5946004 	ldr	r6, [r4, #4]
   10700:	e3560000 	cmp	r6, #0
   10704:	01a05003 	moveq	r5, r3
   10708:	0affffee 	beq	106c8 <malloc+0x5c>
   1070c:	e5962000 	ldr	r2, [r6]
   10710:	e3043d43 	movw	r3, #19779	; 0x4d43
   10714:	e344324c 	movt	r3, #16972	; 0x424c
   10718:	e1520003 	cmp	r2, r3
   1071c:	0a000005 	beq	10738 <malloc+0xcc>
   10720:	e3031a68 	movw	r1, #14952	; 0x3a68
   10724:	e3401005 	movt	r1, #5
   10728:	e3030a88 	movw	r0, #14984	; 0x3a88
   1072c:	e3400005 	movt	r0, #5
   10730:	e3a02089 	mov	r2, #137	; 0x89
   10734:	ebfff348 	bl	d45c <assertion_failed>
   10738:	e5963008 	ldr	r3, [r6, #8]
   1073c:	e5843004 	str	r3, [r4, #4]
   10740:	e5973010 	ldr	r3, [r7, #16]
   10744:	e3530000 	cmp	r3, #0
   10748:	1a00001b 	bne	107bc <malloc+0x150>
   1074c:	e2864010 	add	r4, r6, #16
   10750:	e3a03000 	mov	r3, #0
   10754:	e314000f 	tst	r4, #15
   10758:	e5c63008 	strb	r3, [r6, #8]
   1075c:	e5c63009 	strb	r3, [r6, #9]
   10760:	e5c6300a 	strb	r3, [r6, #10]
   10764:	e5c6300b 	strb	r3, [r6, #11]
   10768:	0affffe1 	beq	106f4 <malloc+0x88>
   1076c:	e3a020a1 	mov	r2, #161	; 0xa1
   10770:	e3031a68 	movw	r1, #14952	; 0x3a68
   10774:	e3401005 	movt	r1, #5
   10778:	e3030aac 	movw	r0, #15020	; 0x3aac
   1077c:	e3400005 	movt	r0, #5
   10780:	ebfff335 	bl	d45c <assertion_failed>
   10784:	e1a00004 	mov	r0, r4
   10788:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1078c:	e3a03042 	mov	r3, #66	; 0x42
   10790:	e3a00043 	mov	r0, #67	; 0x43
   10794:	e5c63003 	strb	r3, [r6, #3]
   10798:	e3a0104d 	mov	r1, #77	; 0x4d
   1079c:	e5973010 	ldr	r3, [r7, #16]
   107a0:	e3a0204c 	mov	r2, #76	; 0x4c
   107a4:	e5865004 	str	r5, [r6, #4]
   107a8:	e3530000 	cmp	r3, #0
   107ac:	e5c60000 	strb	r0, [r6]
   107b0:	e5c61001 	strb	r1, [r6, #1]
   107b4:	e5c62002 	strb	r2, [r6, #2]
   107b8:	0affffe3 	beq	1074c <malloc+0xe0>
   107bc:	ebffe98a 	bl	adec <LeaveCritical>
   107c0:	eaffffe1 	b	1074c <malloc+0xe0>
   107c4:	ebffe97b 	bl	adb8 <EnterCritical>
   107c8:	eaffffb1 	b	10694 <malloc+0x28>
   107cc:	ebffe986 	bl	adec <LeaveCritical>
   107d0:	e3a04000 	mov	r4, #0
   107d4:	eaffffc6 	b	106f4 <malloc+0x88>
   107d8:	e3031a68 	movw	r1, #14952	; 0x3a68
   107dc:	e3401005 	movt	r1, #5
   107e0:	e3030a74 	movw	r0, #14964	; 0x3a74
   107e4:	e3400005 	movt	r0, #5
   107e8:	e3a0206f 	mov	r2, #111	; 0x6f
   107ec:	ebfff31a 	bl	d45c <assertion_failed>
   107f0:	eaffffa4 	b	10688 <malloc+0x1c>

000107f4 <free>:
   107f4:	e92d4070 	push	{r4, r5, r6, lr}
   107f8:	e2505000 	subs	r5, r0, #0
   107fc:	08bd8070 	popeq	{r4, r5, r6, pc}
   10800:	e5352010 	ldr	r2, [r5, #-16]!
   10804:	e3043d43 	movw	r3, #19779	; 0x4d43
   10808:	e344324c 	movt	r3, #16972	; 0x424c
   1080c:	e1520003 	cmp	r2, r3
   10810:	0a000005 	beq	1082c <free+0x38>
   10814:	e3031a68 	movw	r1, #14952	; 0x3a68
   10818:	e3401005 	movt	r1, #5
   1081c:	e3030a88 	movw	r0, #14984	; 0x3a88
   10820:	e3400005 	movt	r0, #5
   10824:	e3a020ae 	mov	r2, #174	; 0xae
   10828:	ebfff30b 	bl	d45c <assertion_failed>
   1082c:	e3034b9c 	movw	r4, #15260	; 0x3b9c
   10830:	e3404005 	movt	r4, #5
   10834:	e5943000 	ldr	r3, [r4]
   10838:	e3530000 	cmp	r3, #0
   1083c:	08bd8070 	popeq	{r4, r5, r6, pc}
   10840:	e5952004 	ldr	r2, [r5, #4]
   10844:	e1520003 	cmp	r2, r3
   10848:	1a000002 	bne	10858 <free+0x64>
   1084c:	ea000005 	b	10868 <free+0x74>
   10850:	e1530002 	cmp	r3, r2
   10854:	0a000003 	beq	10868 <free+0x74>
   10858:	e5b43008 	ldr	r3, [r4, #8]!
   1085c:	e3530000 	cmp	r3, #0
   10860:	1afffffa 	bne	10850 <free+0x5c>
   10864:	e8bd8070 	pop	{r4, r5, r6, pc}
   10868:	e3036c7c 	movw	r6, #15484	; 0x3c7c
   1086c:	e3406005 	movt	r6, #5
   10870:	e5963010 	ldr	r3, [r6, #16]
   10874:	e3530000 	cmp	r3, #0
   10878:	1a000003 	bne	1088c <free+0x98>
   1087c:	e5943004 	ldr	r3, [r4, #4]
   10880:	e5853008 	str	r3, [r5, #8]
   10884:	e5845004 	str	r5, [r4, #4]
   10888:	e8bd8070 	pop	{r4, r5, r6, pc}
   1088c:	ebffe949 	bl	adb8 <EnterCritical>
   10890:	e5962010 	ldr	r2, [r6, #16]
   10894:	e5943004 	ldr	r3, [r4, #4]
   10898:	e3520000 	cmp	r2, #0
   1089c:	e5853008 	str	r3, [r5, #8]
   108a0:	e5845004 	str	r5, [r4, #4]
   108a4:	08bd8070 	popeq	{r4, r5, r6, pc}
   108a8:	e8bd4070 	pop	{r4, r5, r6, lr}
   108ac:	eaffe94e 	b	adec <LeaveCritical>

000108b0 <palloc>:
   108b0:	e92d4070 	push	{r4, r5, r6, lr}
   108b4:	e3034c7c 	movw	r4, #15484	; 0x3c7c
   108b8:	e3404005 	movt	r4, #5
   108bc:	e5943008 	ldr	r3, [r4, #8]
   108c0:	e3530000 	cmp	r3, #0
   108c4:	0a00002c 	beq	1097c <palloc+0xcc>
   108c8:	e5943014 	ldr	r3, [r4, #20]
   108cc:	e3530000 	cmp	r3, #0
   108d0:	1a000019 	bne	1093c <palloc+0x8c>
   108d4:	e5945018 	ldr	r5, [r4, #24]
   108d8:	e3550000 	cmp	r5, #0
   108dc:	0a00001a 	beq	1094c <palloc+0x9c>
   108e0:	e5952000 	ldr	r2, [r5]
   108e4:	e3043d43 	movw	r3, #19779	; 0x4d43
   108e8:	e3453047 	movt	r3, #20551	; 0x5047
   108ec:	e1520003 	cmp	r2, r3
   108f0:	0a000005 	beq	1090c <palloc+0x5c>
   108f4:	e3031a68 	movw	r1, #14952	; 0x3a68
   108f8:	e3401005 	movt	r1, #5
   108fc:	e3030aec 	movw	r0, #15084	; 0x3aec
   10900:	e3400005 	movt	r0, #5
   10904:	e3a020d4 	mov	r2, #212	; 0xd4
   10908:	ebfff2d3 	bl	d45c <assertion_failed>
   1090c:	e5953004 	ldr	r3, [r5, #4]
   10910:	e3a02000 	mov	r2, #0
   10914:	e5852000 	str	r2, [r5]
   10918:	e5843018 	str	r3, [r4, #24]
   1091c:	e5943014 	ldr	r3, [r4, #20]
   10920:	e3530000 	cmp	r3, #0
   10924:	1a000001 	bne	10930 <palloc+0x80>
   10928:	e1a00005 	mov	r0, r5
   1092c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10930:	ebffe92d 	bl	adec <LeaveCritical>
   10934:	e1a00005 	mov	r0, r5
   10938:	e8bd8070 	pop	{r4, r5, r6, pc}
   1093c:	ebffe91d 	bl	adb8 <EnterCritical>
   10940:	e5945018 	ldr	r5, [r4, #24]
   10944:	e3550000 	cmp	r5, #0
   10948:	1affffe4 	bne	108e0 <palloc+0x30>
   1094c:	e5945008 	ldr	r5, [r4, #8]
   10950:	e594200c 	ldr	r2, [r4, #12]
   10954:	e2853a01 	add	r3, r5, #4096	; 0x1000
   10958:	e1530002 	cmp	r3, r2
   1095c:	e5843008 	str	r3, [r4, #8]
   10960:	9affffed 	bls	1091c <palloc+0x6c>
   10964:	e5945014 	ldr	r5, [r4, #20]
   10968:	e3550000 	cmp	r5, #0
   1096c:	0affffed 	beq	10928 <palloc+0x78>
   10970:	ebffe91d 	bl	adec <LeaveCritical>
   10974:	e3a00000 	mov	r0, #0
   10978:	e8bd8070 	pop	{r4, r5, r6, pc}
   1097c:	e3031a68 	movw	r1, #14952	; 0x3a68
   10980:	e3401005 	movt	r1, #5
   10984:	e3030ad8 	movw	r0, #15064	; 0x3ad8
   10988:	e3400005 	movt	r0, #5
   1098c:	e3a020c6 	mov	r2, #198	; 0xc6
   10990:	ebfff2b1 	bl	d45c <assertion_failed>
   10994:	eaffffcb 	b	108c8 <palloc+0x18>

00010998 <pfree>:
   10998:	e92d4070 	push	{r4, r5, r6, lr}
   1099c:	e2505000 	subs	r5, r0, #0
   109a0:	08bd8070 	popeq	{r4, r5, r6, pc}
   109a4:	e3034c7c 	movw	r4, #15484	; 0x3c7c
   109a8:	e3404005 	movt	r4, #5
   109ac:	e5943014 	ldr	r3, [r4, #20]
   109b0:	e3530000 	cmp	r3, #0
   109b4:	1a000006 	bne	109d4 <pfree+0x3c>
   109b8:	e5942018 	ldr	r2, [r4, #24]
   109bc:	e3043d43 	movw	r3, #19779	; 0x4d43
   109c0:	e3453047 	movt	r3, #20551	; 0x5047
   109c4:	e5853000 	str	r3, [r5]
   109c8:	e5852004 	str	r2, [r5, #4]
   109cc:	e5845018 	str	r5, [r4, #24]
   109d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   109d4:	ebffe8f7 	bl	adb8 <EnterCritical>
   109d8:	e5941014 	ldr	r1, [r4, #20]
   109dc:	e5942018 	ldr	r2, [r4, #24]
   109e0:	e3043d43 	movw	r3, #19779	; 0x4d43
   109e4:	e3453047 	movt	r3, #20551	; 0x5047
   109e8:	e3510000 	cmp	r1, #0
   109ec:	e5853000 	str	r3, [r5]
   109f0:	e5852004 	str	r2, [r5, #4]
   109f4:	e5845018 	str	r5, [r4, #24]
   109f8:	08bd8070 	popeq	{r4, r5, r6, pc}
   109fc:	e8bd4070 	pop	{r4, r5, r6, lr}
   10a00:	eaffe8f9 	b	adec <LeaveCritical>

00010a04 <_GLOBAL__sub_I_mem_init>:
   10a04:	e3033c7c 	movw	r3, #15484	; 0x3c7c
   10a08:	e3403005 	movt	r3, #5
   10a0c:	e3a02001 	mov	r2, #1
   10a10:	e5832010 	str	r2, [r3, #16]
   10a14:	e5832014 	str	r2, [r3, #20]
   10a18:	e12fff1e 	bx	lr

00010a1c <CBcmMailBox::CBcmMailBox(unsigned int)>:
   10a1c:	e3a02000 	mov	r2, #0
   10a20:	e8800006 	stm	r0, {r1, r2}
   10a24:	e12fff1e 	bx	lr

00010a28 <CBcmMailBox::~CBcmMailBox()>:
   10a28:	e12fff1e 	bx	lr

00010a2c <CBcmMailBox::Flush()>:
   10a2c:	e92d4010 	push	{r4, lr}
   10a30:	e3a04a0b 	mov	r4, #45056	; 0xb000
   10a34:	e3434f00 	movt	r4, #16128	; 0x3f00
   10a38:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   10a3c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   10a40:	18bd8010 	popne	{r4, pc}
   10a44:	e3a00014 	mov	r0, #20
   10a48:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   10a4c:	ebffebc6 	bl	b96c <CTimer::SimpleMsDelay(unsigned int)>
   10a50:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   10a54:	e3130101 	tst	r3, #1073741824	; 0x40000000
   10a58:	0afffff9 	beq	10a44 <CBcmMailBox::Flush()+0x18>
   10a5c:	e8bd8010 	pop	{r4, pc}

00010a60 <CBcmMailBox::Read()>:
   10a60:	e5901000 	ldr	r1, [r0]
   10a64:	e3a02a0b 	mov	r2, #45056	; 0xb000
   10a68:	e3432f00 	movt	r2, #16128	; 0x3f00
   10a6c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   10a70:	e3130101 	tst	r3, #1073741824	; 0x40000000
   10a74:	1afffffc 	bne	10a6c <CBcmMailBox::Read()+0xc>
   10a78:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   10a7c:	e200300f 	and	r3, r0, #15
   10a80:	e1510003 	cmp	r1, r3
   10a84:	1afffff8 	bne	10a6c <CBcmMailBox::Read()+0xc>
   10a88:	e3c0000f 	bic	r0, r0, #15
   10a8c:	e12fff1e 	bx	lr

00010a90 <CBcmMailBox::Write(unsigned int)>:
   10a90:	e92d4070 	push	{r4, r5, r6, lr}
   10a94:	e3a02a0b 	mov	r2, #45056	; 0xb000
   10a98:	e3432f00 	movt	r2, #16128	; 0x3f00
   10a9c:	e1a05000 	mov	r5, r0
   10aa0:	e1a04001 	mov	r4, r1
   10aa4:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   10aa8:	e3530000 	cmp	r3, #0
   10aac:	bafffffc 	blt	10aa4 <CBcmMailBox::Write(unsigned int)+0x14>
   10ab0:	e314000f 	tst	r4, #15
   10ab4:	0a000005 	beq	10ad0 <CBcmMailBox::Write(unsigned int)+0x40>
   10ab8:	e3031b10 	movw	r1, #15120	; 0x3b10
   10abc:	e3401005 	movt	r1, #5
   10ac0:	e3030b20 	movw	r0, #15136	; 0x3b20
   10ac4:	e3400005 	movt	r0, #5
   10ac8:	e3a0205a 	mov	r2, #90	; 0x5a
   10acc:	ebfff262 	bl	d45c <assertion_failed>
   10ad0:	e5952000 	ldr	r2, [r5]
   10ad4:	e3a03a0b 	mov	r3, #45056	; 0xb000
   10ad8:	e3433f00 	movt	r3, #16128	; 0x3f00
   10adc:	e1844002 	orr	r4, r4, r2
   10ae0:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   10ae4:	e8bd8070 	pop	{r4, r5, r6, pc}

00010ae8 <CBcmMailBox::WriteRead(unsigned int)>:
   10ae8:	e5903004 	ldr	r3, [r0, #4]
   10aec:	e92d4070 	push	{r4, r5, r6, lr}
   10af0:	e1a05000 	mov	r5, r0
   10af4:	e3530000 	cmp	r3, #0
   10af8:	e1a06001 	mov	r6, r1
   10afc:	1a00001e 	bne	10b7c <CBcmMailBox::WriteRead(unsigned int)+0x94>
   10b00:	e3a04a0b 	mov	r4, #45056	; 0xb000
   10b04:	e3434f00 	movt	r4, #16128	; 0x3f00
   10b08:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   10b0c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   10b10:	1a000005 	bne	10b2c <CBcmMailBox::WriteRead(unsigned int)+0x44>
   10b14:	e3a00014 	mov	r0, #20
   10b18:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   10b1c:	ebffeb92 	bl	b96c <CTimer::SimpleMsDelay(unsigned int)>
   10b20:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   10b24:	e3130101 	tst	r3, #1073741824	; 0x40000000
   10b28:	0afffff9 	beq	10b14 <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   10b2c:	e1a00005 	mov	r0, r5
   10b30:	e1a01006 	mov	r1, r6
   10b34:	ebffffd5 	bl	10a90 <CBcmMailBox::Write(unsigned int)>
   10b38:	e5950000 	ldr	r0, [r5]
   10b3c:	e3a02a0b 	mov	r2, #45056	; 0xb000
   10b40:	e3432f00 	movt	r2, #16128	; 0x3f00
   10b44:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   10b48:	e3130101 	tst	r3, #1073741824	; 0x40000000
   10b4c:	1afffffc 	bne	10b44 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   10b50:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   10b54:	e203100f 	and	r1, r3, #15
   10b58:	e1510000 	cmp	r1, r0
   10b5c:	1afffff8 	bne	10b44 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   10b60:	e5952004 	ldr	r2, [r5, #4]
   10b64:	e3c3400f 	bic	r4, r3, #15
   10b68:	e3520000 	cmp	r2, #0
   10b6c:	0a000000 	beq	10b74 <CBcmMailBox::WriteRead(unsigned int)+0x8c>
   10b70:	ebffe89d 	bl	adec <LeaveCritical>
   10b74:	e1a00004 	mov	r0, r4
   10b78:	e8bd8070 	pop	{r4, r5, r6, pc}
   10b7c:	ebffe88d 	bl	adb8 <EnterCritical>
   10b80:	eaffffde 	b	10b00 <CBcmMailBox::WriteRead(unsigned int)+0x18>

00010b84 <memset>:
   10b84:	e3520000 	cmp	r2, #0
   10b88:	012fff1e 	bxeq	lr
   10b8c:	e6af1071 	sxtb	r1, r1
   10b90:	e0802002 	add	r2, r0, r2
   10b94:	e1a03000 	mov	r3, r0
   10b98:	e4c31001 	strb	r1, [r3], #1
   10b9c:	e1530002 	cmp	r3, r2
   10ba0:	1afffffc 	bne	10b98 <memset+0x14>
   10ba4:	e12fff1e 	bx	lr

00010ba8 <memcmp>:
   10ba8:	e3520000 	cmp	r2, #0
   10bac:	0a00000e 	beq	10bec <memcmp+0x44>
   10bb0:	e5d0c000 	ldrb	ip, [r0]
   10bb4:	e5d13000 	ldrb	r3, [r1]
   10bb8:	e15c0003 	cmp	ip, r3
   10bbc:	ca00000c 	bgt	10bf4 <memcmp+0x4c>
   10bc0:	ba00000d 	blt	10bfc <memcmp+0x54>
   10bc4:	e0812002 	add	r2, r1, r2
   10bc8:	e2811001 	add	r1, r1, #1
   10bcc:	ea000004 	b	10be4 <memcmp+0x3c>
   10bd0:	e5f0c001 	ldrb	ip, [r0, #1]!
   10bd4:	e4d13001 	ldrb	r3, [r1], #1
   10bd8:	e15c0003 	cmp	ip, r3
   10bdc:	ca000004 	bgt	10bf4 <memcmp+0x4c>
   10be0:	ba000005 	blt	10bfc <memcmp+0x54>
   10be4:	e1510002 	cmp	r1, r2
   10be8:	1afffff8 	bne	10bd0 <memcmp+0x28>
   10bec:	e3a00000 	mov	r0, #0
   10bf0:	e12fff1e 	bx	lr
   10bf4:	e3a00001 	mov	r0, #1
   10bf8:	e12fff1e 	bx	lr
   10bfc:	e3e00000 	mvn	r0, #0
   10c00:	e12fff1e 	bx	lr

00010c04 <strlen>:
   10c04:	e1d010d0 	ldrsb	r1, [r0]
   10c08:	e2803001 	add	r3, r0, #1
   10c0c:	e3510000 	cmp	r1, #0
   10c10:	0a000003 	beq	10c24 <strlen+0x20>
   10c14:	e0431000 	sub	r1, r3, r0
   10c18:	e0d320d1 	ldrsb	r2, [r3], #1
   10c1c:	e3520000 	cmp	r2, #0
   10c20:	1afffffb 	bne	10c14 <strlen+0x10>
   10c24:	e1a00001 	mov	r0, r1
   10c28:	e12fff1e 	bx	lr

00010c2c <strcmp>:
   10c2c:	e1d030d0 	ldrsb	r3, [r0]
   10c30:	e1d120d0 	ldrsb	r2, [r1]
   10c34:	e3530000 	cmp	r3, #0
   10c38:	1a000007 	bne	10c5c <strcmp+0x30>
   10c3c:	ea000008 	b	10c64 <strcmp+0x38>
   10c40:	e1530002 	cmp	r3, r2
   10c44:	ca00000b 	bgt	10c78 <strcmp+0x4c>
   10c48:	ba00000c 	blt	10c80 <strcmp+0x54>
   10c4c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10c50:	e3530000 	cmp	r3, #0
   10c54:	0a00000b 	beq	10c88 <strcmp+0x5c>
   10c58:	e1f120d1 	ldrsb	r2, [r1, #1]!
   10c5c:	e3520000 	cmp	r2, #0
   10c60:	1afffff6 	bne	10c40 <strcmp+0x14>
   10c64:	e1530002 	cmp	r3, r2
   10c68:	ca000002 	bgt	10c78 <strcmp+0x4c>
   10c6c:	b3e00000 	mvnlt	r0, #0
   10c70:	a3a00000 	movge	r0, #0
   10c74:	e12fff1e 	bx	lr
   10c78:	e3a00001 	mov	r0, #1
   10c7c:	e12fff1e 	bx	lr
   10c80:	e3e00000 	mvn	r0, #0
   10c84:	e12fff1e 	bx	lr
   10c88:	e1d120d1 	ldrsb	r2, [r1, #1]
   10c8c:	e1530002 	cmp	r3, r2
   10c90:	dafffff5 	ble	10c6c <strcmp+0x40>
   10c94:	eafffff7 	b	10c78 <strcmp+0x4c>

00010c98 <strcpy>:
   10c98:	e1d130d0 	ldrsb	r3, [r1]
   10c9c:	e1a02000 	mov	r2, r0
   10ca0:	e3530000 	cmp	r3, #0
   10ca4:	0a000003 	beq	10cb8 <strcpy+0x20>
   10ca8:	e4c23001 	strb	r3, [r2], #1
   10cac:	e1f130d1 	ldrsb	r3, [r1, #1]!
   10cb0:	e3530000 	cmp	r3, #0
   10cb4:	1afffffb 	bne	10ca8 <strcpy+0x10>
   10cb8:	e3a03000 	mov	r3, #0
   10cbc:	e5c23000 	strb	r3, [r2]
   10cc0:	e12fff1e 	bx	lr

00010cc4 <strncpy>:
   10cc4:	e3520000 	cmp	r2, #0
   10cc8:	012fff1e 	bxeq	lr
   10ccc:	e1d1c0d0 	ldrsb	ip, [r1]
   10cd0:	e35c0000 	cmp	ip, #0
   10cd4:	0a000009 	beq	10d00 <strncpy+0x3c>
   10cd8:	e0802002 	add	r2, r0, r2
   10cdc:	e1a03000 	mov	r3, r0
   10ce0:	ea000002 	b	10cf0 <strncpy+0x2c>
   10ce4:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   10ce8:	e35c0000 	cmp	ip, #0
   10cec:	0a000004 	beq	10d04 <strncpy+0x40>
   10cf0:	e4c3c001 	strb	ip, [r3], #1
   10cf4:	e1530002 	cmp	r3, r2
   10cf8:	1afffff9 	bne	10ce4 <strncpy+0x20>
   10cfc:	e12fff1e 	bx	lr
   10d00:	e1a03000 	mov	r3, r0
   10d04:	e3a02000 	mov	r2, #0
   10d08:	e5c32000 	strb	r2, [r3]
   10d0c:	e12fff1e 	bx	lr

00010d10 <strcat>:
   10d10:	e1d030d0 	ldrsb	r3, [r0]
   10d14:	e3530000 	cmp	r3, #0
   10d18:	e1a03000 	mov	r3, r0
   10d1c:	0a000002 	beq	10d2c <strcat+0x1c>
   10d20:	e1f320d1 	ldrsb	r2, [r3, #1]!
   10d24:	e3520000 	cmp	r2, #0
   10d28:	1afffffc 	bne	10d20 <strcat+0x10>
   10d2c:	e1d120d0 	ldrsb	r2, [r1]
   10d30:	e3520000 	cmp	r2, #0
   10d34:	0a000003 	beq	10d48 <strcat+0x38>
   10d38:	e4c32001 	strb	r2, [r3], #1
   10d3c:	e1f120d1 	ldrsb	r2, [r1, #1]!
   10d40:	e3520000 	cmp	r2, #0
   10d44:	1afffffb 	bne	10d38 <strcat+0x28>
   10d48:	e3a02000 	mov	r2, #0
   10d4c:	e5c32000 	strb	r2, [r3]
   10d50:	e12fff1e 	bx	lr

00010d54 <strchr>:
   10d54:	e1d020d0 	ldrsb	r2, [r0]
   10d58:	e3520000 	cmp	r2, #0
   10d5c:	0a000009 	beq	10d88 <strchr+0x34>
   10d60:	e1510002 	cmp	r1, r2
   10d64:	1a000002 	bne	10d74 <strchr+0x20>
   10d68:	ea000008 	b	10d90 <strchr+0x3c>
   10d6c:	e1530001 	cmp	r3, r1
   10d70:	012fff1e 	bxeq	lr
   10d74:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10d78:	e3530000 	cmp	r3, #0
   10d7c:	1afffffa 	bne	10d6c <strchr+0x18>
   10d80:	e1a00003 	mov	r0, r3
   10d84:	e12fff1e 	bx	lr
   10d88:	e1a00002 	mov	r0, r2
   10d8c:	e12fff1e 	bx	lr
   10d90:	e12fff1e 	bx	lr

00010d94 <strtok_r>:
   10d94:	e3500000 	cmp	r0, #0
   10d98:	0a00002c 	beq	10e50 <strtok_r+0xbc>
   10d9c:	e92d4030 	push	{r4, r5, lr}
   10da0:	e1d0e0d0 	ldrsb	lr, [r0]
   10da4:	e35e0000 	cmp	lr, #0
   10da8:	11d140d0 	ldrsbne	r4, [r1]
   10dac:	0a000024 	beq	10e44 <strtok_r+0xb0>
   10db0:	e3540000 	cmp	r4, #0
   10db4:	0a000008 	beq	10ddc <strtok_r+0x48>
   10db8:	e15e0004 	cmp	lr, r4
   10dbc:	0a000019 	beq	10e28 <strtok_r+0x94>
   10dc0:	e1a0c001 	mov	ip, r1
   10dc4:	ea000001 	b	10dd0 <strtok_r+0x3c>
   10dc8:	e15e0003 	cmp	lr, r3
   10dcc:	0a000015 	beq	10e28 <strtok_r+0x94>
   10dd0:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   10dd4:	e3530000 	cmp	r3, #0
   10dd8:	1afffffa 	bne	10dc8 <strtok_r+0x34>
   10ddc:	e35e0000 	cmp	lr, #0
   10de0:	0a000017 	beq	10e44 <strtok_r+0xb0>
   10de4:	e1a05000 	mov	r5, r0
   10de8:	e3540000 	cmp	r4, #0
   10dec:	0a000008 	beq	10e14 <strtok_r+0x80>
   10df0:	e15e0004 	cmp	lr, r4
   10df4:	0a00000d 	beq	10e30 <strtok_r+0x9c>
   10df8:	e1a0c001 	mov	ip, r1
   10dfc:	ea000001 	b	10e08 <strtok_r+0x74>
   10e00:	e15e0003 	cmp	lr, r3
   10e04:	0a000009 	beq	10e30 <strtok_r+0x9c>
   10e08:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   10e0c:	e3530000 	cmp	r3, #0
   10e10:	1afffffa 	bne	10e00 <strtok_r+0x6c>
   10e14:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   10e18:	e35e0000 	cmp	lr, #0
   10e1c:	1afffff1 	bne	10de8 <strtok_r+0x54>
   10e20:	e5825000 	str	r5, [r2]
   10e24:	e8bd8030 	pop	{r4, r5, pc}
   10e28:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   10e2c:	eaffffdf 	b	10db0 <strtok_r+0x1c>
   10e30:	e3a03000 	mov	r3, #0
   10e34:	e2855001 	add	r5, r5, #1
   10e38:	e5453001 	strb	r3, [r5, #-1]
   10e3c:	e5825000 	str	r5, [r2]
   10e40:	e8bd8030 	pop	{r4, r5, pc}
   10e44:	e3a00000 	mov	r0, #0
   10e48:	e5820000 	str	r0, [r2]
   10e4c:	e8bd8030 	pop	{r4, r5, pc}
   10e50:	e5920000 	ldr	r0, [r2]
   10e54:	e3500000 	cmp	r0, #0
   10e58:	1affffcf 	bne	10d9c <strtok_r+0x8>
   10e5c:	e12fff1e 	bx	lr

00010e60 <strtoul>:
   10e60:	e3510000 	cmp	r1, #0
   10e64:	e92d4070 	push	{r4, r5, r6, lr}
   10e68:	e2425002 	sub	r5, r2, #2
   10e6c:	e3c2e010 	bic	lr, r2, #16
   10e70:	15810000 	strne	r0, [r1]
   10e74:	e3520000 	cmp	r2, #0
   10e78:	13550022 	cmpne	r5, #34	; 0x22
   10e7c:	83a05001 	movhi	r5, #1
   10e80:	93a05000 	movls	r5, #0
   10e84:	8a000036 	bhi	10f64 <strtoul+0x104>
   10e88:	e1d0c0d0 	ldrsb	ip, [r0]
   10e8c:	e1a04000 	mov	r4, r0
   10e90:	e2800001 	add	r0, r0, #1
   10e94:	e35c0020 	cmp	ip, #32
   10e98:	e24c3009 	sub	r3, ip, #9
   10e9c:	e6ef3073 	uxtb	r3, r3
   10ea0:	0afffff8 	beq	10e88 <strtoul+0x28>
   10ea4:	e3530004 	cmp	r3, #4
   10ea8:	9afffff6 	bls	10e88 <strtoul+0x28>
   10eac:	e35c002b 	cmp	ip, #43	; 0x2b
   10eb0:	0a00002d 	beq	10f6c <strtoul+0x10c>
   10eb4:	e35c002d 	cmp	ip, #45	; 0x2d
   10eb8:	03a06001 	moveq	r6, #1
   10ebc:	13a06000 	movne	r6, #0
   10ec0:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   10ec4:	01a04000 	moveq	r4, r0
   10ec8:	e35c0030 	cmp	ip, #48	; 0x30
   10ecc:	0a00002b 	beq	10f80 <strtoul+0x120>
   10ed0:	e3520000 	cmp	r2, #0
   10ed4:	03a0200a 	moveq	r2, #10
   10ed8:	e35c002f 	cmp	ip, #47	; 0x2f
   10edc:	e1a0300c 	mov	r3, ip
   10ee0:	da00001c 	ble	10f58 <strtoul+0xf8>
   10ee4:	e3a05001 	mov	r5, #1
   10ee8:	e3a0e000 	mov	lr, #0
   10eec:	ea000007 	b	10f10 <strtoul+0xb0>
   10ef0:	e150000e 	cmp	r0, lr
   10ef4:	e3a05000 	mov	r5, #0
   10ef8:	e1a0e000 	mov	lr, r0
   10efc:	3a000028 	bcc	10fa4 <strtoul+0x144>
   10f00:	e1f430d1 	ldrsb	r3, [r4, #1]!
   10f04:	e353002f 	cmp	r3, #47	; 0x2f
   10f08:	e1a0c003 	mov	ip, r3
   10f0c:	da000029 	ble	10fb8 <strtoul+0x158>
   10f10:	e24cc061 	sub	ip, ip, #97	; 0x61
   10f14:	e35c0019 	cmp	ip, #25
   10f18:	92433020 	subls	r3, r3, #32
   10f1c:	e3530040 	cmp	r3, #64	; 0x40
   10f20:	c2433007 	subgt	r3, r3, #7
   10f24:	e2433030 	sub	r3, r3, #48	; 0x30
   10f28:	e1520003 	cmp	r2, r3
   10f2c:	e020329e 	mla	r0, lr, r2, r3
   10f30:	caffffee 	bgt	10ef0 <strtoul+0x90>
   10f34:	e2255001 	eor	r5, r5, #1
   10f38:	e1a0000e 	mov	r0, lr
   10f3c:	e3510000 	cmp	r1, #0
   10f40:	e0055006 	and	r5, r5, r6
   10f44:	0a000000 	beq	10f4c <strtoul+0xec>
   10f48:	e5814000 	str	r4, [r1]
   10f4c:	e3550000 	cmp	r5, #0
   10f50:	12600000 	rsbne	r0, r0, #0
   10f54:	e8bd8070 	pop	{r4, r5, r6, pc}
   10f58:	e3510000 	cmp	r1, #0
   10f5c:	13a00000 	movne	r0, #0
   10f60:	1afffff8 	bne	10f48 <strtoul+0xe8>
   10f64:	e3a00000 	mov	r0, #0
   10f68:	e8bd8070 	pop	{r4, r5, r6, pc}
   10f6c:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   10f70:	e3a06000 	mov	r6, #0
   10f74:	e1a04000 	mov	r4, r0
   10f78:	e35c0030 	cmp	ip, #48	; 0x30
   10f7c:	1affffd3 	bne	10ed0 <strtoul+0x70>
   10f80:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   10f84:	e2840001 	add	r0, r4, #1
   10f88:	e3cc3020 	bic	r3, ip, #32
   10f8c:	e3530058 	cmp	r3, #88	; 0x58
   10f90:	0a00000a 	beq	10fc0 <strtoul+0x160>
   10f94:	e3520000 	cmp	r2, #0
   10f98:	e1a04000 	mov	r4, r0
   10f9c:	03a02008 	moveq	r2, #8
   10fa0:	eaffffcc 	b	10ed8 <strtoul+0x78>
   10fa4:	e1510005 	cmp	r1, r5
   10fa8:	0a00000a 	beq	10fd8 <strtoul+0x178>
   10fac:	e5814000 	str	r4, [r1]
   10fb0:	e3e00000 	mvn	r0, #0
   10fb4:	e8bd8070 	pop	{r4, r5, r6, pc}
   10fb8:	e3a05001 	mov	r5, #1
   10fbc:	eaffffde 	b	10f3c <strtoul+0xdc>
   10fc0:	e35e0000 	cmp	lr, #0
   10fc4:	1affffe6 	bne	10f64 <strtoul+0x104>
   10fc8:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   10fcc:	e3a02010 	mov	r2, #16
   10fd0:	e2844002 	add	r4, r4, #2
   10fd4:	eaffffbf 	b	10ed8 <strtoul+0x78>
   10fd8:	e3e00000 	mvn	r0, #0
   10fdc:	e8bd8070 	pop	{r4, r5, r6, pc}

00010fe0 <char2int>:
   10fe0:	e12fff1e 	bx	lr

00010fe4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   10fe4:	e92d4010 	push	{r4, lr}
   10fe8:	e1a04000 	mov	r4, r0
   10fec:	e3a01000 	mov	r1, #0
   10ff0:	e24dd010 	sub	sp, sp, #16
   10ff4:	e3a02c01 	mov	r2, #256	; 0x100
   10ff8:	e5943020 	ldr	r3, [r4, #32]
   10ffc:	e28d0008 	add	r0, sp, #8
   11000:	e583100c 	str	r1, [r3, #12]
   11004:	e5832010 	str	r2, [r3, #16]
   11008:	ebffe2d3 	bl	9b5c <CBcmPropertyTags::CBcmPropertyTags()>
   1100c:	e3003408 	movw	r3, #1032	; 0x408
   11010:	e5942020 	ldr	r2, [r4, #32]
   11014:	e28d0008 	add	r0, sp, #8
   11018:	e58d3000 	str	r3, [sp]
   1101c:	e308100b 	movw	r1, #32779	; 0x800b
   11020:	e3401004 	movt	r1, #4
   11024:	e3003414 	movw	r3, #1044	; 0x414
   11028:	ebffe313 	bl	9c7c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1102c:	e3500000 	cmp	r0, #0
   11030:	e28d0008 	add	r0, sp, #8
   11034:	0a000003 	beq	11048 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x64>
   11038:	e5943020 	ldr	r3, [r4, #32]
   1103c:	e593300c 	ldr	r3, [r3, #12]
   11040:	e3530000 	cmp	r3, #0
   11044:	0a000003 	beq	11058 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
   11048:	ebffe2c9 	bl	9b74 <CBcmPropertyTags::~CBcmPropertyTags()>
   1104c:	e3a00000 	mov	r0, #0
   11050:	e28dd010 	add	sp, sp, #16
   11054:	e8bd8010 	pop	{r4, pc}
   11058:	ebffe2c5 	bl	9b74 <CBcmPropertyTags::~CBcmPropertyTags()>
   1105c:	e3a00001 	mov	r0, #1
   11060:	e28dd010 	add	sp, sp, #16
   11064:	e8bd8010 	pop	{r4, pc}

00011068 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   11068:	e92d4030 	push	{r4, r5, lr}
   1106c:	e3510000 	cmp	r1, #0
   11070:	13520000 	cmpne	r2, #0
   11074:	e1a04000 	mov	r4, r0
   11078:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   1107c:	e3a05000 	mov	r5, #0
   11080:	e8840006 	stm	r4, {r1, r2}
   11084:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
   11088:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
   1108c:	e5843010 	str	r3, [r4, #16]
   11090:	e584c00c 	str	ip, [r4, #12]
   11094:	e5840008 	str	r0, [r4, #8]
   11098:	e5845014 	str	r5, [r4, #20]
   1109c:	e5845018 	str	r5, [r4, #24]
   110a0:	e584501c 	str	r5, [r4, #28]
   110a4:	e5845020 	str	r5, [r4, #32]
   110a8:	1a000011 	bne	110f4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   110ac:	e28d000c 	add	r0, sp, #12
   110b0:	ebffe2a9 	bl	9b5c <CBcmPropertyTags::CBcmPropertyTags()>
   110b4:	e3a03014 	mov	r3, #20
   110b8:	e58d5000 	str	r5, [sp]
   110bc:	e28d000c 	add	r0, sp, #12
   110c0:	e3a01003 	mov	r1, #3
   110c4:	e3401004 	movt	r1, #4
   110c8:	e08d2003 	add	r2, sp, r3
   110cc:	ebffe2ea 	bl	9c7c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   110d0:	e1500005 	cmp	r0, r5
   110d4:	1a000027 	bne	11178 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
   110d8:	e3a02d0a 	mov	r2, #640	; 0x280
   110dc:	e3a03e1e 	mov	r3, #480	; 0x1e0
   110e0:	e884000c 	stm	r4, {r2, r3}
   110e4:	e28d000c 	add	r0, sp, #12
   110e8:	ebffe2a1 	bl	9b74 <CBcmPropertyTags::~CBcmPropertyTags()>
   110ec:	e5940008 	ldr	r0, [r4, #8]
   110f0:	e5943010 	ldr	r3, [r4, #16]
   110f4:	e3500000 	cmp	r0, #0
   110f8:	0a00001a 	beq	11168 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   110fc:	e594200c 	ldr	r2, [r4, #12]
   11100:	e3520000 	cmp	r2, #0
   11104:	0a000017 	beq	11168 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   11108:	e3530008 	cmp	r3, #8
   1110c:	8a000007 	bhi	11130 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
   11110:	e3000414 	movw	r0, #1044	; 0x414
   11114:	ebffe724 	bl	adac <operator new[](unsigned int)>
   11118:	e3a02b01 	mov	r2, #1024	; 0x400
   1111c:	e5840020 	str	r0, [r4, #32]
   11120:	e3a01000 	mov	r1, #0
   11124:	e2800014 	add	r0, r0, #20
   11128:	ebfffe95 	bl	10b84 <memset>
   1112c:	e5943010 	ldr	r3, [r4, #16]
   11130:	e3032bd4 	movw	r2, #15316	; 0x3bd4
   11134:	e3402005 	movt	r2, #5
   11138:	e5945000 	ldr	r5, [r4]
   1113c:	e1a00004 	mov	r0, r4
   11140:	e594e004 	ldr	lr, [r4, #4]
   11144:	e594c008 	ldr	ip, [r4, #8]
   11148:	e594100c 	ldr	r1, [r4, #12]
   1114c:	e582500c 	str	r5, [r2, #12]
   11150:	e582e010 	str	lr, [r2, #16]
   11154:	e582c020 	str	ip, [r2, #32]
   11158:	e5821024 	str	r1, [r2, #36]	; 0x24
   1115c:	e5823034 	str	r3, [r2, #52]	; 0x34
   11160:	e28dd02c 	add	sp, sp, #44	; 0x2c
   11164:	e8bd8030 	pop	{r4, r5, pc}
   11168:	e8940006 	ldm	r4, {r1, r2}
   1116c:	e5841008 	str	r1, [r4, #8]
   11170:	e584200c 	str	r2, [r4, #12]
   11174:	eaffffe3 	b	11108 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   11178:	e59d2020 	ldr	r2, [sp, #32]
   1117c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   11180:	e2421d0a 	sub	r1, r2, #640	; 0x280
   11184:	e5842000 	str	r2, [r4]
   11188:	e2432e1e 	sub	r2, r3, #480	; 0x1e0
   1118c:	e5843004 	str	r3, [r4, #4]
   11190:	e3520f96 	cmp	r2, #600	; 0x258
   11194:	93510c05 	cmpls	r1, #1280	; 0x500
   11198:	9affffd1 	bls	110e4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
   1119c:	eaffffcd 	b	110d8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>

000111a0 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   111a0:	e92d4010 	push	{r4, lr}
   111a4:	e1a04000 	mov	r4, r0
   111a8:	e5900020 	ldr	r0, [r0, #32]
   111ac:	ebffe6ff 	bl	adb0 <operator delete(void*)>
   111b0:	e1a00004 	mov	r0, r4
   111b4:	e8bd8010 	pop	{r4, pc}

000111b8 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   111b8:	e5903010 	ldr	r3, [r0, #16]
   111bc:	e3530008 	cmp	r3, #8
   111c0:	812fff1e 	bxhi	lr
   111c4:	e5900020 	ldr	r0, [r0, #32]
   111c8:	e1a03982 	lsl	r3, r2, #19
   111cc:	e1a0c5a2 	lsr	ip, r2, #11
   111d0:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   111d4:	e1a02282 	lsl	r2, r2, #5
   111d8:	e0801101 	add	r1, r0, r1, lsl #2
   111dc:	e183318c 	orr	r3, r3, ip, lsl #3
   111e0:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   111e4:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   111e8:	e1822003 	orr	r2, r2, r3
   111ec:	e5812014 	str	r2, [r1, #20]
   111f0:	e12fff1e 	bx	lr

000111f4 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   111f4:	e5903010 	ldr	r3, [r0, #16]
   111f8:	e3530008 	cmp	r3, #8
   111fc:	95903020 	ldrls	r3, [r0, #32]
   11200:	90831101 	addls	r1, r3, r1, lsl #2
   11204:	95812014 	strls	r2, [r1, #20]
   11208:	e12fff1e 	bx	lr

0001120c <CBcmFrameBuffer::Initialize()>:
   1120c:	e92d4070 	push	{r4, r5, r6, lr}
   11210:	e1a05000 	mov	r5, r0
   11214:	e3036bd4 	movw	r6, #15316	; 0x3bd4
   11218:	e3406005 	movt	r6, #5
   1121c:	e24dd008 	sub	sp, sp, #8
   11220:	e1a0000d 	mov	r0, sp
   11224:	ebffe24c 	bl	9b5c <CBcmPropertyTags::CBcmPropertyTags()>
   11228:	e1a01006 	mov	r1, r6
   1122c:	e1a0000d 	mov	r0, sp
   11230:	e3a02070 	mov	r2, #112	; 0x70
   11234:	ebffe253 	bl	9b88 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   11238:	e2504000 	subs	r4, r0, #0
   1123c:	0a00001e 	beq	112bc <CBcmFrameBuffer::Initialize()+0xb0>
   11240:	e596400c 	ldr	r4, [r6, #12]
   11244:	e3540000 	cmp	r4, #0
   11248:	0a00001b 	beq	112bc <CBcmFrameBuffer::Initialize()+0xb0>
   1124c:	e5964010 	ldr	r4, [r6, #16]
   11250:	e3540000 	cmp	r4, #0
   11254:	0a000018 	beq	112bc <CBcmFrameBuffer::Initialize()+0xb0>
   11258:	e5964020 	ldr	r4, [r6, #32]
   1125c:	e3540000 	cmp	r4, #0
   11260:	0a000015 	beq	112bc <CBcmFrameBuffer::Initialize()+0xb0>
   11264:	e5964024 	ldr	r4, [r6, #36]	; 0x24
   11268:	e3540000 	cmp	r4, #0
   1126c:	0a000012 	beq	112bc <CBcmFrameBuffer::Initialize()+0xb0>
   11270:	e5964034 	ldr	r4, [r6, #52]	; 0x34
   11274:	e3540000 	cmp	r4, #0
   11278:	0a00000f 	beq	112bc <CBcmFrameBuffer::Initialize()+0xb0>
   1127c:	e5964058 	ldr	r4, [r6, #88]	; 0x58
   11280:	e3540000 	cmp	r4, #0
   11284:	0a00000c 	beq	112bc <CBcmFrameBuffer::Initialize()+0xb0>
   11288:	e5953010 	ldr	r3, [r5, #16]
   1128c:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
   11290:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
   11294:	e3530008 	cmp	r3, #8
   11298:	e596306c 	ldr	r3, [r6, #108]	; 0x6c
   1129c:	e5854014 	str	r4, [r5, #20]
   112a0:	83a04001 	movhi	r4, #1
   112a4:	e5852018 	str	r2, [r5, #24]
   112a8:	e585301c 	str	r3, [r5, #28]
   112ac:	8a000002 	bhi	112bc <CBcmFrameBuffer::Initialize()+0xb0>
   112b0:	e1a00005 	mov	r0, r5
   112b4:	ebffff4a 	bl	10fe4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   112b8:	e1a04000 	mov	r4, r0
   112bc:	e1a0000d 	mov	r0, sp
   112c0:	ebffe22b 	bl	9b74 <CBcmPropertyTags::~CBcmPropertyTags()>
   112c4:	e1a00004 	mov	r0, r4
   112c8:	e28dd008 	add	sp, sp, #8
   112cc:	e8bd8070 	pop	{r4, r5, r6, pc}

000112d0 <CBcmFrameBuffer::GetWidth() const>:
   112d0:	e5900000 	ldr	r0, [r0]
   112d4:	e12fff1e 	bx	lr

000112d8 <CBcmFrameBuffer::GetHeight() const>:
   112d8:	e5900004 	ldr	r0, [r0, #4]
   112dc:	e12fff1e 	bx	lr

000112e0 <CBcmFrameBuffer::GetVirtWidth() const>:
   112e0:	e5900008 	ldr	r0, [r0, #8]
   112e4:	e12fff1e 	bx	lr

000112e8 <CBcmFrameBuffer::GetVirtHeight() const>:
   112e8:	e590000c 	ldr	r0, [r0, #12]
   112ec:	e12fff1e 	bx	lr

000112f0 <CBcmFrameBuffer::GetPitch() const>:
   112f0:	e590001c 	ldr	r0, [r0, #28]
   112f4:	e12fff1e 	bx	lr

000112f8 <CBcmFrameBuffer::GetDepth() const>:
   112f8:	e5900010 	ldr	r0, [r0, #16]
   112fc:	e12fff1e 	bx	lr

00011300 <CBcmFrameBuffer::GetBuffer() const>:
   11300:	e5900014 	ldr	r0, [r0, #20]
   11304:	e12fff1e 	bx	lr

00011308 <CBcmFrameBuffer::GetSize() const>:
   11308:	e5900018 	ldr	r0, [r0, #24]
   1130c:	e12fff1e 	bx	lr

00011310 <CBcmFrameBuffer::UpdatePalette()>:
   11310:	e5903010 	ldr	r3, [r0, #16]
   11314:	e3530008 	cmp	r3, #8
   11318:	9a000001 	bls	11324 <CBcmFrameBuffer::UpdatePalette()+0x14>
   1131c:	e3a00001 	mov	r0, #1
   11320:	e12fff1e 	bx	lr
   11324:	eaffff2e 	b	10fe4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00011328 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   11328:	e92d4070 	push	{r4, r5, r6, lr}
   1132c:	e1a05001 	mov	r5, r1
   11330:	e1a06002 	mov	r6, r2
   11334:	e24dd028 	sub	sp, sp, #40	; 0x28
   11338:	e28d000c 	add	r0, sp, #12
   1133c:	ebffe206 	bl	9b5c <CBcmPropertyTags::CBcmPropertyTags()>
   11340:	e3a03008 	mov	r3, #8
   11344:	e58d3000 	str	r3, [sp]
   11348:	e3a03014 	mov	r3, #20
   1134c:	e28d000c 	add	r0, sp, #12
   11350:	e3081009 	movw	r1, #32777	; 0x8009
   11354:	e3401004 	movt	r1, #4
   11358:	e08d2003 	add	r2, sp, r3
   1135c:	e58d5020 	str	r5, [sp, #32]
   11360:	e58d6024 	str	r6, [sp, #36]	; 0x24
   11364:	ebffe244 	bl	9c7c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11368:	e2504000 	subs	r4, r0, #0
   1136c:	0a000006 	beq	1138c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   11370:	e59d3020 	ldr	r3, [sp, #32]
   11374:	e1550003 	cmp	r5, r3
   11378:	13a04000 	movne	r4, #0
   1137c:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   11380:	00444006 	subeq	r4, r4, r6
   11384:	016f4f14 	clzeq	r4, r4
   11388:	01a042a4 	lsreq	r4, r4, #5
   1138c:	e28d000c 	add	r0, sp, #12
   11390:	ebffe1f7 	bl	9b74 <CBcmPropertyTags::~CBcmPropertyTags()>
   11394:	e1a00004 	mov	r0, r4
   11398:	e28dd028 	add	sp, sp, #40	; 0x28
   1139c:	e8bd8070 	pop	{r4, r5, r6, pc}

000113a0 <CDevice::~CDevice()>:
   113a0:	e12fff1e 	bx	lr

000113a4 <CDevice::Read(void*, unsigned int)>:
   113a4:	e3e00000 	mvn	r0, #0
   113a8:	e12fff1e 	bx	lr

000113ac <CDevice::Seek(unsigned long long)>:
   113ac:	e3e00000 	mvn	r0, #0
   113b0:	e3e01000 	mvn	r1, #0
   113b4:	e12fff1e 	bx	lr

000113b8 <CDevice::~CDevice()>:
   113b8:	e92d4010 	push	{r4, lr}
   113bc:	e1a04000 	mov	r4, r0
   113c0:	ebffe67a 	bl	adb0 <operator delete(void*)>
   113c4:	e1a00004 	mov	r0, r4
   113c8:	e8bd8010 	pop	{r4, pc}

000113cc <CDevice::CDevice()>:
   113cc:	e59f3004 	ldr	r3, [pc, #4]	; 113d8 <CDevice::CDevice()+0xc>
   113d0:	e5803000 	str	r3, [r0]
   113d4:	e12fff1e 	bx	lr
   113d8:	00053b3c 	.word	0x00053b3c
