
kernel7.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020012 	cps	#18
    803c:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8040:	f1020017 	cps	#23
    8044:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8048:	f102001b 	cps	#27
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001f 	cps	#31
    8054:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8058:	ea0008ec 	b	a410 <sysinit>

0000805c <_start_secondary>:
    805c:	f57ff04f 	dsb	sy
    8060:	e320f003 	wfi
    8064:	eafffffd 	b	8060 <_start_secondary+0x4>

00008068 <main>:
    8068:	e92d4010 	push	{r4, lr}
    806c:	e24ddebe 	sub	sp, sp, #3040	; 0xbe0
    8070:	e1a0000d 	mov	r0, sp
    8074:	eb000011 	bl	80c0 <CKernel::CKernel()>
    8078:	e1a0000d 	mov	r0, sp
    807c:	eb00003f 	bl	8180 <CKernel::Initialize()>
    8080:	e2504000 	subs	r4, r0, #0
    8084:	0a000004 	beq	809c <main+0x34>
    8088:	e1a0000d 	mov	r0, sp
    808c:	eb000062 	bl	821c <CKernel::Run()>
    8090:	e3500002 	cmp	r0, #2
    8094:	13a04000 	movne	r4, #0
    8098:	0a000005 	beq	80b4 <main+0x4c>
    809c:	eb0008ce 	bl	a3dc <halt>
    80a0:	e1a0000d 	mov	r0, sp
    80a4:	eb000067 	bl	8248 <CKernel::~CKernel()>
    80a8:	e1a00004 	mov	r0, r4
    80ac:	e28ddebe 	add	sp, sp, #3040	; 0xbe0
    80b0:	e8bd8010 	pop	{r4, pc}
    80b4:	eb0008cc 	bl	a3ec <reboot>
    80b8:	e3a04001 	mov	r4, #1
    80bc:	eafffff7 	b	80a0 <main+0x38>

000080c0 <CKernel::CKernel()>:
    80c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80c4:	e3a01001 	mov	r1, #1
    80c8:	e1a04000 	mov	r4, r0
    80cc:	e284501c 	add	r5, r4, #28
    80d0:	eb000856 	bl	a230 <CMemorySystem::CMemorySystem(int)>
    80d4:	e2840010 	add	r0, r4, #16
    80d8:	e2847e95 	add	r7, r4, #2384	; 0x950
    80dc:	eb00039c 	bl	8f54 <CActLED::CActLED()>
    80e0:	e1a00005 	mov	r0, r5
    80e4:	eb000c3e 	bl	b1e4 <CKernelOptions::CKernelOptions()>
    80e8:	e2840e85 	add	r0, r4, #2128	; 0x850
    80ec:	e280000c 	add	r0, r0, #12
    80f0:	e2846eb9 	add	r6, r4, #2960	; 0xb90
    80f4:	eb0012e6 	bl	cc94 <CDeviceNameService::CDeviceNameService()>
    80f8:	e1a00005 	mov	r0, r5
    80fc:	eb000c04 	bl	b114 <CKernelOptions::GetWidth() const>
    8100:	e1a08000 	mov	r8, r0
    8104:	e1a00005 	mov	r0, r5
    8108:	eb000c03 	bl	b11c <CKernelOptions::GetHeight() const>
    810c:	e1a02000 	mov	r2, r0
    8110:	e2840e86 	add	r0, r4, #2144	; 0x860
    8114:	e3a03000 	mov	r3, #0
    8118:	e1a01008 	mov	r1, r8
    811c:	e2800004 	add	r0, r0, #4
    8120:	eb000e01 	bl	b92c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    8124:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    8128:	e2800004 	add	r0, r0, #4
    812c:	eb0014cc 	bl	d464 <CSerialDevice::CSerialDevice()>
    8130:	e2840d25 	add	r0, r4, #2368	; 0x940
    8134:	e280000c 	add	r0, r0, #12
    8138:	eb0018a9 	bl	e3e4 <CExceptionHandler::CExceptionHandler()>
    813c:	e1a00007 	mov	r0, r7
    8140:	eb001971 	bl	e70c <CInterruptSystem::CInterruptSystem()>
    8144:	e1a01007 	mov	r1, r7
    8148:	e1a00006 	mov	r0, r6
    814c:	eb0008d9 	bl	a4b8 <CTimer::CTimer(CInterruptSystem*)>
    8150:	e1a00005 	mov	r0, r5
    8154:	eb000bf5 	bl	b130 <CKernelOptions::GetLogLevel() const>
    8158:	e1a01000 	mov	r1, r0
    815c:	e2840ebb 	add	r0, r4, #2992	; 0xbb0
    8160:	e1a02006 	mov	r2, r6
    8164:	e2800008 	add	r0, r0, #8
    8168:	eb001377 	bl	cf4c <CLogger::CLogger(unsigned int, CTimer*)>
    816c:	e2840ebd 	add	r0, r4, #3024	; 0xbd0
    8170:	e2800004 	add	r0, r0, #4
    8174:	eb000050 	bl	82bc <Nes::Nes()>
    8178:	e1a00004 	mov	r0, r4
    817c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008180 <CKernel::Initialize()>:
    8180:	e92d4070 	push	{r4, r5, r6, lr}
    8184:	e2804e86 	add	r4, r0, #2144	; 0x860
    8188:	e2844004 	add	r4, r4, #4
    818c:	e1a05000 	mov	r5, r0
    8190:	e1a00004 	mov	r0, r4
    8194:	eb00117b 	bl	c788 <CScreenDevice::Initialize()>
    8198:	e3500000 	cmp	r0, #0
    819c:	1a000001 	bne	81a8 <CKernel::Initialize()+0x28>
    81a0:	e3a00000 	mov	r0, #0
    81a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    81a8:	e2850d23 	add	r0, r5, #2240	; 0x8c0
    81ac:	e3a01cc2 	mov	r1, #49664	; 0xc200
    81b0:	e3401001 	movt	r1, #1
    81b4:	e2800004 	add	r0, r0, #4
    81b8:	eb0014c7 	bl	d4dc <CSerialDevice::Initialize(unsigned int)>
    81bc:	e3500000 	cmp	r0, #0
    81c0:	0afffff6 	beq	81a0 <CKernel::Initialize()+0x20>
    81c4:	e285001c 	add	r0, r5, #28
    81c8:	eb000bd5 	bl	b124 <CKernelOptions::GetLogDevice() const>
    81cc:	e1a01000 	mov	r1, r0
    81d0:	e2850e85 	add	r0, r5, #2128	; 0x850
    81d4:	e3a02000 	mov	r2, #0
    81d8:	e280000c 	add	r0, r0, #12
    81dc:	eb001308 	bl	ce04 <CDeviceNameService::GetDevice(char const*, int)>
    81e0:	e3500000 	cmp	r0, #0
    81e4:	11a01000 	movne	r1, r0
    81e8:	e2850ebb 	add	r0, r5, #2992	; 0xbb0
    81ec:	01a01004 	moveq	r1, r4
    81f0:	e2800008 	add	r0, r0, #8
    81f4:	eb00145b 	bl	d368 <CLogger::Initialize(CDevice*)>
    81f8:	e3500000 	cmp	r0, #0
    81fc:	0affffe7 	beq	81a0 <CKernel::Initialize()+0x20>
    8200:	e2850e95 	add	r0, r5, #2384	; 0x950
    8204:	eb001953 	bl	e758 <CInterruptSystem::Initialize()>
    8208:	e3500000 	cmp	r0, #0
    820c:	0affffe3 	beq	81a0 <CKernel::Initialize()+0x20>
    8210:	e2850eb9 	add	r0, r5, #2960	; 0xb90
    8214:	e8bd4070 	pop	{r4, r5, r6, lr}
    8218:	ea000b0f 	b	ae5c <CTimer::Initialize()>

0000821c <CKernel::Run()>:
    821c:	e2800ebb 	add	r0, r0, #2992	; 0xbb0
    8220:	e92d4010 	push	{r4, lr}
    8224:	e2800008 	add	r0, r0, #8
    8228:	e3a02003 	mov	r2, #3
    822c:	e300394c 	movw	r3, #2380	; 0x94c
    8230:	e3403001 	movt	r3, #1
    8234:	e3001944 	movw	r1, #2372	; 0x944
    8238:	e3401001 	movt	r1, #1
    823c:	eb00143d 	bl	d338 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8240:	e3a00001 	mov	r0, #1
    8244:	e8bd8010 	pop	{r4, pc}

00008248 <CKernel::~CKernel()>:
    8248:	e92d4010 	push	{r4, lr}
    824c:	e1a04000 	mov	r4, r0
    8250:	e2800ebb 	add	r0, r0, #2992	; 0xbb0
    8254:	e2800008 	add	r0, r0, #8
    8258:	eb00134d 	bl	cf94 <CLogger::~CLogger()>
    825c:	e2840eb9 	add	r0, r4, #2960	; 0xb90
    8260:	eb0008b4 	bl	a538 <CTimer::~CTimer()>
    8264:	e2840e95 	add	r0, r4, #2384	; 0x950
    8268:	eb001935 	bl	e744 <CInterruptSystem::~CInterruptSystem()>
    826c:	e2840d25 	add	r0, r4, #2368	; 0x940
    8270:	e280000c 	add	r0, r0, #12
    8274:	eb00187e 	bl	e474 <CExceptionHandler::~CExceptionHandler()>
    8278:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    827c:	e2800004 	add	r0, r0, #4
    8280:	eb0014e6 	bl	d620 <CSerialDevice::~CSerialDevice()>
    8284:	e2840e86 	add	r0, r4, #2144	; 0x860
    8288:	e2800004 	add	r0, r0, #4
    828c:	eb000d50 	bl	b7d4 <CScreenDevice::~CScreenDevice()>
    8290:	e2840e85 	add	r0, r4, #2128	; 0x850
    8294:	e280000c 	add	r0, r0, #12
    8298:	eb001290 	bl	cce0 <CDeviceNameService::~CDeviceNameService()>
    829c:	e284001c 	add	r0, r4, #28
    82a0:	eb000b96 	bl	b100 <CKernelOptions::~CKernelOptions()>
    82a4:	e2840010 	add	r0, r4, #16
    82a8:	eb000304 	bl	8ec0 <CActLED::~CActLED()>
    82ac:	e1a00004 	mov	r0, r4
    82b0:	eb00077c 	bl	a0a8 <CMemorySystem::~CMemorySystem()>
    82b4:	e1a00004 	mov	r0, r4
    82b8:	e8bd8010 	pop	{r4, pc}

000082bc <Nes::Nes()>:
    82bc:	e92d4070 	push	{r4, r5, r6, lr}
    82c0:	e1a04000 	mov	r4, r0
    82c4:	e3a0001c 	mov	r0, #28
    82c8:	e3400004 	movt	r0, #4
    82cc:	eb000810 	bl	a314 <operator new(unsigned int)>
    82d0:	e1a05000 	mov	r5, r0
    82d4:	e3a0e010 	mov	lr, #16
    82d8:	e3a0cc02 	mov	ip, #512	; 0x200
    82dc:	e3a03010 	mov	r3, #16
    82e0:	e3403004 	movt	r3, #4
    82e4:	e585e000 	str	lr, [r5]
    82e8:	e1a02003 	mov	r2, r3
    82ec:	e585c004 	str	ip, [r5, #4]
    82f0:	e280000c 	add	r0, r0, #12
    82f4:	e5853008 	str	r3, [r5, #8]
    82f8:	e3001970 	movw	r1, #2416	; 0x970
    82fc:	e3401001 	movt	r1, #1
    8300:	eb000b4f 	bl	b044 <memcpy>
    8304:	e5845000 	str	r5, [r4]
    8308:	e3000918 	movw	r0, #2328	; 0x918
    830c:	eb000800 	bl	a314 <operator new(unsigned int)>
    8310:	e5941000 	ldr	r1, [r4]
    8314:	e1a05000 	mov	r5, r0
    8318:	eb000245 	bl	8c34 <Cpu::Cpu(Rom const*)>
    831c:	e5845004 	str	r5, [r4, #4]
    8320:	e3a000c8 	mov	r0, #200	; 0xc8
    8324:	e3400001 	movt	r0, #1
    8328:	eb0007f9 	bl	a314 <operator new(unsigned int)>
    832c:	e5941000 	ldr	r1, [r4]
    8330:	e1a05000 	mov	r5, r0
    8334:	eb000294 	bl	8d8c <Ppu::Ppu(Rom const*)>
    8338:	e5845008 	str	r5, [r4, #8]
    833c:	e1a00004 	mov	r0, r4
    8340:	e8bd8070 	pop	{r4, r5, r6, pc}

00008344 <Cpu::ASL_ACC()>:
    8344:	e92d4010 	push	{r4, lr}
    8348:	e3a0c001 	mov	ip, #1
    834c:	e8904010 	ldm	r0, {r4, lr}
    8350:	e5de3003 	ldrb	r3, [lr, #3]
    8354:	e1de20d6 	ldrsb	r2, [lr, #6]
    8358:	e3c3107f 	bic	r1, r3, #127	; 0x7f
    835c:	e5d44007 	ldrb	r4, [r4, #7]
    8360:	e2611000 	rsb	r1, r1, #0
    8364:	e1a03c13 	lsl	r3, r3, ip
    8368:	e0211002 	eor	r1, r1, r2
    836c:	e6ef3073 	uxtb	r3, r3
    8370:	e5ce3003 	strb	r3, [lr, #3]
    8374:	e2633000 	rsb	r3, r3, #0
    8378:	e001141c 	and	r1, r1, ip, lsl r4
    837c:	e0211002 	eor	r1, r1, r2
    8380:	e5ce1006 	strb	r1, [lr, #6]
    8384:	e8900003 	ldm	r0, {r0, r1}
    8388:	e1d120d6 	ldrsb	r2, [r1, #6]
    838c:	e5d04006 	ldrb	r4, [r0, #6]
    8390:	e0233002 	eor	r3, r3, r2
    8394:	e003341c 	and	r3, r3, ip, lsl r4
    8398:	e0233002 	eor	r3, r3, r2
    839c:	e6af3073 	sxtb	r3, r3
    83a0:	e5c13006 	strb	r3, [r1, #6]
    83a4:	e1de20d3 	ldrsb	r2, [lr, #3]
    83a8:	e5d00000 	ldrb	r0, [r0]
    83ac:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    83b0:	e0222003 	eor	r2, r2, r3
    83b4:	e002201c 	and	r2, r2, ip, lsl r0
    83b8:	e0233002 	eor	r3, r3, r2
    83bc:	e5c13006 	strb	r3, [r1, #6]
    83c0:	e8bd8010 	pop	{r4, pc}

000083c4 <Cpu::UNIMP()>:
    83c4:	e12fff1e 	bx	lr

000083c8 <Cpu::ORA_IND_X()>:
    83c8:	e92d4070 	push	{r4, r5, r6, lr}
    83cc:	e1a04000 	mov	r4, r0
    83d0:	e9900024 	ldmib	r0, {r2, r5}
    83d4:	e1d230b0 	ldrh	r3, [r2]
    83d8:	e5d22004 	ldrb	r2, [r2, #4]
    83dc:	e0853003 	add	r3, r5, r3
    83e0:	e5d31001 	ldrb	r1, [r3, #1]
    83e4:	eb000285 	bl	8e00 <Cpu::PreIndexedIndirect(unsigned char, unsigned char) const>
    83e8:	e594c004 	ldr	ip, [r4, #4]
    83ec:	e7d53000 	ldrb	r3, [r5, r0]
    83f0:	e3a00001 	mov	r0, #1
    83f4:	e5dc1003 	ldrb	r1, [ip, #3]
    83f8:	e1dc20d6 	ldrsb	r2, [ip, #6]
    83fc:	e1833001 	orr	r3, r3, r1
    8400:	e5cc3003 	strb	r3, [ip, #3]
    8404:	e2631000 	rsb	r1, r3, #0
    8408:	e0211002 	eor	r1, r1, r2
    840c:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    8410:	e594e000 	ldr	lr, [r4]
    8414:	e2633000 	rsb	r3, r3, #0
    8418:	e5de4006 	ldrb	r4, [lr, #6]
    841c:	e5dee000 	ldrb	lr, [lr]
    8420:	e0011410 	and	r1, r1, r0, lsl r4
    8424:	e0222001 	eor	r2, r2, r1
    8428:	e6af2072 	sxtb	r2, r2
    842c:	e0233002 	eor	r3, r3, r2
    8430:	e0033e10 	and	r3, r3, r0, lsl lr
    8434:	e0233002 	eor	r3, r3, r2
    8438:	e5cc3006 	strb	r3, [ip, #6]
    843c:	e8bd8070 	pop	{r4, r5, r6, pc}

00008440 <Cpu::ORA_ZP()>:
    8440:	e92d4070 	push	{r4, r5, r6, lr}
    8444:	e1a04000 	mov	r4, r0
    8448:	e9900028 	ldmib	r0, {r3, r5}
    844c:	e1d330b0 	ldrh	r3, [r3]
    8450:	e0853003 	add	r3, r5, r3
    8454:	e5d31001 	ldrb	r1, [r3, #1]
    8458:	eb000257 	bl	8dbc <Cpu::ZeroPage(unsigned char) const>
    845c:	e594c004 	ldr	ip, [r4, #4]
    8460:	e7d53000 	ldrb	r3, [r5, r0]
    8464:	e3a00001 	mov	r0, #1
    8468:	e5dc1003 	ldrb	r1, [ip, #3]
    846c:	e1dc20d6 	ldrsb	r2, [ip, #6]
    8470:	e1833001 	orr	r3, r3, r1
    8474:	e5cc3003 	strb	r3, [ip, #3]
    8478:	e2631000 	rsb	r1, r3, #0
    847c:	e0211002 	eor	r1, r1, r2
    8480:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    8484:	e594e000 	ldr	lr, [r4]
    8488:	e2633000 	rsb	r3, r3, #0
    848c:	e5de4006 	ldrb	r4, [lr, #6]
    8490:	e5dee000 	ldrb	lr, [lr]
    8494:	e0011410 	and	r1, r1, r0, lsl r4
    8498:	e0222001 	eor	r2, r2, r1
    849c:	e6af2072 	sxtb	r2, r2
    84a0:	e0233002 	eor	r3, r3, r2
    84a4:	e0033e10 	and	r3, r3, r0, lsl lr
    84a8:	e0233002 	eor	r3, r3, r2
    84ac:	e5cc3006 	strb	r3, [ip, #6]
    84b0:	e8bd8070 	pop	{r4, r5, r6, pc}

000084b4 <Cpu::ASL_ZP()>:
    84b4:	e990000c 	ldmib	r0, {r2, r3}
    84b8:	e92d4070 	push	{r4, r5, r6, lr}
    84bc:	e1a04000 	mov	r4, r0
    84c0:	e1d220b0 	ldrh	r2, [r2]
    84c4:	e0833002 	add	r3, r3, r2
    84c8:	e5d31001 	ldrb	r1, [r3, #1]
    84cc:	eb00023a 	bl	8dbc <Cpu::ZeroPage(unsigned char) const>
    84d0:	e594e008 	ldr	lr, [r4, #8]
    84d4:	e8941020 	ldm	r4, {r5, ip}
    84d8:	e3a01001 	mov	r1, #1
    84dc:	e19e30d0 	ldrsb	r3, [lr, r0]
    84e0:	e1dc20d6 	ldrsb	r2, [ip, #6]
    84e4:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    84e8:	e5d55007 	ldrb	r5, [r5, #7]
    84ec:	e0233002 	eor	r3, r3, r2
    84f0:	e0033511 	and	r3, r3, r1, lsl r5
    84f4:	e0233002 	eor	r3, r3, r2
    84f8:	e5cc3006 	strb	r3, [ip, #6]
    84fc:	e7de3000 	ldrb	r3, [lr, r0]
    8500:	e1a03113 	lsl	r3, r3, r1
    8504:	e6ef3073 	uxtb	r3, r3
    8508:	e7ce3000 	strb	r3, [lr, r0]
    850c:	e2633000 	rsb	r3, r3, #0
    8510:	e8941010 	ldm	r4, {r4, ip}
    8514:	e1dc20d6 	ldrsb	r2, [ip, #6]
    8518:	e5d45006 	ldrb	r5, [r4, #6]
    851c:	e0233002 	eor	r3, r3, r2
    8520:	e0033511 	and	r3, r3, r1, lsl r5
    8524:	e0233002 	eor	r3, r3, r2
    8528:	e6af3073 	sxtb	r3, r3
    852c:	e5cc3006 	strb	r3, [ip, #6]
    8530:	e19e20d0 	ldrsb	r2, [lr, r0]
    8534:	e5d40000 	ldrb	r0, [r4]
    8538:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    853c:	e0222003 	eor	r2, r2, r3
    8540:	e0022011 	and	r2, r2, r1, lsl r0
    8544:	e0233002 	eor	r3, r3, r2
    8548:	e5cc3006 	strb	r3, [ip, #6]
    854c:	e8bd8070 	pop	{r4, r5, r6, pc}

00008550 <Cpu::ORA_IMM()>:
    8550:	e990000c 	ldmib	r0, {r2, r3}
    8554:	e92d4010 	push	{r4, lr}
    8558:	e1a04000 	mov	r4, r0
    855c:	e1d220b0 	ldrh	r2, [r2]
    8560:	e0833002 	add	r3, r3, r2
    8564:	e5d31001 	ldrb	r1, [r3, #1]
    8568:	eb000211 	bl	8db4 <Cpu::Immediate(unsigned char) const>
    856c:	e5941004 	ldr	r1, [r4, #4]
    8570:	e3a0c001 	mov	ip, #1
    8574:	e5d13003 	ldrb	r3, [r1, #3]
    8578:	e1d120d6 	ldrsb	r2, [r1, #6]
    857c:	e1800003 	orr	r0, r0, r3
    8580:	e6ef0070 	uxtb	r0, r0
    8584:	e5c10003 	strb	r0, [r1, #3]
    8588:	e2603000 	rsb	r3, r0, #0
    858c:	e0233002 	eor	r3, r3, r2
    8590:	e3c0007f 	bic	r0, r0, #127	; 0x7f
    8594:	e594e000 	ldr	lr, [r4]
    8598:	e2600000 	rsb	r0, r0, #0
    859c:	e5de4006 	ldrb	r4, [lr, #6]
    85a0:	e5dee000 	ldrb	lr, [lr]
    85a4:	e003341c 	and	r3, r3, ip, lsl r4
    85a8:	e0222003 	eor	r2, r2, r3
    85ac:	e6af2072 	sxtb	r2, r2
    85b0:	e0200002 	eor	r0, r0, r2
    85b4:	e0000e1c 	and	r0, r0, ip, lsl lr
    85b8:	e0222000 	eor	r2, r2, r0
    85bc:	e5c12006 	strb	r2, [r1, #6]
    85c0:	e8bd8010 	pop	{r4, pc}

000085c4 <Cpu::ORA_ABS()>:
    85c4:	e92d4070 	push	{r4, r5, r6, lr}
    85c8:	e1a04000 	mov	r4, r0
    85cc:	e9900028 	ldmib	r0, {r3, r5}
    85d0:	e1d330b0 	ldrh	r3, [r3]
    85d4:	e0853003 	add	r3, r5, r3
    85d8:	e5d32002 	ldrb	r2, [r3, #2]
    85dc:	e5d31001 	ldrb	r1, [r3, #1]
    85e0:	eb0001f7 	bl	8dc4 <Cpu::Absolute(unsigned char, unsigned char) const>
    85e4:	e594c004 	ldr	ip, [r4, #4]
    85e8:	e7d53000 	ldrb	r3, [r5, r0]
    85ec:	e3a00001 	mov	r0, #1
    85f0:	e5dc1003 	ldrb	r1, [ip, #3]
    85f4:	e1dc20d6 	ldrsb	r2, [ip, #6]
    85f8:	e1833001 	orr	r3, r3, r1
    85fc:	e5cc3003 	strb	r3, [ip, #3]
    8600:	e2631000 	rsb	r1, r3, #0
    8604:	e0211002 	eor	r1, r1, r2
    8608:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    860c:	e594e000 	ldr	lr, [r4]
    8610:	e2633000 	rsb	r3, r3, #0
    8614:	e5de4006 	ldrb	r4, [lr, #6]
    8618:	e5dee000 	ldrb	lr, [lr]
    861c:	e0011410 	and	r1, r1, r0, lsl r4
    8620:	e0222001 	eor	r2, r2, r1
    8624:	e6af2072 	sxtb	r2, r2
    8628:	e0233002 	eor	r3, r3, r2
    862c:	e0033e10 	and	r3, r3, r0, lsl lr
    8630:	e0233002 	eor	r3, r3, r2
    8634:	e5cc3006 	strb	r3, [ip, #6]
    8638:	e8bd8070 	pop	{r4, r5, r6, pc}

0000863c <Cpu::ASL_ABS()>:
    863c:	e990000c 	ldmib	r0, {r2, r3}
    8640:	e92d4070 	push	{r4, r5, r6, lr}
    8644:	e1a04000 	mov	r4, r0
    8648:	e1d220b0 	ldrh	r2, [r2]
    864c:	e0833002 	add	r3, r3, r2
    8650:	e5d32002 	ldrb	r2, [r3, #2]
    8654:	e5d31001 	ldrb	r1, [r3, #1]
    8658:	eb0001d9 	bl	8dc4 <Cpu::Absolute(unsigned char, unsigned char) const>
    865c:	e594e008 	ldr	lr, [r4, #8]
    8660:	e8941020 	ldm	r4, {r5, ip}
    8664:	e3a01001 	mov	r1, #1
    8668:	e19e30d0 	ldrsb	r3, [lr, r0]
    866c:	e1dc20d6 	ldrsb	r2, [ip, #6]
    8670:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    8674:	e5d55007 	ldrb	r5, [r5, #7]
    8678:	e0233002 	eor	r3, r3, r2
    867c:	e0033511 	and	r3, r3, r1, lsl r5
    8680:	e0233002 	eor	r3, r3, r2
    8684:	e5cc3006 	strb	r3, [ip, #6]
    8688:	e7de3000 	ldrb	r3, [lr, r0]
    868c:	e1a03113 	lsl	r3, r3, r1
    8690:	e6ef3073 	uxtb	r3, r3
    8694:	e7ce3000 	strb	r3, [lr, r0]
    8698:	e2633000 	rsb	r3, r3, #0
    869c:	e8941010 	ldm	r4, {r4, ip}
    86a0:	e1dc20d6 	ldrsb	r2, [ip, #6]
    86a4:	e5d45006 	ldrb	r5, [r4, #6]
    86a8:	e0233002 	eor	r3, r3, r2
    86ac:	e0033511 	and	r3, r3, r1, lsl r5
    86b0:	e0233002 	eor	r3, r3, r2
    86b4:	e6af3073 	sxtb	r3, r3
    86b8:	e5cc3006 	strb	r3, [ip, #6]
    86bc:	e19e20d0 	ldrsb	r2, [lr, r0]
    86c0:	e5d40000 	ldrb	r0, [r4]
    86c4:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    86c8:	e0222003 	eor	r2, r2, r3
    86cc:	e0022011 	and	r2, r2, r1, lsl r0
    86d0:	e0233002 	eor	r3, r3, r2
    86d4:	e5cc3006 	strb	r3, [ip, #6]
    86d8:	e8bd8070 	pop	{r4, r5, r6, pc}

000086dc <Cpu::ORA_IND_Y()>:
    86dc:	e92d4070 	push	{r4, r5, r6, lr}
    86e0:	e1a04000 	mov	r4, r0
    86e4:	e9900024 	ldmib	r0, {r2, r5}
    86e8:	e1d230b0 	ldrh	r3, [r2]
    86ec:	e5d22005 	ldrb	r2, [r2, #5]
    86f0:	e0853003 	add	r3, r5, r3
    86f4:	e5d31001 	ldrb	r1, [r3, #1]
    86f8:	eb0001c8 	bl	8e20 <Cpu::PostIndexedIndirect(unsigned char, unsigned char) const>
    86fc:	e594c004 	ldr	ip, [r4, #4]
    8700:	e7d53000 	ldrb	r3, [r5, r0]
    8704:	e3a00001 	mov	r0, #1
    8708:	e5dc1003 	ldrb	r1, [ip, #3]
    870c:	e1dc20d6 	ldrsb	r2, [ip, #6]
    8710:	e1833001 	orr	r3, r3, r1
    8714:	e5cc3003 	strb	r3, [ip, #3]
    8718:	e2631000 	rsb	r1, r3, #0
    871c:	e0211002 	eor	r1, r1, r2
    8720:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    8724:	e594e000 	ldr	lr, [r4]
    8728:	e2633000 	rsb	r3, r3, #0
    872c:	e5de4006 	ldrb	r4, [lr, #6]
    8730:	e5dee000 	ldrb	lr, [lr]
    8734:	e0011410 	and	r1, r1, r0, lsl r4
    8738:	e0222001 	eor	r2, r2, r1
    873c:	e6af2072 	sxtb	r2, r2
    8740:	e0233002 	eor	r3, r3, r2
    8744:	e0033e10 	and	r3, r3, r0, lsl lr
    8748:	e0233002 	eor	r3, r3, r2
    874c:	e5cc3006 	strb	r3, [ip, #6]
    8750:	e8bd8070 	pop	{r4, r5, r6, pc}

00008754 <Cpu::ORA_ZP_X()>:
    8754:	e92d4070 	push	{r4, r5, r6, lr}
    8758:	e1a04000 	mov	r4, r0
    875c:	e9900024 	ldmib	r0, {r2, r5}
    8760:	e1d230b0 	ldrh	r3, [r2]
    8764:	e5d22004 	ldrb	r2, [r2, #4]
    8768:	e0853003 	add	r3, r5, r3
    876c:	e5d31001 	ldrb	r1, [r3, #1]
    8770:	eb000199 	bl	8ddc <Cpu::ZeroPageIndexed(unsigned char, unsigned char) const>
    8774:	e594c004 	ldr	ip, [r4, #4]
    8778:	e7d53000 	ldrb	r3, [r5, r0]
    877c:	e3a00001 	mov	r0, #1
    8780:	e5dc1003 	ldrb	r1, [ip, #3]
    8784:	e1dc20d6 	ldrsb	r2, [ip, #6]
    8788:	e1833001 	orr	r3, r3, r1
    878c:	e5cc3003 	strb	r3, [ip, #3]
    8790:	e2631000 	rsb	r1, r3, #0
    8794:	e0211002 	eor	r1, r1, r2
    8798:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    879c:	e594e000 	ldr	lr, [r4]
    87a0:	e2633000 	rsb	r3, r3, #0
    87a4:	e5de4006 	ldrb	r4, [lr, #6]
    87a8:	e5dee000 	ldrb	lr, [lr]
    87ac:	e0011410 	and	r1, r1, r0, lsl r4
    87b0:	e0222001 	eor	r2, r2, r1
    87b4:	e6af2072 	sxtb	r2, r2
    87b8:	e0233002 	eor	r3, r3, r2
    87bc:	e0033e10 	and	r3, r3, r0, lsl lr
    87c0:	e0233002 	eor	r3, r3, r2
    87c4:	e5cc3006 	strb	r3, [ip, #6]
    87c8:	e8bd8070 	pop	{r4, r5, r6, pc}

000087cc <Cpu::ASL_ZP_X()>:
    87cc:	e990000c 	ldmib	r0, {r2, r3}
    87d0:	e92d4070 	push	{r4, r5, r6, lr}
    87d4:	e1a04000 	mov	r4, r0
    87d8:	e1d210b0 	ldrh	r1, [r2]
    87dc:	e5d22004 	ldrb	r2, [r2, #4]
    87e0:	e0833001 	add	r3, r3, r1
    87e4:	e5d31001 	ldrb	r1, [r3, #1]
    87e8:	eb00017b 	bl	8ddc <Cpu::ZeroPageIndexed(unsigned char, unsigned char) const>
    87ec:	e594e008 	ldr	lr, [r4, #8]
    87f0:	e8941020 	ldm	r4, {r5, ip}
    87f4:	e3a01001 	mov	r1, #1
    87f8:	e19e30d0 	ldrsb	r3, [lr, r0]
    87fc:	e1dc20d6 	ldrsb	r2, [ip, #6]
    8800:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    8804:	e5d55007 	ldrb	r5, [r5, #7]
    8808:	e0233002 	eor	r3, r3, r2
    880c:	e0033511 	and	r3, r3, r1, lsl r5
    8810:	e0233002 	eor	r3, r3, r2
    8814:	e5cc3006 	strb	r3, [ip, #6]
    8818:	e7de3000 	ldrb	r3, [lr, r0]
    881c:	e1a03113 	lsl	r3, r3, r1
    8820:	e6ef3073 	uxtb	r3, r3
    8824:	e7ce3000 	strb	r3, [lr, r0]
    8828:	e2633000 	rsb	r3, r3, #0
    882c:	e8941010 	ldm	r4, {r4, ip}
    8830:	e1dc20d6 	ldrsb	r2, [ip, #6]
    8834:	e5d45006 	ldrb	r5, [r4, #6]
    8838:	e0233002 	eor	r3, r3, r2
    883c:	e0033511 	and	r3, r3, r1, lsl r5
    8840:	e0233002 	eor	r3, r3, r2
    8844:	e6af3073 	sxtb	r3, r3
    8848:	e5cc3006 	strb	r3, [ip, #6]
    884c:	e19e20d0 	ldrsb	r2, [lr, r0]
    8850:	e5d40000 	ldrb	r0, [r4]
    8854:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    8858:	e0222003 	eor	r2, r2, r3
    885c:	e0022011 	and	r2, r2, r1, lsl r0
    8860:	e0233002 	eor	r3, r3, r2
    8864:	e5cc3006 	strb	r3, [ip, #6]
    8868:	e8bd8070 	pop	{r4, r5, r6, pc}

0000886c <Cpu::ORA_ABS_Y()>:
    886c:	e92d4070 	push	{r4, r5, r6, lr}
    8870:	e1a04000 	mov	r4, r0
    8874:	e9900028 	ldmib	r0, {r3, r5}
    8878:	e1d310b0 	ldrh	r1, [r3]
    887c:	e5d33005 	ldrb	r3, [r3, #5]
    8880:	e0851001 	add	r1, r5, r1
    8884:	e5d12002 	ldrb	r2, [r1, #2]
    8888:	e5d11001 	ldrb	r1, [r1, #1]
    888c:	eb00014e 	bl	8dcc <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>
    8890:	e594c004 	ldr	ip, [r4, #4]
    8894:	e7d53000 	ldrb	r3, [r5, r0]
    8898:	e3a00001 	mov	r0, #1
    889c:	e5dc1003 	ldrb	r1, [ip, #3]
    88a0:	e1dc20d6 	ldrsb	r2, [ip, #6]
    88a4:	e1833001 	orr	r3, r3, r1
    88a8:	e5cc3003 	strb	r3, [ip, #3]
    88ac:	e2631000 	rsb	r1, r3, #0
    88b0:	e0211002 	eor	r1, r1, r2
    88b4:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    88b8:	e594e000 	ldr	lr, [r4]
    88bc:	e2633000 	rsb	r3, r3, #0
    88c0:	e5de4006 	ldrb	r4, [lr, #6]
    88c4:	e5dee000 	ldrb	lr, [lr]
    88c8:	e0011410 	and	r1, r1, r0, lsl r4
    88cc:	e0222001 	eor	r2, r2, r1
    88d0:	e6af2072 	sxtb	r2, r2
    88d4:	e0233002 	eor	r3, r3, r2
    88d8:	e0033e10 	and	r3, r3, r0, lsl lr
    88dc:	e0233002 	eor	r3, r3, r2
    88e0:	e5cc3006 	strb	r3, [ip, #6]
    88e4:	e8bd8070 	pop	{r4, r5, r6, pc}

000088e8 <Cpu::ORA_ABS_X()>:
    88e8:	e92d4070 	push	{r4, r5, r6, lr}
    88ec:	e1a04000 	mov	r4, r0
    88f0:	e9900028 	ldmib	r0, {r3, r5}
    88f4:	e1d310b0 	ldrh	r1, [r3]
    88f8:	e5d33004 	ldrb	r3, [r3, #4]
    88fc:	e0851001 	add	r1, r5, r1
    8900:	e5d12002 	ldrb	r2, [r1, #2]
    8904:	e5d11001 	ldrb	r1, [r1, #1]
    8908:	eb00012f 	bl	8dcc <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>
    890c:	e594c004 	ldr	ip, [r4, #4]
    8910:	e7d53000 	ldrb	r3, [r5, r0]
    8914:	e3a00001 	mov	r0, #1
    8918:	e5dc1003 	ldrb	r1, [ip, #3]
    891c:	e1dc20d6 	ldrsb	r2, [ip, #6]
    8920:	e1833001 	orr	r3, r3, r1
    8924:	e5cc3003 	strb	r3, [ip, #3]
    8928:	e2631000 	rsb	r1, r3, #0
    892c:	e0211002 	eor	r1, r1, r2
    8930:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    8934:	e594e000 	ldr	lr, [r4]
    8938:	e2633000 	rsb	r3, r3, #0
    893c:	e5de4006 	ldrb	r4, [lr, #6]
    8940:	e5dee000 	ldrb	lr, [lr]
    8944:	e0011410 	and	r1, r1, r0, lsl r4
    8948:	e0222001 	eor	r2, r2, r1
    894c:	e6af2072 	sxtb	r2, r2
    8950:	e0233002 	eor	r3, r3, r2
    8954:	e0033e10 	and	r3, r3, r0, lsl lr
    8958:	e0233002 	eor	r3, r3, r2
    895c:	e5cc3006 	strb	r3, [ip, #6]
    8960:	e8bd8070 	pop	{r4, r5, r6, pc}

00008964 <Cpu::ASL_ABS_X()>:
    8964:	e5903004 	ldr	r3, [r0, #4]
    8968:	e92d4070 	push	{r4, r5, r6, lr}
    896c:	e1a04000 	mov	r4, r0
    8970:	e5901008 	ldr	r1, [r0, #8]
    8974:	e1d320b0 	ldrh	r2, [r3]
    8978:	e5d33004 	ldrb	r3, [r3, #4]
    897c:	e0811002 	add	r1, r1, r2
    8980:	e5d12002 	ldrb	r2, [r1, #2]
    8984:	e5d11001 	ldrb	r1, [r1, #1]
    8988:	eb00010f 	bl	8dcc <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>
    898c:	e594e008 	ldr	lr, [r4, #8]
    8990:	e8941020 	ldm	r4, {r5, ip}
    8994:	e3a01001 	mov	r1, #1
    8998:	e19e30d0 	ldrsb	r3, [lr, r0]
    899c:	e1dc20d6 	ldrsb	r2, [ip, #6]
    89a0:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    89a4:	e5d55007 	ldrb	r5, [r5, #7]
    89a8:	e0233002 	eor	r3, r3, r2
    89ac:	e0033511 	and	r3, r3, r1, lsl r5
    89b0:	e0233002 	eor	r3, r3, r2
    89b4:	e5cc3006 	strb	r3, [ip, #6]
    89b8:	e7de3000 	ldrb	r3, [lr, r0]
    89bc:	e1a03113 	lsl	r3, r3, r1
    89c0:	e6ef3073 	uxtb	r3, r3
    89c4:	e7ce3000 	strb	r3, [lr, r0]
    89c8:	e2633000 	rsb	r3, r3, #0
    89cc:	e8941010 	ldm	r4, {r4, ip}
    89d0:	e1dc20d6 	ldrsb	r2, [ip, #6]
    89d4:	e5d45006 	ldrb	r5, [r4, #6]
    89d8:	e0233002 	eor	r3, r3, r2
    89dc:	e0033511 	and	r3, r3, r1, lsl r5
    89e0:	e0233002 	eor	r3, r3, r2
    89e4:	e6af3073 	sxtb	r3, r3
    89e8:	e5cc3006 	strb	r3, [ip, #6]
    89ec:	e19e20d0 	ldrsb	r2, [lr, r0]
    89f0:	e5d40000 	ldrb	r0, [r4]
    89f4:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    89f8:	e0222003 	eor	r2, r2, r3
    89fc:	e0022011 	and	r2, r2, r1, lsl r0
    8a00:	e0233002 	eor	r3, r3, r2
    8a04:	e5cc3006 	strb	r3, [ip, #6]
    8a08:	e8bd8070 	pop	{r4, r5, r6, pc}

00008a0c <Cpu::SBC_ABS_X()>:
    8a0c:	e12fff1e 	bx	lr

00008a10 <Cpu::INC_ABS_X()>:
    8a10:	e12fff1e 	bx	lr

00008a14 <Cpu::BRK()>:
    8a14:	e12fff1e 	bx	lr

00008a18 <Cpu::PHP()>:
    8a18:	e12fff1e 	bx	lr

00008a1c <Cpu::BPL()>:
    8a1c:	e12fff1e 	bx	lr

00008a20 <Cpu::CLC()>:
    8a20:	e12fff1e 	bx	lr

00008a24 <Cpu::JSR()>:
    8a24:	e12fff1e 	bx	lr

00008a28 <Cpu::AND_IND_X()>:
    8a28:	e12fff1e 	bx	lr

00008a2c <Cpu::BIT_ZP()>:
    8a2c:	e12fff1e 	bx	lr

00008a30 <Cpu::AND_ZP()>:
    8a30:	e12fff1e 	bx	lr

00008a34 <Cpu::ROL_ZP()>:
    8a34:	e12fff1e 	bx	lr

00008a38 <Cpu::PLP()>:
    8a38:	e12fff1e 	bx	lr

00008a3c <Cpu::AND_IMM()>:
    8a3c:	e12fff1e 	bx	lr

00008a40 <Cpu::ROL_ACC()>:
    8a40:	e12fff1e 	bx	lr

00008a44 <Cpu::BIT_ABS()>:
    8a44:	e12fff1e 	bx	lr

00008a48 <Cpu::AND_ABS()>:
    8a48:	e12fff1e 	bx	lr

00008a4c <Cpu::ROL_ABS()>:
    8a4c:	e12fff1e 	bx	lr

00008a50 <Cpu::BMI()>:
    8a50:	e12fff1e 	bx	lr

00008a54 <Cpu::AND_IND_Y()>:
    8a54:	e12fff1e 	bx	lr

00008a58 <Cpu::AND_ZP_X()>:
    8a58:	e12fff1e 	bx	lr

00008a5c <Cpu::ROL_ZP_X()>:
    8a5c:	e12fff1e 	bx	lr

00008a60 <Cpu::SEC()>:
    8a60:	e12fff1e 	bx	lr

00008a64 <Cpu::AND_ABS_Y()>:
    8a64:	e12fff1e 	bx	lr

00008a68 <Cpu::AND_ABS_X()>:
    8a68:	e12fff1e 	bx	lr

00008a6c <Cpu::ROL_ABS_X()>:
    8a6c:	e12fff1e 	bx	lr

00008a70 <Cpu::RTI()>:
    8a70:	e12fff1e 	bx	lr

00008a74 <Cpu::EOR_IND_X()>:
    8a74:	e12fff1e 	bx	lr

00008a78 <Cpu::EOR_ZP()>:
    8a78:	e12fff1e 	bx	lr

00008a7c <Cpu::LSR_ZP()>:
    8a7c:	e12fff1e 	bx	lr

00008a80 <Cpu::PHA()>:
    8a80:	e12fff1e 	bx	lr

00008a84 <Cpu::EOR_IMM()>:
    8a84:	e12fff1e 	bx	lr

00008a88 <Cpu::LSR_ACC()>:
    8a88:	e12fff1e 	bx	lr

00008a8c <Cpu::JMP_ABS()>:
    8a8c:	e12fff1e 	bx	lr

00008a90 <Cpu::EOR_ABS()>:
    8a90:	e12fff1e 	bx	lr

00008a94 <Cpu::LSR_ABS()>:
    8a94:	e12fff1e 	bx	lr

00008a98 <Cpu::BVC()>:
    8a98:	e12fff1e 	bx	lr

00008a9c <Cpu::EOR_IND_Y()>:
    8a9c:	e12fff1e 	bx	lr

00008aa0 <Cpu::EOR_ZP_X()>:
    8aa0:	e12fff1e 	bx	lr

00008aa4 <Cpu::LSR_ZP_X()>:
    8aa4:	e12fff1e 	bx	lr

00008aa8 <Cpu::CLI()>:
    8aa8:	e12fff1e 	bx	lr

00008aac <Cpu::EOR_ABS_Y()>:
    8aac:	e12fff1e 	bx	lr

00008ab0 <Cpu::EOR_ABS_X()>:
    8ab0:	e12fff1e 	bx	lr

00008ab4 <Cpu::LSR_ABS_X()>:
    8ab4:	e12fff1e 	bx	lr

00008ab8 <Cpu::RTS()>:
    8ab8:	e12fff1e 	bx	lr

00008abc <Cpu::ADC_IND_X()>:
    8abc:	e12fff1e 	bx	lr

00008ac0 <Cpu::ADC_ZP()>:
    8ac0:	e12fff1e 	bx	lr

00008ac4 <Cpu::ROR_ZP()>:
    8ac4:	e12fff1e 	bx	lr

00008ac8 <Cpu::PLA()>:
    8ac8:	e12fff1e 	bx	lr

00008acc <Cpu::ADC_IMM()>:
    8acc:	e12fff1e 	bx	lr

00008ad0 <Cpu::ROR_ACC()>:
    8ad0:	e12fff1e 	bx	lr

00008ad4 <Cpu::JMP_IND()>:
    8ad4:	e12fff1e 	bx	lr

00008ad8 <Cpu::ADC_ABS()>:
    8ad8:	e12fff1e 	bx	lr

00008adc <Cpu::ROR_ABS()>:
    8adc:	e12fff1e 	bx	lr

00008ae0 <Cpu::BVS()>:
    8ae0:	e12fff1e 	bx	lr

00008ae4 <Cpu::ADC_IND_Y()>:
    8ae4:	e12fff1e 	bx	lr

00008ae8 <Cpu::ADC_ZP_X()>:
    8ae8:	e12fff1e 	bx	lr

00008aec <Cpu::ROR_ZP_X()>:
    8aec:	e12fff1e 	bx	lr

00008af0 <Cpu::SEI()>:
    8af0:	e12fff1e 	bx	lr

00008af4 <Cpu::ADC_ABS_Y()>:
    8af4:	e12fff1e 	bx	lr

00008af8 <Cpu::ADC_ABS_X()>:
    8af8:	e12fff1e 	bx	lr

00008afc <Cpu::ROR_ABS_X()>:
    8afc:	e12fff1e 	bx	lr

00008b00 <Cpu::STA_IND_X()>:
    8b00:	e12fff1e 	bx	lr

00008b04 <Cpu::STY_ZP()>:
    8b04:	e12fff1e 	bx	lr

00008b08 <Cpu::STA_ZP()>:
    8b08:	e12fff1e 	bx	lr

00008b0c <Cpu::STX_ZP()>:
    8b0c:	e12fff1e 	bx	lr

00008b10 <Cpu::DEY()>:
    8b10:	e12fff1e 	bx	lr

00008b14 <Cpu::TXA()>:
    8b14:	e12fff1e 	bx	lr

00008b18 <Cpu::STY_ABS()>:
    8b18:	e12fff1e 	bx	lr

00008b1c <Cpu::STA_ABS()>:
    8b1c:	e12fff1e 	bx	lr

00008b20 <Cpu::STX_ABS()>:
    8b20:	e12fff1e 	bx	lr

00008b24 <Cpu::BCC()>:
    8b24:	e12fff1e 	bx	lr

00008b28 <Cpu::STA_IND_Y()>:
    8b28:	e12fff1e 	bx	lr

00008b2c <Cpu::STY_ZP_X()>:
    8b2c:	e12fff1e 	bx	lr

00008b30 <Cpu::STA_ZP_X()>:
    8b30:	e12fff1e 	bx	lr

00008b34 <Cpu::STX_ZP_Y()>:
    8b34:	e12fff1e 	bx	lr

00008b38 <Cpu::TYA()>:
    8b38:	e12fff1e 	bx	lr

00008b3c <Cpu::STA_ABS_Y()>:
    8b3c:	e12fff1e 	bx	lr

00008b40 <Cpu::TXS()>:
    8b40:	e12fff1e 	bx	lr

00008b44 <Cpu::STA_ABS_X()>:
    8b44:	e12fff1e 	bx	lr

00008b48 <Cpu::LDY_IMM()>:
    8b48:	e12fff1e 	bx	lr

00008b4c <Cpu::LDA_IND_X()>:
    8b4c:	e12fff1e 	bx	lr

00008b50 <Cpu::LDX_IMM()>:
    8b50:	e12fff1e 	bx	lr

00008b54 <Cpu::LDY_ZP()>:
    8b54:	e12fff1e 	bx	lr

00008b58 <Cpu::LDA_ZP()>:
    8b58:	e12fff1e 	bx	lr

00008b5c <Cpu::LDX_ZP()>:
    8b5c:	e12fff1e 	bx	lr

00008b60 <Cpu::TAY()>:
    8b60:	e12fff1e 	bx	lr

00008b64 <Cpu::LDA_IMM()>:
    8b64:	e12fff1e 	bx	lr

00008b68 <Cpu::TAX()>:
    8b68:	e12fff1e 	bx	lr

00008b6c <Cpu::LDY_ABS()>:
    8b6c:	e12fff1e 	bx	lr

00008b70 <Cpu::LDA_ABS()>:
    8b70:	e12fff1e 	bx	lr

00008b74 <Cpu::LDX_ABS()>:
    8b74:	e12fff1e 	bx	lr

00008b78 <Cpu::BCS()>:
    8b78:	e12fff1e 	bx	lr

00008b7c <Cpu::LDA_IND_Y()>:
    8b7c:	e12fff1e 	bx	lr

00008b80 <Cpu::LDY_ZP_X()>:
    8b80:	e12fff1e 	bx	lr

00008b84 <Cpu::LDA_ZP_X()>:
    8b84:	e12fff1e 	bx	lr

00008b88 <Cpu::LDX_ZP_Y()>:
    8b88:	e12fff1e 	bx	lr

00008b8c <Cpu::CLV()>:
    8b8c:	e12fff1e 	bx	lr

00008b90 <Cpu::LDA_ABS_Y()>:
    8b90:	e12fff1e 	bx	lr

00008b94 <Cpu::TSX()>:
    8b94:	e12fff1e 	bx	lr

00008b98 <Cpu::LDY_ABS_X()>:
    8b98:	e12fff1e 	bx	lr

00008b9c <Cpu::LDA_ABS_X()>:
    8b9c:	e12fff1e 	bx	lr

00008ba0 <Cpu::LDX_ABS_Y()>:
    8ba0:	e12fff1e 	bx	lr

00008ba4 <Cpu::CPY_IMM()>:
    8ba4:	e12fff1e 	bx	lr

00008ba8 <Cpu::CMP_IND_X()>:
    8ba8:	e12fff1e 	bx	lr

00008bac <Cpu::CPY_ZP()>:
    8bac:	e12fff1e 	bx	lr

00008bb0 <Cpu::CMP_ZP()>:
    8bb0:	e12fff1e 	bx	lr

00008bb4 <Cpu::DEC_ZP()>:
    8bb4:	e12fff1e 	bx	lr

00008bb8 <Cpu::INY()>:
    8bb8:	e12fff1e 	bx	lr

00008bbc <Cpu::CMP_IMM()>:
    8bbc:	e12fff1e 	bx	lr

00008bc0 <Cpu::DEX()>:
    8bc0:	e12fff1e 	bx	lr

00008bc4 <Cpu::CPY_ABS()>:
    8bc4:	e12fff1e 	bx	lr

00008bc8 <Cpu::CMP_ABS()>:
    8bc8:	e12fff1e 	bx	lr

00008bcc <Cpu::DEC_ABS()>:
    8bcc:	e12fff1e 	bx	lr

00008bd0 <Cpu::BNE()>:
    8bd0:	e12fff1e 	bx	lr

00008bd4 <Cpu::CMP_IND_Y()>:
    8bd4:	e12fff1e 	bx	lr

00008bd8 <Cpu::CMP_ZP_X()>:
    8bd8:	e12fff1e 	bx	lr

00008bdc <Cpu::DEC_ZP_X()>:
    8bdc:	e12fff1e 	bx	lr

00008be0 <Cpu::CLD()>:
    8be0:	e12fff1e 	bx	lr

00008be4 <Cpu::CMP_ABS_Y()>:
    8be4:	e12fff1e 	bx	lr

00008be8 <Cpu::CMP_ABS_X()>:
    8be8:	e12fff1e 	bx	lr

00008bec <Cpu::DEC_ABS_X()>:
    8bec:	e12fff1e 	bx	lr

00008bf0 <Cpu::CPX_IMM()>:
    8bf0:	e12fff1e 	bx	lr

00008bf4 <Cpu::SBC_IND_X()>:
    8bf4:	e12fff1e 	bx	lr

00008bf8 <Cpu::CPX_ZP()>:
    8bf8:	e12fff1e 	bx	lr

00008bfc <Cpu::SBC_ZP()>:
    8bfc:	e12fff1e 	bx	lr

00008c00 <Cpu::INC_ZP()>:
    8c00:	e12fff1e 	bx	lr

00008c04 <Cpu::INX()>:
    8c04:	e12fff1e 	bx	lr

00008c08 <Cpu::SBC_IMM()>:
    8c08:	e12fff1e 	bx	lr

00008c0c <Cpu::NOP()>:
    8c0c:	e12fff1e 	bx	lr

00008c10 <Cpu::CPX_ABS()>:
    8c10:	e12fff1e 	bx	lr

00008c14 <Cpu::SBC_ABS()>:
    8c14:	e12fff1e 	bx	lr

00008c18 <Cpu::INC_ABS()>:
    8c18:	e12fff1e 	bx	lr

00008c1c <Cpu::BEQ()>:
    8c1c:	e12fff1e 	bx	lr

00008c20 <Cpu::SBC_IND_Y()>:
    8c20:	e12fff1e 	bx	lr

00008c24 <Cpu::SBC_ZP_X()>:
    8c24:	e12fff1e 	bx	lr

00008c28 <Cpu::INC_ZP_X()>:
    8c28:	e12fff1e 	bx	lr

00008c2c <Cpu::SED()>:
    8c2c:	e12fff1e 	bx	lr

00008c30 <Cpu::SBC_ABS_Y()>:
    8c30:	e12fff1e 	bx	lr

00008c34 <Cpu::Cpu(Rom const*)>:
    8c34:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8c38:	e1a04000 	mov	r4, r0
    8c3c:	e3a00008 	mov	r0, #8
    8c40:	e1a05001 	mov	r5, r1
    8c44:	eb0005b2 	bl	a314 <operator new(unsigned int)>
    8c48:	e1a03000 	mov	r3, r0
    8c4c:	e3a0e007 	mov	lr, #7
    8c50:	e3a0c006 	mov	ip, #6
    8c54:	e3a01005 	mov	r1, #5
    8c58:	e3a02004 	mov	r2, #4
    8c5c:	e5843000 	str	r3, [r4]
    8c60:	e5c3e000 	strb	lr, [r3]
    8c64:	e3a0e003 	mov	lr, #3
    8c68:	e5c3c001 	strb	ip, [r3, #1]
    8c6c:	e3a0c002 	mov	ip, #2
    8c70:	e5c31002 	strb	r1, [r3, #2]
    8c74:	e3a01001 	mov	r1, #1
    8c78:	e5c32003 	strb	r2, [r3, #3]
    8c7c:	e3a02000 	mov	r2, #0
    8c80:	e5c3e004 	strb	lr, [r3, #4]
    8c84:	e3a00008 	mov	r0, #8
    8c88:	e5c3c005 	strb	ip, [r3, #5]
    8c8c:	e5c31006 	strb	r1, [r3, #6]
    8c90:	e5c32007 	strb	r2, [r3, #7]
    8c94:	eb00059e 	bl	a314 <operator new(unsigned int)>
    8c98:	e1a03000 	mov	r3, r0
    8c9c:	e3a02020 	mov	r2, #32
    8ca0:	e5843004 	str	r3, [r4, #4]
    8ca4:	e3a00801 	mov	r0, #65536	; 0x10000
    8ca8:	e5c32006 	strb	r2, [r3, #6]
    8cac:	eb000598 	bl	a314 <operator new(unsigned int)>
    8cb0:	e3a03a02 	mov	r3, #8192	; 0x2000
    8cb4:	e3a02901 	mov	r2, #16384	; 0x4000
    8cb8:	e5843010 	str	r3, [r4, #16]
    8cbc:	e5843014 	str	r3, [r4, #20]
    8cc0:	e3001980 	movw	r1, #2432	; 0x980
    8cc4:	e3401005 	movt	r1, #5
    8cc8:	e5840008 	str	r0, [r4, #8]
    8ccc:	e2840018 	add	r0, r4, #24
    8cd0:	e584200c 	str	r2, [r4, #12]
    8cd4:	e3a02c01 	mov	r2, #256	; 0x100
    8cd8:	eb0008d9 	bl	b044 <memcpy>
    8cdc:	e59f1080 	ldr	r1, [pc, #128]	; 8d64 <Cpu::Cpu(Rom const*)+0x130>
    8ce0:	e3a02b02 	mov	r2, #2048	; 0x800
    8ce4:	e2840f46 	add	r0, r4, #280	; 0x118
    8ce8:	eb0008d5 	bl	b044 <memcpy>
    8cec:	e1a00005 	mov	r0, r5
    8cf0:	eb000052 	bl	8e40 <Rom::GetHeader() const>
    8cf4:	e1d060d4 	ldrsb	r6, [r0, #4]
    8cf8:	e1a00005 	mov	r0, r5
    8cfc:	eb00005f 	bl	8e80 <Rom::GetTrainerOffset() const>
    8d00:	e3560001 	cmp	r6, #1
    8d04:	e5951000 	ldr	r1, [r5]
    8d08:	e0807001 	add	r7, r0, r1
    8d0c:	0a00000a 	beq	8d3c <Cpu::Cpu(Rom const*)+0x108>
    8d10:	e3560002 	cmp	r6, #2
    8d14:	1a000010 	bne	8d5c <Cpu::Cpu(Rom const*)+0x128>
    8d18:	e1a00005 	mov	r0, r5
    8d1c:	e5946008 	ldr	r6, [r4, #8]
    8d20:	eb000052 	bl	8e70 <Rom::GetRaw() const>
    8d24:	e594200c 	ldr	r2, [r4, #12]
    8d28:	e2866903 	add	r6, r6, #49152	; 0xc000
    8d2c:	e0871002 	add	r1, r7, r2
    8d30:	e0801001 	add	r1, r0, r1
    8d34:	e1a00006 	mov	r0, r6
    8d38:	eb0008c1 	bl	b044 <memcpy>
    8d3c:	e5943008 	ldr	r3, [r4, #8]
    8d40:	e1a00005 	mov	r0, r5
    8d44:	e2835902 	add	r5, r3, #32768	; 0x8000
    8d48:	eb000048 	bl	8e70 <Rom::GetRaw() const>
    8d4c:	e594200c 	ldr	r2, [r4, #12]
    8d50:	e0801007 	add	r1, r0, r7
    8d54:	e1a00005 	mov	r0, r5
    8d58:	eb0008b9 	bl	b044 <memcpy>
    8d5c:	e1a00004 	mov	r0, r4
    8d60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8d64:	00050a80 	.word	0x00050a80

00008d68 <Cpu::SetFlag(unsigned char, unsigned char)>:
    8d68:	e5900004 	ldr	r0, [r0, #4]
    8d6c:	e2622000 	rsb	r2, r2, #0
    8d70:	e3a0c001 	mov	ip, #1
    8d74:	e1d030d6 	ldrsb	r3, [r0, #6]
    8d78:	e0222003 	eor	r2, r2, r3
    8d7c:	e002111c 	and	r1, r2, ip, lsl r1
    8d80:	e0211003 	eor	r1, r1, r3
    8d84:	e5c01006 	strb	r1, [r0, #6]
    8d88:	e12fff1e 	bx	lr

00008d8c <Ppu::Ppu(Rom const*)>:
    8d8c:	e92d4010 	push	{r4, lr}
    8d90:	e3011280 	movw	r1, #4736	; 0x1280
    8d94:	e3401005 	movt	r1, #5
    8d98:	e3a020c0 	mov	r2, #192	; 0xc0
    8d9c:	eb0008a8 	bl	b044 <memcpy>
    8da0:	e8bd8010 	pop	{r4, pc}

00008da4 <Cpu::FromValues(unsigned char) const>:
    8da4:	e1a00001 	mov	r0, r1
    8da8:	e12fff1e 	bx	lr

00008dac <Cpu::FromValues(unsigned char, unsigned char) const>:
    8dac:	e1810402 	orr	r0, r1, r2, lsl #8
    8db0:	e12fff1e 	bx	lr

00008db4 <Cpu::Immediate(unsigned char) const>:
    8db4:	e1a00001 	mov	r0, r1
    8db8:	e12fff1e 	bx	lr

00008dbc <Cpu::ZeroPage(unsigned char) const>:
    8dbc:	e1a00001 	mov	r0, r1
    8dc0:	e12fff1e 	bx	lr

00008dc4 <Cpu::Absolute(unsigned char, unsigned char) const>:
    8dc4:	e1810402 	orr	r0, r1, r2, lsl #8
    8dc8:	e12fff1e 	bx	lr

00008dcc <Cpu::Indexed(unsigned char, unsigned char, unsigned char) const>:
    8dcc:	e1812402 	orr	r2, r1, r2, lsl #8
    8dd0:	e0823003 	add	r3, r2, r3
    8dd4:	e6ff0073 	uxth	r0, r3
    8dd8:	e12fff1e 	bx	lr

00008ddc <Cpu::ZeroPageIndexed(unsigned char, unsigned char) const>:
    8ddc:	e0810002 	add	r0, r1, r2
    8de0:	e12fff1e 	bx	lr

00008de4 <Cpu::Indirect(unsigned char, unsigned char) const>:
    8de4:	e5903008 	ldr	r3, [r0, #8]
    8de8:	e1812402 	orr	r2, r1, r2, lsl #8
    8dec:	e0831002 	add	r1, r3, r2
    8df0:	e7d33002 	ldrb	r3, [r3, r2]
    8df4:	e5d10001 	ldrb	r0, [r1, #1]
    8df8:	e1830400 	orr	r0, r3, r0, lsl #8
    8dfc:	e12fff1e 	bx	lr

00008e00 <Cpu::PreIndexedIndirect(unsigned char, unsigned char) const>:
    8e00:	e0812002 	add	r2, r1, r2
    8e04:	e5903008 	ldr	r3, [r0, #8]
    8e08:	e6ef2072 	uxtb	r2, r2
    8e0c:	e0831002 	add	r1, r3, r2
    8e10:	e7d33002 	ldrb	r3, [r3, r2]
    8e14:	e5d10001 	ldrb	r0, [r1, #1]
    8e18:	e1830400 	orr	r0, r3, r0, lsl #8
    8e1c:	e12fff1e 	bx	lr

00008e20 <Cpu::PostIndexedIndirect(unsigned char, unsigned char) const>:
    8e20:	e5903008 	ldr	r3, [r0, #8]
    8e24:	e083c001 	add	ip, r3, r1
    8e28:	e7d30001 	ldrb	r0, [r3, r1]
    8e2c:	e5dc3001 	ldrb	r3, [ip, #1]
    8e30:	e1800403 	orr	r0, r0, r3, lsl #8
    8e34:	e0800002 	add	r0, r0, r2
    8e38:	e6ff0070 	uxth	r0, r0
    8e3c:	e12fff1e 	bx	lr

00008e40 <Rom::GetHeader() const>:
    8e40:	e92d4010 	push	{r4, lr}
    8e44:	e1a04000 	mov	r4, r0
    8e48:	e3a00010 	mov	r0, #16
    8e4c:	eb000530 	bl	a314 <operator new(unsigned int)>
    8e50:	e284300b 	add	r3, r4, #11
    8e54:	e284c01b 	add	ip, r4, #27
    8e58:	e2402001 	sub	r2, r0, #1
    8e5c:	e5f31001 	ldrb	r1, [r3, #1]!
    8e60:	e153000c 	cmp	r3, ip
    8e64:	e5e21001 	strb	r1, [r2, #1]!
    8e68:	1afffffb 	bne	8e5c <Rom::GetHeader() const+0x1c>
    8e6c:	e8bd8010 	pop	{r4, pc}

00008e70 <Rom::GetRaw() const>:
    8e70:	e280000c 	add	r0, r0, #12
    8e74:	e12fff1e 	bx	lr

00008e78 <Rom::GetLength() const>:
    8e78:	e5900008 	ldr	r0, [r0, #8]
    8e7c:	e12fff1e 	bx	lr

00008e80 <Rom::GetTrainerOffset() const>:
    8e80:	e92d4010 	push	{r4, lr}
    8e84:	e1a04000 	mov	r4, r0
    8e88:	e3a00010 	mov	r0, #16
    8e8c:	eb000520 	bl	a314 <operator new(unsigned int)>
    8e90:	e284300b 	add	r3, r4, #11
    8e94:	e2402001 	sub	r2, r0, #1
    8e98:	e284c01b 	add	ip, r4, #27
    8e9c:	e5f31001 	ldrb	r1, [r3, #1]!
    8ea0:	e153000c 	cmp	r3, ip
    8ea4:	e5e21001 	strb	r1, [r2, #1]!
    8ea8:	1afffffb 	bne	8e9c <Rom::GetTrainerOffset() const+0x1c>
    8eac:	e5d03006 	ldrb	r3, [r0, #6]
    8eb0:	e5940004 	ldr	r0, [r4, #4]
    8eb4:	e2033004 	and	r3, r3, #4
    8eb8:	e0000390 	mul	r0, r0, r3
    8ebc:	e8bd8010 	pop	{r4, pc}

00008ec0 <CActLED::~CActLED()>:
    8ec0:	e30331ac 	movw	r3, #12716	; 0x31ac
    8ec4:	e3403005 	movt	r3, #5
    8ec8:	e3a02000 	mov	r2, #0
    8ecc:	e5832000 	str	r2, [r3]
    8ed0:	e12fff1e 	bx	lr

00008ed4 <CActLED::On()>:
    8ed4:	e5903000 	ldr	r3, [r0]
    8ed8:	e3530000 	cmp	r3, #0
    8edc:	0a000004 	beq	8ef4 <CActLED::On()+0x20>
    8ee0:	e5901008 	ldr	r1, [r0, #8]
    8ee4:	e1a00003 	mov	r0, r3
    8ee8:	e2911000 	adds	r1, r1, #0
    8eec:	13a01001 	movne	r1, #1
    8ef0:	ea0000ee 	b	92b0 <CGPIOPin::Write(unsigned int)>
    8ef4:	e5903004 	ldr	r3, [r0, #4]
    8ef8:	e3530000 	cmp	r3, #0
    8efc:	012fff1e 	bxeq	lr
    8f00:	e5901008 	ldr	r1, [r0, #8]
    8f04:	e1a00003 	mov	r0, r3
    8f08:	e2911000 	adds	r1, r1, #0
    8f0c:	13a01001 	movne	r1, #1
    8f10:	ea001841 	b	f01c <CVirtualGPIOPin::Write(unsigned int)>

00008f14 <CActLED::Off()>:
    8f14:	e5903000 	ldr	r3, [r0]
    8f18:	e3530000 	cmp	r3, #0
    8f1c:	0a000004 	beq	8f34 <CActLED::Off()+0x20>
    8f20:	e5901008 	ldr	r1, [r0, #8]
    8f24:	e1a00003 	mov	r0, r3
    8f28:	e16f1f11 	clz	r1, r1
    8f2c:	e1a012a1 	lsr	r1, r1, #5
    8f30:	ea0000de 	b	92b0 <CGPIOPin::Write(unsigned int)>
    8f34:	e5903004 	ldr	r3, [r0, #4]
    8f38:	e3530000 	cmp	r3, #0
    8f3c:	012fff1e 	bxeq	lr
    8f40:	e5901008 	ldr	r1, [r0, #8]
    8f44:	e1a00003 	mov	r0, r3
    8f48:	e16f1f11 	clz	r1, r1
    8f4c:	e1a012a1 	lsr	r1, r1, #5
    8f50:	ea001831 	b	f01c <CVirtualGPIOPin::Write(unsigned int)>

00008f54 <CActLED::CActLED()>:
    8f54:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8f58:	e1a04000 	mov	r4, r0
    8f5c:	e30331ac 	movw	r3, #12716	; 0x31ac
    8f60:	e3403005 	movt	r3, #5
    8f64:	e24dd024 	sub	sp, sp, #36	; 0x24
    8f68:	e3a05000 	mov	r5, #0
    8f6c:	e5805000 	str	r5, [r0]
    8f70:	e28d0008 	add	r0, sp, #8
    8f74:	e5845004 	str	r5, [r4, #4]
    8f78:	e5834000 	str	r4, [r3]
    8f7c:	eb000051 	bl	90c8 <CBcmPropertyTags::CBcmPropertyTags()>
    8f80:	e3a03010 	mov	r3, #16
    8f84:	e58d5000 	str	r5, [sp]
    8f88:	e28d0008 	add	r0, sp, #8
    8f8c:	e3a01002 	mov	r1, #2
    8f90:	e3401001 	movt	r1, #1
    8f94:	e08d2003 	add	r2, sp, r3
    8f98:	eb000092 	bl	91e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8f9c:	e1500005 	cmp	r0, r5
    8fa0:	0a000011 	beq	8fec <CActLED::CActLED()+0x98>
    8fa4:	e59d301c 	ldr	r3, [sp, #28]
    8fa8:	e3130502 	tst	r3, #8388608	; 0x800000
    8fac:	1a000013 	bne	9000 <CActLED::CActLED()+0xac>
    8fb0:	e6ff3073 	uxth	r3, r3
    8fb4:	e353000f 	cmp	r3, #15
    8fb8:	83a06001 	movhi	r6, #1
    8fbc:	9a00001c 	bls	9034 <CActLED::CActLED()+0xe0>
    8fc0:	e3a00020 	mov	r0, #32
    8fc4:	eb0004d2 	bl	a314 <operator new(unsigned int)>
    8fc8:	e3a03000 	mov	r3, #0
    8fcc:	e1a05000 	mov	r5, r0
    8fd0:	e3a02001 	mov	r2, #1
    8fd4:	e3a0102f 	mov	r1, #47	; 0x2f
    8fd8:	eb0003ad 	bl	9e94 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8fdc:	e5845000 	str	r5, [r4]
    8fe0:	e5846008 	str	r6, [r4, #8]
    8fe4:	e1a00004 	mov	r0, r4
    8fe8:	ebffffc9 	bl	8f14 <CActLED::Off()>
    8fec:	e28d0008 	add	r0, sp, #8
    8ff0:	eb00003a 	bl	90e0 <CBcmPropertyTags::~CBcmPropertyTags()>
    8ff4:	e1a00004 	mov	r0, r4
    8ff8:	e28dd024 	add	sp, sp, #36	; 0x24
    8ffc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9000:	e7e73253 	ubfx	r3, r3, #4, #8
    9004:	e3530001 	cmp	r3, #1
    9008:	9a000009 	bls	9034 <CActLED::CActLED()+0xe0>
    900c:	e3530008 	cmp	r3, #8
    9010:	1a000012 	bne	9060 <CActLED::CActLED()+0x10c>
    9014:	e3a00010 	mov	r0, #16
    9018:	e3a06001 	mov	r6, #1
    901c:	eb0004bc 	bl	a314 <operator new(unsigned int)>
    9020:	e1a01005 	mov	r1, r5
    9024:	e1a07000 	mov	r7, r0
    9028:	eb0017bf 	bl	ef2c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    902c:	e5847004 	str	r7, [r4, #4]
    9030:	eaffffea 	b	8fe0 <CActLED::CActLED()+0x8c>
    9034:	e3a00020 	mov	r0, #32
    9038:	eb0004b5 	bl	a314 <operator new(unsigned int)>
    903c:	e3a03000 	mov	r3, #0
    9040:	e3a02001 	mov	r2, #1
    9044:	e3a01010 	mov	r1, #16
    9048:	e1a05000 	mov	r5, r0
    904c:	eb000390 	bl	9e94 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    9050:	e3a03000 	mov	r3, #0
    9054:	e5845000 	str	r5, [r4]
    9058:	e5843008 	str	r3, [r4, #8]
    905c:	eaffffe0 	b	8fe4 <CActLED::CActLED()+0x90>
    9060:	e2536009 	subs	r6, r3, #9
    9064:	13a06001 	movne	r6, #1
    9068:	eaffffd4 	b	8fc0 <CActLED::CActLED()+0x6c>

0000906c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    906c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9070:	e2516000 	subs	r6, r1, #0
    9074:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9078:	e1a08003 	mov	r8, r3
    907c:	e1a07002 	mov	r7, r2
    9080:	e1a05000 	mov	r5, r0
    9084:	e3a04001 	mov	r4, #1
    9088:	e1a00005 	mov	r0, r5
    908c:	e2844001 	add	r4, r4, #1
    9090:	ebffff8f 	bl	8ed4 <CActLED::On()>
    9094:	e1a00007 	mov	r0, r7
    9098:	eb00078e 	bl	aed8 <CTimer::SimpleMsDelay(unsigned int)>
    909c:	e1a00005 	mov	r0, r5
    90a0:	ebffff9b 	bl	8f14 <CActLED::Off()>
    90a4:	e1a00008 	mov	r0, r8
    90a8:	eb00078a 	bl	aed8 <CTimer::SimpleMsDelay(unsigned int)>
    90ac:	e1560004 	cmp	r6, r4
    90b0:	2afffff4 	bcs	9088 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    90b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000090b8 <CActLED::Get()>:
    90b8:	e30331ac 	movw	r3, #12716	; 0x31ac
    90bc:	e3403005 	movt	r3, #5
    90c0:	e5930000 	ldr	r0, [r3]
    90c4:	e12fff1e 	bx	lr

000090c8 <CBcmPropertyTags::CBcmPropertyTags()>:
    90c8:	e92d4010 	push	{r4, lr}
    90cc:	e3a01008 	mov	r1, #8
    90d0:	e1a04000 	mov	r4, r0
    90d4:	eb001baa 	bl	ff84 <CBcmMailBox::CBcmMailBox(unsigned int)>
    90d8:	e1a00004 	mov	r0, r4
    90dc:	e8bd8010 	pop	{r4, pc}

000090e0 <CBcmPropertyTags::~CBcmPropertyTags()>:
    90e0:	e92d4010 	push	{r4, lr}
    90e4:	e1a04000 	mov	r4, r0
    90e8:	eb001ba8 	bl	ff90 <CBcmMailBox::~CBcmMailBox()>
    90ec:	e1a00004 	mov	r0, r4
    90f0:	e8bd8010 	pop	{r4, pc}

000090f4 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    90f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    90f8:	e2519000 	subs	r9, r1, #0
    90fc:	e1a0a000 	mov	sl, r0
    9100:	e1a04002 	mov	r4, r2
    9104:	0a000030 	beq	91cc <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd8>
    9108:	e354000f 	cmp	r4, #15
    910c:	9a000027 	bls	91b0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xbc>
    9110:	e284800c 	add	r8, r4, #12
    9114:	e3180003 	tst	r8, #3
    9118:	1a00001d 	bne	9194 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
    911c:	e3a06501 	mov	r6, #4194304	; 0x400000
    9120:	e3a05008 	mov	r5, #8
    9124:	e3405040 	movt	r5, #64	; 0x40
    9128:	e3a07000 	mov	r7, #0
    912c:	e1a00005 	mov	r0, r5
    9130:	e5868000 	str	r8, [r6]
    9134:	e1a02004 	mov	r2, r4
    9138:	e5867004 	str	r7, [r6, #4]
    913c:	e1a01009 	mov	r1, r9
    9140:	eb0007bf 	bl	b044 <memcpy>
    9144:	e7857004 	str	r7, [r5, r4]
    9148:	f57ff04f 	dsb	sy
    914c:	e1a01007 	mov	r1, r7
    9150:	e1a0000a 	mov	r0, sl
    9154:	e34c1040 	movt	r1, #49216	; 0xc040
    9158:	eb001bbc 	bl	10050 <CBcmMailBox::WriteRead(unsigned int)>
    915c:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
    9160:	0a000001 	beq	916c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x78>
    9164:	e3a00000 	mov	r0, #0
    9168:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    916c:	f57ff05f 	dmb	sy
    9170:	e5963004 	ldr	r3, [r6, #4]
    9174:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    9178:	1afffff9 	bne	9164 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x70>
    917c:	e1a02004 	mov	r2, r4
    9180:	e1a01005 	mov	r1, r5
    9184:	e1a00009 	mov	r0, r9
    9188:	eb0007ad 	bl	b044 <memcpy>
    918c:	e3a00001 	mov	r0, #1
    9190:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9194:	e3011340 	movw	r1, #4928	; 0x1340
    9198:	e3401005 	movt	r1, #5
    919c:	e301038c 	movw	r0, #5004	; 0x138c
    91a0:	e3400005 	movt	r0, #5
    91a4:	e3a02051 	mov	r2, #81	; 0x51
    91a8:	eb000e06 	bl	c9c8 <assertion_failed>
    91ac:	eaffffda 	b	911c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    91b0:	e3011340 	movw	r1, #4928	; 0x1340
    91b4:	e3401005 	movt	r1, #5
    91b8:	e3010360 	movw	r0, #4960	; 0x1360
    91bc:	e3400005 	movt	r0, #5
    91c0:	e3a0204f 	mov	r2, #79	; 0x4f
    91c4:	eb000dff 	bl	c9c8 <assertion_failed>
    91c8:	eaffffd0 	b	9110 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    91cc:	e3011340 	movw	r1, #4928	; 0x1340
    91d0:	e3401005 	movt	r1, #5
    91d4:	e3010354 	movw	r0, #4948	; 0x1354
    91d8:	e3400005 	movt	r0, #5
    91dc:	e3a0204e 	mov	r2, #78	; 0x4e
    91e0:	eb000df8 	bl	c9c8 <assertion_failed>
    91e4:	eaffffc7 	b	9108 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>

000091e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    91e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    91ec:	e2524000 	subs	r4, r2, #0
    91f0:	e1a08000 	mov	r8, r0
    91f4:	e1a07001 	mov	r7, r1
    91f8:	e1a05003 	mov	r5, r3
    91fc:	e59d6018 	ldr	r6, [sp, #24]
    9200:	0a00001d 	beq	927c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x94>
    9204:	e355000f 	cmp	r5, #15
    9208:	9a000014 	bls	9260 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
    920c:	e245300c 	sub	r3, r5, #12
    9210:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
    9214:	e5846008 	str	r6, [r4, #8]
    9218:	e1a00008 	mov	r0, r8
    921c:	e5847000 	str	r7, [r4]
    9220:	e1a02005 	mov	r2, r5
    9224:	e5843004 	str	r3, [r4, #4]
    9228:	e1a01004 	mov	r1, r4
    922c:	ebffffb0 	bl	90f4 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    9230:	e3500000 	cmp	r0, #0
    9234:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9238:	e5940008 	ldr	r0, [r4, #8]
    923c:	e3500000 	cmp	r0, #0
    9240:	ba000001 	blt	924c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
    9244:	e3a00000 	mov	r0, #0
    9248:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    924c:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    9250:	e5840008 	str	r0, [r4, #8]
    9254:	e2900000 	adds	r0, r0, #0
    9258:	13a00001 	movne	r0, #1
    925c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9260:	e3011340 	movw	r1, #4928	; 0x1340
    9264:	e3401005 	movt	r1, #5
    9268:	e30103b0 	movw	r0, #5040	; 0x13b0
    926c:	e3400005 	movt	r0, #5
    9270:	e3a02032 	mov	r2, #50	; 0x32
    9274:	eb000dd3 	bl	c9c8 <assertion_failed>
    9278:	eaffffe3 	b	920c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    927c:	e3011340 	movw	r1, #4928	; 0x1340
    9280:	e3401005 	movt	r1, #5
    9284:	e30103a4 	movw	r0, #5028	; 0x13a4
    9288:	e3400005 	movt	r0, #5
    928c:	e3a02031 	mov	r2, #49	; 0x31
    9290:	eb000dcc 	bl	c9c8 <assertion_failed>
    9294:	eaffffda 	b	9204 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>

00009298 <CGPIOPin::~CGPIOPin()>:
    9298:	e12fff1e 	bx	lr

0000929c <CGPIOPin::~CGPIOPin()>:
    929c:	e92d4010 	push	{r4, lr}
    92a0:	e1a04000 	mov	r4, r0
    92a4:	eb00041c 	bl	a31c <operator delete(void*)>
    92a8:	e1a00004 	mov	r0, r4
    92ac:	e8bd8010 	pop	{r4, pc}

000092b0 <CGPIOPin::Write(unsigned int)>:
    92b0:	e5d03008 	ldrb	r3, [r0, #8]
    92b4:	e92d4070 	push	{r4, r5, r6, lr}
    92b8:	e1a04000 	mov	r4, r0
    92bc:	e3530003 	cmp	r3, #3
    92c0:	e1a05001 	mov	r5, r1
    92c4:	ca000017 	bgt	9328 <CGPIOPin::Write(unsigned int)+0x78>
    92c8:	e3550001 	cmp	r5, #1
    92cc:	9a000005 	bls	92e8 <CGPIOPin::Write(unsigned int)+0x38>
    92d0:	e3011400 	movw	r1, #5120	; 0x1400
    92d4:	e3401005 	movt	r1, #5
    92d8:	e3010430 	movw	r0, #5168	; 0x1430
    92dc:	e3400005 	movt	r0, #5
    92e0:	e3a02081 	mov	r2, #129	; 0x81
    92e4:	eb000db7 	bl	c9c8 <assertion_failed>
    92e8:	e5943004 	ldr	r3, [r4, #4]
    92ec:	e584500c 	str	r5, [r4, #12]
    92f0:	e3530035 	cmp	r3, #53	; 0x35
    92f4:	8a000012 	bhi	9344 <CGPIOPin::Write(unsigned int)+0x94>
    92f8:	e203c01f 	and	ip, r3, #31
    92fc:	e3a0001c 	mov	r0, #28
    9300:	e3430f20 	movt	r0, #16160	; 0x3f20
    9304:	e3a01001 	mov	r1, #1
    9308:	e3550000 	cmp	r5, #0
    930c:	e3a02028 	mov	r2, #40	; 0x28
    9310:	e3432f20 	movt	r2, #16160	; 0x3f20
    9314:	e1a032a3 	lsr	r3, r3, #5
    9318:	11a02000 	movne	r2, r0
    931c:	e1a01c11 	lsl	r1, r1, ip
    9320:	e7821103 	str	r1, [r2, r3, lsl #2]
    9324:	e8bd8070 	pop	{r4, r5, r6, pc}
    9328:	e3011400 	movw	r1, #5120	; 0x1400
    932c:	e3401005 	movt	r1, #5
    9330:	e301040c 	movw	r0, #5132	; 0x140c
    9334:	e3400005 	movt	r0, #5
    9338:	e3a0207d 	mov	r2, #125	; 0x7d
    933c:	eb000da1 	bl	c9c8 <assertion_failed>
    9340:	eaffffe0 	b	92c8 <CGPIOPin::Write(unsigned int)+0x18>
    9344:	e3011400 	movw	r1, #5120	; 0x1400
    9348:	e3401005 	movt	r1, #5
    934c:	e3010450 	movw	r0, #5200	; 0x1450
    9350:	e3400005 	movt	r0, #5
    9354:	e3a02084 	mov	r2, #132	; 0x84
    9358:	eb000d9a 	bl	c9c8 <assertion_failed>
    935c:	e594500c 	ldr	r5, [r4, #12]
    9360:	e5943004 	ldr	r3, [r4, #4]
    9364:	eaffffe3 	b	92f8 <CGPIOPin::Write(unsigned int)+0x48>

00009368 <CGPIOPin::Read() const>:
    9368:	e5d03008 	ldrb	r3, [r0, #8]
    936c:	e92d4010 	push	{r4, lr}
    9370:	e1a04000 	mov	r4, r0
    9374:	e2432002 	sub	r2, r3, #2
    9378:	e3530000 	cmp	r3, #0
    937c:	13520001 	cmpne	r2, #1
    9380:	9a000005 	bls	939c <CGPIOPin::Read() const+0x34>
    9384:	e3011400 	movw	r1, #5120	; 0x1400
    9388:	e3401005 	movt	r1, #5
    938c:	e3010464 	movw	r0, #5220	; 0x1464
    9390:	e3400005 	movt	r0, #5
    9394:	e3a02091 	mov	r2, #145	; 0x91
    9398:	eb000d8a 	bl	c9c8 <assertion_failed>
    939c:	e5942004 	ldr	r2, [r4, #4]
    93a0:	e3520035 	cmp	r2, #53	; 0x35
    93a4:	8a000009 	bhi	93d0 <CGPIOPin::Read() const+0x68>
    93a8:	e3a0300d 	mov	r3, #13
    93ac:	e3403fc8 	movt	r3, #4040	; 0xfc8
    93b0:	e3a00001 	mov	r0, #1
    93b4:	e202101f 	and	r1, r2, #31
    93b8:	e08332a2 	add	r3, r3, r2, lsr #5
    93bc:	e1a03103 	lsl	r3, r3, #2
    93c0:	e5933000 	ldr	r3, [r3]
    93c4:	e0133110 	ands	r3, r3, r0, lsl r1
    93c8:	03a00000 	moveq	r0, #0
    93cc:	e8bd8010 	pop	{r4, pc}
    93d0:	e3a02095 	mov	r2, #149	; 0x95
    93d4:	e3011400 	movw	r1, #5120	; 0x1400
    93d8:	e3401005 	movt	r1, #5
    93dc:	e3010450 	movw	r0, #5200	; 0x1450
    93e0:	e3400005 	movt	r0, #5
    93e4:	eb000d77 	bl	c9c8 <assertion_failed>
    93e8:	e5942004 	ldr	r2, [r4, #4]
    93ec:	eaffffed 	b	93a8 <CGPIOPin::Read() const+0x40>

000093f0 <CGPIOPin::Invert()>:
    93f0:	e5d03008 	ldrb	r3, [r0, #8]
    93f4:	e92d4010 	push	{r4, lr}
    93f8:	e1a04000 	mov	r4, r0
    93fc:	e3530001 	cmp	r3, #1
    9400:	0a000005 	beq	941c <CGPIOPin::Invert()+0x2c>
    9404:	e3011400 	movw	r1, #5120	; 0x1400
    9408:	e3401005 	movt	r1, #5
    940c:	e30104c0 	movw	r0, #5312	; 0x14c0
    9410:	e3400005 	movt	r0, #5
    9414:	e3a020a2 	mov	r2, #162	; 0xa2
    9418:	eb000d6a 	bl	c9c8 <assertion_failed>
    941c:	e594100c 	ldr	r1, [r4, #12]
    9420:	e1a00004 	mov	r0, r4
    9424:	e8bd4010 	pop	{r4, lr}
    9428:	e2211001 	eor	r1, r1, #1
    942c:	eaffff9f 	b	92b0 <CGPIOPin::Write(unsigned int)>

00009430 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    9430:	e5d03008 	ldrb	r3, [r0, #8]
    9434:	e92d4070 	push	{r4, r5, r6, lr}
    9438:	e1a06002 	mov	r6, r2
    943c:	e2432002 	sub	r2, r3, #2
    9440:	e3530000 	cmp	r3, #0
    9444:	13520001 	cmpne	r2, #1
    9448:	e1a04000 	mov	r4, r0
    944c:	e1a05001 	mov	r5, r1
    9450:	9a000005 	bls	946c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x3c>
    9454:	e3011400 	movw	r1, #5120	; 0x1400
    9458:	e3401005 	movt	r1, #5
    945c:	e3010464 	movw	r0, #5220	; 0x1464
    9460:	e3400005 	movt	r0, #5
    9464:	e3a020ab 	mov	r2, #171	; 0xab
    9468:	eb000d56 	bl	c9c8 <assertion_failed>
    946c:	e5d4301c 	ldrb	r3, [r4, #28]
    9470:	e3530006 	cmp	r3, #6
    9474:	0a000005 	beq	9490 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x60>
    9478:	e3011400 	movw	r1, #5120	; 0x1400
    947c:	e3401005 	movt	r1, #5
    9480:	e30104dc 	movw	r0, #5340	; 0x14dc
    9484:	e3400005 	movt	r0, #5
    9488:	e3a020ad 	mov	r2, #173	; 0xad
    948c:	eb000d4d 	bl	c9c8 <assertion_failed>
    9490:	e5d4301d 	ldrb	r3, [r4, #29]
    9494:	e3530006 	cmp	r3, #6
    9498:	0a000005 	beq	94b4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x84>
    949c:	e3011400 	movw	r1, #5120	; 0x1400
    94a0:	e3401005 	movt	r1, #5
    94a4:	e3010500 	movw	r0, #5376	; 0x1500
    94a8:	e3400005 	movt	r0, #5
    94ac:	e3a020ae 	mov	r2, #174	; 0xae
    94b0:	eb000d44 	bl	c9c8 <assertion_failed>
    94b4:	e3550000 	cmp	r5, #0
    94b8:	0a00001a 	beq	9528 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    94bc:	e5943014 	ldr	r3, [r4, #20]
    94c0:	e3530000 	cmp	r3, #0
    94c4:	0a000005 	beq	94e0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    94c8:	e3011400 	movw	r1, #5120	; 0x1400
    94cc:	e3401005 	movt	r1, #5
    94d0:	e3010538 	movw	r0, #5432	; 0x1538
    94d4:	e3400005 	movt	r0, #5
    94d8:	e3a020b1 	mov	r2, #177	; 0xb1
    94dc:	eb000d39 	bl	c9c8 <assertion_failed>
    94e0:	e5940010 	ldr	r0, [r4, #16]
    94e4:	e5845014 	str	r5, [r4, #20]
    94e8:	e3500000 	cmp	r0, #0
    94ec:	e5846018 	str	r6, [r4, #24]
    94f0:	0a000002 	beq	9500 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    94f4:	e1a01004 	mov	r1, r4
    94f8:	e8bd4070 	pop	{r4, r5, r6, lr}
    94fc:	ea0015c4 	b	ec14 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    9500:	e3011400 	movw	r1, #5120	; 0x1400
    9504:	e3401005 	movt	r1, #5
    9508:	e3010548 	movw	r0, #5448	; 0x1548
    950c:	e3400005 	movt	r0, #5
    9510:	e3a020b6 	mov	r2, #182	; 0xb6
    9514:	eb000d2b 	bl	c9c8 <assertion_failed>
    9518:	e5940010 	ldr	r0, [r4, #16]
    951c:	e1a01004 	mov	r1, r4
    9520:	e8bd4070 	pop	{r4, r5, r6, lr}
    9524:	ea0015ba 	b	ec14 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    9528:	e3011400 	movw	r1, #5120	; 0x1400
    952c:	e3401005 	movt	r1, #5
    9530:	e3010528 	movw	r0, #5416	; 0x1528
    9534:	e3400005 	movt	r0, #5
    9538:	e3a020b0 	mov	r2, #176	; 0xb0
    953c:	eb000d21 	bl	c9c8 <assertion_failed>
    9540:	eaffffdd 	b	94bc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x8c>

00009544 <CGPIOPin::DisconnectInterrupt()>:
    9544:	e5d03008 	ldrb	r3, [r0, #8]
    9548:	e92d4010 	push	{r4, lr}
    954c:	e1a04000 	mov	r4, r0
    9550:	e2432002 	sub	r2, r3, #2
    9554:	e3530000 	cmp	r3, #0
    9558:	13520001 	cmpne	r2, #1
    955c:	9a000005 	bls	9578 <CGPIOPin::DisconnectInterrupt()+0x34>
    9560:	e3011400 	movw	r1, #5120	; 0x1400
    9564:	e3401005 	movt	r1, #5
    9568:	e3010464 	movw	r0, #5220	; 0x1464
    956c:	e3400005 	movt	r0, #5
    9570:	e3a020be 	mov	r2, #190	; 0xbe
    9574:	eb000d13 	bl	c9c8 <assertion_failed>
    9578:	e5d4301c 	ldrb	r3, [r4, #28]
    957c:	e3530006 	cmp	r3, #6
    9580:	0a000005 	beq	959c <CGPIOPin::DisconnectInterrupt()+0x58>
    9584:	e3011400 	movw	r1, #5120	; 0x1400
    9588:	e3401005 	movt	r1, #5
    958c:	e30104dc 	movw	r0, #5340	; 0x14dc
    9590:	e3400005 	movt	r0, #5
    9594:	e3a020c0 	mov	r2, #192	; 0xc0
    9598:	eb000d0a 	bl	c9c8 <assertion_failed>
    959c:	e5d4301d 	ldrb	r3, [r4, #29]
    95a0:	e3530006 	cmp	r3, #6
    95a4:	0a000005 	beq	95c0 <CGPIOPin::DisconnectInterrupt()+0x7c>
    95a8:	e3011400 	movw	r1, #5120	; 0x1400
    95ac:	e3401005 	movt	r1, #5
    95b0:	e3010500 	movw	r0, #5376	; 0x1500
    95b4:	e3400005 	movt	r0, #5
    95b8:	e3a020c1 	mov	r2, #193	; 0xc1
    95bc:	eb000d01 	bl	c9c8 <assertion_failed>
    95c0:	e5943014 	ldr	r3, [r4, #20]
    95c4:	e3530000 	cmp	r3, #0
    95c8:	0a000011 	beq	9614 <CGPIOPin::DisconnectInterrupt()+0xd0>
    95cc:	e5940010 	ldr	r0, [r4, #16]
    95d0:	e3a03000 	mov	r3, #0
    95d4:	e5843014 	str	r3, [r4, #20]
    95d8:	e1500003 	cmp	r0, r3
    95dc:	0a000002 	beq	95ec <CGPIOPin::DisconnectInterrupt()+0xa8>
    95e0:	e1a01004 	mov	r1, r4
    95e4:	e8bd4010 	pop	{r4, lr}
    95e8:	ea0015b5 	b	ecc4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    95ec:	e3011400 	movw	r1, #5120	; 0x1400
    95f0:	e3401005 	movt	r1, #5
    95f4:	e3010548 	movw	r0, #5448	; 0x1548
    95f8:	e3400005 	movt	r0, #5
    95fc:	e3a020c6 	mov	r2, #198	; 0xc6
    9600:	eb000cf0 	bl	c9c8 <assertion_failed>
    9604:	e5940010 	ldr	r0, [r4, #16]
    9608:	e1a01004 	mov	r1, r4
    960c:	e8bd4010 	pop	{r4, lr}
    9610:	ea0015ab 	b	ecc4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    9614:	e3011400 	movw	r1, #5120	; 0x1400
    9618:	e3401005 	movt	r1, #5
    961c:	e3010558 	movw	r0, #5464	; 0x1558
    9620:	e3400005 	movt	r0, #5
    9624:	e3a020c3 	mov	r2, #195	; 0xc3
    9628:	eb000ce6 	bl	c9c8 <assertion_failed>
    962c:	eaffffe6 	b	95cc <CGPIOPin::DisconnectInterrupt()+0x88>

00009630 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    9630:	e5d03008 	ldrb	r3, [r0, #8]
    9634:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9638:	e1a04000 	mov	r4, r0
    963c:	e2432002 	sub	r2, r3, #2
    9640:	e3530000 	cmp	r3, #0
    9644:	13520001 	cmpne	r2, #1
    9648:	e1a08001 	mov	r8, r1
    964c:	9a000005 	bls	9668 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x38>
    9650:	e3011400 	movw	r1, #5120	; 0x1400
    9654:	e3401005 	movt	r1, #5
    9658:	e3010464 	movw	r0, #5220	; 0x1464
    965c:	e3400005 	movt	r0, #5
    9660:	e3a020ce 	mov	r2, #206	; 0xce
    9664:	eb000cd7 	bl	c9c8 <assertion_failed>
    9668:	e5943010 	ldr	r3, [r4, #16]
    966c:	e3530000 	cmp	r3, #0
    9670:	0a000043 	beq	9784 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    9674:	e5943014 	ldr	r3, [r4, #20]
    9678:	e3530000 	cmp	r3, #0
    967c:	0a000047 	beq	97a0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x170>
    9680:	e5d4301c 	ldrb	r3, [r4, #28]
    9684:	e3530006 	cmp	r3, #6
    9688:	0a000005 	beq	96a4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x74>
    968c:	e3011400 	movw	r1, #5120	; 0x1400
    9690:	e3401005 	movt	r1, #5
    9694:	e30104dc 	movw	r0, #5340	; 0x14dc
    9698:	e3400005 	movt	r0, #5
    969c:	e3a020d2 	mov	r2, #210	; 0xd2
    96a0:	eb000cc8 	bl	c9c8 <assertion_failed>
    96a4:	e3580005 	cmp	r8, #5
    96a8:	ca000025 	bgt	9744 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
    96ac:	e5d4301d 	ldrb	r3, [r4, #29]
    96b0:	e1530008 	cmp	r3, r8
    96b4:	0a00002b 	beq	9768 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x138>
    96b8:	e5943004 	ldr	r3, [r4, #4]
    96bc:	e5c4801c 	strb	r8, [r4, #28]
    96c0:	e3530035 	cmp	r3, #53	; 0x35
    96c4:	8a000016 	bhi	9724 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    96c8:	e30361b0 	movw	r6, #12720	; 0x31b0
    96cc:	e3406005 	movt	r6, #5
    96d0:	e203101f 	and	r1, r3, #31
    96d4:	e3a05001 	mov	r5, #1
    96d8:	e3a0700c 	mov	r7, #12
    96dc:	e3a04013 	mov	r4, #19
    96e0:	e3404fc8 	movt	r4, #4040	; 0xfc8
    96e4:	e5962000 	ldr	r2, [r6]
    96e8:	e1a05115 	lsl	r5, r5, r1
    96ec:	e08442a3 	add	r4, r4, r3, lsr #5
    96f0:	e0070897 	mul	r7, r7, r8
    96f4:	e3520000 	cmp	r2, #0
    96f8:	1a000007 	bne	971c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xec>
    96fc:	e7973104 	ldr	r3, [r7, r4, lsl #2]
    9700:	e1855003 	orr	r5, r5, r3
    9704:	e7875104 	str	r5, [r7, r4, lsl #2]
    9708:	e5963000 	ldr	r3, [r6]
    970c:	e3530000 	cmp	r3, #0
    9710:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9714:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9718:	ea00030e 	b	a358 <LeaveCritical>
    971c:	eb000300 	bl	a324 <EnterCritical>
    9720:	eafffff5 	b	96fc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
    9724:	e3011400 	movw	r1, #5120	; 0x1400
    9728:	e3401005 	movt	r1, #5
    972c:	e3010450 	movw	r0, #5200	; 0x1450
    9730:	e3400005 	movt	r0, #5
    9734:	e3a020d7 	mov	r2, #215	; 0xd7
    9738:	eb000ca2 	bl	c9c8 <assertion_failed>
    973c:	e5943004 	ldr	r3, [r4, #4]
    9740:	eaffffe0 	b	96c8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x98>
    9744:	e3011400 	movw	r1, #5120	; 0x1400
    9748:	e3401005 	movt	r1, #5
    974c:	e3010568 	movw	r0, #5480	; 0x1568
    9750:	e3400005 	movt	r0, #5
    9754:	e3a020d3 	mov	r2, #211	; 0xd3
    9758:	eb000c9a 	bl	c9c8 <assertion_failed>
    975c:	e5d4301d 	ldrb	r3, [r4, #29]
    9760:	e1530008 	cmp	r3, r8
    9764:	1affffd3 	bne	96b8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x88>
    9768:	e3011400 	movw	r1, #5120	; 0x1400
    976c:	e3401005 	movt	r1, #5
    9770:	e301058c 	movw	r0, #5516	; 0x158c
    9774:	e3400005 	movt	r0, #5
    9778:	e3a020d4 	mov	r2, #212	; 0xd4
    977c:	eb000c91 	bl	c9c8 <assertion_failed>
    9780:	eaffffcc 	b	96b8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x88>
    9784:	e3011400 	movw	r1, #5120	; 0x1400
    9788:	e3401005 	movt	r1, #5
    978c:	e3010548 	movw	r0, #5448	; 0x1548
    9790:	e3400005 	movt	r0, #5
    9794:	e3a020cf 	mov	r2, #207	; 0xcf
    9798:	eb000c8a 	bl	c9c8 <assertion_failed>
    979c:	eaffffb4 	b	9674 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x44>
    97a0:	e3011400 	movw	r1, #5120	; 0x1400
    97a4:	e3401005 	movt	r1, #5
    97a8:	e3010558 	movw	r0, #5464	; 0x1558
    97ac:	e3400005 	movt	r0, #5
    97b0:	e3a020d0 	mov	r2, #208	; 0xd0
    97b4:	eb000c83 	bl	c9c8 <assertion_failed>
    97b8:	eaffffb0 	b	9680 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x50>

000097bc <CGPIOPin::DisableInterrupt()>:
    97bc:	e5d03008 	ldrb	r3, [r0, #8]
    97c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    97c4:	e1a04000 	mov	r4, r0
    97c8:	e2432002 	sub	r2, r3, #2
    97cc:	e3530000 	cmp	r3, #0
    97d0:	13520001 	cmpne	r2, #1
    97d4:	9a000005 	bls	97f0 <CGPIOPin::DisableInterrupt()+0x34>
    97d8:	e3011400 	movw	r1, #5120	; 0x1400
    97dc:	e3401005 	movt	r1, #5
    97e0:	e3010464 	movw	r0, #5220	; 0x1464
    97e4:	e3400005 	movt	r0, #5
    97e8:	e3a020e8 	mov	r2, #232	; 0xe8
    97ec:	eb000c75 	bl	c9c8 <assertion_failed>
    97f0:	e5d4301c 	ldrb	r3, [r4, #28]
    97f4:	e3530005 	cmp	r3, #5
    97f8:	ca000024 	bgt	9890 <CGPIOPin::DisableInterrupt()+0xd4>
    97fc:	e5943004 	ldr	r3, [r4, #4]
    9800:	e3530035 	cmp	r3, #53	; 0x35
    9804:	8a000019 	bhi	9870 <CGPIOPin::DisableInterrupt()+0xb4>
    9808:	e30361b0 	movw	r6, #12720	; 0x31b0
    980c:	e3406005 	movt	r6, #5
    9810:	e5d4201c 	ldrb	r2, [r4, #28]
    9814:	e203101f 	and	r1, r3, #31
    9818:	e3a08001 	mov	r8, #1
    981c:	e3a0700c 	mov	r7, #12
    9820:	e5960000 	ldr	r0, [r6]
    9824:	e3a05013 	mov	r5, #19
    9828:	e3405fc8 	movt	r5, #4040	; 0xfc8
    982c:	e3500000 	cmp	r0, #0
    9830:	e1a08118 	lsl	r8, r8, r1
    9834:	e08552a3 	add	r5, r5, r3, lsr #5
    9838:	e0070297 	mul	r7, r7, r2
    983c:	1a000009 	bne	9868 <CGPIOPin::DisableInterrupt()+0xac>
    9840:	e7973105 	ldr	r3, [r7, r5, lsl #2]
    9844:	e1c33008 	bic	r3, r3, r8
    9848:	e7873105 	str	r3, [r7, r5, lsl #2]
    984c:	e5963000 	ldr	r3, [r6]
    9850:	e3530000 	cmp	r3, #0
    9854:	0a000000 	beq	985c <CGPIOPin::DisableInterrupt()+0xa0>
    9858:	eb0002be 	bl	a358 <LeaveCritical>
    985c:	e3a03006 	mov	r3, #6
    9860:	e5c4301c 	strb	r3, [r4, #28]
    9864:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9868:	eb0002ad 	bl	a324 <EnterCritical>
    986c:	eafffff3 	b	9840 <CGPIOPin::DisableInterrupt()+0x84>
    9870:	e3011400 	movw	r1, #5120	; 0x1400
    9874:	e3401005 	movt	r1, #5
    9878:	e3010450 	movw	r0, #5200	; 0x1450
    987c:	e3400005 	movt	r0, #5
    9880:	e3a020ec 	mov	r2, #236	; 0xec
    9884:	eb000c4f 	bl	c9c8 <assertion_failed>
    9888:	e5943004 	ldr	r3, [r4, #4]
    988c:	eaffffdd 	b	9808 <CGPIOPin::DisableInterrupt()+0x4c>
    9890:	e3011400 	movw	r1, #5120	; 0x1400
    9894:	e3401005 	movt	r1, #5
    9898:	e30105a8 	movw	r0, #5544	; 0x15a8
    989c:	e3400005 	movt	r0, #5
    98a0:	e3a020ea 	mov	r2, #234	; 0xea
    98a4:	eb000c47 	bl	c9c8 <assertion_failed>
    98a8:	eaffffd3 	b	97fc <CGPIOPin::DisableInterrupt()+0x40>

000098ac <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    98ac:	e5d03008 	ldrb	r3, [r0, #8]
    98b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    98b4:	e1a04000 	mov	r4, r0
    98b8:	e2432002 	sub	r2, r3, #2
    98bc:	e3530000 	cmp	r3, #0
    98c0:	13520001 	cmpne	r2, #1
    98c4:	e1a08001 	mov	r8, r1
    98c8:	9a000005 	bls	98e4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x38>
    98cc:	e3011400 	movw	r1, #5120	; 0x1400
    98d0:	e3401005 	movt	r1, #5
    98d4:	e3010464 	movw	r0, #5220	; 0x1464
    98d8:	e3400005 	movt	r0, #5
    98dc:	e3a020fe 	mov	r2, #254	; 0xfe
    98e0:	eb000c38 	bl	c9c8 <assertion_failed>
    98e4:	e5943010 	ldr	r3, [r4, #16]
    98e8:	e3530000 	cmp	r3, #0
    98ec:	0a000043 	beq	9a00 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    98f0:	e5943014 	ldr	r3, [r4, #20]
    98f4:	e3530000 	cmp	r3, #0
    98f8:	0a000047 	beq	9a1c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x170>
    98fc:	e5d4301d 	ldrb	r3, [r4, #29]
    9900:	e3530006 	cmp	r3, #6
    9904:	0a000005 	beq	9920 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x74>
    9908:	e3011400 	movw	r1, #5120	; 0x1400
    990c:	e3401005 	movt	r1, #5
    9910:	e3010500 	movw	r0, #5376	; 0x1500
    9914:	e3400005 	movt	r0, #5
    9918:	e3002102 	movw	r2, #258	; 0x102
    991c:	eb000c29 	bl	c9c8 <assertion_failed>
    9920:	e3580005 	cmp	r8, #5
    9924:	ca000025 	bgt	99c0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
    9928:	e5d4301c 	ldrb	r3, [r4, #28]
    992c:	e1530008 	cmp	r3, r8
    9930:	0a00002b 	beq	99e4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x138>
    9934:	e5943004 	ldr	r3, [r4, #4]
    9938:	e5c4801d 	strb	r8, [r4, #29]
    993c:	e3530035 	cmp	r3, #53	; 0x35
    9940:	8a000016 	bhi	99a0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    9944:	e30361b0 	movw	r6, #12720	; 0x31b0
    9948:	e3406005 	movt	r6, #5
    994c:	e203101f 	and	r1, r3, #31
    9950:	e3a05001 	mov	r5, #1
    9954:	e3a0700c 	mov	r7, #12
    9958:	e3a04013 	mov	r4, #19
    995c:	e3404fc8 	movt	r4, #4040	; 0xfc8
    9960:	e5962000 	ldr	r2, [r6]
    9964:	e1a05115 	lsl	r5, r5, r1
    9968:	e08442a3 	add	r4, r4, r3, lsr #5
    996c:	e0070897 	mul	r7, r7, r8
    9970:	e3520000 	cmp	r2, #0
    9974:	1a000007 	bne	9998 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xec>
    9978:	e7973104 	ldr	r3, [r7, r4, lsl #2]
    997c:	e1855003 	orr	r5, r5, r3
    9980:	e7875104 	str	r5, [r7, r4, lsl #2]
    9984:	e5963000 	ldr	r3, [r6]
    9988:	e3530000 	cmp	r3, #0
    998c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9990:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9994:	ea00026f 	b	a358 <LeaveCritical>
    9998:	eb000261 	bl	a324 <EnterCritical>
    999c:	eafffff5 	b	9978 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
    99a0:	e3011400 	movw	r1, #5120	; 0x1400
    99a4:	e3401005 	movt	r1, #5
    99a8:	e3010450 	movw	r0, #5200	; 0x1450
    99ac:	e3400005 	movt	r0, #5
    99b0:	e3002107 	movw	r2, #263	; 0x107
    99b4:	eb000c03 	bl	c9c8 <assertion_failed>
    99b8:	e5943004 	ldr	r3, [r4, #4]
    99bc:	eaffffe0 	b	9944 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x98>
    99c0:	e3011400 	movw	r1, #5120	; 0x1400
    99c4:	e3401005 	movt	r1, #5
    99c8:	e3010568 	movw	r0, #5480	; 0x1568
    99cc:	e3400005 	movt	r0, #5
    99d0:	e3002103 	movw	r2, #259	; 0x103
    99d4:	eb000bfb 	bl	c9c8 <assertion_failed>
    99d8:	e5d4301c 	ldrb	r3, [r4, #28]
    99dc:	e1530008 	cmp	r3, r8
    99e0:	1affffd3 	bne	9934 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x88>
    99e4:	e3011400 	movw	r1, #5120	; 0x1400
    99e8:	e3401005 	movt	r1, #5
    99ec:	e30105cc 	movw	r0, #5580	; 0x15cc
    99f0:	e3400005 	movt	r0, #5
    99f4:	e3a02f41 	mov	r2, #260	; 0x104
    99f8:	eb000bf2 	bl	c9c8 <assertion_failed>
    99fc:	eaffffcc 	b	9934 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x88>
    9a00:	e3011400 	movw	r1, #5120	; 0x1400
    9a04:	e3401005 	movt	r1, #5
    9a08:	e3010548 	movw	r0, #5448	; 0x1548
    9a0c:	e3400005 	movt	r0, #5
    9a10:	e3a020ff 	mov	r2, #255	; 0xff
    9a14:	eb000beb 	bl	c9c8 <assertion_failed>
    9a18:	eaffffb4 	b	98f0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x44>
    9a1c:	e3011400 	movw	r1, #5120	; 0x1400
    9a20:	e3401005 	movt	r1, #5
    9a24:	e3010558 	movw	r0, #5464	; 0x1558
    9a28:	e3400005 	movt	r0, #5
    9a2c:	e3a02c01 	mov	r2, #256	; 0x100
    9a30:	eb000be4 	bl	c9c8 <assertion_failed>
    9a34:	eaffffb0 	b	98fc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x50>

00009a38 <CGPIOPin::DisableInterrupt2()>:
    9a38:	e5d03008 	ldrb	r3, [r0, #8]
    9a3c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9a40:	e1a04000 	mov	r4, r0
    9a44:	e2432002 	sub	r2, r3, #2
    9a48:	e3530000 	cmp	r3, #0
    9a4c:	13520001 	cmpne	r2, #1
    9a50:	9a000005 	bls	9a6c <CGPIOPin::DisableInterrupt2()+0x34>
    9a54:	e3011400 	movw	r1, #5120	; 0x1400
    9a58:	e3401005 	movt	r1, #5
    9a5c:	e3010464 	movw	r0, #5220	; 0x1464
    9a60:	e3400005 	movt	r0, #5
    9a64:	e3a02f46 	mov	r2, #280	; 0x118
    9a68:	eb000bd6 	bl	c9c8 <assertion_failed>
    9a6c:	e5d4301d 	ldrb	r3, [r4, #29]
    9a70:	e3530005 	cmp	r3, #5
    9a74:	ca000024 	bgt	9b0c <CGPIOPin::DisableInterrupt2()+0xd4>
    9a78:	e5943004 	ldr	r3, [r4, #4]
    9a7c:	e3530035 	cmp	r3, #53	; 0x35
    9a80:	8a000019 	bhi	9aec <CGPIOPin::DisableInterrupt2()+0xb4>
    9a84:	e30361b0 	movw	r6, #12720	; 0x31b0
    9a88:	e3406005 	movt	r6, #5
    9a8c:	e5d4201d 	ldrb	r2, [r4, #29]
    9a90:	e203101f 	and	r1, r3, #31
    9a94:	e3a08001 	mov	r8, #1
    9a98:	e3a0700c 	mov	r7, #12
    9a9c:	e5960000 	ldr	r0, [r6]
    9aa0:	e3a05013 	mov	r5, #19
    9aa4:	e3405fc8 	movt	r5, #4040	; 0xfc8
    9aa8:	e3500000 	cmp	r0, #0
    9aac:	e1a08118 	lsl	r8, r8, r1
    9ab0:	e08552a3 	add	r5, r5, r3, lsr #5
    9ab4:	e0070297 	mul	r7, r7, r2
    9ab8:	1a000009 	bne	9ae4 <CGPIOPin::DisableInterrupt2()+0xac>
    9abc:	e7973105 	ldr	r3, [r7, r5, lsl #2]
    9ac0:	e1c33008 	bic	r3, r3, r8
    9ac4:	e7873105 	str	r3, [r7, r5, lsl #2]
    9ac8:	e5963000 	ldr	r3, [r6]
    9acc:	e3530000 	cmp	r3, #0
    9ad0:	0a000000 	beq	9ad8 <CGPIOPin::DisableInterrupt2()+0xa0>
    9ad4:	eb00021f 	bl	a358 <LeaveCritical>
    9ad8:	e3a03006 	mov	r3, #6
    9adc:	e5c4301d 	strb	r3, [r4, #29]
    9ae0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9ae4:	eb00020e 	bl	a324 <EnterCritical>
    9ae8:	eafffff3 	b	9abc <CGPIOPin::DisableInterrupt2()+0x84>
    9aec:	e3011400 	movw	r1, #5120	; 0x1400
    9af0:	e3401005 	movt	r1, #5
    9af4:	e3010450 	movw	r0, #5200	; 0x1450
    9af8:	e3400005 	movt	r0, #5
    9afc:	e3a02f47 	mov	r2, #284	; 0x11c
    9b00:	eb000bb0 	bl	c9c8 <assertion_failed>
    9b04:	e5943004 	ldr	r3, [r4, #4]
    9b08:	eaffffdd 	b	9a84 <CGPIOPin::DisableInterrupt2()+0x4c>
    9b0c:	e3011400 	movw	r1, #5120	; 0x1400
    9b10:	e3401005 	movt	r1, #5
    9b14:	e30105e8 	movw	r0, #5608	; 0x15e8
    9b18:	e3400005 	movt	r0, #5
    9b1c:	e300211a 	movw	r2, #282	; 0x11a
    9b20:	eb000ba8 	bl	c9c8 <assertion_failed>
    9b24:	eaffffd3 	b	9a78 <CGPIOPin::DisableInterrupt2()+0x40>

00009b28 <CGPIOPin::SetPullUpMode(unsigned int)>:
    9b28:	e5903004 	ldr	r3, [r0, #4]
    9b2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9b30:	e1a08001 	mov	r8, r1
    9b34:	e3530035 	cmp	r3, #53	; 0x35
    9b38:	8a000026 	bhi	9bd8 <CGPIOPin::SetPullUpMode(unsigned int)+0xb0>
    9b3c:	e30351b0 	movw	r5, #12720	; 0x31b0
    9b40:	e3405005 	movt	r5, #5
    9b44:	e3a04026 	mov	r4, #38	; 0x26
    9b48:	e3404fc8 	movt	r4, #4040	; 0xfc8
    9b4c:	e203701f 	and	r7, r3, #31
    9b50:	e5952000 	ldr	r2, [r5]
    9b54:	e08442a3 	add	r4, r4, r3, lsr #5
    9b58:	e3520000 	cmp	r2, #0
    9b5c:	e1a04104 	lsl	r4, r4, #2
    9b60:	1a00001a 	bne	9bd0 <CGPIOPin::SetPullUpMode(unsigned int)+0xa8>
    9b64:	e3580002 	cmp	r8, #2
    9b68:	8a000011 	bhi	9bb4 <CGPIOPin::SetPullUpMode(unsigned int)+0x8c>
    9b6c:	e3a06000 	mov	r6, #0
    9b70:	e3436f20 	movt	r6, #16160	; 0x3f20
    9b74:	e3a00005 	mov	r0, #5
    9b78:	e5868094 	str	r8, [r6, #148]	; 0x94
    9b7c:	eb0004e5 	bl	af18 <CTimer::SimpleusDelay(unsigned int)>
    9b80:	e3a03001 	mov	r3, #1
    9b84:	e3a00005 	mov	r0, #5
    9b88:	e1a03713 	lsl	r3, r3, r7
    9b8c:	e5843000 	str	r3, [r4]
    9b90:	eb0004e0 	bl	af18 <CTimer::SimpleusDelay(unsigned int)>
    9b94:	e3a03000 	mov	r3, #0
    9b98:	e5863094 	str	r3, [r6, #148]	; 0x94
    9b9c:	e5843000 	str	r3, [r4]
    9ba0:	e5953000 	ldr	r3, [r5]
    9ba4:	e3530000 	cmp	r3, #0
    9ba8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9bac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9bb0:	ea0001e8 	b	a358 <LeaveCritical>
    9bb4:	e3011400 	movw	r1, #5120	; 0x1400
    9bb8:	e3401005 	movt	r1, #5
    9bbc:	e301060c 	movw	r0, #5644	; 0x160c
    9bc0:	e3400005 	movt	r0, #5
    9bc4:	e3002133 	movw	r2, #307	; 0x133
    9bc8:	eb000b7e 	bl	c9c8 <assertion_failed>
    9bcc:	eaffffe6 	b	9b6c <CGPIOPin::SetPullUpMode(unsigned int)+0x44>
    9bd0:	eb0001d3 	bl	a324 <EnterCritical>
    9bd4:	eaffffe2 	b	9b64 <CGPIOPin::SetPullUpMode(unsigned int)+0x3c>
    9bd8:	e1a04000 	mov	r4, r0
    9bdc:	e3011400 	movw	r1, #5120	; 0x1400
    9be0:	e3401005 	movt	r1, #5
    9be4:	e3010450 	movw	r0, #5200	; 0x1450
    9be8:	e3400005 	movt	r0, #5
    9bec:	e300212d 	movw	r2, #301	; 0x12d
    9bf0:	eb000b74 	bl	c9c8 <assertion_failed>
    9bf4:	e5943004 	ldr	r3, [r4, #4]
    9bf8:	eaffffcf 	b	9b3c <CGPIOPin::SetPullUpMode(unsigned int)+0x14>

00009bfc <CGPIOPin::SetAlternateFunction(unsigned int)>:
    9bfc:	e5902004 	ldr	r2, [r0, #4]
    9c00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9c04:	e1a06001 	mov	r6, r1
    9c08:	e3520035 	cmp	r2, #53	; 0x35
    9c0c:	8a000026 	bhi	9cac <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
    9c10:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    9c14:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    9c18:	e3a0100a 	mov	r1, #10
    9c1c:	e3560005 	cmp	r6, #5
    9c20:	e0843293 	umull	r3, r4, r3, r2
    9c24:	e1a041a4 	lsr	r4, r4, #3
    9c28:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    9c2c:	e2833702 	add	r3, r3, #524288	; 0x80000
    9c30:	e0642491 	mls	r4, r1, r4, r2
    9c34:	e1a07103 	lsl	r7, r3, #2
    9c38:	e0844084 	add	r4, r4, r4, lsl #1
    9c3c:	8a000013 	bhi	9c90 <CGPIOPin::SetAlternateFunction(unsigned int)+0x94>
    9c40:	e30351b0 	movw	r5, #12720	; 0x31b0
    9c44:	e3405005 	movt	r5, #5
    9c48:	e5953000 	ldr	r3, [r5]
    9c4c:	e3530000 	cmp	r3, #0
    9c50:	1a00000c 	bne	9c88 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    9c54:	e5973000 	ldr	r3, [r7]
    9c58:	e30123d8 	movw	r2, #5080	; 0x13d8
    9c5c:	e3402005 	movt	r2, #5
    9c60:	e3a01007 	mov	r1, #7
    9c64:	e7922106 	ldr	r2, [r2, r6, lsl #2]
    9c68:	e1c33411 	bic	r3, r3, r1, lsl r4
    9c6c:	e1834412 	orr	r4, r3, r2, lsl r4
    9c70:	e5874000 	str	r4, [r7]
    9c74:	e5953000 	ldr	r3, [r5]
    9c78:	e3530000 	cmp	r3, #0
    9c7c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9c80:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9c84:	ea0001b3 	b	a358 <LeaveCritical>
    9c88:	eb0001a5 	bl	a324 <EnterCritical>
    9c8c:	eafffff0 	b	9c54 <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
    9c90:	e3011400 	movw	r1, #5120	; 0x1400
    9c94:	e3401005 	movt	r1, #5
    9c98:	e3010618 	movw	r0, #5656	; 0x1618
    9c9c:	e3400005 	movt	r0, #5
    9ca0:	e3a02f51 	mov	r2, #324	; 0x144
    9ca4:	eb000b47 	bl	c9c8 <assertion_failed>
    9ca8:	eaffffe4 	b	9c40 <CGPIOPin::SetAlternateFunction(unsigned int)+0x44>
    9cac:	e1a04000 	mov	r4, r0
    9cb0:	e3a02d05 	mov	r2, #320	; 0x140
    9cb4:	e3011400 	movw	r1, #5120	; 0x1400
    9cb8:	e3401005 	movt	r1, #5
    9cbc:	e3010450 	movw	r0, #5200	; 0x1450
    9cc0:	e3400005 	movt	r0, #5
    9cc4:	eb000b3f 	bl	c9c8 <assertion_failed>
    9cc8:	e5942004 	ldr	r2, [r4, #4]
    9ccc:	eaffffcf 	b	9c10 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>

00009cd0 <CGPIOPin::SetMode(TGPIOMode, int)>:
    9cd0:	e3510009 	cmp	r1, #9
    9cd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9cd8:	e1a04001 	mov	r4, r1
    9cdc:	e1a05000 	mov	r5, r0
    9ce0:	e1a06002 	mov	r6, r2
    9ce4:	e1a07001 	mov	r7, r1
    9ce8:	ca000037 	bgt	9dcc <CGPIOPin::SetMode(TGPIOMode, int)+0xfc>
    9cec:	e2443004 	sub	r3, r4, #4
    9cf0:	e5c54008 	strb	r4, [r5, #8]
    9cf4:	e3530005 	cmp	r3, #5
    9cf8:	9a00002d 	bls	9db4 <CGPIOPin::SetMode(TGPIOMode, int)+0xe4>
    9cfc:	e2963000 	adds	r3, r6, #0
    9d00:	13a03001 	movne	r3, #1
    9d04:	e3540001 	cmp	r4, #1
    9d08:	13a03000 	movne	r3, #0
    9d0c:	e3530000 	cmp	r3, #0
    9d10:	1a00005b 	bne	9e84 <CGPIOPin::SetMode(TGPIOMode, int)+0x1b4>
    9d14:	e5952004 	ldr	r2, [r5, #4]
    9d18:	e3520035 	cmp	r2, #53	; 0x35
    9d1c:	8a00003a 	bhi	9e0c <CGPIOPin::SetMode(TGPIOMode, int)+0x13c>
    9d20:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    9d24:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    9d28:	e30381b0 	movw	r8, #12720	; 0x31b0
    9d2c:	e3408005 	movt	r8, #5
    9d30:	e3a0100a 	mov	r1, #10
    9d34:	e0843293 	umull	r3, r4, r3, r2
    9d38:	e5983000 	ldr	r3, [r8]
    9d3c:	e1a041a4 	lsr	r4, r4, #3
    9d40:	e3530000 	cmp	r3, #0
    9d44:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    9d48:	e2833702 	add	r3, r3, #524288	; 0x80000
    9d4c:	e0642491 	mls	r4, r1, r4, r2
    9d50:	e1a07103 	lsl	r7, r3, #2
    9d54:	e0844084 	add	r4, r4, r4, lsl #1
    9d58:	1a000033 	bne	9e2c <CGPIOPin::SetMode(TGPIOMode, int)+0x15c>
    9d5c:	e5d52008 	ldrb	r2, [r5, #8]
    9d60:	e3a01007 	mov	r1, #7
    9d64:	e5973000 	ldr	r3, [r7]
    9d68:	e2422001 	sub	r2, r2, #1
    9d6c:	e16f2f12 	clz	r2, r2
    9d70:	e1c33411 	bic	r3, r3, r1, lsl r4
    9d74:	e1a022a2 	lsr	r2, r2, #5
    9d78:	e1834412 	orr	r4, r3, r2, lsl r4
    9d7c:	e5874000 	str	r4, [r7]
    9d80:	e5983000 	ldr	r3, [r8]
    9d84:	e3530000 	cmp	r3, #0
    9d88:	1a000029 	bne	9e34 <CGPIOPin::SetMode(TGPIOMode, int)+0x164>
    9d8c:	e3560000 	cmp	r6, #0
    9d90:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9d94:	e5d53008 	ldrb	r3, [r5, #8]
    9d98:	e3530003 	cmp	r3, #3
    9d9c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9da0:	ea000010 	b	9de8 <CGPIOPin::SetMode(TGPIOMode, int)+0x118>
    9da4:	00009e74 	.word	0x00009e74
    9da8:	00009e64 	.word	0x00009e64
    9dac:	00009e54 	.word	0x00009e54
    9db0:	00009e44 	.word	0x00009e44
    9db4:	e3560000 	cmp	r6, #0
    9db8:	1a00000b 	bne	9dec <CGPIOPin::SetMode(TGPIOMode, int)+0x11c>
    9dbc:	e2471004 	sub	r1, r7, #4
    9dc0:	e1a00005 	mov	r0, r5
    9dc4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9dc8:	eaffff8b 	b	9bfc <CGPIOPin::SetAlternateFunction(unsigned int)>
    9dcc:	e3011400 	movw	r1, #5120	; 0x1400
    9dd0:	e3401005 	movt	r1, #5
    9dd4:	e3010628 	movw	r0, #5672	; 0x1628
    9dd8:	e3400005 	movt	r0, #5
    9ddc:	e3a0203a 	mov	r2, #58	; 0x3a
    9de0:	eb000af8 	bl	c9c8 <assertion_failed>
    9de4:	eaffffc0 	b	9cec <CGPIOPin::SetMode(TGPIOMode, int)+0x1c>
    9de8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9dec:	e1a00005 	mov	r0, r5
    9df0:	e3a01000 	mov	r1, #0
    9df4:	ebffff4b 	bl	9b28 <CGPIOPin::SetPullUpMode(unsigned int)>
    9df8:	e5d57008 	ldrb	r7, [r5, #8]
    9dfc:	e1a00005 	mov	r0, r5
    9e00:	e2471004 	sub	r1, r7, #4
    9e04:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9e08:	eaffff7b 	b	9bfc <CGPIOPin::SetAlternateFunction(unsigned int)>
    9e0c:	e3a02053 	mov	r2, #83	; 0x53
    9e10:	e3011400 	movw	r1, #5120	; 0x1400
    9e14:	e3401005 	movt	r1, #5
    9e18:	e3010450 	movw	r0, #5200	; 0x1450
    9e1c:	e3400005 	movt	r0, #5
    9e20:	eb000ae8 	bl	c9c8 <assertion_failed>
    9e24:	e5952004 	ldr	r2, [r5, #4]
    9e28:	eaffffbc 	b	9d20 <CGPIOPin::SetMode(TGPIOMode, int)+0x50>
    9e2c:	eb00013c 	bl	a324 <EnterCritical>
    9e30:	eaffffc9 	b	9d5c <CGPIOPin::SetMode(TGPIOMode, int)+0x8c>
    9e34:	eb000147 	bl	a358 <LeaveCritical>
    9e38:	e3560000 	cmp	r6, #0
    9e3c:	1affffd4 	bne	9d94 <CGPIOPin::SetMode(TGPIOMode, int)+0xc4>
    9e40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9e44:	e1a00005 	mov	r0, r5
    9e48:	e3a01001 	mov	r1, #1
    9e4c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9e50:	eaffff34 	b	9b28 <CGPIOPin::SetPullUpMode(unsigned int)>
    9e54:	e1a00005 	mov	r0, r5
    9e58:	e3a01002 	mov	r1, #2
    9e5c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9e60:	eaffff30 	b	9b28 <CGPIOPin::SetPullUpMode(unsigned int)>
    9e64:	e1a00005 	mov	r0, r5
    9e68:	e3a01000 	mov	r1, #0
    9e6c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9e70:	eafffd0e 	b	92b0 <CGPIOPin::Write(unsigned int)>
    9e74:	e1a00005 	mov	r0, r5
    9e78:	e3a01000 	mov	r1, #0
    9e7c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9e80:	eaffff28 	b	9b28 <CGPIOPin::SetPullUpMode(unsigned int)>
    9e84:	e3a01000 	mov	r1, #0
    9e88:	e1a00005 	mov	r0, r5
    9e8c:	ebffff25 	bl	9b28 <CGPIOPin::SetPullUpMode(unsigned int)>
    9e90:	eaffff9f 	b	9d14 <CGPIOPin::SetMode(TGPIOMode, int)+0x44>

00009e94 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    9e94:	e92d4070 	push	{r4, r5, r6, lr}
    9e98:	e3510035 	cmp	r1, #53	; 0x35
    9e9c:	e1a04000 	mov	r4, r0
    9ea0:	e59fe07c 	ldr	lr, [pc, #124]	; 9f24 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x90>
    9ea4:	e1a05001 	mov	r5, r1
    9ea8:	e3a0c00a 	mov	ip, #10
    9eac:	e3a01006 	mov	r1, #6
    9eb0:	e3a00000 	mov	r0, #0
    9eb4:	e5845004 	str	r5, [r4, #4]
    9eb8:	e5843010 	str	r3, [r4, #16]
    9ebc:	e1a06002 	mov	r6, r2
    9ec0:	e584e000 	str	lr, [r4]
    9ec4:	e5c4c008 	strb	ip, [r4, #8]
    9ec8:	e5840014 	str	r0, [r4, #20]
    9ecc:	e5c4101c 	strb	r1, [r4, #28]
    9ed0:	e5c4101d 	strb	r1, [r4, #29]
    9ed4:	8a000005 	bhi	9ef0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x5c>
    9ed8:	e1a00004 	mov	r0, r4
    9edc:	e1a01006 	mov	r1, r6
    9ee0:	e3a02001 	mov	r2, #1
    9ee4:	ebffff79 	bl	9cd0 <CGPIOPin::SetMode(TGPIOMode, int)>
    9ee8:	e1a00004 	mov	r0, r4
    9eec:	e8bd8070 	pop	{r4, r5, r6, pc}
    9ef0:	eb001551 	bl	f43c <CMachineInfo::Get()>
    9ef4:	e6ef1075 	uxtb	r1, r5
    9ef8:	eb001524 	bl	f390 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    9efc:	e3500035 	cmp	r0, #53	; 0x35
    9f00:	e5840004 	str	r0, [r4, #4]
    9f04:	9afffff3 	bls	9ed8 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    9f08:	e3011400 	movw	r1, #5120	; 0x1400
    9f0c:	e3401005 	movt	r1, #5
    9f10:	e3010450 	movw	r0, #5200	; 0x1450
    9f14:	e3400005 	movt	r0, #5
    9f18:	e3a0202b 	mov	r2, #43	; 0x2b
    9f1c:	eb000aa9 	bl	c9c8 <assertion_failed>
    9f20:	eaffffec 	b	9ed8 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    9f24:	000513f8 	.word	0x000513f8

00009f28 <CGPIOPin::InterruptHandler()>:
    9f28:	e5d03008 	ldrb	r3, [r0, #8]
    9f2c:	e92d4010 	push	{r4, lr}
    9f30:	e1a04000 	mov	r4, r0
    9f34:	e2432002 	sub	r2, r3, #2
    9f38:	e3530000 	cmp	r3, #0
    9f3c:	13520001 	cmpne	r2, #1
    9f40:	9a000005 	bls	9f5c <CGPIOPin::InterruptHandler()+0x34>
    9f44:	e3011400 	movw	r1, #5120	; 0x1400
    9f48:	e3401005 	movt	r1, #5
    9f4c:	e3010464 	movw	r0, #5220	; 0x1464
    9f50:	e3400005 	movt	r0, #5
    9f54:	e3002153 	movw	r2, #339	; 0x153
    9f58:	eb000a9a 	bl	c9c8 <assertion_failed>
    9f5c:	e5d4301c 	ldrb	r3, [r4, #28]
    9f60:	e3530005 	cmp	r3, #5
    9f64:	da000002 	ble	9f74 <CGPIOPin::InterruptHandler()+0x4c>
    9f68:	e5d4301d 	ldrb	r3, [r4, #29]
    9f6c:	e3530005 	cmp	r3, #5
    9f70:	ca000005 	bgt	9f8c <CGPIOPin::InterruptHandler()+0x64>
    9f74:	e5943014 	ldr	r3, [r4, #20]
    9f78:	e3530000 	cmp	r3, #0
    9f7c:	0a00000b 	beq	9fb0 <CGPIOPin::InterruptHandler()+0x88>
    9f80:	e5940018 	ldr	r0, [r4, #24]
    9f84:	e8bd4010 	pop	{r4, lr}
    9f88:	e12fff13 	bx	r3
    9f8c:	e3011400 	movw	r1, #5120	; 0x1400
    9f90:	e3401005 	movt	r1, #5
    9f94:	e3010640 	movw	r0, #5696	; 0x1640
    9f98:	e3400005 	movt	r0, #5
    9f9c:	e3002155 	movw	r2, #341	; 0x155
    9fa0:	eb000a88 	bl	c9c8 <assertion_failed>
    9fa4:	e5943014 	ldr	r3, [r4, #20]
    9fa8:	e3530000 	cmp	r3, #0
    9fac:	1afffff3 	bne	9f80 <CGPIOPin::InterruptHandler()+0x58>
    9fb0:	e3011400 	movw	r1, #5120	; 0x1400
    9fb4:	e3401005 	movt	r1, #5
    9fb8:	e3010558 	movw	r0, #5464	; 0x1558
    9fbc:	e3400005 	movt	r0, #5
    9fc0:	e3002157 	movw	r2, #343	; 0x157
    9fc4:	eb000a7f 	bl	c9c8 <assertion_failed>
    9fc8:	e5943014 	ldr	r3, [r4, #20]
    9fcc:	e5940018 	ldr	r0, [r4, #24]
    9fd0:	e8bd4010 	pop	{r4, lr}
    9fd4:	e12fff13 	bx	r3

00009fd8 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    9fd8:	e3500035 	cmp	r0, #53	; 0x35
    9fdc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9fe0:	e1a07000 	mov	r7, r0
    9fe4:	8a000023 	bhi	a078 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    9fe8:	e30361b0 	movw	r6, #12720	; 0x31b0
    9fec:	e3406005 	movt	r6, #5
    9ff0:	e3a04013 	mov	r4, #19
    9ff4:	e3404fc8 	movt	r4, #4040	; 0xfc8
    9ff8:	e207501f 	and	r5, r7, #31
    9ffc:	e3a02001 	mov	r2, #1
    a000:	e5963000 	ldr	r3, [r6]
    a004:	e08442a7 	add	r4, r4, r7, lsr #5
    a008:	e3530000 	cmp	r3, #0
    a00c:	e1a04104 	lsl	r4, r4, #2
    a010:	e1a05512 	lsl	r5, r2, r5
    a014:	1a000011 	bne	a060 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
    a018:	e3a0308b 	mov	r3, #139	; 0x8b
    a01c:	e3433f20 	movt	r3, #16160	; 0x3f20
    a020:	e1540003 	cmp	r4, r3
    a024:	8a00000c 	bhi	a05c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
    a028:	e3a0108b 	mov	r1, #139	; 0x8b
    a02c:	e3431f20 	movt	r1, #16160	; 0x3f20
    a030:	e1e02005 	mvn	r2, r5
    a034:	e5943000 	ldr	r3, [r4]
    a038:	e0033002 	and	r3, r3, r2
    a03c:	e484300c 	str	r3, [r4], #12
    a040:	e1540001 	cmp	r4, r1
    a044:	9afffffa 	bls	a034 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x5c>
    a048:	e5963000 	ldr	r3, [r6]
    a04c:	e3530000 	cmp	r3, #0
    a050:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a054:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a058:	ea0000be 	b	a358 <LeaveCritical>
    a05c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a060:	eb0000af 	bl	a324 <EnterCritical>
    a064:	e3a0308b 	mov	r3, #139	; 0x8b
    a068:	e3433f20 	movt	r3, #16160	; 0x3f20
    a06c:	e1540003 	cmp	r4, r3
    a070:	9affffec 	bls	a028 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    a074:	eafffff3 	b	a048 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
    a078:	e3011400 	movw	r1, #5120	; 0x1400
    a07c:	e3401005 	movt	r1, #5
    a080:	e301068c 	movw	r0, #5772	; 0x168c
    a084:	e3400005 	movt	r0, #5
    a088:	e300215d 	movw	r2, #349	; 0x15d
    a08c:	eb000a4d 	bl	c9c8 <assertion_failed>
    a090:	eaffffd4 	b	9fe8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>

0000a094 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    a094:	e30331b0 	movw	r3, #12720	; 0x31b0
    a098:	e3403005 	movt	r3, #5
    a09c:	e3a02001 	mov	r2, #1
    a0a0:	e5832000 	str	r2, [r3]
    a0a4:	e12fff1e 	bx	lr

0000a0a8 <CMemorySystem::~CMemorySystem()>:
    a0a8:	e5903000 	ldr	r3, [r0]
    a0ac:	e92d4070 	push	{r4, r5, r6, lr}
    a0b0:	e1a04000 	mov	r4, r0
    a0b4:	e3530000 	cmp	r3, #0
    a0b8:	0a000005 	beq	a0d4 <CMemorySystem::~CMemorySystem()+0x2c>
    a0bc:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    a0c0:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    a0c4:	e3c33005 	bic	r3, r3, #5
    a0c8:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    a0cc:	e3a03000 	mov	r3, #0
    a0d0:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    a0d4:	e594500c 	ldr	r5, [r4, #12]
    a0d8:	e3550000 	cmp	r5, #0
    a0dc:	0a000003 	beq	a0f0 <CMemorySystem::~CMemorySystem()+0x48>
    a0e0:	e1a00005 	mov	r0, r5
    a0e4:	eb0005ae 	bl	b7a4 <CPageTable::~CPageTable()>
    a0e8:	e1a00005 	mov	r0, r5
    a0ec:	eb00008a 	bl	a31c <operator delete(void*)>
    a0f0:	e5945008 	ldr	r5, [r4, #8]
    a0f4:	e3a03000 	mov	r3, #0
    a0f8:	e584300c 	str	r3, [r4, #12]
    a0fc:	e1550003 	cmp	r5, r3
    a100:	0a000003 	beq	a114 <CMemorySystem::~CMemorySystem()+0x6c>
    a104:	e1a00005 	mov	r0, r5
    a108:	eb0005a5 	bl	b7a4 <CPageTable::~CPageTable()>
    a10c:	e1a00005 	mov	r0, r5
    a110:	eb000081 	bl	a31c <operator delete(void*)>
    a114:	e1a00004 	mov	r0, r4
    a118:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a11c <CMemorySystem::GetMemSize() const>:
    a11c:	e5900004 	ldr	r0, [r0, #4]
    a120:	e12fff1e 	bx	lr

0000a124 <CMemorySystem::EnableMMU()>:
    a124:	e5903000 	ldr	r3, [r0]
    a128:	e92d4010 	push	{r4, lr}
    a12c:	e1a04000 	mov	r4, r0
    a130:	e3530000 	cmp	r3, #0
    a134:	0a00001f 	beq	a1b8 <CMemorySystem::EnableMMU()+0x94>
    a138:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    a13c:	e3833040 	orr	r3, r3, #64	; 0x40
    a140:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    a144:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    a148:	e3130001 	tst	r3, #1
    a14c:	1a000020 	bne	a1d4 <CMemorySystem::EnableMMU()+0xb0>
    a150:	e3a03002 	mov	r3, #2
    a154:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    a158:	e5940008 	ldr	r0, [r4, #8]
    a15c:	e3500000 	cmp	r0, #0
    a160:	0a00002a 	beq	a210 <CMemorySystem::EnableMMU()+0xec>
    a164:	eb000597 	bl	b7c8 <CPageTable::GetBaseAddress() const>
    a168:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    a16c:	e594000c 	ldr	r0, [r4, #12]
    a170:	e3500000 	cmp	r0, #0
    a174:	0a00001d 	beq	a1f0 <CMemorySystem::EnableMMU()+0xcc>
    a178:	eb000592 	bl	b7c8 <CPageTable::GetBaseAddress() const>
    a17c:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    a180:	e3a03005 	mov	r3, #5
    a184:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    a188:	eb0014d4 	bl	f4e0 <InvalidateDataCache>
    a18c:	e3a03000 	mov	r3, #0
    a190:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    a194:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    a198:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    a19c:	f57ff04f 	dsb	sy
    a1a0:	f57ff06f 	isb	sy
    a1a4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    a1a8:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    a1ac:	e3833005 	orr	r3, r3, #5
    a1b0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    a1b4:	e8bd8010 	pop	{r4, pc}
    a1b8:	e30116a0 	movw	r1, #5792	; 0x16a0
    a1bc:	e3401005 	movt	r1, #5
    a1c0:	e30106ac 	movw	r0, #5804	; 0x16ac
    a1c4:	e3400005 	movt	r0, #5
    a1c8:	e3a020c0 	mov	r2, #192	; 0xc0
    a1cc:	eb0009fd 	bl	c9c8 <assertion_failed>
    a1d0:	eaffffd8 	b	a138 <CMemorySystem::EnableMMU()+0x14>
    a1d4:	e30116a0 	movw	r1, #5792	; 0x16a0
    a1d8:	e3401005 	movt	r1, #5
    a1dc:	e30106bc 	movw	r0, #5820	; 0x16bc
    a1e0:	e3400005 	movt	r0, #5
    a1e4:	e3a020cd 	mov	r2, #205	; 0xcd
    a1e8:	eb0009f6 	bl	c9c8 <assertion_failed>
    a1ec:	eaffffd7 	b	a150 <CMemorySystem::EnableMMU()+0x2c>
    a1f0:	e30116a0 	movw	r1, #5792	; 0x16a0
    a1f4:	e3401005 	movt	r1, #5
    a1f8:	e3010704 	movw	r0, #5892	; 0x1704
    a1fc:	e3400005 	movt	r0, #5
    a200:	e3a020d7 	mov	r2, #215	; 0xd7
    a204:	eb0009ef 	bl	c9c8 <assertion_failed>
    a208:	e594000c 	ldr	r0, [r4, #12]
    a20c:	eaffffd9 	b	a178 <CMemorySystem::EnableMMU()+0x54>
    a210:	e30116a0 	movw	r1, #5792	; 0x16a0
    a214:	e3401005 	movt	r1, #5
    a218:	e30106e8 	movw	r0, #5864	; 0x16e8
    a21c:	e3400005 	movt	r0, #5
    a220:	e3a020d3 	mov	r2, #211	; 0xd3
    a224:	eb0009e7 	bl	c9c8 <assertion_failed>
    a228:	e5940008 	ldr	r0, [r4, #8]
    a22c:	eaffffcc 	b	a164 <CMemorySystem::EnableMMU()+0x40>

0000a230 <CMemorySystem::CMemorySystem(int)>:
    a230:	e92d4030 	push	{r4, r5, lr}
    a234:	e1a04000 	mov	r4, r0
    a238:	e3a05000 	mov	r5, #0
    a23c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    a240:	e8840022 	stm	r4, {r1, r5}
    a244:	e28d000c 	add	r0, sp, #12
    a248:	e5845008 	str	r5, [r4, #8]
    a24c:	e584500c 	str	r5, [r4, #12]
    a250:	ebfffb9c 	bl	90c8 <CBcmPropertyTags::CBcmPropertyTags()>
    a254:	e3a03014 	mov	r3, #20
    a258:	e58d5000 	str	r5, [sp]
    a25c:	e28d000c 	add	r0, sp, #12
    a260:	e3a01005 	mov	r1, #5
    a264:	e3401001 	movt	r1, #1
    a268:	e08d2003 	add	r2, sp, r3
    a26c:	ebfffbdd 	bl	91e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a270:	e3500000 	cmp	r0, #0
    a274:	1a000019 	bne	a2e0 <CMemorySystem::CMemorySystem(int)+0xb0>
    a278:	e3a01303 	mov	r1, #201326592	; 0xc000000
    a27c:	e58d0020 	str	r0, [sp, #32]
    a280:	e58d1024 	str	r1, [sp, #36]	; 0x24
    a284:	e5841004 	str	r1, [r4, #4]
    a288:	eb001638 	bl	fb70 <mem_init>
    a28c:	e5943000 	ldr	r3, [r4]
    a290:	e3530000 	cmp	r3, #0
    a294:	0a00000c 	beq	a2cc <CMemorySystem::CMemorySystem(int)+0x9c>
    a298:	e3a00008 	mov	r0, #8
    a29c:	eb00001c 	bl	a314 <operator new(unsigned int)>
    a2a0:	e5941004 	ldr	r1, [r4, #4]
    a2a4:	e1a05000 	mov	r5, r0
    a2a8:	eb0004ed 	bl	b664 <CPageTable::CPageTable(unsigned int)>
    a2ac:	e5845008 	str	r5, [r4, #8]
    a2b0:	e3a00008 	mov	r0, #8
    a2b4:	eb000016 	bl	a314 <operator new(unsigned int)>
    a2b8:	e1a05000 	mov	r5, r0
    a2bc:	eb0004bc 	bl	b5b4 <CPageTable::CPageTable()>
    a2c0:	e584500c 	str	r5, [r4, #12]
    a2c4:	e1a00004 	mov	r0, r4
    a2c8:	ebffff95 	bl	a124 <CMemorySystem::EnableMMU()>
    a2cc:	e28d000c 	add	r0, sp, #12
    a2d0:	ebfffb82 	bl	90e0 <CBcmPropertyTags::~CBcmPropertyTags()>
    a2d4:	e1a00004 	mov	r0, r4
    a2d8:	e28dd02c 	add	sp, sp, #44	; 0x2c
    a2dc:	e8bd8030 	pop	{r4, r5, pc}
    a2e0:	e59d0020 	ldr	r0, [sp, #32]
    a2e4:	e3500000 	cmp	r0, #0
    a2e8:	059d1024 	ldreq	r1, [sp, #36]	; 0x24
    a2ec:	0affffe4 	beq	a284 <CMemorySystem::CMemorySystem(int)+0x54>
    a2f0:	e30116a0 	movw	r1, #5792	; 0x16a0
    a2f4:	e3401005 	movt	r1, #5
    a2f8:	e3010718 	movw	r0, #5912	; 0x1718
    a2fc:	e3400005 	movt	r0, #5
    a300:	e3a02042 	mov	r2, #66	; 0x42
    a304:	eb0009af 	bl	c9c8 <assertion_failed>
    a308:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    a30c:	e59d0020 	ldr	r0, [sp, #32]
    a310:	eaffffdb 	b	a284 <CMemorySystem::CMemorySystem(int)+0x54>

0000a314 <operator new(unsigned int)>:
    a314:	ea00162e 	b	fbd4 <malloc>

0000a318 <operator new[](unsigned int)>:
    a318:	ea00162d 	b	fbd4 <malloc>

0000a31c <operator delete(void*)>:
    a31c:	ea00168e 	b	fd5c <free>

0000a320 <operator delete[](void*)>:
    a320:	ea00168d 	b	fd5c <free>

0000a324 <EnterCritical>:
    a324:	e10f1000 	mrs	r1, CPSR
    a328:	f10c0080 	cpsid	i
    a32c:	e30331b4 	movw	r3, #12724	; 0x31b4
    a330:	e3403005 	movt	r3, #5
    a334:	e5932000 	ldr	r2, [r3]
    a338:	e3520000 	cmp	r2, #0
    a33c:	e2822001 	add	r2, r2, #1
    a340:	02211080 	eoreq	r1, r1, #128	; 0x80
    a344:	e5832000 	str	r2, [r3]
    a348:	07e013d1 	ubfxeq	r1, r1, #7, #1
    a34c:	05831004 	streq	r1, [r3, #4]
    a350:	f57ff05f 	dmb	sy
    a354:	e12fff1e 	bx	lr

0000a358 <LeaveCritical>:
    a358:	e92d4010 	push	{r4, lr}
    a35c:	f57ff05f 	dmb	sy
    a360:	e30341b4 	movw	r4, #12724	; 0x31b4
    a364:	e3404005 	movt	r4, #5
    a368:	e5943000 	ldr	r3, [r4]
    a36c:	e3530000 	cmp	r3, #0
    a370:	0a000009 	beq	a39c <LeaveCritical+0x44>
    a374:	e5943000 	ldr	r3, [r4]
    a378:	e2433001 	sub	r3, r3, #1
    a37c:	e3530000 	cmp	r3, #0
    a380:	e5843000 	str	r3, [r4]
    a384:	18bd8010 	popne	{r4, pc}
    a388:	e5943004 	ldr	r3, [r4, #4]
    a38c:	e3530000 	cmp	r3, #0
    a390:	08bd8010 	popeq	{r4, pc}
    a394:	f1080080 	cpsie	i
    a398:	e8bd8010 	pop	{r4, pc}
    a39c:	e3011734 	movw	r1, #5940	; 0x1734
    a3a0:	e3401005 	movt	r1, #5
    a3a4:	e3010744 	movw	r0, #5956	; 0x1744
    a3a8:	e3400005 	movt	r0, #5
    a3ac:	e3a0205b 	mov	r2, #91	; 0x5b
    a3b0:	eb000984 	bl	c9c8 <assertion_failed>
    a3b4:	eaffffee 	b	a374 <LeaveCritical+0x1c>

0000a3b8 <SyncDataAndInstructionCache>:
    a3b8:	e92d4010 	push	{r4, lr}
    a3bc:	eb001471 	bl	f588 <CleanDataCache>
    a3c0:	e3a03000 	mov	r3, #0
    a3c4:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    a3c8:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    a3cc:	f57ff04f 	dsb	sy
    a3d0:	f57ff06f 	isb	sy
    a3d4:	e8bd8010 	pop	{r4, pc}

0000a3d8 <__aeabi_atexit>:
    a3d8:	e12fff1e 	bx	lr

0000a3dc <halt>:
    a3dc:	f10c0080 	cpsid	i
    a3e0:	f57ff04f 	dsb	sy
    a3e4:	e320f003 	wfi
    a3e8:	eafffffc 	b	a3e0 <halt+0x4>

0000a3ec <reboot>:
    a3ec:	e3a03000 	mov	r3, #0
    a3f0:	e3433f10 	movt	r3, #16144	; 0x3f10
    a3f4:	e3a01001 	mov	r1, #1
    a3f8:	e3451a00 	movt	r1, #23040	; 0x5a00
    a3fc:	e3a02020 	mov	r2, #32
    a400:	e3452a00 	movt	r2, #23040	; 0x5a00
    a404:	e5831024 	str	r1, [r3, #36]	; 0x24
    a408:	e583201c 	str	r2, [r3, #28]
    a40c:	eafffffe 	b	a40c <reboot+0x20>

0000a410 <sysinit>:
    a410:	e92d4030 	push	{r4, r5, lr}
    a414:	e24dd01c 	sub	sp, sp, #28
    a418:	eb001415 	bl	f474 <InvalidateDataCacheL1Only>
    a41c:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    a420:	e308305c 	movw	r3, #32860	; 0x805c
    a424:	e3403000 	movt	r3, #0
    a428:	e582309c 	str	r3, [r2, #156]	; 0x9c
    a42c:	e58230ac 	str	r3, [r2, #172]	; 0xac
    a430:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    a434:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    a438:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    a43c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    a440:	f57ff06f 	isb	sy
    a444:	eee82a10 	vmsr	fpexc, r2
    a448:	e3a01000 	mov	r1, #0
    a44c:	eee11a10 	vmsr	fpscr, r1
    a450:	e30331ac 	movw	r3, #12716	; 0x31ac
    a454:	e3403005 	movt	r3, #5
    a458:	e3032200 	movw	r2, #12800	; 0x3200
    a45c:	e3402005 	movt	r2, #5
    a460:	e1530002 	cmp	r3, r2
    a464:	2a000002 	bcs	a474 <sysinit+0x64>
    a468:	e4c31001 	strb	r1, [r3], #1
    a46c:	e1530002 	cmp	r3, r2
    a470:	1afffffc 	bne	a468 <sysinit+0x58>
    a474:	e1a0000d 	mov	r0, sp
    a478:	e30350c4 	movw	r5, #12484	; 0x30c4
    a47c:	e3405005 	movt	r5, #5
    a480:	e30340b8 	movw	r4, #12472	; 0x30b8
    a484:	e3404005 	movt	r4, #5
    a488:	eb0012fa 	bl	f078 <CMachineInfo::CMachineInfo()>
    a48c:	e1540005 	cmp	r4, r5
    a490:	2a000003 	bcs	a4a4 <sysinit+0x94>
    a494:	e4943004 	ldr	r3, [r4], #4
    a498:	e12fff33 	blx	r3
    a49c:	e1540005 	cmp	r4, r5
    a4a0:	3afffffb 	bcc	a494 <sysinit+0x84>
    a4a4:	ebfff6ef 	bl	8068 <main>
    a4a8:	e3500001 	cmp	r0, #1
    a4ac:	0a000000 	beq	a4b4 <sysinit+0xa4>
    a4b0:	ebffffc9 	bl	a3dc <halt>
    a4b4:	ebffffcc 	bl	a3ec <reboot>

0000a4b8 <CTimer::CTimer(CInterruptSystem*)>:
    a4b8:	e92d4070 	push	{r4, r5, r6, lr}
    a4bc:	e1a04000 	mov	r4, r0
    a4c0:	e30351c0 	movw	r5, #12736	; 0x31c0
    a4c4:	e3405005 	movt	r5, #5
    a4c8:	e3a03000 	mov	r3, #0
    a4cc:	e3a06001 	mov	r6, #1
    a4d0:	e5801000 	str	r1, [r0]
    a4d4:	e2800018 	add	r0, r0, #24
    a4d8:	e5843004 	str	r3, [r4, #4]
    a4dc:	e5843014 	str	r3, [r4, #20]
    a4e0:	e5843008 	str	r3, [r4, #8]
    a4e4:	e5846010 	str	r6, [r4, #16]
    a4e8:	e584300c 	str	r3, [r4, #12]
    a4ec:	eb00145d 	bl	f668 <CPtrList::CPtrList()>
    a4f0:	e5951000 	ldr	r1, [r5]
    a4f4:	e300215e 	movw	r2, #350	; 0x15e
    a4f8:	e3053730 	movw	r3, #22320	; 0x5730
    a4fc:	e3403005 	movt	r3, #5
    a500:	e3510000 	cmp	r1, #0
    a504:	e584601c 	str	r6, [r4, #28]
    a508:	e5843020 	str	r3, [r4, #32]
    a50c:	e5842024 	str	r2, [r4, #36]	; 0x24
    a510:	0a000005 	beq	a52c <CTimer::CTimer(CInterruptSystem*)+0x74>
    a514:	e3011794 	movw	r1, #6036	; 0x1794
    a518:	e3401005 	movt	r1, #5
    a51c:	e30107a0 	movw	r0, #6048	; 0x17a0
    a520:	e3400005 	movt	r0, #5
    a524:	e3a0203b 	mov	r2, #59	; 0x3b
    a528:	eb000926 	bl	c9c8 <assertion_failed>
    a52c:	e5854000 	str	r4, [r5]
    a530:	e1a00004 	mov	r0, r4
    a534:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a538 <CTimer::~CTimer()>:
    a538:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a53c:	e1a09000 	mov	r9, r0
    a540:	e5900000 	ldr	r0, [r0]
    a544:	e3500000 	cmp	r0, #0
    a548:	0a00002b 	beq	a5fc <CTimer::~CTimer()+0xc4>
    a54c:	e3a01003 	mov	r1, #3
    a550:	e3017794 	movw	r7, #6036	; 0x1794
    a554:	e3407005 	movt	r7, #5
    a558:	e301a7c8 	movw	sl, #6088	; 0x17c8
    a55c:	e340a005 	movt	sl, #5
    a560:	e3048d43 	movw	r8, #19779	; 0x4d43
    a564:	e3448b54 	movt	r8, #19284	; 0x4b54
    a568:	e2894018 	add	r4, r9, #24
    a56c:	eb0010e1 	bl	e8f8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    a570:	ea00000f 	b	a5b4 <CTimer::~CTimer()+0x7c>
    a574:	eb001464 	bl	f70c <CPtrList::GetPtr(TPtrListElement*)>
    a578:	e2506000 	subs	r6, r0, #0
    a57c:	0a000019 	beq	a5e8 <CTimer::~CTimer()+0xb0>
    a580:	e5963000 	ldr	r3, [r6]
    a584:	e30107d4 	movw	r0, #6100	; 0x17d4
    a588:	e3400005 	movt	r0, #5
    a58c:	e1530008 	cmp	r3, r8
    a590:	e3a02049 	mov	r2, #73	; 0x49
    a594:	e1a01007 	mov	r1, r7
    a598:	0a000000 	beq	a5a0 <CTimer::~CTimer()+0x68>
    a59c:	eb000909 	bl	c9c8 <assertion_failed>
    a5a0:	e1a00004 	mov	r0, r4
    a5a4:	e1a01005 	mov	r1, r5
    a5a8:	eb0014f7 	bl	f98c <CPtrList::Remove(TPtrListElement*)>
    a5ac:	e1a00006 	mov	r0, r6
    a5b0:	ebffff59 	bl	a31c <operator delete(void*)>
    a5b4:	e1a00004 	mov	r0, r4
    a5b8:	eb00143a 	bl	f6a8 <CPtrList::GetFirst()>
    a5bc:	e2505000 	subs	r5, r0, #0
    a5c0:	e1a01005 	mov	r1, r5
    a5c4:	e1a00004 	mov	r0, r4
    a5c8:	1affffe9 	bne	a574 <CTimer::~CTimer()+0x3c>
    a5cc:	e30331c0 	movw	r3, #12736	; 0x31c0
    a5d0:	e3403005 	movt	r3, #5
    a5d4:	e1a00004 	mov	r0, r4
    a5d8:	e5835000 	str	r5, [r3]
    a5dc:	eb001424 	bl	f674 <CPtrList::~CPtrList()>
    a5e0:	e1a00009 	mov	r0, r9
    a5e4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a5e8:	e3a02048 	mov	r2, #72	; 0x48
    a5ec:	e1a01007 	mov	r1, r7
    a5f0:	e1a0000a 	mov	r0, sl
    a5f4:	eb0008f3 	bl	c9c8 <assertion_failed>
    a5f8:	eaffffe0 	b	a580 <CTimer::~CTimer()+0x48>
    a5fc:	e3011794 	movw	r1, #6036	; 0x1794
    a600:	e3401005 	movt	r1, #5
    a604:	e30107b0 	movw	r0, #6064	; 0x17b0
    a608:	e3400005 	movt	r0, #5
    a60c:	e3a02041 	mov	r2, #65	; 0x41
    a610:	eb0008ec 	bl	c9c8 <assertion_failed>
    a614:	e5990000 	ldr	r0, [r9]
    a618:	eaffffcb 	b	a54c <CTimer::~CTimer()+0x14>

0000a61c <CTimer::SetTimeZone(int)>:
    a61c:	e2813e59 	add	r3, r1, #1424	; 0x590
    a620:	e3002b3e 	movw	r2, #2878	; 0xb3e
    a624:	e283300f 	add	r3, r3, #15
    a628:	e1530002 	cmp	r3, r2
    a62c:	95801014 	strls	r1, [r0, #20]
    a630:	93a00001 	movls	r0, #1
    a634:	83a00000 	movhi	r0, #0
    a638:	e12fff1e 	bx	lr

0000a63c <CTimer::GetTimeZone() const>:
    a63c:	e5900014 	ldr	r0, [r0, #20]
    a640:	e12fff1e 	bx	lr

0000a644 <CTimer::SetTime(unsigned int, int)>:
    a644:	e3520000 	cmp	r2, #0
    a648:	e92d4070 	push	{r4, r5, r6, lr}
    a64c:	e1a04000 	mov	r4, r0
    a650:	e1a05001 	mov	r5, r1
    a654:	1a000005 	bne	a670 <CTimer::SetTime(unsigned int, int)+0x2c>
    a658:	e5901014 	ldr	r1, [r0, #20]
    a65c:	e3a0303c 	mov	r3, #60	; 0x3c
    a660:	e0030193 	mul	r3, r3, r1
    a664:	e3530000 	cmp	r3, #0
    a668:	ba00000e 	blt	a6a8 <CTimer::SetTime(unsigned int, int)+0x64>
    a66c:	e0855003 	add	r5, r5, r3
    a670:	e5943010 	ldr	r3, [r4, #16]
    a674:	e3530000 	cmp	r3, #0
    a678:	1a000002 	bne	a688 <CTimer::SetTime(unsigned int, int)+0x44>
    a67c:	e3a00001 	mov	r0, #1
    a680:	e584500c 	str	r5, [r4, #12]
    a684:	e8bd8070 	pop	{r4, r5, r6, pc}
    a688:	ebffff25 	bl	a324 <EnterCritical>
    a68c:	e5943010 	ldr	r3, [r4, #16]
    a690:	e584500c 	str	r5, [r4, #12]
    a694:	e3530000 	cmp	r3, #0
    a698:	0a000007 	beq	a6bc <CTimer::SetTime(unsigned int, int)+0x78>
    a69c:	ebffff2d 	bl	a358 <LeaveCritical>
    a6a0:	e3a00001 	mov	r0, #1
    a6a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    a6a8:	e2631000 	rsb	r1, r3, #0
    a6ac:	e1510005 	cmp	r1, r5
    a6b0:	daffffed 	ble	a66c <CTimer::SetTime(unsigned int, int)+0x28>
    a6b4:	e1a00002 	mov	r0, r2
    a6b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    a6bc:	e3a00001 	mov	r0, #1
    a6c0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a6c4 <CTimer::GetClockTicks()>:
    a6c4:	e3a03a03 	mov	r3, #12288	; 0x3000
    a6c8:	e3433f00 	movt	r3, #16128	; 0x3f00
    a6cc:	e5930004 	ldr	r0, [r3, #4]
    a6d0:	e12fff1e 	bx	lr

0000a6d4 <CTimer::GetTicks() const>:
    a6d4:	e5900004 	ldr	r0, [r0, #4]
    a6d8:	e12fff1e 	bx	lr

0000a6dc <CTimer::GetUptime() const>:
    a6dc:	e5900008 	ldr	r0, [r0, #8]
    a6e0:	e12fff1e 	bx	lr

0000a6e4 <CTimer::GetTime() const>:
    a6e4:	e590000c 	ldr	r0, [r0, #12]
    a6e8:	e12fff1e 	bx	lr

0000a6ec <CTimer::GetUniversalTime() const>:
    a6ec:	e5902014 	ldr	r2, [r0, #20]
    a6f0:	e3a0303c 	mov	r3, #60	; 0x3c
    a6f4:	e590000c 	ldr	r0, [r0, #12]
    a6f8:	e0030293 	mul	r3, r3, r2
    a6fc:	e1530000 	cmp	r3, r0
    a700:	d0400003 	suble	r0, r0, r3
    a704:	c3a00000 	movgt	r0, #0
    a708:	e12fff1e 	bx	lr

0000a70c <CTimer::GetTimeString()>:
    a70c:	e5903010 	ldr	r3, [r0, #16]
    a710:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a714:	e1a04000 	mov	r4, r0
    a718:	e3530000 	cmp	r3, #0
    a71c:	e24dd014 	sub	sp, sp, #20
    a720:	1a00006c 	bne	a8d8 <CTimer::GetTimeString()+0x1cc>
    a724:	e590500c 	ldr	r5, [r0, #12]
    a728:	e5909004 	ldr	r9, [r0, #4]
    a72c:	e1950009 	orrs	r0, r5, r9
    a730:	0a000051 	beq	a87c <CTimer::GetTimeString()+0x170>
    a734:	e3086889 	movw	r6, #34953	; 0x8889
    a738:	e3486888 	movt	r6, #34952	; 0x8888
    a73c:	e30b73c5 	movw	r7, #46021	; 0xb3c5
    a740:	e34971a2 	movt	r7, #37282	; 0x91a2
    a744:	e3044507 	movw	r4, #17671	; 0x4507
    a748:	e34c422e 	movt	r4, #49710	; 0xc22e
    a74c:	e0813596 	umull	r3, r1, r6, r5
    a750:	e3a0003c 	mov	r0, #60	; 0x3c
    a754:	e0832695 	umull	r2, r3, r5, r6
    a758:	e308c51f 	movw	ip, #34079	; 0x851f
    a75c:	e345c1eb 	movt	ip, #20971	; 0x51eb
    a760:	e1a012a1 	lsr	r1, r1, #5
    a764:	e1a082a3 	lsr	r8, r3, #5
    a768:	e0873597 	umull	r3, r7, r7, r5
    a76c:	e3a0a064 	mov	sl, #100	; 0x64
    a770:	e0843594 	umull	r3, r4, r4, r5
    a774:	e3a0ee19 	mov	lr, #400	; 0x190
    a778:	e0863196 	umull	r3, r6, r6, r1
    a77c:	e1a075a7 	lsr	r7, r7, #11
    a780:	e0685890 	mls	r8, r0, r8, r5
    a784:	e1a04824 	lsr	r4, r4, #16
    a788:	e1a062a6 	lsr	r6, r6, #5
    a78c:	e30057b2 	movw	r5, #1970	; 0x7b2
    a790:	e300216d 	movw	r2, #365	; 0x16d
    a794:	e300316e 	movw	r3, #366	; 0x16e
    a798:	e0661690 	mls	r6, r0, r6, r1
    a79c:	ea000001 	b	a7a8 <CTimer::GetTimeString()+0x9c>
    a7a0:	e0444000 	sub	r4, r4, r0
    a7a4:	e2855001 	add	r5, r5, #1
    a7a8:	e0810c95 	umull	r0, r1, r5, ip
    a7ac:	e1a002a1 	lsr	r0, r1, #5
    a7b0:	e1a013a1 	lsr	r1, r1, #7
    a7b4:	e060509a 	mls	r0, sl, r0, r5
    a7b8:	e061519e 	mls	r1, lr, r1, r5
    a7bc:	e3500000 	cmp	r0, #0
    a7c0:	e16f1f11 	clz	r1, r1
    a7c4:	01a012a1 	lsreq	r1, r1, #5
    a7c8:	0a000002 	beq	a7d8 <CTimer::GetTimeString()+0xcc>
    a7cc:	e3150003 	tst	r5, #3
    a7d0:	03a01001 	moveq	r1, #1
    a7d4:	13a01000 	movne	r1, #0
    a7d8:	e3510000 	cmp	r1, #0
    a7dc:	01a00002 	moveq	r0, r2
    a7e0:	11a00003 	movne	r0, r3
    a7e4:	e1540000 	cmp	r4, r0
    a7e8:	2affffec 	bcs	a7a0 <CTimer::GetTimeString()+0x94>
    a7ec:	e301075c 	movw	r0, #5980	; 0x175c
    a7f0:	e3400005 	movt	r0, #5
    a7f4:	e3a0a000 	mov	sl, #0
    a7f8:	ea000001 	b	a804 <CTimer::GetTimeString()+0xf8>
    a7fc:	e0444003 	sub	r4, r4, r3
    a800:	e28aa001 	add	sl, sl, #1
    a804:	e35a0001 	cmp	sl, #1
    a808:	13a02000 	movne	r2, #0
    a80c:	02012001 	andeq	r2, r1, #1
    a810:	e3a0301d 	mov	r3, #29
    a814:	e3520000 	cmp	r2, #0
    a818:	0790310a 	ldreq	r3, [r0, sl, lsl #2]
    a81c:	e1540003 	cmp	r4, r3
    a820:	2afffff5 	bcs	a7fc <CTimer::GetTimeString()+0xf0>
    a824:	e308251f 	movw	r2, #34079	; 0x851f
    a828:	e34521eb 	movt	r2, #20971	; 0x51eb
    a82c:	e3a01064 	mov	r1, #100	; 0x64
    a830:	e3a00010 	mov	r0, #16
    a834:	e0832299 	umull	r2, r3, r9, r2
    a838:	e1a0b2a3 	lsr	fp, r3, #5
    a83c:	e06b9b91 	mls	fp, r1, fp, r9
    a840:	ebfffeb3 	bl	a314 <operator new(unsigned int)>
    a844:	e1a09000 	mov	r9, r0
    a848:	eb000bc2 	bl	d758 <CString::CString()>
    a84c:	e30037b7 	movw	r3, #1975	; 0x7b7
    a850:	e1550003 	cmp	r5, r3
    a854:	8a00000a 	bhi	a884 <CTimer::GetTimeString()+0x178>
    a858:	e1a00009 	mov	r0, r9
    a85c:	e58db004 	str	fp, [sp, #4]
    a860:	e1a03006 	mov	r3, r6
    a864:	e58d8000 	str	r8, [sp]
    a868:	e1a02007 	mov	r2, r7
    a86c:	e3011818 	movw	r1, #6168	; 0x1818
    a870:	e3401005 	movt	r1, #5
    a874:	eb000eca 	bl	e3a4 <CString::Format(char const*, ...)>
    a878:	e1a00009 	mov	r0, r9
    a87c:	e28dd014 	add	sp, sp, #20
    a880:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a884:	e30a0aab 	movw	r0, #43691	; 0xaaab
    a888:	e34a0aaa 	movt	r0, #43690	; 0xaaaa
    a88c:	e3a0c018 	mov	ip, #24
    a890:	e30320c4 	movw	r2, #12484	; 0x30c4
    a894:	e3402005 	movt	r2, #5
    a898:	e0810097 	umull	r0, r1, r7, r0
    a89c:	e58db00c 	str	fp, [sp, #12]
    a8a0:	e58d8008 	str	r8, [sp, #8]
    a8a4:	e2843001 	add	r3, r4, #1
    a8a8:	e1a00221 	lsr	r0, r1, #4
    a8ac:	e30117fc 	movw	r1, #6140	; 0x17fc
    a8b0:	e3401005 	movt	r1, #5
    a8b4:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    a8b8:	e067709c 	mls	r7, ip, r0, r7
    a8bc:	e58d6004 	str	r6, [sp, #4]
    a8c0:	e1a00009 	mov	r0, r9
    a8c4:	e58d7000 	str	r7, [sp]
    a8c8:	eb000eb5 	bl	e3a4 <CString::Format(char const*, ...)>
    a8cc:	e1a00009 	mov	r0, r9
    a8d0:	e28dd014 	add	sp, sp, #20
    a8d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8d8:	ebfffe91 	bl	a324 <EnterCritical>
    a8dc:	e5943010 	ldr	r3, [r4, #16]
    a8e0:	e594500c 	ldr	r5, [r4, #12]
    a8e4:	e3530000 	cmp	r3, #0
    a8e8:	e5949004 	ldr	r9, [r4, #4]
    a8ec:	0affff8e 	beq	a72c <CTimer::GetTimeString()+0x20>
    a8f0:	ebfffe98 	bl	a358 <LeaveCritical>
    a8f4:	eaffff8c 	b	a72c <CTimer::GetTimeString()+0x20>

0000a8f8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    a8f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8fc:	e1a0a000 	mov	sl, r0
    a900:	e1a04002 	mov	r4, r2
    a904:	e24dd00c 	sub	sp, sp, #12
    a908:	e3a00014 	mov	r0, #20
    a90c:	e1a06001 	mov	r6, r1
    a910:	e1a07003 	mov	r7, r3
    a914:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
    a918:	ebfffe7d 	bl	a314 <operator new(unsigned int)>
    a91c:	e3540000 	cmp	r4, #0
    a920:	e59a1004 	ldr	r1, [sl, #4]
    a924:	e1a09000 	mov	r9, r0
    a928:	e0816006 	add	r6, r1, r6
    a92c:	0a000042 	beq	aa3c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
    a930:	e59a301c 	ldr	r3, [sl, #28]
    a934:	e3042d43 	movw	r2, #19779	; 0x4d43
    a938:	e3442b54 	movt	r2, #19284	; 0x4b54
    a93c:	e3530000 	cmp	r3, #0
    a940:	e98900d0 	stmib	r9, {r4, r6, r7}
    a944:	e5895010 	str	r5, [r9, #16]
    a948:	e5892000 	str	r2, [r9]
    a94c:	1a000038 	bne	aa34 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
    a950:	e28a5018 	add	r5, sl, #24
    a954:	e1a00005 	mov	r0, r5
    a958:	eb001352 	bl	f6a8 <CPtrList::GetFirst()>
    a95c:	e2504000 	subs	r4, r0, #0
    a960:	0a00002e 	beq	aa20 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    a964:	e301382c 	movw	r3, #6188	; 0x182c
    a968:	e3403005 	movt	r3, #5
    a96c:	e3017794 	movw	r7, #6036	; 0x1794
    a970:	e3407005 	movt	r7, #5
    a974:	e3048d43 	movw	r8, #19779	; 0x4d43
    a978:	e3448b54 	movt	r8, #19284	; 0x4b54
    a97c:	e58d3004 	str	r3, [sp, #4]
    a980:	ea000011 	b	a9cc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd4>
    a984:	e59bc000 	ldr	ip, [fp]
    a988:	e301083c 	movw	r0, #6204	; 0x183c
    a98c:	e3400005 	movt	r0, #5
    a990:	e15c0008 	cmp	ip, r8
    a994:	e3002116 	movw	r2, #278	; 0x116
    a998:	e1a01007 	mov	r1, r7
    a99c:	0a000000 	beq	a9a4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xac>
    a9a0:	eb000808 	bl	c9c8 <assertion_failed>
    a9a4:	e59b3008 	ldr	r3, [fp, #8]
    a9a8:	e1a01004 	mov	r1, r4
    a9ac:	e1a00005 	mov	r0, r5
    a9b0:	e0433006 	sub	r3, r3, r6
    a9b4:	e3530000 	cmp	r3, #0
    a9b8:	ca00000d 	bgt	a9f4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
    a9bc:	eb00133b 	bl	f6b0 <CPtrList::GetNext(TPtrListElement*)>
    a9c0:	e3500000 	cmp	r0, #0
    a9c4:	0a000015 	beq	aa20 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    a9c8:	e1a04000 	mov	r4, r0
    a9cc:	e1a01004 	mov	r1, r4
    a9d0:	e1a00005 	mov	r0, r5
    a9d4:	eb00134c 	bl	f70c <CPtrList::GetPtr(TPtrListElement*)>
    a9d8:	e250b000 	subs	fp, r0, #0
    a9dc:	1affffe8 	bne	a984 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x8c>
    a9e0:	e3002115 	movw	r2, #277	; 0x115
    a9e4:	e1a01007 	mov	r1, r7
    a9e8:	e59d0004 	ldr	r0, [sp, #4]
    a9ec:	eb0007f5 	bl	c9c8 <assertion_failed>
    a9f0:	eaffffe3 	b	a984 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x8c>
    a9f4:	e1a01004 	mov	r1, r4
    a9f8:	e1a00005 	mov	r0, r5
    a9fc:	e1a02009 	mov	r2, r9
    aa00:	eb001358 	bl	f768 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    aa04:	e59a301c 	ldr	r3, [sl, #28]
    aa08:	e3530000 	cmp	r3, #0
    aa0c:	0a000000 	beq	aa14 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x11c>
    aa10:	ebfffe50 	bl	a358 <LeaveCritical>
    aa14:	e1a00009 	mov	r0, r9
    aa18:	e28dd00c 	add	sp, sp, #12
    aa1c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa20:	e1a01004 	mov	r1, r4
    aa24:	e1a00005 	mov	r0, r5
    aa28:	e1a02009 	mov	r2, r9
    aa2c:	eb001393 	bl	f880 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    aa30:	eafffff3 	b	aa04 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
    aa34:	ebfffe3a 	bl	a324 <EnterCritical>
    aa38:	eaffffc4 	b	a950 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
    aa3c:	e3011794 	movw	r1, #6036	; 0x1794
    aa40:	e3401005 	movt	r1, #5
    aa44:	e3010528 	movw	r0, #5416	; 0x1528
    aa48:	e3400005 	movt	r0, #5
    aa4c:	e3002105 	movw	r2, #261	; 0x105
    aa50:	eb0007dc 	bl	c9c8 <assertion_failed>
    aa54:	eaffffb5 	b	a930 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x38>

0000aa58 <CTimer::CancelKernelTimer(unsigned int)>:
    aa58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    aa5c:	e2514000 	subs	r4, r1, #0
    aa60:	e1a05000 	mov	r5, r0
    aa64:	0a000021 	beq	aaf0 <CTimer::CancelKernelTimer(unsigned int)+0x98>
    aa68:	e595301c 	ldr	r3, [r5, #28]
    aa6c:	e3530000 	cmp	r3, #0
    aa70:	1a00001c 	bne	aae8 <CTimer::CancelKernelTimer(unsigned int)+0x90>
    aa74:	e2856018 	add	r6, r5, #24
    aa78:	e1a01004 	mov	r1, r4
    aa7c:	e1a00006 	mov	r0, r6
    aa80:	eb00141c 	bl	faf8 <CPtrList::Find(void*)>
    aa84:	e2507000 	subs	r7, r0, #0
    aa88:	0a000011 	beq	aad4 <CTimer::CancelKernelTimer(unsigned int)+0x7c>
    aa8c:	e5942000 	ldr	r2, [r4]
    aa90:	e3043d43 	movw	r3, #19779	; 0x4d43
    aa94:	e3443b54 	movt	r3, #19284	; 0x4b54
    aa98:	e1520003 	cmp	r2, r3
    aa9c:	0a000005 	beq	aab8 <CTimer::CancelKernelTimer(unsigned int)+0x60>
    aaa0:	e3011794 	movw	r1, #6036	; 0x1794
    aaa4:	e3401005 	movt	r1, #5
    aaa8:	e30107d4 	movw	r0, #6100	; 0x17d4
    aaac:	e3400005 	movt	r0, #5
    aab0:	e3002139 	movw	r2, #313	; 0x139
    aab4:	eb0007c3 	bl	c9c8 <assertion_failed>
    aab8:	e1a00006 	mov	r0, r6
    aabc:	e1a01007 	mov	r1, r7
    aac0:	eb0013b1 	bl	f98c <CPtrList::Remove(TPtrListElement*)>
    aac4:	e3a03000 	mov	r3, #0
    aac8:	e5843000 	str	r3, [r4]
    aacc:	e1a00004 	mov	r0, r4
    aad0:	ebfffe11 	bl	a31c <operator delete(void*)>
    aad4:	e595301c 	ldr	r3, [r5, #28]
    aad8:	e3530000 	cmp	r3, #0
    aadc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    aae0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    aae4:	eafffe1b 	b	a358 <LeaveCritical>
    aae8:	ebfffe0d 	bl	a324 <EnterCritical>
    aaec:	eaffffe0 	b	aa74 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    aaf0:	e3011794 	movw	r1, #6036	; 0x1794
    aaf4:	e3401005 	movt	r1, #5
    aaf8:	e30107c8 	movw	r0, #6088	; 0x17c8
    aafc:	e3400005 	movt	r0, #5
    ab00:	e3002132 	movw	r2, #306	; 0x132
    ab04:	eb0007af 	bl	c9c8 <assertion_failed>
    ab08:	eaffffd6 	b	aa68 <CTimer::CancelKernelTimer(unsigned int)+0x10>

0000ab0c <CTimer::PollKernelTimers()>:
    ab0c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab10:	e1a06000 	mov	r6, r0
    ab14:	e590301c 	ldr	r3, [r0, #28]
    ab18:	e3530000 	cmp	r3, #0
    ab1c:	1a00004e 	bne	ac5c <CTimer::PollKernelTimers()+0x150>
    ab20:	e2867018 	add	r7, r6, #24
    ab24:	e1a00007 	mov	r0, r7
    ab28:	eb0012de 	bl	f6a8 <CPtrList::GetFirst()>
    ab2c:	e2505000 	subs	r5, r0, #0
    ab30:	0a00003f 	beq	ac34 <CTimer::PollKernelTimers()+0x128>
    ab34:	e3019794 	movw	r9, #6036	; 0x1794
    ab38:	e3409005 	movt	r9, #5
    ab3c:	e301a7c8 	movw	sl, #6088	; 0x17c8
    ab40:	e340a005 	movt	sl, #5
    ab44:	e3048d43 	movw	r8, #19779	; 0x4d43
    ab48:	e3448b54 	movt	r8, #19284	; 0x4b54
    ab4c:	ea00000f 	b	ab90 <CTimer::PollKernelTimers()+0x84>
    ab50:	e5945004 	ldr	r5, [r4, #4]
    ab54:	e3550000 	cmp	r5, #0
    ab58:	0a00002c 	beq	ac10 <CTimer::PollKernelTimers()+0x104>
    ab5c:	e5942010 	ldr	r2, [r4, #16]
    ab60:	e1a00004 	mov	r0, r4
    ab64:	e594100c 	ldr	r1, [r4, #12]
    ab68:	e12fff35 	blx	r5
    ab6c:	e3a03000 	mov	r3, #0
    ab70:	e5843000 	str	r3, [r4]
    ab74:	e1a00004 	mov	r0, r4
    ab78:	ebfffde7 	bl	a31c <operator delete(void*)>
    ab7c:	e596301c 	ldr	r3, [r6, #28]
    ab80:	e3530000 	cmp	r3, #0
    ab84:	1a000027 	bne	ac28 <CTimer::PollKernelTimers()+0x11c>
    ab88:	e25b5000 	subs	r5, fp, #0
    ab8c:	0a000028 	beq	ac34 <CTimer::PollKernelTimers()+0x128>
    ab90:	e1a01005 	mov	r1, r5
    ab94:	e1a00007 	mov	r0, r7
    ab98:	eb0012db 	bl	f70c <CPtrList::GetPtr(TPtrListElement*)>
    ab9c:	e2504000 	subs	r4, r0, #0
    aba0:	0a000028 	beq	ac48 <CTimer::PollKernelTimers()+0x13c>
    aba4:	e5943000 	ldr	r3, [r4]
    aba8:	e1530008 	cmp	r3, r8
    abac:	0a000004 	beq	abc4 <CTimer::PollKernelTimers()+0xb8>
    abb0:	e30107d4 	movw	r0, #6100	; 0x17d4
    abb4:	e3400005 	movt	r0, #5
    abb8:	e300214f 	movw	r2, #335	; 0x14f
    abbc:	e1a01009 	mov	r1, r9
    abc0:	eb000780 	bl	c9c8 <assertion_failed>
    abc4:	e5962004 	ldr	r2, [r6, #4]
    abc8:	e5943008 	ldr	r3, [r4, #8]
    abcc:	e0433002 	sub	r3, r3, r2
    abd0:	e3530000 	cmp	r3, #0
    abd4:	ca000016 	bgt	ac34 <CTimer::PollKernelTimers()+0x128>
    abd8:	e1a01005 	mov	r1, r5
    abdc:	e1a00007 	mov	r0, r7
    abe0:	eb0012b2 	bl	f6b0 <CPtrList::GetNext(TPtrListElement*)>
    abe4:	e1a01005 	mov	r1, r5
    abe8:	e1a0b000 	mov	fp, r0
    abec:	e1a00007 	mov	r0, r7
    abf0:	eb001365 	bl	f98c <CPtrList::Remove(TPtrListElement*)>
    abf4:	e596301c 	ldr	r3, [r6, #28]
    abf8:	e3530000 	cmp	r3, #0
    abfc:	0affffd3 	beq	ab50 <CTimer::PollKernelTimers()+0x44>
    ac00:	ebfffdd4 	bl	a358 <LeaveCritical>
    ac04:	e5945004 	ldr	r5, [r4, #4]
    ac08:	e3550000 	cmp	r5, #0
    ac0c:	1affffd2 	bne	ab5c <CTimer::PollKernelTimers()+0x50>
    ac10:	e3010528 	movw	r0, #5416	; 0x1528
    ac14:	e3400005 	movt	r0, #5
    ac18:	e300215d 	movw	r2, #349	; 0x15d
    ac1c:	e1a01009 	mov	r1, r9
    ac20:	eb000768 	bl	c9c8 <assertion_failed>
    ac24:	eaffffcc 	b	ab5c <CTimer::PollKernelTimers()+0x50>
    ac28:	ebfffdbd 	bl	a324 <EnterCritical>
    ac2c:	e25b5000 	subs	r5, fp, #0
    ac30:	1affffd6 	bne	ab90 <CTimer::PollKernelTimers()+0x84>
    ac34:	e596301c 	ldr	r3, [r6, #28]
    ac38:	e3530000 	cmp	r3, #0
    ac3c:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac40:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac44:	eafffdc3 	b	a358 <LeaveCritical>
    ac48:	e300214e 	movw	r2, #334	; 0x14e
    ac4c:	e1a01009 	mov	r1, r9
    ac50:	e1a0000a 	mov	r0, sl
    ac54:	eb00075b 	bl	c9c8 <assertion_failed>
    ac58:	eaffffd1 	b	aba4 <CTimer::PollKernelTimers()+0x98>
    ac5c:	ebfffdb0 	bl	a324 <EnterCritical>
    ac60:	eaffffae 	b	ab20 <CTimer::PollKernelTimers()+0x14>

0000ac64 <CTimer::InterruptHandler()>:
    ac64:	e3a03a03 	mov	r3, #12288	; 0x3000
    ac68:	e3433f00 	movt	r3, #16128	; 0x3f00
    ac6c:	e92d4010 	push	{r4, lr}
    ac70:	e1a04000 	mov	r4, r0
    ac74:	e5933000 	ldr	r3, [r3]
    ac78:	e3130008 	tst	r3, #8
    ac7c:	0a000036 	beq	ad5c <CTimer::InterruptHandler()+0xf8>
    ac80:	e3a03a03 	mov	r3, #12288	; 0x3000
    ac84:	e3433f00 	movt	r3, #16128	; 0x3f00
    ac88:	e3021710 	movw	r1, #10000	; 0x2710
    ac8c:	e5932018 	ldr	r2, [r3, #24]
    ac90:	e0822001 	add	r2, r2, r1
    ac94:	e5832018 	str	r2, [r3, #24]
    ac98:	e5930004 	ldr	r0, [r3, #4]
    ac9c:	e1520000 	cmp	r2, r0
    aca0:	35932004 	ldrcc	r2, [r3, #4]
    aca4:	30821001 	addcc	r1, r2, r1
    aca8:	e3a02008 	mov	r2, #8
    acac:	35831018 	strcc	r1, [r3, #24]
    acb0:	e3a03a03 	mov	r3, #12288	; 0x3000
    acb4:	e3433f00 	movt	r3, #16128	; 0x3f00
    acb8:	e5832000 	str	r2, [r3]
    acbc:	e5942010 	ldr	r2, [r4, #16]
    acc0:	e3520000 	cmp	r2, #0
    acc4:	1a000016 	bne	ad24 <CTimer::InterruptHandler()+0xc0>
    acc8:	e5943004 	ldr	r3, [r4, #4]
    accc:	e308051f 	movw	r0, #34079	; 0x851f
    acd0:	e34501eb 	movt	r0, #20971	; 0x51eb
    acd4:	e2833001 	add	r3, r3, #1
    acd8:	e3a0c064 	mov	ip, #100	; 0x64
    acdc:	e5843004 	str	r3, [r4, #4]
    ace0:	e0810093 	umull	r0, r1, r3, r0
    ace4:	e1a012a1 	lsr	r1, r1, #5
    ace8:	e063319c 	mls	r3, ip, r1, r3
    acec:	e3530000 	cmp	r3, #0
    acf0:	1a000008 	bne	ad18 <CTimer::InterruptHandler()+0xb4>
    acf4:	e5943008 	ldr	r3, [r4, #8]
    acf8:	e2833001 	add	r3, r3, #1
    acfc:	e5843008 	str	r3, [r4, #8]
    ad00:	e594300c 	ldr	r3, [r4, #12]
    ad04:	e2833001 	add	r3, r3, #1
    ad08:	e584300c 	str	r3, [r4, #12]
    ad0c:	e3520000 	cmp	r2, #0
    ad10:	0a000000 	beq	ad18 <CTimer::InterruptHandler()+0xb4>
    ad14:	ebfffd8f 	bl	a358 <LeaveCritical>
    ad18:	e1a00004 	mov	r0, r4
    ad1c:	e8bd4010 	pop	{r4, lr}
    ad20:	eaffff79 	b	ab0c <CTimer::PollKernelTimers()>
    ad24:	ebfffd7e 	bl	a324 <EnterCritical>
    ad28:	e5943004 	ldr	r3, [r4, #4]
    ad2c:	e308051f 	movw	r0, #34079	; 0x851f
    ad30:	e34501eb 	movt	r0, #20971	; 0x51eb
    ad34:	e2833001 	add	r3, r3, #1
    ad38:	e3a0c064 	mov	ip, #100	; 0x64
    ad3c:	e5843004 	str	r3, [r4, #4]
    ad40:	e5942010 	ldr	r2, [r4, #16]
    ad44:	e0810093 	umull	r0, r1, r3, r0
    ad48:	e1a012a1 	lsr	r1, r1, #5
    ad4c:	e063319c 	mls	r3, ip, r1, r3
    ad50:	e3530000 	cmp	r3, #0
    ad54:	1affffec 	bne	ad0c <CTimer::InterruptHandler()+0xa8>
    ad58:	eaffffe5 	b	acf4 <CTimer::InterruptHandler()+0x90>
    ad5c:	e3011794 	movw	r1, #6036	; 0x1794
    ad60:	e3401005 	movt	r1, #5
    ad64:	e3010864 	movw	r0, #6244	; 0x1864
    ad68:	e3400005 	movt	r0, #5
    ad6c:	e300216f 	movw	r2, #367	; 0x16f
    ad70:	eb000714 	bl	c9c8 <assertion_failed>
    ad74:	eaffffc1 	b	ac80 <CTimer::InterruptHandler()+0x1c>

0000ad78 <CTimer::InterruptHandler(void*)>:
    ad78:	e92d4010 	push	{r4, lr}
    ad7c:	e2504000 	subs	r4, r0, #0
    ad80:	0a000002 	beq	ad90 <CTimer::InterruptHandler(void*)+0x18>
    ad84:	e1a00004 	mov	r0, r4
    ad88:	e8bd4010 	pop	{r4, lr}
    ad8c:	eaffffb4 	b	ac64 <CTimer::InterruptHandler()>
    ad90:	e3011794 	movw	r1, #6036	; 0x1794
    ad94:	e3401005 	movt	r1, #5
    ad98:	e3010888 	movw	r0, #6280	; 0x1888
    ad9c:	e3400005 	movt	r0, #5
    ada0:	e3002191 	movw	r2, #401	; 0x191
    ada4:	eb000707 	bl	c9c8 <assertion_failed>
    ada8:	e1a00004 	mov	r0, r4
    adac:	e8bd4010 	pop	{r4, lr}
    adb0:	eaffffab 	b	ac64 <CTimer::InterruptHandler()>

0000adb4 <CTimer::TuneMsDelay()>:
    adb4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    adb8:	e1a06000 	mov	r6, r0
    adbc:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    adc0:	e24dd00c 	sub	sp, sp, #12
    adc4:	e3025710 	movw	r5, #10000	; 0x2710
    adc8:	e5963020 	ldr	r3, [r6, #32]
    adcc:	e308451f 	movw	r4, #34079	; 0x851f
    add0:	e34541eb 	movt	r4, #20971	; 0x51eb
    add4:	e5967004 	ldr	r7, [r6, #4]
    add8:	e0000390 	mul	r0, r0, r3
    addc:	eb000d7d 	bl	e3d8 <DelayLoop>
    ade0:	e5962004 	ldr	r2, [r6, #4]
    ade4:	e5963020 	ldr	r3, [r6, #32]
    ade8:	e3041dd3 	movw	r1, #19923	; 0x4dd3
    adec:	e3411062 	movt	r1, #4194	; 0x1062
    adf0:	e0422007 	sub	r2, r2, r7
    adf4:	e735f215 	udiv	r5, r5, r2
    adf8:	e0030593 	mul	r3, r3, r5
    adfc:	e0832394 	umull	r2, r3, r4, r3
    ae00:	e1a032a3 	lsr	r3, r3, #5
    ae04:	e2832f7d 	add	r2, r3, #500	; 0x1f4
    ae08:	e5863020 	str	r3, [r6, #32]
    ae0c:	e0832291 	umull	r2, r3, r1, r2
    ae10:	e1a03323 	lsr	r3, r3, #6
    ae14:	e5863024 	str	r3, [r6, #36]	; 0x24
    ae18:	eb000869 	bl	cfc4 <CLogger::Get()>
    ae1c:	e0832495 	umull	r2, r3, r5, r4
    ae20:	e3a0c064 	mov	ip, #100	; 0x64
    ae24:	e0841594 	umull	r1, r4, r4, r5
    ae28:	e1a012a3 	lsr	r1, r3, #5
    ae2c:	e3a02003 	mov	r2, #3
    ae30:	e1a042a4 	lsr	r4, r4, #5
    ae34:	e3013894 	movw	r3, #6292	; 0x1894
    ae38:	e3403005 	movt	r3, #5
    ae3c:	e065519c 	mls	r5, ip, r1, r5
    ae40:	e58d4000 	str	r4, [sp]
    ae44:	e59f100c 	ldr	r1, [pc, #12]	; ae58 <CTimer::TuneMsDelay()+0xa4>
    ae48:	e58d5004 	str	r5, [sp, #4]
    ae4c:	eb000939 	bl	d338 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ae50:	e28dd00c 	add	sp, sp, #12
    ae54:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ae58:	0005178c 	.word	0x0005178c

0000ae5c <CTimer::Initialize()>:
    ae5c:	e92d4010 	push	{r4, lr}
    ae60:	e1a04000 	mov	r4, r0
    ae64:	e5900000 	ldr	r0, [r0]
    ae68:	e3500000 	cmp	r0, #0
    ae6c:	0a000011 	beq	aeb8 <CTimer::Initialize()+0x5c>
    ae70:	e1a03004 	mov	r3, r4
    ae74:	e3a01003 	mov	r1, #3
    ae78:	e30a2d78 	movw	r2, #44408	; 0xad78
    ae7c:	e3402000 	movt	r2, #0
    ae80:	eb000e63 	bl	e814 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    ae84:	e3a02a03 	mov	r2, #12288	; 0x3000
    ae88:	e3432f00 	movt	r2, #16128	; 0x3f00
    ae8c:	e3a03df2 	mov	r3, #15488	; 0x3c80
    ae90:	e34f3e36 	movt	r3, #65078	; 0xfe36
    ae94:	e1a00004 	mov	r0, r4
    ae98:	e5823004 	str	r3, [r2, #4]
    ae9c:	e5923004 	ldr	r3, [r2, #4]
    aea0:	e2833c27 	add	r3, r3, #9984	; 0x2700
    aea4:	e2833010 	add	r3, r3, #16
    aea8:	e5823018 	str	r3, [r2, #24]
    aeac:	ebffffc0 	bl	adb4 <CTimer::TuneMsDelay()>
    aeb0:	e3a00001 	mov	r0, #1
    aeb4:	e8bd8010 	pop	{r4, pc}
    aeb8:	e3011794 	movw	r1, #6036	; 0x1794
    aebc:	e3401005 	movt	r1, #5
    aec0:	e30107b0 	movw	r0, #6064	; 0x17b0
    aec4:	e3400005 	movt	r0, #5
    aec8:	e3a02055 	mov	r2, #85	; 0x55
    aecc:	eb0006bd 	bl	c9c8 <assertion_failed>
    aed0:	e5940000 	ldr	r0, [r4]
    aed4:	eaffffe5 	b	ae70 <CTimer::Initialize()+0x14>

0000aed8 <CTimer::SimpleMsDelay(unsigned int)>:
    aed8:	e2503000 	subs	r3, r0, #0
    aedc:	012fff1e 	bxeq	lr
    aee0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    aee4:	e0000390 	mul	r0, r0, r3
    aee8:	e3500000 	cmp	r0, #0
    aeec:	012fff1e 	bxeq	lr
    aef0:	e3a03a03 	mov	r3, #12288	; 0x3000
    aef4:	e3433f00 	movt	r3, #16128	; 0x3f00
    aef8:	e2800001 	add	r0, r0, #1
    aefc:	e1a01003 	mov	r1, r3
    af00:	e5932004 	ldr	r2, [r3, #4]
    af04:	e5913004 	ldr	r3, [r1, #4]
    af08:	e0433002 	sub	r3, r3, r2
    af0c:	e1500003 	cmp	r0, r3
    af10:	8afffffb 	bhi	af04 <CTimer::SimpleMsDelay(unsigned int)+0x2c>
    af14:	e12fff1e 	bx	lr

0000af18 <CTimer::SimpleusDelay(unsigned int)>:
    af18:	e3500000 	cmp	r0, #0
    af1c:	012fff1e 	bxeq	lr
    af20:	e3a03a03 	mov	r3, #12288	; 0x3000
    af24:	e3433f00 	movt	r3, #16128	; 0x3f00
    af28:	e2800001 	add	r0, r0, #1
    af2c:	e1a01003 	mov	r1, r3
    af30:	e5932004 	ldr	r2, [r3, #4]
    af34:	e5913004 	ldr	r3, [r1, #4]
    af38:	e0433002 	sub	r3, r3, r2
    af3c:	e1500003 	cmp	r0, r3
    af40:	8afffffb 	bhi	af34 <CTimer::SimpleusDelay(unsigned int)+0x1c>
    af44:	e12fff1e 	bx	lr

0000af48 <CTimer::IsLeapYear(unsigned int)>:
    af48:	e308251f 	movw	r2, #34079	; 0x851f
    af4c:	e34521eb 	movt	r2, #20971	; 0x51eb
    af50:	e3a01064 	mov	r1, #100	; 0x64
    af54:	e083c092 	umull	ip, r3, r2, r0
    af58:	e1a032a3 	lsr	r3, r3, #5
    af5c:	e0630391 	mls	r3, r1, r3, r0
    af60:	e3530000 	cmp	r3, #0
    af64:	0a000003 	beq	af78 <CTimer::IsLeapYear(unsigned int)+0x30>
    af68:	e3100003 	tst	r0, #3
    af6c:	03a00001 	moveq	r0, #1
    af70:	13a00000 	movne	r0, #0
    af74:	e12fff1e 	bx	lr
    af78:	e0832290 	umull	r2, r3, r0, r2
    af7c:	e3a02e19 	mov	r2, #400	; 0x190
    af80:	e1a033a3 	lsr	r3, r3, #7
    af84:	e0600392 	mls	r0, r2, r3, r0
    af88:	e16f0f10 	clz	r0, r0
    af8c:	e1a002a0 	lsr	r0, r0, #5
    af90:	e12fff1e 	bx	lr

0000af94 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    af94:	e3500001 	cmp	r0, #1
    af98:	0a000003 	beq	afac <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    af9c:	e301375c 	movw	r3, #5980	; 0x175c
    afa0:	e3403005 	movt	r3, #5
    afa4:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    afa8:	e12fff1e 	bx	lr
    afac:	e308251f 	movw	r2, #34079	; 0x851f
    afb0:	e34521eb 	movt	r2, #20971	; 0x51eb
    afb4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    afb8:	e3a0e064 	mov	lr, #100	; 0x64
    afbc:	e0832291 	umull	r2, r3, r1, r2
    afc0:	e1a0c2a3 	lsr	ip, r3, #5
    afc4:	e06c1c9e 	mls	ip, lr, ip, r1
    afc8:	e35c0000 	cmp	ip, #0
    afcc:	0a000008 	beq	aff4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    afd0:	e3110003 	tst	r1, #3
    afd4:	03a01001 	moveq	r1, #1
    afd8:	13a01000 	movne	r1, #0
    afdc:	e3510000 	cmp	r1, #0
    afe0:	13a0001d 	movne	r0, #29
    afe4:	0301375c 	movweq	r3, #5980	; 0x175c
    afe8:	03403005 	movteq	r3, #5
    afec:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    aff0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    aff4:	e1a033a3 	lsr	r3, r3, #7
    aff8:	e3a02e19 	mov	r2, #400	; 0x190
    affc:	e0611392 	mls	r1, r2, r3, r1
    b000:	e16f1f11 	clz	r1, r1
    b004:	e1a012a1 	lsr	r1, r1, #5
    b008:	eafffff3 	b	afdc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

0000b00c <CTimer::Get()>:
    b00c:	e92d4010 	push	{r4, lr}
    b010:	e30341c0 	movw	r4, #12736	; 0x31c0
    b014:	e3404005 	movt	r4, #5
    b018:	e5940000 	ldr	r0, [r4]
    b01c:	e3500000 	cmp	r0, #0
    b020:	18bd8010 	popne	{r4, pc}
    b024:	e30021d6 	movw	r2, #470	; 0x1d6
    b028:	e3011794 	movw	r1, #6036	; 0x1794
    b02c:	e3401005 	movt	r1, #5
    b030:	e30108ac 	movw	r0, #6316	; 0x18ac
    b034:	e3400005 	movt	r0, #5
    b038:	eb000662 	bl	c9c8 <assertion_failed>
    b03c:	e5940000 	ldr	r0, [r4]
    b040:	e8bd8010 	pop	{r4, pc}

0000b044 <memcpy>:
    b044:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b048:	e352007f 	cmp	r2, #127	; 0x7f
    b04c:	9a00000b 	bls	b080 <memcpy+0x3c>
    b050:	e3110003 	tst	r1, #3
    b054:	1a000009 	bne	b080 <memcpy+0x3c>
    b058:	e3100003 	tst	r0, #3
    b05c:	1a000007 	bne	b080 <memcpy+0x3c>
    b060:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    b064:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    b068:	e2422020 	sub	r2, r2, #32
    b06c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    b070:	f5d1f040 	pld	[r1, #64]	; 0x40
    b074:	e352001f 	cmp	r2, #31
    b078:	8afffff9 	bhi	b064 <memcpy+0x20>
    b07c:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    b080:	e3520000 	cmp	r2, #0
    b084:	0a000003 	beq	b098 <memcpy+0x54>
    b088:	e4d13001 	ldrb	r3, [r1], #1
    b08c:	e2522001 	subs	r2, r2, #1
    b090:	e4c03001 	strb	r3, [r0], #1
    b094:	1afffffb 	bne	b088 <memcpy+0x44>
    b098:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    b09c:	e12fff1e 	bx	lr

0000b0a0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    b0a0:	e3a01000 	mov	r1, #0
    b0a4:	e3a0c00a 	mov	ip, #10
    b0a8:	ea000009 	b	b0d4 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
    b0ac:	e3530009 	cmp	r3, #9
    b0b0:	8a00000f 	bhi	b0f4 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
    b0b4:	e3720001 	cmn	r2, #1
    b0b8:	13a03000 	movne	r3, #0
    b0bc:	03a03001 	moveq	r3, #1
    b0c0:	e1510002 	cmp	r1, r2
    b0c4:	83833001 	orrhi	r3, r3, #1
    b0c8:	e1a01002 	mov	r1, r2
    b0cc:	e3530000 	cmp	r3, #0
    b0d0:	1a000007 	bne	b0f4 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
    b0d4:	e0d020d1 	ldrsb	r2, [r0], #1
    b0d8:	e3520000 	cmp	r2, #0
    b0dc:	e2423030 	sub	r3, r2, #48	; 0x30
    b0e0:	e022319c 	mla	r2, ip, r1, r3
    b0e4:	e6ef3073 	uxtb	r3, r3
    b0e8:	1affffef 	bne	b0ac <CKernelOptions::GetDecimal(char*) [clone .part.0]+0xc>
    b0ec:	e1a00001 	mov	r0, r1
    b0f0:	e12fff1e 	bx	lr
    b0f4:	e3e01000 	mvn	r1, #0
    b0f8:	e1a00001 	mov	r0, r1
    b0fc:	e12fff1e 	bx	lr

0000b100 <CKernelOptions::~CKernelOptions()>:
    b100:	e30331c4 	movw	r3, #12740	; 0x31c4
    b104:	e3403005 	movt	r3, #5
    b108:	e3a02000 	mov	r2, #0
    b10c:	e5832000 	str	r2, [r3]
    b110:	e12fff1e 	bx	lr

0000b114 <CKernelOptions::GetWidth() const>:
    b114:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    b118:	e12fff1e 	bx	lr

0000b11c <CKernelOptions::GetHeight() const>:
    b11c:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    b120:	e12fff1e 	bx	lr

0000b124 <CKernelOptions::GetLogDevice() const>:
    b124:	e2800e81 	add	r0, r0, #2064	; 0x810
    b128:	e2800008 	add	r0, r0, #8
    b12c:	e12fff1e 	bx	lr

0000b130 <CKernelOptions::GetLogLevel() const>:
    b130:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    b134:	e12fff1e 	bx	lr

0000b138 <CKernelOptions::GetKeyMap() const>:
    b138:	e2800e83 	add	r0, r0, #2096	; 0x830
    b13c:	e12fff1e 	bx	lr

0000b140 <CKernelOptions::GetUSBPowerDelay() const>:
    b140:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    b144:	e12fff1e 	bx	lr

0000b148 <CKernelOptions::GetCPUSpeed() const>:
    b148:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    b14c:	e12fff1e 	bx	lr

0000b150 <CKernelOptions::GetSoCMaxTemp() const>:
    b150:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
    b154:	e12fff1e 	bx	lr

0000b158 <CKernelOptions::Get()>:
    b158:	e30331c4 	movw	r3, #12740	; 0x31c4
    b15c:	e3403005 	movt	r3, #5
    b160:	e5930000 	ldr	r0, [r3]
    b164:	e12fff1e 	bx	lr

0000b168 <CKernelOptions::GetToken()>:
    b168:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    b16c:	e1d320d0 	ldrsb	r2, [r3]
    b170:	e3520000 	cmp	r2, #0
    b174:	1a000005 	bne	b190 <CKernelOptions::GetToken()+0x28>
    b178:	ea000016 	b	b1d8 <CKernelOptions::GetToken()+0x70>
    b17c:	e2833001 	add	r3, r3, #1
    b180:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    b184:	e1d320d0 	ldrsb	r2, [r3]
    b188:	e3520000 	cmp	r2, #0
    b18c:	0a000011 	beq	b1d8 <CKernelOptions::GetToken()+0x70>
    b190:	e3520020 	cmp	r2, #32
    b194:	0afffff8 	beq	b17c <CKernelOptions::GetToken()+0x14>
    b198:	e1a02003 	mov	r2, r3
    b19c:	ea000000 	b	b1a4 <CKernelOptions::GetToken()+0x3c>
    b1a0:	e1a02001 	mov	r2, r1
    b1a4:	e2821001 	add	r1, r2, #1
    b1a8:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    b1ac:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    b1b0:	e35c0000 	cmp	ip, #0
    b1b4:	0a000008 	beq	b1dc <CKernelOptions::GetToken()+0x74>
    b1b8:	e35c0020 	cmp	ip, #32
    b1bc:	1afffff7 	bne	b1a0 <CKernelOptions::GetToken()+0x38>
    b1c0:	e2822002 	add	r2, r2, #2
    b1c4:	e3a0c000 	mov	ip, #0
    b1c8:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    b1cc:	e1a00003 	mov	r0, r3
    b1d0:	e5c1c000 	strb	ip, [r1]
    b1d4:	e12fff1e 	bx	lr
    b1d8:	e3a03000 	mov	r3, #0
    b1dc:	e1a00003 	mov	r0, r3
    b1e0:	e12fff1e 	bx	lr

0000b1e4 <CKernelOptions::CKernelOptions()>:
    b1e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b1e8:	e1a05000 	mov	r5, r0
    b1ec:	e2807e81 	add	r7, r0, #2064	; 0x810
    b1f0:	e3a04000 	mov	r4, #0
    b1f4:	e3a02004 	mov	r2, #4
    b1f8:	e3a0303c 	mov	r3, #60	; 0x3c
    b1fc:	e2877008 	add	r7, r7, #8
    b200:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    b204:	e24dd01c 	sub	sp, sp, #28
    b208:	e585383c 	str	r3, [r5, #2108]	; 0x83c
    b20c:	e1a00007 	mov	r0, r7
    b210:	e30118ec 	movw	r1, #6380	; 0x18ec
    b214:	e3401005 	movt	r1, #5
    b218:	e5854810 	str	r4, [r5, #2064]	; 0x810
    b21c:	e2859e83 	add	r9, r5, #2096	; 0x830
    b220:	e5854814 	str	r4, [r5, #2068]	; 0x814
    b224:	e5854834 	str	r4, [r5, #2100]	; 0x834
    b228:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
    b22c:	eb0013f3 	bl	10200 <strcpy>
    b230:	e1a00009 	mov	r0, r9
    b234:	e30118f4 	movw	r1, #6388	; 0x18f4
    b238:	e3401005 	movt	r1, #5
    b23c:	eb0013ef 	bl	10200 <strcpy>
    b240:	e30331c4 	movw	r3, #12740	; 0x31c4
    b244:	e3403005 	movt	r3, #5
    b248:	e28d0010 	add	r0, sp, #16
    b24c:	e5835000 	str	r5, [r3]
    b250:	ebfff79c 	bl	90c8 <CBcmPropertyTags::CBcmPropertyTags()>
    b254:	e58d4000 	str	r4, [sp]
    b258:	e1a02005 	mov	r2, r5
    b25c:	e28d0010 	add	r0, sp, #16
    b260:	e3a01001 	mov	r1, #1
    b264:	e3401005 	movt	r1, #5
    b268:	e300380c 	movw	r3, #2060	; 0x80c
    b26c:	ebfff7dd 	bl	91e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b270:	e1500004 	cmp	r0, r4
    b274:	0a000040 	beq	b37c <CKernelOptions::CKernelOptions()+0x198>
    b278:	e5953008 	ldr	r3, [r5, #8]
    b27c:	e3530b02 	cmp	r3, #2048	; 0x800
    b280:	2a00003d 	bcs	b37c <CKernelOptions::CKernelOptions()+0x198>
    b284:	e0853003 	add	r3, r5, r3
    b288:	e285200c 	add	r2, r5, #12
    b28c:	e3016948 	movw	r6, #6472	; 0x1948
    b290:	e3406005 	movt	r6, #5
    b294:	e30188f8 	movw	r8, #6392	; 0x18f8
    b298:	e3408005 	movt	r8, #5
    b29c:	e301a900 	movw	sl, #6400	; 0x1900
    b2a0:	e340a005 	movt	sl, #5
    b2a4:	e5c3400c 	strb	r4, [r3, #12]
    b2a8:	e585280c 	str	r2, [r5, #2060]	; 0x80c
    b2ac:	e1a00005 	mov	r0, r5
    b2b0:	ebffffac 	bl	b168 <CKernelOptions::GetToken()>
    b2b4:	e250b000 	subs	fp, r0, #0
    b2b8:	0a00002f 	beq	b37c <CKernelOptions::CKernelOptions()+0x198>
    b2bc:	e1db30d0 	ldrsb	r3, [fp]
    b2c0:	e3530000 	cmp	r3, #0
    b2c4:	0a000008 	beq	b2ec <CKernelOptions::CKernelOptions()+0x108>
    b2c8:	e353003d 	cmp	r3, #61	; 0x3d
    b2cc:	e1a0400b 	mov	r4, fp
    b2d0:	1a000002 	bne	b2e0 <CKernelOptions::CKernelOptions()+0xfc>
    b2d4:	ea00002d 	b	b390 <CKernelOptions::CKernelOptions()+0x1ac>
    b2d8:	e353003d 	cmp	r3, #61	; 0x3d
    b2dc:	0a00002b 	beq	b390 <CKernelOptions::CKernelOptions()+0x1ac>
    b2e0:	e1f430d1 	ldrsb	r3, [r4, #1]!
    b2e4:	e3530000 	cmp	r3, #0
    b2e8:	1afffffa 	bne	b2d8 <CKernelOptions::CKernelOptions()+0xf4>
    b2ec:	e1a01006 	mov	r1, r6
    b2f0:	e1a0000b 	mov	r0, fp
    b2f4:	eb0013a6 	bl	10194 <strcmp>
    b2f8:	e3500000 	cmp	r0, #0
    b2fc:	0affffea 	beq	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b300:	e1a01008 	mov	r1, r8
    b304:	e1a0000b 	mov	r0, fp
    b308:	eb0013a1 	bl	10194 <strcmp>
    b30c:	e3500000 	cmp	r0, #0
    b310:	13a03000 	movne	r3, #0
    b314:	0affffe4 	beq	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b318:	e1a0100a 	mov	r1, sl
    b31c:	e1a0000b 	mov	r0, fp
    b320:	e58d300c 	str	r3, [sp, #12]
    b324:	eb00139a 	bl	10194 <strcmp>
    b328:	e2504000 	subs	r4, r0, #0
    b32c:	e59d300c 	ldr	r3, [sp, #12]
    b330:	0a00002a 	beq	b3e0 <CKernelOptions::CKernelOptions()+0x1fc>
    b334:	e3011908 	movw	r1, #6408	; 0x1908
    b338:	e3401005 	movt	r1, #5
    b33c:	e1a0000b 	mov	r0, fp
    b340:	e58d300c 	str	r3, [sp, #12]
    b344:	eb001392 	bl	10194 <strcmp>
    b348:	e3500000 	cmp	r0, #0
    b34c:	e59d300c 	ldr	r3, [sp, #12]
    b350:	1a000028 	bne	b3f8 <CKernelOptions::CKernelOptions()+0x214>
    b354:	e3530000 	cmp	r3, #0
    b358:	0affffd3 	beq	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b35c:	e1d320d0 	ldrsb	r2, [r3]
    b360:	e3520000 	cmp	r2, #0
    b364:	0affffd0 	beq	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b368:	e1a00003 	mov	r0, r3
    b36c:	ebffff4b 	bl	b0a0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b370:	e3500004 	cmp	r0, #4
    b374:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    b378:	eaffffcb 	b	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b37c:	e28d0010 	add	r0, sp, #16
    b380:	ebfff756 	bl	90e0 <CBcmPropertyTags::~CBcmPropertyTags()>
    b384:	e1a00005 	mov	r0, r5
    b388:	e28dd01c 	add	sp, sp, #28
    b38c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b390:	e3a03000 	mov	r3, #0
    b394:	e1a01006 	mov	r1, r6
    b398:	e5c43000 	strb	r3, [r4]
    b39c:	e1a0000b 	mov	r0, fp
    b3a0:	eb00137b 	bl	10194 <strcmp>
    b3a4:	e3500000 	cmp	r0, #0
    b3a8:	e2843001 	add	r3, r4, #1
    b3ac:	1a000058 	bne	b514 <CKernelOptions::CKernelOptions()+0x330>
    b3b0:	e3530000 	cmp	r3, #0
    b3b4:	0affffbc 	beq	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b3b8:	e1d420d1 	ldrsb	r2, [r4, #1]
    b3bc:	e3520000 	cmp	r2, #0
    b3c0:	0affffb9 	beq	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b3c4:	e1a00003 	mov	r0, r3
    b3c8:	ebffff34 	bl	b0a0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b3cc:	e300353c 	movw	r3, #1340	; 0x53c
    b3d0:	e2402d0a 	sub	r2, r0, #640	; 0x280
    b3d4:	e1520003 	cmp	r2, r3
    b3d8:	95850810 	strls	r0, [r5, #2064]	; 0x810
    b3dc:	eaffffb2 	b	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b3e0:	e1a01003 	mov	r1, r3
    b3e4:	e3a02013 	mov	r2, #19
    b3e8:	e1a00007 	mov	r0, r7
    b3ec:	eb00138e 	bl	1022c <strncpy>
    b3f0:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    b3f4:	eaffffac 	b	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b3f8:	e3011914 	movw	r1, #6420	; 0x1914
    b3fc:	e3401005 	movt	r1, #5
    b400:	e1a0000b 	mov	r0, fp
    b404:	e58d300c 	str	r3, [sp, #12]
    b408:	eb001361 	bl	10194 <strcmp>
    b40c:	e2504000 	subs	r4, r0, #0
    b410:	e59d300c 	ldr	r3, [sp, #12]
    b414:	1a000005 	bne	b430 <CKernelOptions::CKernelOptions()+0x24c>
    b418:	e1a01003 	mov	r1, r3
    b41c:	e3a02002 	mov	r2, #2
    b420:	e1a00009 	mov	r0, r9
    b424:	eb001380 	bl	1022c <strncpy>
    b428:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    b42c:	eaffff9e 	b	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b430:	e301191c 	movw	r1, #6428	; 0x191c
    b434:	e3401005 	movt	r1, #5
    b438:	e1a0000b 	mov	r0, fp
    b43c:	e58d300c 	str	r3, [sp, #12]
    b440:	eb001353 	bl	10194 <strcmp>
    b444:	e3500000 	cmp	r0, #0
    b448:	e59d300c 	ldr	r3, [sp, #12]
    b44c:	1a00000b 	bne	b480 <CKernelOptions::CKernelOptions()+0x29c>
    b450:	e3530000 	cmp	r3, #0
    b454:	0affff94 	beq	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b458:	e1d320d0 	ldrsb	r2, [r3]
    b45c:	e3520000 	cmp	r2, #0
    b460:	0affff91 	beq	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b464:	e1a00003 	mov	r0, r3
    b468:	ebffff0c 	bl	b0a0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b46c:	e3013e78 	movw	r3, #7800	; 0x1e78
    b470:	e24020c8 	sub	r2, r0, #200	; 0xc8
    b474:	e1520003 	cmp	r2, r3
    b478:	95850834 	strls	r0, [r5, #2100]	; 0x834
    b47c:	eaffff8a 	b	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b480:	e301192c 	movw	r1, #6444	; 0x192c
    b484:	e3401005 	movt	r1, #5
    b488:	e1a0000b 	mov	r0, fp
    b48c:	e58d300c 	str	r3, [sp, #12]
    b490:	eb00133f 	bl	10194 <strcmp>
    b494:	e3500000 	cmp	r0, #0
    b498:	e59d300c 	ldr	r3, [sp, #12]
    b49c:	1a000007 	bne	b4c0 <CKernelOptions::CKernelOptions()+0x2dc>
    b4a0:	e1a00003 	mov	r0, r3
    b4a4:	e3011934 	movw	r1, #6452	; 0x1934
    b4a8:	e3401005 	movt	r1, #5
    b4ac:	eb001338 	bl	10194 <strcmp>
    b4b0:	e3500000 	cmp	r0, #0
    b4b4:	03a03001 	moveq	r3, #1
    b4b8:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    b4bc:	eaffff7a 	b	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b4c0:	e1a0000b 	mov	r0, fp
    b4c4:	e301193c 	movw	r1, #6460	; 0x193c
    b4c8:	e3401005 	movt	r1, #5
    b4cc:	e58d300c 	str	r3, [sp, #12]
    b4d0:	eb00132f 	bl	10194 <strcmp>
    b4d4:	e59d300c 	ldr	r3, [sp, #12]
    b4d8:	e2902000 	adds	r2, r0, #0
    b4dc:	13a02001 	movne	r2, #1
    b4e0:	e3530000 	cmp	r3, #0
    b4e4:	03822001 	orreq	r2, r2, #1
    b4e8:	e3520000 	cmp	r2, #0
    b4ec:	1affff6e 	bne	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b4f0:	e1d320d0 	ldrsb	r2, [r3]
    b4f4:	e3520000 	cmp	r2, #0
    b4f8:	0affff6b 	beq	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b4fc:	e1a00003 	mov	r0, r3
    b500:	ebfffee6 	bl	b0a0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b504:	e2403028 	sub	r3, r0, #40	; 0x28
    b508:	e3530026 	cmp	r3, #38	; 0x26
    b50c:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
    b510:	eaffff65 	b	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b514:	e1a01008 	mov	r1, r8
    b518:	e1a0000b 	mov	r0, fp
    b51c:	e58d300c 	str	r3, [sp, #12]
    b520:	eb00131b 	bl	10194 <strcmp>
    b524:	e3500000 	cmp	r0, #0
    b528:	e59d300c 	ldr	r3, [sp, #12]
    b52c:	1affff79 	bne	b318 <CKernelOptions::CKernelOptions()+0x134>
    b530:	e3530000 	cmp	r3, #0
    b534:	0affff5c 	beq	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b538:	e1d420d1 	ldrsb	r2, [r4, #1]
    b53c:	e3520000 	cmp	r2, #0
    b540:	0affff59 	beq	b2ac <CKernelOptions::CKernelOptions()+0xc8>
    b544:	e1a00003 	mov	r0, r3
    b548:	ebfffed4 	bl	b0a0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b54c:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    b550:	e3530f96 	cmp	r3, #600	; 0x258
    b554:	95850814 	strls	r0, [r5, #2068]	; 0x814
    b558:	eaffff53 	b	b2ac <CKernelOptions::CKernelOptions()+0xc8>

0000b55c <CKernelOptions::GetOptionValue(char*)>:
    b55c:	e1d030d0 	ldrsb	r3, [r0]
    b560:	e3530000 	cmp	r3, #0
    b564:	1a000003 	bne	b578 <CKernelOptions::GetOptionValue(char*)+0x1c>
    b568:	ea000007 	b	b58c <CKernelOptions::GetOptionValue(char*)+0x30>
    b56c:	e1f030d1 	ldrsb	r3, [r0, #1]!
    b570:	e3530000 	cmp	r3, #0
    b574:	0a000004 	beq	b58c <CKernelOptions::GetOptionValue(char*)+0x30>
    b578:	e353003d 	cmp	r3, #61	; 0x3d
    b57c:	1afffffa 	bne	b56c <CKernelOptions::GetOptionValue(char*)+0x10>
    b580:	e3a02000 	mov	r2, #0
    b584:	e2803001 	add	r3, r0, #1
    b588:	e5c02000 	strb	r2, [r0]
    b58c:	e1a00003 	mov	r0, r3
    b590:	e12fff1e 	bx	lr

0000b594 <CKernelOptions::GetDecimal(char*)>:
    b594:	e2503000 	subs	r3, r0, #0
    b598:	0a000002 	beq	b5a8 <CKernelOptions::GetDecimal(char*)+0x14>
    b59c:	e1d330d0 	ldrsb	r3, [r3]
    b5a0:	e3530000 	cmp	r3, #0
    b5a4:	1a000001 	bne	b5b0 <CKernelOptions::GetDecimal(char*)+0x1c>
    b5a8:	e3e00000 	mvn	r0, #0
    b5ac:	e12fff1e 	bx	lr
    b5b0:	eafffeba 	b	b0a0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000b5b4 <CPageTable::CPageTable()>:
    b5b4:	e92d4010 	push	{r4, lr}
    b5b8:	e1a04000 	mov	r4, r0
    b5bc:	e3a01000 	mov	r1, #0
    b5c0:	e3a029b2 	mov	r2, #2916352	; 0x2c8000
    b5c4:	e1a0c001 	mov	ip, r1
    b5c8:	e1a03002 	mov	r3, r2
    b5cc:	e3a0e002 	mov	lr, #2
    b5d0:	e3a00001 	mov	r0, #1
    b5d4:	e8840006 	stm	r4, {r1, r2}
    b5d8:	e5d32000 	ldrb	r2, [r3]
    b5dc:	e35c0b01 	cmp	ip, #1024	; 0x400
    b5e0:	e5d31002 	ldrb	r1, [r3, #2]
    b5e4:	e2833004 	add	r3, r3, #4
    b5e8:	e7c1201e 	bfi	r2, lr, #0, #2
    b5ec:	e3811001 	orr	r1, r1, #1
    b5f0:	e6ef2072 	uxtb	r2, r2
    b5f4:	e20110f9 	and	r1, r1, #249	; 0xf9
    b5f8:	e3822004 	orr	r2, r2, #4
    b5fc:	e7c3119f 	bfc	r1, #3, #1
    b600:	e20220f7 	and	r2, r2, #247	; 0xf7
    b604:	e5431002 	strb	r1, [r3, #-2]
    b608:	e7c4221f 	bfc	r2, #4, #1
    b60c:	e5432004 	strb	r2, [r3, #-4]
    b610:	e15310b2 	ldrh	r1, [r3, #-2]
    b614:	e15320b4 	ldrh	r2, [r3, #-4]
    b618:	e7cf121c 	bfi	r1, ip, #4, #12
    b61c:	e28cc001 	add	ip, ip, #1
    b620:	e7c8229f 	bfc	r2, #5, #4
    b624:	e14310b2 	strh	r1, [r3, #-2]
    b628:	e14320b4 	strh	r2, [r3, #-4]
    b62c:	e1a02422 	lsr	r2, r2, #8
    b630:	e20220fd 	and	r2, r2, #253	; 0xfd
    b634:	e7c32110 	bfi	r2, r0, #2, #2
    b638:	e202208f 	and	r2, r2, #143	; 0x8f
    b63c:	e7c7239f 	bfc	r2, #7, #1
    b640:	e5432003 	strb	r2, [r3, #-3]
    b644:	25532004 	ldrbcs	r2, [r3, #-4]
    b648:	23822010 	orrcs	r2, r2, #16
    b64c:	25432004 	strbcs	r2, [r3, #-4]
    b650:	e35c0a01 	cmp	ip, #4096	; 0x1000
    b654:	1affffdf 	bne	b5d8 <CPageTable::CPageTable()+0x24>
    b658:	eb000fca 	bl	f588 <CleanDataCache>
    b65c:	e1a00004 	mov	r0, r4
    b660:	e8bd8010 	pop	{r4, pc}

0000b664 <CPageTable::CPageTable(unsigned int)>:
    b664:	e3a03001 	mov	r3, #1
    b668:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b66c:	e1a04000 	mov	r4, r0
    b670:	e5803000 	str	r3, [r0]
    b674:	e1a05001 	mov	r5, r1
    b678:	eb0011e6 	bl	fe18 <palloc>
    b67c:	e3500000 	cmp	r0, #0
    b680:	e5840004 	str	r0, [r4, #4]
    b684:	0a00003e 	beq	b784 <CPageTable::CPageTable(unsigned int)+0x120>
    b688:	e7eb3050 	ubfx	r3, r0, #0, #12
    b68c:	e3530000 	cmp	r3, #0
    b690:	1a000033 	bne	b764 <CPageTable::CPageTable(unsigned int)+0x100>
    b694:	e3a02000 	mov	r2, #0
    b698:	e300e944 	movw	lr, #2372	; 0x944
    b69c:	e340e001 	movt	lr, #1
    b6a0:	e1a08002 	mov	r8, r2
    b6a4:	e3a07002 	mov	r7, #2
    b6a8:	e3a06001 	mov	r6, #1
    b6ac:	ea000009 	b	b6d8 <CPageTable::CPageTable(unsigned int)+0x74>
    b6b0:	e6ef3071 	uxtb	r3, r1
    b6b4:	e5d01000 	ldrb	r1, [r0]
    b6b8:	e3833001 	orr	r3, r3, #1
    b6bc:	e7c31198 	bfi	r1, r8, #3, #1
    b6c0:	e5c03002 	strb	r3, [r0, #2]
    b6c4:	e5c01000 	strb	r1, [r0]
    b6c8:	e2822601 	add	r2, r2, #1048576	; 0x100000
    b6cc:	e2800004 	add	r0, r0, #4
    b6d0:	e3520101 	cmp	r2, #1073741824	; 0x40000000
    b6d4:	0a00001f 	beq	b758 <CPageTable::CPageTable(unsigned int)+0xf4>
    b6d8:	e5d03001 	ldrb	r3, [r0, #1]
    b6dc:	e7e31a52 	ubfx	r1, r2, #20, #4
    b6e0:	e152000e 	cmp	r2, lr
    b6e4:	e387c00c 	orr	ip, r7, #12
    b6e8:	e20330fc 	and	r3, r3, #252	; 0xfc
    b6ec:	e1a09c22 	lsr	r9, r2, #24
    b6f0:	e7c33116 	bfi	r3, r6, #2, #2
    b6f4:	e1a01201 	lsl	r1, r1, #4
    b6f8:	e203308f 	and	r3, r3, #143	; 0x8f
    b6fc:	e5c01002 	strb	r1, [r0, #2]
    b700:	e7c7339f 	bfc	r3, #7, #1
    b704:	e5c0c000 	strb	ip, [r0]
    b708:	e5c03001 	strb	r3, [r0, #1]
    b70c:	e5c09003 	strb	r9, [r0, #3]
    b710:	3affffec 	bcc	b6c8 <CPageTable::CPageTable(unsigned int)+0x64>
    b714:	e1520005 	cmp	r2, r5
    b718:	e6ef307c 	uxtb	r3, ip
    b71c:	e3833010 	orr	r3, r3, #16
    b720:	e5c03000 	strb	r3, [r0]
    b724:	2affffe1 	bcs	b6b0 <CPageTable::CPageTable(unsigned int)+0x4c>
    b728:	e3520501 	cmp	r2, #4194304	; 0x400000
    b72c:	1affffe5 	bne	b6c8 <CPageTable::CPageTable(unsigned int)+0x64>
    b730:	e5d03000 	ldrb	r3, [r0]
    b734:	e2800004 	add	r0, r0, #4
    b738:	e5502002 	ldrb	r2, [r0, #-2]
    b73c:	e20330fb 	and	r3, r3, #251	; 0xfb
    b740:	e3822001 	orr	r2, r2, #1
    b744:	e7c33198 	bfi	r3, r8, #3, #1
    b748:	e5402002 	strb	r2, [r0, #-2]
    b74c:	e3a02605 	mov	r2, #5242880	; 0x500000
    b750:	e5403004 	strb	r3, [r0, #-4]
    b754:	eaffffdf 	b	b6d8 <CPageTable::CPageTable(unsigned int)+0x74>
    b758:	eb000f8a 	bl	f588 <CleanDataCache>
    b75c:	e1a00004 	mov	r0, r4
    b760:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b764:	e3011950 	movw	r1, #6480	; 0x1950
    b768:	e3401005 	movt	r1, #5
    b76c:	e3010970 	movw	r0, #6512	; 0x1970
    b770:	e3400005 	movt	r0, #5
    b774:	e3a02051 	mov	r2, #81	; 0x51
    b778:	eb000492 	bl	c9c8 <assertion_failed>
    b77c:	e5940004 	ldr	r0, [r4, #4]
    b780:	eaffffc3 	b	b694 <CPageTable::CPageTable(unsigned int)+0x30>
    b784:	e3011950 	movw	r1, #6480	; 0x1950
    b788:	e3401005 	movt	r1, #5
    b78c:	e3010960 	movw	r0, #6496	; 0x1960
    b790:	e3400005 	movt	r0, #5
    b794:	e3a02050 	mov	r2, #80	; 0x50
    b798:	eb00048a 	bl	c9c8 <assertion_failed>
    b79c:	e5940004 	ldr	r0, [r4, #4]
    b7a0:	eaffffb8 	b	b688 <CPageTable::CPageTable(unsigned int)+0x24>

0000b7a4 <CPageTable::~CPageTable()>:
    b7a4:	e5903000 	ldr	r3, [r0]
    b7a8:	e92d4010 	push	{r4, lr}
    b7ac:	e1a04000 	mov	r4, r0
    b7b0:	e3530000 	cmp	r3, #0
    b7b4:	0a000001 	beq	b7c0 <CPageTable::~CPageTable()+0x1c>
    b7b8:	e5900004 	ldr	r0, [r0, #4]
    b7bc:	eb0011cf 	bl	ff00 <pfree>
    b7c0:	e1a00004 	mov	r0, r4
    b7c4:	e8bd8010 	pop	{r4, pc}

0000b7c8 <CPageTable::GetBaseAddress() const>:
    b7c8:	e5900004 	ldr	r0, [r0, #4]
    b7cc:	e3800059 	orr	r0, r0, #89	; 0x59
    b7d0:	e12fff1e 	bx	lr

0000b7d4 <CScreenDevice::~CScreenDevice()>:
    b7d4:	e590300c 	ldr	r3, [r0, #12]
    b7d8:	e59f2064 	ldr	r2, [pc, #100]	; b844 <CScreenDevice::~CScreenDevice()+0x70>
    b7dc:	e3530000 	cmp	r3, #0
    b7e0:	e92d4070 	push	{r4, r5, r6, lr}
    b7e4:	e1a04000 	mov	r4, r0
    b7e8:	e5802000 	str	r2, [r0]
    b7ec:	0a000003 	beq	b800 <CScreenDevice::~CScreenDevice()+0x2c>
    b7f0:	e5900018 	ldr	r0, [r0, #24]
    b7f4:	e3500000 	cmp	r0, #0
    b7f8:	0a000000 	beq	b800 <CScreenDevice::~CScreenDevice()+0x2c>
    b7fc:	ebfffac7 	bl	a320 <operator delete[](void*)>
    b800:	e5945010 	ldr	r5, [r4, #16]
    b804:	e3a03000 	mov	r3, #0
    b808:	e5843018 	str	r3, [r4, #24]
    b80c:	e1550003 	cmp	r5, r3
    b810:	0a000003 	beq	b824 <CScreenDevice::~CScreenDevice()+0x50>
    b814:	e1a00005 	mov	r0, r5
    b818:	eb0013ba 	bl	10708 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    b81c:	e1a00005 	mov	r0, r5
    b820:	ebfffabd 	bl	a31c <operator delete(void*)>
    b824:	e3a03000 	mov	r3, #0
    b828:	e2840014 	add	r0, r4, #20
    b82c:	e5843010 	str	r3, [r4, #16]
    b830:	eb000489 	bl	ca5c <CCharGenerator::~CCharGenerator()>
    b834:	e1a00004 	mov	r0, r4
    b838:	eb001432 	bl	10908 <CDevice::~CDevice()>
    b83c:	e1a00004 	mov	r0, r4
    b840:	e8bd8070 	pop	{r4, r5, r6, pc}
    b844:	00051998 	.word	0x00051998

0000b848 <CScreenDevice::~CScreenDevice()>:
    b848:	e92d4010 	push	{r4, lr}
    b84c:	e1a04000 	mov	r4, r0
    b850:	ebffffdf 	bl	b7d4 <CScreenDevice::~CScreenDevice()>
    b854:	e1a00004 	mov	r0, r4
    b858:	ebfffaaf 	bl	a31c <operator delete(void*)>
    b85c:	e1a00004 	mov	r0, r4
    b860:	e8bd8010 	pop	{r4, pc}

0000b864 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>:
    b864:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    b868:	e15c0002 	cmp	ip, r2
    b86c:	8590c020 	ldrhi	ip, [r0, #32]
    b870:	85900018 	ldrhi	r0, [r0, #24]
    b874:	8022029c 	mlahi	r2, ip, r2, r0
    b878:	87c23001 	strbhi	r3, [r2, r1]
    b87c:	e12fff1e 	bx	lr

0000b880 <CScreenDevice::InvertCursor() [clone .part.6]>:
    b880:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b884:	e2806014 	add	r6, r0, #20
    b888:	e1a04000 	mov	r4, r0
    b88c:	e1a00006 	mov	r0, r6
    b890:	eb000476 	bl	ca70 <CCharGenerator::GetUnderline() const>
    b894:	e1a07000 	mov	r7, r0
    b898:	e1a00006 	mov	r0, r6
    b89c:	eb000471 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    b8a0:	e1500007 	cmp	r0, r7
    b8a4:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
    b8a8:	e3a05000 	mov	r5, #0
    b8ac:	ea000008 	b	b8d4 <CScreenDevice::InvertCursor() [clone .part.6]+0x54>
    b8b0:	e5948020 	ldr	r8, [r4, #32]
    b8b4:	e3a03000 	mov	r3, #0
    b8b8:	e5949018 	ldr	r9, [r4, #24]
    b8bc:	e0289e98 	mla	r8, r8, lr, r9
    b8c0:	e7d8800c 	ldrb	r8, [r8, ip]
    b8c4:	e1580003 	cmp	r8, r3
    b8c8:	0a000012 	beq	b918 <CScreenDevice::InvertCursor() [clone .part.6]+0x98>
    b8cc:	ebffffe4 	bl	b864 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    b8d0:	e2855001 	add	r5, r5, #1
    b8d4:	e1a00006 	mov	r0, r6
    b8d8:	eb000460 	bl	ca60 <CCharGenerator::GetCharWidth() const>
    b8dc:	e1500005 	cmp	r0, r5
    b8e0:	9a00000f 	bls	b924 <CScreenDevice::InvertCursor() [clone .part.6]+0xa4>
    b8e4:	e594c03c 	ldr	ip, [r4, #60]	; 0x3c
    b8e8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b8ec:	e085c00c 	add	ip, r5, ip
    b8f0:	e15c0003 	cmp	ip, r3
    b8f4:	2afffff5 	bcs	b8d0 <CScreenDevice::InvertCursor() [clone .part.6]+0x50>
    b8f8:	e594e040 	ldr	lr, [r4, #64]	; 0x40
    b8fc:	e1a0100c 	mov	r1, ip
    b900:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b904:	e1a00004 	mov	r0, r4
    b908:	e087e00e 	add	lr, r7, lr
    b90c:	e15e0003 	cmp	lr, r3
    b910:	e1a0200e 	mov	r2, lr
    b914:	3affffe5 	bcc	b8b0 <CScreenDevice::InvertCursor() [clone .part.6]+0x30>
    b918:	e5d43048 	ldrb	r3, [r4, #72]	; 0x48
    b91c:	ebffffd0 	bl	b864 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    b920:	eaffffea 	b	b8d0 <CScreenDevice::InvertCursor() [clone .part.6]+0x50>
    b924:	e2877001 	add	r7, r7, #1
    b928:	eaffffda 	b	b898 <CScreenDevice::InvertCursor() [clone .part.6]+0x18>

0000b92c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
    b92c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b930:	e1a04000 	mov	r4, r0
    b934:	e1a06003 	mov	r6, r3
    b938:	e1a08001 	mov	r8, r1
    b93c:	e1a07002 	mov	r7, r2
    b940:	eb0013fb 	bl	10934 <CDevice::CDevice()>
    b944:	e59fc050 	ldr	ip, [pc, #80]	; b99c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)+0x70>
    b948:	e3a05000 	mov	r5, #0
    b94c:	e5848004 	str	r8, [r4, #4]
    b950:	e5847008 	str	r7, [r4, #8]
    b954:	e2840014 	add	r0, r4, #20
    b958:	e584600c 	str	r6, [r4, #12]
    b95c:	e584c000 	str	ip, [r4]
    b960:	e5845010 	str	r5, [r4, #16]
    b964:	eb000439 	bl	ca50 <CCharGenerator::CCharGenerator()>
    b968:	e3a03001 	mov	r3, #1
    b96c:	e5845018 	str	r5, [r4, #24]
    b970:	e1a00004 	mov	r0, r4
    b974:	e5845030 	str	r5, [r4, #48]	; 0x30
    b978:	e5845034 	str	r5, [r4, #52]	; 0x34
    b97c:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b980:	e5845040 	str	r5, [r4, #64]	; 0x40
    b984:	e584504c 	str	r5, [r4, #76]	; 0x4c
    b988:	e5845058 	str	r5, [r4, #88]	; 0x58
    b98c:	e5843044 	str	r3, [r4, #68]	; 0x44
    b990:	e5c43048 	strb	r3, [r4, #72]	; 0x48
    b994:	e584305c 	str	r3, [r4, #92]	; 0x5c
    b998:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b99c:	00051998 	.word	0x00051998

0000b9a0 <CScreenDevice::GetWidth() const>:
    b9a0:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    b9a4:	e12fff1e 	bx	lr

0000b9a8 <CScreenDevice::GetHeight() const>:
    b9a8:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    b9ac:	e12fff1e 	bx	lr

0000b9b0 <CScreenDevice::GetColumns() const>:
    b9b0:	e1a03000 	mov	r3, r0
    b9b4:	e92d4010 	push	{r4, lr}
    b9b8:	e2800014 	add	r0, r0, #20
    b9bc:	e5934024 	ldr	r4, [r3, #36]	; 0x24
    b9c0:	eb000426 	bl	ca60 <CCharGenerator::GetCharWidth() const>
    b9c4:	e730f014 	udiv	r0, r4, r0
    b9c8:	e8bd8010 	pop	{r4, pc}

0000b9cc <CScreenDevice::GetRows() const>:
    b9cc:	e1a03000 	mov	r3, r0
    b9d0:	e92d4010 	push	{r4, lr}
    b9d4:	e2800014 	add	r0, r0, #20
    b9d8:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
    b9dc:	eb000421 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    b9e0:	e730f014 	udiv	r0, r4, r0
    b9e4:	e8bd8010 	pop	{r4, pc}

0000b9e8 <CScreenDevice::GetStatus()>:
    b9e8:	e591c018 	ldr	ip, [r1, #24]
    b9ec:	e591201c 	ldr	r2, [r1, #28]
    b9f0:	e92d4070 	push	{r4, r5, r6, lr}
    b9f4:	e5915030 	ldr	r5, [r1, #48]	; 0x30
    b9f8:	e5914034 	ldr	r4, [r1, #52]	; 0x34
    b9fc:	e591e038 	ldr	lr, [r1, #56]	; 0x38
    ba00:	e580c000 	str	ip, [r0]
    ba04:	e5802004 	str	r2, [r0, #4]
    ba08:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    ba0c:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    ba10:	e5805008 	str	r5, [r0, #8]
    ba14:	e5916044 	ldr	r6, [r1, #68]	; 0x44
    ba18:	e580400c 	str	r4, [r0, #12]
    ba1c:	e5d15048 	ldrb	r5, [r1, #72]	; 0x48
    ba20:	e580e010 	str	lr, [r0, #16]
    ba24:	e591404c 	ldr	r4, [r1, #76]	; 0x4c
    ba28:	e580c014 	str	ip, [r0, #20]
    ba2c:	e591e050 	ldr	lr, [r1, #80]	; 0x50
    ba30:	e5802018 	str	r2, [r0, #24]
    ba34:	e591c054 	ldr	ip, [r1, #84]	; 0x54
    ba38:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    ba3c:	e580601c 	str	r6, [r0, #28]
    ba40:	e5c05020 	strb	r5, [r0, #32]
    ba44:	e5804024 	str	r4, [r0, #36]	; 0x24
    ba48:	e580e028 	str	lr, [r0, #40]	; 0x28
    ba4c:	e580c02c 	str	ip, [r0, #44]	; 0x2c
    ba50:	e5802030 	str	r2, [r0, #48]	; 0x30
    ba54:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ba58 <CScreenDevice::SetStatus(TScreenStatus)>:
    ba58:	e24dd010 	sub	sp, sp, #16
    ba5c:	e92d4070 	push	{r4, r5, r6, lr}
    ba60:	e28dc014 	add	ip, sp, #20
    ba64:	e88c000e 	stm	ip, {r1, r2, r3}
    ba68:	e590201c 	ldr	r2, [r0, #28]
    ba6c:	e59d3018 	ldr	r3, [sp, #24]
    ba70:	e1520003 	cmp	r2, r3
    ba74:	0a000003 	beq	ba88 <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    ba78:	e3a00000 	mov	r0, #0
    ba7c:	e8bd4070 	pop	{r4, r5, r6, lr}
    ba80:	e28dd010 	add	sp, sp, #16
    ba84:	e12fff1e 	bx	lr
    ba88:	e5901020 	ldr	r1, [r0, #32]
    ba8c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ba90:	e1510003 	cmp	r1, r3
    ba94:	1afffff7 	bne	ba78 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    ba98:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    ba9c:	e1a04000 	mov	r4, r0
    baa0:	e3530000 	cmp	r3, #0
    baa4:	1a000020 	bne	bb2c <CScreenDevice::SetStatus(TScreenStatus)+0xd4>
    baa8:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    baac:	e3530000 	cmp	r3, #0
    bab0:	1afffff0 	bne	ba78 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    bab4:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    bab8:	e3530000 	cmp	r3, #0
    babc:	1affffed 	bne	ba78 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    bac0:	e59d1014 	ldr	r1, [sp, #20]
    bac4:	e5940018 	ldr	r0, [r4, #24]
    bac8:	ebfffd5d 	bl	b044 <memcpy>
    bacc:	e28d2020 	add	r2, sp, #32
    bad0:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    bad4:	e59d101c 	ldr	r1, [sp, #28]
    bad8:	e3530000 	cmp	r3, #0
    badc:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
    bae0:	e892402c 	ldm	r2, {r2, r3, r5, lr}
    bae4:	e5841030 	str	r1, [r4, #48]	; 0x30
    bae8:	e5dd0034 	ldrb	r0, [sp, #52]	; 0x34
    baec:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    baf0:	e5842034 	str	r2, [r4, #52]	; 0x34
    baf4:	e5843038 	str	r3, [r4, #56]	; 0x38
    baf8:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    bafc:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    bb00:	e584503c 	str	r5, [r4, #60]	; 0x3c
    bb04:	e584e040 	str	lr, [r4, #64]	; 0x40
    bb08:	e584c044 	str	ip, [r4, #68]	; 0x44
    bb0c:	e5c40048 	strb	r0, [r4, #72]	; 0x48
    bb10:	e584104c 	str	r1, [r4, #76]	; 0x4c
    bb14:	e5842050 	str	r2, [r4, #80]	; 0x50
    bb18:	e5843054 	str	r3, [r4, #84]	; 0x54
    bb1c:	1a00000f 	bne	bb60 <CScreenDevice::SetStatus(TScreenStatus)+0x108>
    bb20:	f57ff05f 	dmb	sy
    bb24:	e3a00001 	mov	r0, #1
    bb28:	eaffffd3 	b	ba7c <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    bb2c:	ebfff9fc 	bl	a324 <EnterCritical>
    bb30:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    bb34:	e3530000 	cmp	r3, #0
    bb38:	1a000003 	bne	bb4c <CScreenDevice::SetStatus(TScreenStatus)+0xf4>
    bb3c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    bb40:	e3530000 	cmp	r3, #0
    bb44:	0594201c 	ldreq	r2, [r4, #28]
    bb48:	0affffdc 	beq	bac0 <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    bb4c:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    bb50:	e3530000 	cmp	r3, #0
    bb54:	0affffc7 	beq	ba78 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    bb58:	ebfff9fe 	bl	a358 <LeaveCritical>
    bb5c:	eaffffc5 	b	ba78 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    bb60:	ebfff9fc 	bl	a358 <LeaveCritical>
    bb64:	eaffffed 	b	bb20 <CScreenDevice::SetStatus(TScreenStatus)+0xc8>

0000bb68 <CScreenDevice::CarriageReturn()>:
    bb68:	e3a03000 	mov	r3, #0
    bb6c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    bb70:	e12fff1e 	bx	lr

0000bb74 <CScreenDevice::CursorHome()>:
    bb74:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    bb78:	e3a02000 	mov	r2, #0
    bb7c:	e580203c 	str	r2, [r0, #60]	; 0x3c
    bb80:	e5803040 	str	r3, [r0, #64]	; 0x40
    bb84:	e12fff1e 	bx	lr

0000bb88 <CScreenDevice::CursorLeft()>:
    bb88:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    bb8c:	e92d4070 	push	{r4, r5, r6, lr}
    bb90:	e1a04000 	mov	r4, r0
    bb94:	e3530000 	cmp	r3, #0
    bb98:	1a00000f 	bne	bbdc <CScreenDevice::CursorLeft()+0x54>
    bb9c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    bba0:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    bba4:	e1520003 	cmp	r2, r3
    bba8:	98bd8070 	popls	{r4, r5, r6, pc}
    bbac:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    bbb0:	e2806014 	add	r6, r0, #20
    bbb4:	e1a00006 	mov	r0, r6
    bbb8:	eb0003a8 	bl	ca60 <CCharGenerator::GetCharWidth() const>
    bbbc:	e0450000 	sub	r0, r5, r0
    bbc0:	e584003c 	str	r0, [r4, #60]	; 0x3c
    bbc4:	e1a00006 	mov	r0, r6
    bbc8:	eb0003a6 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    bbcc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bbd0:	e0430000 	sub	r0, r3, r0
    bbd4:	e5840040 	str	r0, [r4, #64]	; 0x40
    bbd8:	e8bd8070 	pop	{r4, r5, r6, pc}
    bbdc:	e2800014 	add	r0, r0, #20
    bbe0:	eb00039e 	bl	ca60 <CCharGenerator::GetCharWidth() const>
    bbe4:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    bbe8:	e0430000 	sub	r0, r3, r0
    bbec:	e584003c 	str	r0, [r4, #60]	; 0x3c
    bbf0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bbf4 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    bbf4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bbf8:	e1a04002 	mov	r4, r2
    bbfc:	e2444001 	sub	r4, r4, #1
    bc00:	e1a05000 	mov	r5, r0
    bc04:	e2806014 	add	r6, r0, #20
    bc08:	e1a00006 	mov	r0, r6
    bc0c:	e1a07001 	mov	r7, r1
    bc10:	eb000392 	bl	ca60 <CCharGenerator::GetCharWidth() const>
    bc14:	e0040490 	mul	r4, r0, r4
    bc18:	e1a00006 	mov	r0, r6
    bc1c:	eb000391 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    bc20:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bc24:	e1540003 	cmp	r4, r3
    bc28:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    bc2c:	e2477001 	sub	r7, r7, #1
    bc30:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    bc34:	e0000790 	mul	r0, r0, r7
    bc38:	e1500003 	cmp	r0, r3
    bc3c:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    bc40:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    bc44:	e1500003 	cmp	r0, r3
    bc48:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    bc4c:	35850040 	strcc	r0, [r5, #64]	; 0x40
    bc50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000bc54 <CScreenDevice::CursorUp()>:
    bc54:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    bc58:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    bc5c:	e1520003 	cmp	r2, r3
    bc60:	912fff1e 	bxls	lr
    bc64:	e92d4010 	push	{r4, lr}
    bc68:	e1a04000 	mov	r4, r0
    bc6c:	e2800014 	add	r0, r0, #20
    bc70:	eb00037c 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    bc74:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bc78:	e0430000 	sub	r0, r3, r0
    bc7c:	e5840040 	str	r0, [r4, #64]	; 0x40
    bc80:	e8bd8010 	pop	{r4, pc}

0000bc84 <CScreenDevice::DeleteChars(unsigned int)>:
    bc84:	e12fff1e 	bx	lr

0000bc88 <CScreenDevice::DeleteLines(unsigned int)>:
    bc88:	e12fff1e 	bx	lr

0000bc8c <CScreenDevice::InsertLines(unsigned int)>:
    bc8c:	e12fff1e 	bx	lr

0000bc90 <CScreenDevice::InsertMode(int)>:
    bc90:	e580104c 	str	r1, [r0, #76]	; 0x4c
    bc94:	e12fff1e 	bx	lr

0000bc98 <CScreenDevice::ReverseScroll()>:
    bc98:	e12fff1e 	bx	lr

0000bc9c <CScreenDevice::SetCursorMode(int)>:
    bc9c:	e5801044 	str	r1, [r0, #68]	; 0x44
    bca0:	e12fff1e 	bx	lr

0000bca4 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    bca4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bca8:	e1a04001 	mov	r4, r1
    bcac:	e2444001 	sub	r4, r4, #1
    bcb0:	e1a06000 	mov	r6, r0
    bcb4:	e1a05002 	mov	r5, r2
    bcb8:	e2807014 	add	r7, r0, #20
    bcbc:	e1a00007 	mov	r0, r7
    bcc0:	eb000368 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    bcc4:	e0040490 	mul	r4, r0, r4
    bcc8:	e1a00007 	mov	r0, r7
    bccc:	eb000365 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    bcd0:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    bcd4:	e0000095 	mul	r0, r5, r0
    bcd8:	e3500000 	cmp	r0, #0
    bcdc:	11540002 	cmpne	r4, r2
    bce0:	33a03001 	movcc	r3, #1
    bce4:	23a03000 	movcs	r3, #0
    bce8:	e1500002 	cmp	r0, r2
    bcec:	83a03000 	movhi	r3, #0
    bcf0:	92033001 	andls	r3, r3, #1
    bcf4:	e1540000 	cmp	r4, r0
    bcf8:	23a03000 	movcs	r3, #0
    bcfc:	32033001 	andcc	r3, r3, #1
    bd00:	e3530000 	cmp	r3, #0
    bd04:	e3a03000 	mov	r3, #0
    bd08:	15864034 	strne	r4, [r6, #52]	; 0x34
    bd0c:	15860038 	strne	r0, [r6, #56]	; 0x38
    bd10:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    bd14:	e586303c 	str	r3, [r6, #60]	; 0x3c
    bd18:	e5864040 	str	r4, [r6, #64]	; 0x40
    bd1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000bd20 <CScreenDevice::SetStandoutMode(unsigned int)>:
    bd20:	e351001b 	cmp	r1, #27
    bd24:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    bd28:	ea00001d 	b	bda4 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    bd2c:	0000bdb4 	.word	0x0000bdb4
    bd30:	0000bda8 	.word	0x0000bda8
    bd34:	0000bd9c 	.word	0x0000bd9c
    bd38:	0000bda4 	.word	0x0000bda4
    bd3c:	0000bda4 	.word	0x0000bda4
    bd40:	0000bda4 	.word	0x0000bda4
    bd44:	0000bda4 	.word	0x0000bda4
    bd48:	0000bda4 	.word	0x0000bda4
    bd4c:	0000bda4 	.word	0x0000bda4
    bd50:	0000bda4 	.word	0x0000bda4
    bd54:	0000bda4 	.word	0x0000bda4
    bd58:	0000bda4 	.word	0x0000bda4
    bd5c:	0000bda4 	.word	0x0000bda4
    bd60:	0000bda4 	.word	0x0000bda4
    bd64:	0000bda4 	.word	0x0000bda4
    bd68:	0000bda4 	.word	0x0000bda4
    bd6c:	0000bda4 	.word	0x0000bda4
    bd70:	0000bda4 	.word	0x0000bda4
    bd74:	0000bda4 	.word	0x0000bda4
    bd78:	0000bda4 	.word	0x0000bda4
    bd7c:	0000bda4 	.word	0x0000bda4
    bd80:	0000bda4 	.word	0x0000bda4
    bd84:	0000bda4 	.word	0x0000bda4
    bd88:	0000bda4 	.word	0x0000bda4
    bd8c:	0000bda4 	.word	0x0000bda4
    bd90:	0000bda4 	.word	0x0000bda4
    bd94:	0000bda4 	.word	0x0000bda4
    bd98:	0000bdb4 	.word	0x0000bdb4
    bd9c:	e3a03003 	mov	r3, #3
    bda0:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    bda4:	e12fff1e 	bx	lr
    bda8:	e3a03002 	mov	r3, #2
    bdac:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    bdb0:	e12fff1e 	bx	lr
    bdb4:	e3a03001 	mov	r3, #1
    bdb8:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    bdbc:	e12fff1e 	bx	lr

0000bdc0 <CScreenDevice::Scroll()>:
    bdc0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    bdc4:	e1a05000 	mov	r5, r0
    bdc8:	e2800014 	add	r0, r0, #20
    bdcc:	eb000325 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    bdd0:	e1a06000 	mov	r6, r0
    bdd4:	e5952034 	ldr	r2, [r5, #52]	; 0x34
    bdd8:	e5954038 	ldr	r4, [r5, #56]	; 0x38
    bddc:	e5953020 	ldr	r3, [r5, #32]
    bde0:	e0444002 	sub	r4, r4, r2
    bde4:	e5951018 	ldr	r1, [r5, #24]
    bde8:	e0444000 	sub	r4, r4, r0
    bdec:	e0271293 	mla	r7, r3, r2, r1
    bdf0:	e0040493 	mul	r4, r3, r4
    bdf4:	e3540000 	cmp	r4, #0
    bdf8:	1a000007 	bne	be1c <CScreenDevice::Scroll()+0x5c>
    bdfc:	e0030693 	mul	r3, r3, r6
    be00:	e1b03123 	lsrs	r3, r3, #2
    be04:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    be08:	e1a00007 	mov	r0, r7
    be0c:	e1a02103 	lsl	r2, r3, #2
    be10:	e3a01000 	mov	r1, #0
    be14:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    be18:	ea0010b3 	b	100ec <memset>
    be1c:	e0808002 	add	r8, r0, r2
    be20:	e3c4900f 	bic	r9, r4, #15
    be24:	e1a02009 	mov	r2, r9
    be28:	e1a00007 	mov	r0, r7
    be2c:	e0281893 	mla	r8, r3, r8, r1
    be30:	e1a01008 	mov	r1, r8
    be34:	ebfffc82 	bl	b044 <memcpy>
    be38:	e0870009 	add	r0, r7, r9
    be3c:	e204200f 	and	r2, r4, #15
    be40:	e0881009 	add	r1, r8, r9
    be44:	e3c44003 	bic	r4, r4, #3
    be48:	ebfffc7d 	bl	b044 <memcpy>
    be4c:	e0877004 	add	r7, r7, r4
    be50:	e5953020 	ldr	r3, [r5, #32]
    be54:	eaffffe8 	b	bdfc <CScreenDevice::Scroll()+0x3c>

0000be58 <CScreenDevice::CursorDown()>:
    be58:	e92d4070 	push	{r4, r5, r6, lr}
    be5c:	e1a04000 	mov	r4, r0
    be60:	e2805014 	add	r5, r0, #20
    be64:	e1a00005 	mov	r0, r5
    be68:	eb0002fe 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    be6c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    be70:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    be74:	e0800003 	add	r0, r0, r3
    be78:	e1500002 	cmp	r0, r2
    be7c:	e5840040 	str	r0, [r4, #64]	; 0x40
    be80:	38bd8070 	popcc	{r4, r5, r6, pc}
    be84:	e1a00004 	mov	r0, r4
    be88:	ebffffcc 	bl	bdc0 <CScreenDevice::Scroll()>
    be8c:	e1a00005 	mov	r0, r5
    be90:	eb0002f4 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    be94:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    be98:	e0430000 	sub	r0, r3, r0
    be9c:	e5840040 	str	r0, [r4, #64]	; 0x40
    bea0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bea4 <CScreenDevice::NewLine()>:
    bea4:	e3a02000 	mov	r2, #0
    bea8:	e580203c 	str	r2, [r0, #60]	; 0x3c
    beac:	eaffffe9 	b	be58 <CScreenDevice::CursorDown()>

0000beb0 <CScreenDevice::CursorRight()>:
    beb0:	e92d4010 	push	{r4, lr}
    beb4:	e1a04000 	mov	r4, r0
    beb8:	e2800014 	add	r0, r0, #20
    bebc:	eb0002e7 	bl	ca60 <CCharGenerator::GetCharWidth() const>
    bec0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    bec4:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    bec8:	e0800003 	add	r0, r0, r3
    becc:	e1500002 	cmp	r0, r2
    bed0:	e584003c 	str	r0, [r4, #60]	; 0x3c
    bed4:	38bd8010 	popcc	{r4, pc}
    bed8:	e3a03000 	mov	r3, #0
    bedc:	e1a00004 	mov	r0, r4
    bee0:	e584303c 	str	r3, [r4, #60]	; 0x3c
    bee4:	e8bd4010 	pop	{r4, lr}
    bee8:	eaffffda 	b	be58 <CScreenDevice::CursorDown()>

0000beec <CScreenDevice::Tabulator()>:
    beec:	e92d4010 	push	{r4, lr}
    bef0:	e1a04000 	mov	r4, r0
    bef4:	e2800014 	add	r0, r0, #20
    bef8:	eb0002d8 	bl	ca60 <CCharGenerator::GetCharWidth() const>
    befc:	e1a00180 	lsl	r0, r0, #3
    bf00:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    bf04:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    bf08:	e0803003 	add	r3, r0, r3
    bf0c:	e733f013 	udiv	r3, r3, r0
    bf10:	e0000390 	mul	r0, r0, r3
    bf14:	e1500002 	cmp	r0, r2
    bf18:	e584003c 	str	r0, [r4, #60]	; 0x3c
    bf1c:	38bd8010 	popcc	{r4, pc}
    bf20:	e3a03000 	mov	r3, #0
    bf24:	e1a00004 	mov	r0, r4
    bf28:	e584303c 	str	r3, [r4, #60]	; 0x3c
    bf2c:	e8bd4010 	pop	{r4, lr}
    bf30:	eaffffc8 	b	be58 <CScreenDevice::CursorDown()>

0000bf34 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>:
    bf34:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf38:	e2806014 	add	r6, r0, #20
    bf3c:	e1a08000 	mov	r8, r0
    bf40:	e24dd00c 	sub	sp, sp, #12
    bf44:	e3a07000 	mov	r7, #0
    bf48:	e1a00006 	mov	r0, r6
    bf4c:	e1a0a001 	mov	sl, r1
    bf50:	e1a09002 	mov	r9, r2
    bf54:	e5ddb030 	ldrb	fp, [sp, #48]	; 0x30
    bf58:	e58d3004 	str	r3, [sp, #4]
    bf5c:	eb0002c1 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    bf60:	e1570000 	cmp	r7, r0
    bf64:	2a00001e 	bcs	bfe4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0xb0>
    bf68:	e59d3004 	ldr	r3, [sp, #4]
    bf6c:	e3a04000 	mov	r4, #0
    bf70:	e0873003 	add	r3, r7, r3
    bf74:	e58d3000 	str	r3, [sp]
    bf78:	e1a00006 	mov	r0, r6
    bf7c:	e0845009 	add	r5, r4, r9
    bf80:	eb0002b6 	bl	ca60 <CCharGenerator::GetCharWidth() const>
    bf84:	e1540000 	cmp	r4, r0
    bf88:	e1a02004 	mov	r2, r4
    bf8c:	e1a03007 	mov	r3, r7
    bf90:	e1a0100a 	mov	r1, sl
    bf94:	e1a00006 	mov	r0, r6
    bf98:	e2844001 	add	r4, r4, #1
    bf9c:	2a00000b 	bcs	bfd0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x9c>
    bfa0:	eb0002b4 	bl	ca78 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    bfa4:	e5982024 	ldr	r2, [r8, #36]	; 0x24
    bfa8:	e3500000 	cmp	r0, #0
    bfac:	11a0300b 	movne	r3, fp
    bfb0:	03a03000 	moveq	r3, #0
    bfb4:	e1550002 	cmp	r5, r2
    bfb8:	2affffee 	bcs	bf78 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x44>
    bfbc:	e1a01005 	mov	r1, r5
    bfc0:	e59d2000 	ldr	r2, [sp]
    bfc4:	e1a00008 	mov	r0, r8
    bfc8:	ebfffe25 	bl	b864 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    bfcc:	eaffffe9 	b	bf78 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x44>
    bfd0:	e2877001 	add	r7, r7, #1
    bfd4:	e1a00006 	mov	r0, r6
    bfd8:	eb0002a2 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    bfdc:	e1570000 	cmp	r7, r0
    bfe0:	3affffe0 	bcc	bf68 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x34>
    bfe4:	e28dd00c 	add	sp, sp, #12
    bfe8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bfec <CScreenDevice::DisplayChar(char)>:
    bfec:	e6ef3071 	uxtb	r3, r1
    bff0:	e353001f 	cmp	r3, #31
    bff4:	912fff1e 	bxls	lr
    bff8:	e92d4010 	push	{r4, lr}
    bffc:	e1a04000 	mov	r4, r0
    c000:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c004:	e24dd008 	sub	sp, sp, #8
    c008:	e5d0c048 	ldrb	ip, [r0, #72]	; 0x48
    c00c:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    c010:	e58dc000 	str	ip, [sp]
    c014:	ebffffc6 	bl	bf34 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    c018:	e1a00004 	mov	r0, r4
    c01c:	e28dd008 	add	sp, sp, #8
    c020:	e8bd4010 	pop	{r4, lr}
    c024:	eaffffa1 	b	beb0 <CScreenDevice::CursorRight()>

0000c028 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    c028:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c02c:	e1a05000 	mov	r5, r0
    c030:	e1a07001 	mov	r7, r1
    c034:	e1a0a002 	mov	sl, r2
    c038:	e2806014 	add	r6, r0, #20
    c03c:	e3a08000 	mov	r8, #0
    c040:	e1a00006 	mov	r0, r6
    c044:	eb000287 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    c048:	e1580000 	cmp	r8, r0
    c04c:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
    c050:	e3a04000 	mov	r4, #0
    c054:	e088900a 	add	r9, r8, sl
    c058:	e1a00006 	mov	r0, r6
    c05c:	eb00027f 	bl	ca60 <CCharGenerator::GetCharWidth() const>
    c060:	e1540000 	cmp	r4, r0
    c064:	e0841007 	add	r1, r4, r7
    c068:	e2844001 	add	r4, r4, #1
    c06c:	2a000007 	bcs	c090 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x68>
    c070:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c074:	e1510003 	cmp	r1, r3
    c078:	2afffff6 	bcs	c058 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    c07c:	e3a03000 	mov	r3, #0
    c080:	e1a02009 	mov	r2, r9
    c084:	e1a00005 	mov	r0, r5
    c088:	ebfffdf5 	bl	b864 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    c08c:	eafffff1 	b	c058 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    c090:	e2888001 	add	r8, r8, #1
    c094:	eaffffe9 	b	c040 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x18>

0000c098 <CScreenDevice::ClearLineEnd()>:
    c098:	e92d4070 	push	{r4, r5, r6, lr}
    c09c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c0a0:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    c0a4:	e1540003 	cmp	r4, r3
    c0a8:	28bd8070 	popcs	{r4, r5, r6, pc}
    c0ac:	e1a05000 	mov	r5, r0
    c0b0:	e2806014 	add	r6, r0, #20
    c0b4:	e1a01004 	mov	r1, r4
    c0b8:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    c0bc:	e1a00005 	mov	r0, r5
    c0c0:	ebffffd8 	bl	c028 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c0c4:	e1a00006 	mov	r0, r6
    c0c8:	eb000264 	bl	ca60 <CCharGenerator::GetCharWidth() const>
    c0cc:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c0d0:	e0844000 	add	r4, r4, r0
    c0d4:	e1530004 	cmp	r3, r4
    c0d8:	8afffff5 	bhi	c0b4 <CScreenDevice::ClearLineEnd()+0x1c>
    c0dc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c0e0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    c0e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c0e4:	e1a05000 	mov	r5, r0
    c0e8:	e1a06001 	mov	r6, r1
    c0ec:	e2807014 	add	r7, r0, #20
    c0f0:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    c0f4:	e1a00007 	mov	r0, r7
    c0f8:	eb000258 	bl	ca60 <CCharGenerator::GetCharWidth() const>
    c0fc:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c100:	e0264096 	mla	r6, r6, r0, r4
    c104:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    c108:	e1560003 	cmp	r6, r3
    c10c:	21a06003 	movcs	r6, r3
    c110:	e1540006 	cmp	r4, r6
    c114:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    c118:	e1a01004 	mov	r1, r4
    c11c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    c120:	e1a00005 	mov	r0, r5
    c124:	ebffffbf 	bl	c028 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c128:	e1a00007 	mov	r0, r7
    c12c:	eb00024b 	bl	ca60 <CCharGenerator::GetCharWidth() const>
    c130:	e0844000 	add	r4, r4, r0
    c134:	e1540006 	cmp	r4, r6
    c138:	3afffff6 	bcc	c118 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    c13c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c140 <CScreenDevice::EraseChars(unsigned int)>:
    c140:	e3510000 	cmp	r1, #0
    c144:	012fff1e 	bxeq	lr
    c148:	eaffffe4 	b	c0e0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000c14c <CScreenDevice::ClearDisplayEnd()>:
    c14c:	e92d4070 	push	{r4, r5, r6, lr}
    c150:	e1a05000 	mov	r5, r0
    c154:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    c158:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c15c:	e2806014 	add	r6, r0, #20
    c160:	e1540003 	cmp	r4, r3
    c164:	2a000009 	bcs	c190 <CScreenDevice::ClearDisplayEnd()+0x44>
    c168:	e1a01004 	mov	r1, r4
    c16c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    c170:	e1a00005 	mov	r0, r5
    c174:	ebffffab 	bl	c028 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c178:	e1a00006 	mov	r0, r6
    c17c:	eb000237 	bl	ca60 <CCharGenerator::GetCharWidth() const>
    c180:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c184:	e0844000 	add	r4, r4, r0
    c188:	e1530004 	cmp	r3, r4
    c18c:	8afffff5 	bhi	c168 <CScreenDevice::ClearDisplayEnd()+0x1c>
    c190:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    c194:	e1a00006 	mov	r0, r6
    c198:	eb000232 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    c19c:	e5953020 	ldr	r3, [r5, #32]
    c1a0:	e0840000 	add	r0, r4, r0
    c1a4:	e595201c 	ldr	r2, [r5, #28]
    c1a8:	e5951018 	ldr	r1, [r5, #24]
    c1ac:	e0000093 	mul	r0, r3, r0
    c1b0:	e0522000 	subs	r2, r2, r0
    c1b4:	0a000003 	beq	c1c8 <CScreenDevice::ClearDisplayEnd()+0x7c>
    c1b8:	e0810000 	add	r0, r1, r0
    c1bc:	e3a01000 	mov	r1, #0
    c1c0:	e8bd4070 	pop	{r4, r5, r6, lr}
    c1c4:	ea000fc8 	b	100ec <memset>
    c1c8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c1cc <CScreenDevice::Write(char)>:
    c1cc:	e92d4010 	push	{r4, lr}
    c1d0:	e1a04000 	mov	r4, r0
    c1d4:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    c1d8:	e24dd008 	sub	sp, sp, #8
    c1dc:	e3530007 	cmp	r3, #7
    c1e0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c1e4:	ea000010 	b	c22c <CScreenDevice::Write(char)+0x60>
    c1e8:	0000c278 	.word	0x0000c278
    c1ec:	0000c2d8 	.word	0x0000c2d8
    c1f0:	0000c2f4 	.word	0x0000c2f4
    c1f4:	0000c34c 	.word	0x0000c34c
    c1f8:	0000c428 	.word	0x0000c428
    c1fc:	0000c448 	.word	0x0000c448
    c200:	0000c468 	.word	0x0000c468
    c204:	0000c23c 	.word	0x0000c23c
    c208:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    c20c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c210:	e1520003 	cmp	r2, r3
    c214:	2a000004 	bcs	c22c <CScreenDevice::Write(char)+0x60>
    c218:	e2800014 	add	r0, r0, #20
    c21c:	eb000211 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    c220:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c224:	e0433000 	sub	r3, r3, r0
    c228:	e5843040 	str	r3, [r4, #64]	; 0x40
    c22c:	e3a03000 	mov	r3, #0
    c230:	e5843030 	str	r3, [r4, #48]	; 0x30
    c234:	e28dd008 	add	sp, sp, #8
    c238:	e8bd8010 	pop	{r4, pc}
    c23c:	e3510068 	cmp	r1, #104	; 0x68
    c240:	0a000097 	beq	c4a4 <CScreenDevice::Write(char)+0x2d8>
    c244:	e351006c 	cmp	r1, #108	; 0x6c
    c248:	0a000095 	beq	c4a4 <CScreenDevice::Write(char)+0x2d8>
    c24c:	e2411030 	sub	r1, r1, #48	; 0x30
    c250:	e6ef3071 	uxtb	r3, r1
    c254:	e3530009 	cmp	r3, #9
    c258:	8afffff3 	bhi	c22c <CScreenDevice::Write(char)+0x60>
    c25c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    c260:	e3a0200a 	mov	r2, #10
    c264:	e0211392 	mla	r1, r2, r3, r1
    c268:	e3510063 	cmp	r1, #99	; 0x63
    c26c:	e5841050 	str	r1, [r4, #80]	; 0x50
    c270:	8affffed 	bhi	c22c <CScreenDevice::Write(char)+0x60>
    c274:	eaffffee 	b	c234 <CScreenDevice::Write(char)+0x68>
    c278:	e2413008 	sub	r3, r1, #8
    c27c:	e3530013 	cmp	r3, #19
    c280:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c284:	ea0000ec 	b	c63c <CScreenDevice::Write(char)+0x470>
    c288:	0000c510 	.word	0x0000c510
    c28c:	0000c504 	.word	0x0000c504
    c290:	0000c4f0 	.word	0x0000c4f0
    c294:	0000c63c 	.word	0x0000c63c
    c298:	0000c63c 	.word	0x0000c63c
    c29c:	0000c4e4 	.word	0x0000c4e4
    c2a0:	0000c63c 	.word	0x0000c63c
    c2a4:	0000c63c 	.word	0x0000c63c
    c2a8:	0000c63c 	.word	0x0000c63c
    c2ac:	0000c63c 	.word	0x0000c63c
    c2b0:	0000c63c 	.word	0x0000c63c
    c2b4:	0000c63c 	.word	0x0000c63c
    c2b8:	0000c63c 	.word	0x0000c63c
    c2bc:	0000c63c 	.word	0x0000c63c
    c2c0:	0000c63c 	.word	0x0000c63c
    c2c4:	0000c63c 	.word	0x0000c63c
    c2c8:	0000c63c 	.word	0x0000c63c
    c2cc:	0000c63c 	.word	0x0000c63c
    c2d0:	0000c63c 	.word	0x0000c63c
    c2d4:	0000c4d8 	.word	0x0000c4d8
    c2d8:	e351004d 	cmp	r1, #77	; 0x4d
    c2dc:	0affffd2 	beq	c22c <CScreenDevice::Write(char)+0x60>
    c2e0:	e351005b 	cmp	r1, #91	; 0x5b
    c2e4:	03a03002 	moveq	r3, #2
    c2e8:	05803030 	streq	r3, [r0, #48]	; 0x30
    c2ec:	0affffd0 	beq	c234 <CScreenDevice::Write(char)+0x68>
    c2f0:	eaffffcd 	b	c22c <CScreenDevice::Write(char)+0x60>
    c2f4:	e241303f 	sub	r3, r1, #63	; 0x3f
    c2f8:	e3530011 	cmp	r3, #17
    c2fc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c300:	ea0000d9 	b	c66c <CScreenDevice::Write(char)+0x4a0>
    c304:	0000c5f8 	.word	0x0000c5f8
    c308:	0000c66c 	.word	0x0000c66c
    c30c:	0000c208 	.word	0x0000c208
    c310:	0000c62c 	.word	0x0000c62c
    c314:	0000c61c 	.word	0x0000c61c
    c318:	0000c66c 	.word	0x0000c66c
    c31c:	0000c66c 	.word	0x0000c66c
    c320:	0000c66c 	.word	0x0000c66c
    c324:	0000c66c 	.word	0x0000c66c
    c328:	0000c604 	.word	0x0000c604
    c32c:	0000c66c 	.word	0x0000c66c
    c330:	0000c5e8 	.word	0x0000c5e8
    c334:	0000c5d8 	.word	0x0000c5d8
    c338:	0000c22c 	.word	0x0000c22c
    c33c:	0000c22c 	.word	0x0000c22c
    c340:	0000c66c 	.word	0x0000c66c
    c344:	0000c66c 	.word	0x0000c66c
    c348:	0000c22c 	.word	0x0000c22c
    c34c:	e241303b 	sub	r3, r1, #59	; 0x3b
    c350:	e3530032 	cmp	r3, #50	; 0x32
    c354:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c358:	eaffffbb 	b	c24c <CScreenDevice::Write(char)+0x80>
    c35c:	0000c5cc 	.word	0x0000c5cc
    c360:	0000c24c 	.word	0x0000c24c
    c364:	0000c24c 	.word	0x0000c24c
    c368:	0000c24c 	.word	0x0000c24c
    c36c:	0000c24c 	.word	0x0000c24c
    c370:	0000c24c 	.word	0x0000c24c
    c374:	0000c24c 	.word	0x0000c24c
    c378:	0000c24c 	.word	0x0000c24c
    c37c:	0000c24c 	.word	0x0000c24c
    c380:	0000c24c 	.word	0x0000c24c
    c384:	0000c24c 	.word	0x0000c24c
    c388:	0000c24c 	.word	0x0000c24c
    c38c:	0000c24c 	.word	0x0000c24c
    c390:	0000c24c 	.word	0x0000c24c
    c394:	0000c24c 	.word	0x0000c24c
    c398:	0000c24c 	.word	0x0000c24c
    c39c:	0000c24c 	.word	0x0000c24c
    c3a0:	0000c22c 	.word	0x0000c22c
    c3a4:	0000c22c 	.word	0x0000c22c
    c3a8:	0000c24c 	.word	0x0000c24c
    c3ac:	0000c24c 	.word	0x0000c24c
    c3b0:	0000c22c 	.word	0x0000c22c
    c3b4:	0000c24c 	.word	0x0000c24c
    c3b8:	0000c24c 	.word	0x0000c24c
    c3bc:	0000c24c 	.word	0x0000c24c
    c3c0:	0000c24c 	.word	0x0000c24c
    c3c4:	0000c24c 	.word	0x0000c24c
    c3c8:	0000c24c 	.word	0x0000c24c
    c3cc:	0000c24c 	.word	0x0000c24c
    c3d0:	0000c51c 	.word	0x0000c51c
    c3d4:	0000c24c 	.word	0x0000c24c
    c3d8:	0000c24c 	.word	0x0000c24c
    c3dc:	0000c24c 	.word	0x0000c24c
    c3e0:	0000c24c 	.word	0x0000c24c
    c3e4:	0000c24c 	.word	0x0000c24c
    c3e8:	0000c24c 	.word	0x0000c24c
    c3ec:	0000c24c 	.word	0x0000c24c
    c3f0:	0000c24c 	.word	0x0000c24c
    c3f4:	0000c24c 	.word	0x0000c24c
    c3f8:	0000c24c 	.word	0x0000c24c
    c3fc:	0000c24c 	.word	0x0000c24c
    c400:	0000c24c 	.word	0x0000c24c
    c404:	0000c24c 	.word	0x0000c24c
    c408:	0000c24c 	.word	0x0000c24c
    c40c:	0000c24c 	.word	0x0000c24c
    c410:	0000c530 	.word	0x0000c530
    c414:	0000c24c 	.word	0x0000c24c
    c418:	0000c24c 	.word	0x0000c24c
    c41c:	0000c24c 	.word	0x0000c24c
    c420:	0000c530 	.word	0x0000c530
    c424:	0000c54c 	.word	0x0000c54c
    c428:	e2411030 	sub	r1, r1, #48	; 0x30
    c42c:	e6ef3071 	uxtb	r3, r1
    c430:	e3530009 	cmp	r3, #9
    c434:	8affff7c 	bhi	c22c <CScreenDevice::Write(char)+0x60>
    c438:	e3a03007 	mov	r3, #7
    c43c:	e5801050 	str	r1, [r0, #80]	; 0x50
    c440:	e5803030 	str	r3, [r0, #48]	; 0x30
    c444:	eaffff7a 	b	c234 <CScreenDevice::Write(char)+0x68>
    c448:	e2411030 	sub	r1, r1, #48	; 0x30
    c44c:	e6ef3071 	uxtb	r3, r1
    c450:	e3530009 	cmp	r3, #9
    c454:	8affff74 	bhi	c22c <CScreenDevice::Write(char)+0x60>
    c458:	e3a03006 	mov	r3, #6
    c45c:	e5801054 	str	r1, [r0, #84]	; 0x54
    c460:	e5803030 	str	r3, [r0, #48]	; 0x30
    c464:	eaffff72 	b	c234 <CScreenDevice::Write(char)+0x68>
    c468:	e3510048 	cmp	r1, #72	; 0x48
    c46c:	0a00008f 	beq	c6b0 <CScreenDevice::Write(char)+0x4e4>
    c470:	e3510072 	cmp	r1, #114	; 0x72
    c474:	0a000011 	beq	c4c0 <CScreenDevice::Write(char)+0x2f4>
    c478:	e2411030 	sub	r1, r1, #48	; 0x30
    c47c:	e6ef3071 	uxtb	r3, r1
    c480:	e3530009 	cmp	r3, #9
    c484:	8affff68 	bhi	c22c <CScreenDevice::Write(char)+0x60>
    c488:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    c48c:	e3a0200a 	mov	r2, #10
    c490:	e0211392 	mla	r1, r2, r3, r1
    c494:	e35100c7 	cmp	r1, #199	; 0xc7
    c498:	e5801054 	str	r1, [r0, #84]	; 0x54
    c49c:	8affff62 	bhi	c22c <CScreenDevice::Write(char)+0x60>
    c4a0:	eaffff63 	b	c234 <CScreenDevice::Write(char)+0x68>
    c4a4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    c4a8:	e3530019 	cmp	r3, #25
    c4ac:	02411068 	subeq	r1, r1, #104	; 0x68
    c4b0:	016f1f11 	clzeq	r1, r1
    c4b4:	01a012a1 	lsreq	r1, r1, #5
    c4b8:	05841044 	streq	r1, [r4, #68]	; 0x44
    c4bc:	eaffff5a 	b	c22c <CScreenDevice::Write(char)+0x60>
    c4c0:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    c4c4:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c4c8:	ebfffdf5 	bl	bca4 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    c4cc:	e3a03000 	mov	r3, #0
    c4d0:	e5843030 	str	r3, [r4, #48]	; 0x30
    c4d4:	eaffff56 	b	c234 <CScreenDevice::Write(char)+0x68>
    c4d8:	e3a03001 	mov	r3, #1
    c4dc:	e5803030 	str	r3, [r0, #48]	; 0x30
    c4e0:	eaffff53 	b	c234 <CScreenDevice::Write(char)+0x68>
    c4e4:	e3a03000 	mov	r3, #0
    c4e8:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c4ec:	eaffff50 	b	c234 <CScreenDevice::Write(char)+0x68>
    c4f0:	e3a03000 	mov	r3, #0
    c4f4:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c4f8:	e28dd008 	add	sp, sp, #8
    c4fc:	e8bd4010 	pop	{r4, lr}
    c500:	eafffe54 	b	be58 <CScreenDevice::CursorDown()>
    c504:	e28dd008 	add	sp, sp, #8
    c508:	e8bd4010 	pop	{r4, lr}
    c50c:	eafffe76 	b	beec <CScreenDevice::Tabulator()>
    c510:	e28dd008 	add	sp, sp, #8
    c514:	e8bd4010 	pop	{r4, lr}
    c518:	eafffd9a 	b	bb88 <CScreenDevice::CursorLeft()>
    c51c:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c520:	e3510000 	cmp	r1, #0
    c524:	0affff40 	beq	c22c <CScreenDevice::Write(char)+0x60>
    c528:	ebfffeec 	bl	c0e0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    c52c:	eaffff3e 	b	c22c <CScreenDevice::Write(char)+0x60>
    c530:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    c534:	e3530004 	cmp	r3, #4
    c538:	02411068 	subeq	r1, r1, #104	; 0x68
    c53c:	016f1f11 	clzeq	r1, r1
    c540:	01a012a1 	lsreq	r1, r1, #5
    c544:	0580104c 	streq	r1, [r0, #76]	; 0x4c
    c548:	eaffff37 	b	c22c <CScreenDevice::Write(char)+0x60>
    c54c:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    c550:	e353001b 	cmp	r3, #27
    c554:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c558:	eaffff33 	b	c22c <CScreenDevice::Write(char)+0x60>
    c55c:	0000c6a4 	.word	0x0000c6a4
    c560:	0000c698 	.word	0x0000c698
    c564:	0000c68c 	.word	0x0000c68c
    c568:	0000c22c 	.word	0x0000c22c
    c56c:	0000c22c 	.word	0x0000c22c
    c570:	0000c22c 	.word	0x0000c22c
    c574:	0000c22c 	.word	0x0000c22c
    c578:	0000c22c 	.word	0x0000c22c
    c57c:	0000c22c 	.word	0x0000c22c
    c580:	0000c22c 	.word	0x0000c22c
    c584:	0000c22c 	.word	0x0000c22c
    c588:	0000c22c 	.word	0x0000c22c
    c58c:	0000c22c 	.word	0x0000c22c
    c590:	0000c22c 	.word	0x0000c22c
    c594:	0000c22c 	.word	0x0000c22c
    c598:	0000c22c 	.word	0x0000c22c
    c59c:	0000c22c 	.word	0x0000c22c
    c5a0:	0000c22c 	.word	0x0000c22c
    c5a4:	0000c22c 	.word	0x0000c22c
    c5a8:	0000c22c 	.word	0x0000c22c
    c5ac:	0000c22c 	.word	0x0000c22c
    c5b0:	0000c22c 	.word	0x0000c22c
    c5b4:	0000c22c 	.word	0x0000c22c
    c5b8:	0000c22c 	.word	0x0000c22c
    c5bc:	0000c22c 	.word	0x0000c22c
    c5c0:	0000c22c 	.word	0x0000c22c
    c5c4:	0000c22c 	.word	0x0000c22c
    c5c8:	0000c6a4 	.word	0x0000c6a4
    c5cc:	e3a03005 	mov	r3, #5
    c5d0:	e5803030 	str	r3, [r0, #48]	; 0x30
    c5d4:	eaffff16 	b	c234 <CScreenDevice::Write(char)+0x68>
    c5d8:	ebfffeae 	bl	c098 <CScreenDevice::ClearLineEnd()>
    c5dc:	e3a03000 	mov	r3, #0
    c5e0:	e5843030 	str	r3, [r4, #48]	; 0x30
    c5e4:	eaffff12 	b	c234 <CScreenDevice::Write(char)+0x68>
    c5e8:	ebfffed7 	bl	c14c <CScreenDevice::ClearDisplayEnd()>
    c5ec:	e3a03000 	mov	r3, #0
    c5f0:	e5843030 	str	r3, [r4, #48]	; 0x30
    c5f4:	eaffff0e 	b	c234 <CScreenDevice::Write(char)+0x68>
    c5f8:	e3a03004 	mov	r3, #4
    c5fc:	e5803030 	str	r3, [r0, #48]	; 0x30
    c600:	eaffff0b 	b	c234 <CScreenDevice::Write(char)+0x68>
    c604:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    c608:	e3a03000 	mov	r3, #0
    c60c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c610:	e5802040 	str	r2, [r0, #64]	; 0x40
    c614:	e5803030 	str	r3, [r0, #48]	; 0x30
    c618:	eaffff05 	b	c234 <CScreenDevice::Write(char)+0x68>
    c61c:	ebfffe23 	bl	beb0 <CScreenDevice::CursorRight()>
    c620:	e3a03000 	mov	r3, #0
    c624:	e5843030 	str	r3, [r4, #48]	; 0x30
    c628:	eaffff01 	b	c234 <CScreenDevice::Write(char)+0x68>
    c62c:	ebfffe09 	bl	be58 <CScreenDevice::CursorDown()>
    c630:	e3a03000 	mov	r3, #0
    c634:	e5843030 	str	r3, [r4, #48]	; 0x30
    c638:	eafffefd 	b	c234 <CScreenDevice::Write(char)+0x68>
    c63c:	e6ef3071 	uxtb	r3, r1
    c640:	e353001f 	cmp	r3, #31
    c644:	9afffefa 	bls	c234 <CScreenDevice::Write(char)+0x68>
    c648:	e5d0c048 	ldrb	ip, [r0, #72]	; 0x48
    c64c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c650:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    c654:	e58dc000 	str	ip, [sp]
    c658:	ebfffe35 	bl	bf34 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    c65c:	e1a00004 	mov	r0, r4
    c660:	e28dd008 	add	sp, sp, #8
    c664:	e8bd4010 	pop	{r4, lr}
    c668:	eafffe10 	b	beb0 <CScreenDevice::CursorRight()>
    c66c:	e2411030 	sub	r1, r1, #48	; 0x30
    c670:	e6ef3071 	uxtb	r3, r1
    c674:	e3530009 	cmp	r3, #9
    c678:	8afffeeb 	bhi	c22c <CScreenDevice::Write(char)+0x60>
    c67c:	e3a03003 	mov	r3, #3
    c680:	e5801050 	str	r1, [r0, #80]	; 0x50
    c684:	e5803030 	str	r3, [r0, #48]	; 0x30
    c688:	eafffee9 	b	c234 <CScreenDevice::Write(char)+0x68>
    c68c:	e3a03003 	mov	r3, #3
    c690:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    c694:	eafffee4 	b	c22c <CScreenDevice::Write(char)+0x60>
    c698:	e3a03002 	mov	r3, #2
    c69c:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    c6a0:	eafffee1 	b	c22c <CScreenDevice::Write(char)+0x60>
    c6a4:	e3a03001 	mov	r3, #1
    c6a8:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    c6ac:	eafffede 	b	c22c <CScreenDevice::Write(char)+0x60>
    c6b0:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    c6b4:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c6b8:	ebfffd4d 	bl	bbf4 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    c6bc:	e3a03000 	mov	r3, #0
    c6c0:	e5843030 	str	r3, [r4, #48]	; 0x30
    c6c4:	eafffeda 	b	c234 <CScreenDevice::Write(char)+0x68>

0000c6c8 <CScreenDevice::Write(void const*, unsigned int)>:
    c6c8:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    c6cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c6d0:	e1a05000 	mov	r5, r0
    c6d4:	e3530000 	cmp	r3, #0
    c6d8:	e1a06001 	mov	r6, r1
    c6dc:	e1a08002 	mov	r8, r2
    c6e0:	1a000026 	bne	c780 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    c6e4:	e5954044 	ldr	r4, [r5, #68]	; 0x44
    c6e8:	e3a03001 	mov	r3, #1
    c6ec:	e5853058 	str	r3, [r5, #88]	; 0x58
    c6f0:	e3540000 	cmp	r4, #0
    c6f4:	1a00001a 	bne	c764 <CScreenDevice::Write(void const*, unsigned int)+0x9c>
    c6f8:	e3580000 	cmp	r8, #0
    c6fc:	e2487001 	sub	r7, r8, #1
    c700:	0a00000b 	beq	c734 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    c704:	e1a04006 	mov	r4, r6
    c708:	e0d410d1 	ldrsb	r1, [r4], #1
    c70c:	e1a00005 	mov	r0, r5
    c710:	ebfffead 	bl	c1cc <CScreenDevice::Write(char)>
    c714:	e2643001 	rsb	r3, r4, #1
    c718:	e0833007 	add	r3, r3, r7
    c71c:	e1760003 	cmn	r6, r3
    c720:	1afffff8 	bne	c708 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    c724:	e2874001 	add	r4, r7, #1
    c728:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    c72c:	e3530000 	cmp	r3, #0
    c730:	1a000008 	bne	c758 <CScreenDevice::Write(void const*, unsigned int)+0x90>
    c734:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
    c738:	e3a02000 	mov	r2, #0
    c73c:	e5852058 	str	r2, [r5, #88]	; 0x58
    c740:	e1530002 	cmp	r3, r2
    c744:	0a000000 	beq	c74c <CScreenDevice::Write(void const*, unsigned int)+0x84>
    c748:	ebfff702 	bl	a358 <LeaveCritical>
    c74c:	f57ff05f 	dmb	sy
    c750:	e1a00004 	mov	r0, r4
    c754:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c758:	e1a00005 	mov	r0, r5
    c75c:	ebfffc47 	bl	b880 <CScreenDevice::InvertCursor() [clone .part.6]>
    c760:	eafffff3 	b	c734 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    c764:	e1a00005 	mov	r0, r5
    c768:	e2487001 	sub	r7, r8, #1
    c76c:	ebfffc43 	bl	b880 <CScreenDevice::InvertCursor() [clone .part.6]>
    c770:	e3580000 	cmp	r8, #0
    c774:	1affffe2 	bne	c704 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    c778:	e1a04008 	mov	r4, r8
    c77c:	eaffffe9 	b	c728 <CScreenDevice::Write(void const*, unsigned int)+0x60>
    c780:	ebfff6e7 	bl	a324 <EnterCritical>
    c784:	eaffffd6 	b	c6e4 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000c788 <CScreenDevice::Initialize()>:
    c788:	e92d4070 	push	{r4, r5, r6, lr}
    c78c:	e1a04000 	mov	r4, r0
    c790:	e590500c 	ldr	r5, [r0, #12]
    c794:	e24dd008 	sub	sp, sp, #8
    c798:	e3550000 	cmp	r5, #0
    c79c:	1a00001c 	bne	c814 <CScreenDevice::Initialize()+0x8c>
    c7a0:	e3a00024 	mov	r0, #36	; 0x24
    c7a4:	ebfff6da 	bl	a314 <operator new(unsigned int)>
    c7a8:	e3a03008 	mov	r3, #8
    c7ac:	e5942008 	ldr	r2, [r4, #8]
    c7b0:	e1a06000 	mov	r6, r0
    c7b4:	e5941004 	ldr	r1, [r4, #4]
    c7b8:	e58d5004 	str	r5, [sp, #4]
    c7bc:	e58d5000 	str	r5, [sp]
    c7c0:	eb000f82 	bl	105d0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    c7c4:	e1a00006 	mov	r0, r6
    c7c8:	e30f2fdf 	movw	r2, #65503	; 0xffdf
    c7cc:	e3a01001 	mov	r1, #1
    c7d0:	e5846010 	str	r6, [r4, #16]
    c7d4:	eb000fd1 	bl	10720 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    c7d8:	e3a02b3e 	mov	r2, #63488	; 0xf800
    c7dc:	e3a01002 	mov	r1, #2
    c7e0:	e5940010 	ldr	r0, [r4, #16]
    c7e4:	eb000fcd 	bl	10720 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    c7e8:	e3a0201f 	mov	r2, #31
    c7ec:	e3a01003 	mov	r1, #3
    c7f0:	e5940010 	ldr	r0, [r4, #16]
    c7f4:	eb000fc9 	bl	10720 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    c7f8:	e5940010 	ldr	r0, [r4, #16]
    c7fc:	eb000fdc 	bl	10774 <CBcmFrameBuffer::Initialize()>
    c800:	e3500000 	cmp	r0, #0
    c804:	1a000028 	bne	c8ac <CScreenDevice::Initialize()+0x124>
    c808:	e1a00005 	mov	r0, r5
    c80c:	e28dd008 	add	sp, sp, #8
    c810:	e8bd8070 	pop	{r4, r5, r6, pc}
    c814:	e5903004 	ldr	r3, [r0, #4]
    c818:	e5900008 	ldr	r0, [r0, #8]
    c81c:	e5843024 	str	r3, [r4, #36]	; 0x24
    c820:	e5840028 	str	r0, [r4, #40]	; 0x28
    c824:	e5843020 	str	r3, [r4, #32]
    c828:	e0000390 	mul	r0, r0, r3
    c82c:	e584001c 	str	r0, [r4, #28]
    c830:	ebfff6b8 	bl	a318 <operator new[](unsigned int)>
    c834:	e5946028 	ldr	r6, [r4, #40]	; 0x28
    c838:	e5840018 	str	r0, [r4, #24]
    c83c:	e2845014 	add	r5, r4, #20
    c840:	e1a00005 	mov	r0, r5
    c844:	eb000087 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    c848:	e736f016 	udiv	r6, r6, r0
    c84c:	e1a00005 	mov	r0, r5
    c850:	eb000084 	bl	ca68 <CCharGenerator::GetCharHeight() const>
    c854:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    c858:	e3a02000 	mov	r2, #0
    c85c:	e5843040 	str	r3, [r4, #64]	; 0x40
    c860:	e0060690 	mul	r6, r0, r6
    c864:	e584203c 	str	r2, [r4, #60]	; 0x3c
    c868:	e1a00004 	mov	r0, r4
    c86c:	e584602c 	str	r6, [r4, #44]	; 0x2c
    c870:	e5846038 	str	r6, [r4, #56]	; 0x38
    c874:	ebfffe34 	bl	c14c <CScreenDevice::ClearDisplayEnd()>
    c878:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c87c:	e3530000 	cmp	r3, #0
    c880:	1a000021 	bne	c90c <CScreenDevice::Initialize()+0x184>
    c884:	eb0001a2 	bl	cf14 <CDeviceNameService::Get()>
    c888:	e3a05001 	mov	r5, #1
    c88c:	e1a02004 	mov	r2, r4
    c890:	e3a03000 	mov	r3, #0
    c894:	e30118ec 	movw	r1, #6380	; 0x18ec
    c898:	e3401005 	movt	r1, #5
    c89c:	eb000128 	bl	cd44 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    c8a0:	e1a00005 	mov	r0, r5
    c8a4:	e28dd008 	add	sp, sp, #8
    c8a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    c8ac:	e5940010 	ldr	r0, [r4, #16]
    c8b0:	eb000fea 	bl	10860 <CBcmFrameBuffer::GetDepth() const>
    c8b4:	e3500008 	cmp	r0, #8
    c8b8:	1affffd2 	bne	c808 <CScreenDevice::Initialize()+0x80>
    c8bc:	e5940010 	ldr	r0, [r4, #16]
    c8c0:	eb000fe8 	bl	10868 <CBcmFrameBuffer::GetBuffer() const>
    c8c4:	e5840018 	str	r0, [r4, #24]
    c8c8:	e5940010 	ldr	r0, [r4, #16]
    c8cc:	eb000fe7 	bl	10870 <CBcmFrameBuffer::GetSize() const>
    c8d0:	e584001c 	str	r0, [r4, #28]
    c8d4:	e5940010 	ldr	r0, [r4, #16]
    c8d8:	eb000fde 	bl	10858 <CBcmFrameBuffer::GetPitch() const>
    c8dc:	e5840020 	str	r0, [r4, #32]
    c8e0:	e5940010 	ldr	r0, [r4, #16]
    c8e4:	eb000fd3 	bl	10838 <CBcmFrameBuffer::GetWidth() const>
    c8e8:	e5840024 	str	r0, [r4, #36]	; 0x24
    c8ec:	e5940010 	ldr	r0, [r4, #16]
    c8f0:	eb000fd2 	bl	10840 <CBcmFrameBuffer::GetHeight() const>
    c8f4:	e5943020 	ldr	r3, [r4, #32]
    c8f8:	e1a06000 	mov	r6, r0
    c8fc:	e5840028 	str	r0, [r4, #40]	; 0x28
    c900:	e3130003 	tst	r3, #3
    c904:	0affffcc 	beq	c83c <CScreenDevice::Initialize()+0xb4>
    c908:	eaffffbe 	b	c808 <CScreenDevice::Initialize()+0x80>
    c90c:	e1a00004 	mov	r0, r4
    c910:	ebfffbda 	bl	b880 <CScreenDevice::InvertCursor() [clone .part.6]>
    c914:	eaffffda 	b	c884 <CScreenDevice::Initialize()+0xfc>

0000c918 <CScreenDevice::InvertCursor()>:
    c918:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    c91c:	e3530000 	cmp	r3, #0
    c920:	012fff1e 	bxeq	lr
    c924:	eafffbd5 	b	b880 <CScreenDevice::InvertCursor() [clone .part.6]>

0000c928 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char)>:
    c928:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    c92c:	e15c0001 	cmp	ip, r1
    c930:	912fff1e 	bxls	lr
    c934:	eafffbca 	b	b864 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>

0000c938 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    c938:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c93c:	e1530001 	cmp	r3, r1
    c940:	9a000007 	bls	c964 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x2c>
    c944:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    c948:	e1530002 	cmp	r3, r2
    c94c:	9a000004 	bls	c964 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x2c>
    c950:	e590c020 	ldr	ip, [r0, #32]
    c954:	e5903018 	ldr	r3, [r0, #24]
    c958:	e022329c 	mla	r2, ip, r2, r3
    c95c:	e7d20001 	ldrb	r0, [r2, r1]
    c960:	e12fff1e 	bx	lr
    c964:	e3a00000 	mov	r0, #0
    c968:	e12fff1e 	bx	lr

0000c96c <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    c96c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c970:	e1a05000 	mov	r5, r0
    c974:	e1a04001 	mov	r4, r1
    c978:	e24dd00c 	sub	sp, sp, #12
    c97c:	e1a06002 	mov	r6, r2
    c980:	e2800014 	add	r0, r0, #20
    c984:	e2044003 	and	r4, r4, #3
    c988:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    c98c:	eb000033 	bl	ca60 <CCharGenerator::GetCharWidth() const>
    c990:	e2061003 	and	r1, r6, #3
    c994:	e3013990 	movw	r3, #6544	; 0x1990
    c998:	e3403005 	movt	r3, #5
    c99c:	e0831001 	add	r1, r3, r1
    c9a0:	e0240094 	mla	r4, r4, r0, r0
    c9a4:	e3a02002 	mov	r2, #2
    c9a8:	e3a03000 	mov	r3, #0
    c9ac:	e58d2000 	str	r2, [sp]
    c9b0:	e1a00005 	mov	r0, r5
    c9b4:	e1d111dc 	ldrsb	r1, [r1, #28]
    c9b8:	e0472004 	sub	r2, r7, r4
    c9bc:	ebfffd5c 	bl	bf34 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    c9c0:	e28dd00c 	add	sp, sp, #12
    c9c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c9c8 <assertion_failed>:
    c9c8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c9cc:	e1a05000 	mov	r5, r0
    c9d0:	e1a06001 	mov	r6, r1
    c9d4:	e24dd01c 	sub	sp, sp, #28
    c9d8:	e1a07002 	mov	r7, r2
    c9dc:	e1a0400d 	mov	r4, sp
    c9e0:	e28d0008 	add	r0, sp, #8
    c9e4:	eb00035b 	bl	d758 <CString::CString()>
    c9e8:	e1a03007 	mov	r3, r7
    c9ec:	e1a02006 	mov	r2, r6
    c9f0:	e28d0008 	add	r0, sp, #8
    c9f4:	e30119b4 	movw	r1, #6580	; 0x19b4
    c9f8:	e3401005 	movt	r1, #5
    c9fc:	eb000668 	bl	e3a4 <CString::Format(char const*, ...)>
    ca00:	e28d0008 	add	r0, sp, #8
    ca04:	eb000369 	bl	d7b0 <CString::operator char const*() const>
    ca08:	e1a01000 	mov	r1, r0
    ca0c:	e1a00004 	mov	r0, r4
    ca10:	eb00007b 	bl	cc04 <debug_stacktrace(unsigned int const*, char const*)>
    ca14:	eb00016a 	bl	cfc4 <CLogger::Get()>
    ca18:	e1a04000 	mov	r4, r0
    ca1c:	e28d0008 	add	r0, sp, #8
    ca20:	eb000362 	bl	d7b0 <CString::operator char const*() const>
    ca24:	e3a02000 	mov	r2, #0
    ca28:	e1a01000 	mov	r1, r0
    ca2c:	e58d5000 	str	r5, [sp]
    ca30:	e1a00004 	mov	r0, r4
    ca34:	e30139bc 	movw	r3, #6588	; 0x19bc
    ca38:	e3403005 	movt	r3, #5
    ca3c:	eb00023d 	bl	d338 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ca40:	e28d0008 	add	r0, sp, #8
    ca44:	eb000311 	bl	d690 <CString::~CString()>
    ca48:	e28dd01c 	add	sp, sp, #28
    ca4c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000ca50 <CCharGenerator::CCharGenerator()>:
    ca50:	e3a03008 	mov	r3, #8
    ca54:	e5803000 	str	r3, [r0]
    ca58:	e12fff1e 	bx	lr

0000ca5c <CCharGenerator::~CCharGenerator()>:
    ca5c:	e12fff1e 	bx	lr

0000ca60 <CCharGenerator::GetCharWidth() const>:
    ca60:	e5900000 	ldr	r0, [r0]
    ca64:	e12fff1e 	bx	lr

0000ca68 <CCharGenerator::GetCharHeight() const>:
    ca68:	e3a00013 	mov	r0, #19
    ca6c:	e12fff1e 	bx	lr

0000ca70 <CCharGenerator::GetUnderline() const>:
    ca70:	e3a00010 	mov	r0, #16
    ca74:	e12fff1e 	bx	lr

0000ca78 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    ca78:	e6ef1071 	uxtb	r1, r1
    ca7c:	e92d4070 	push	{r4, r5, r6, lr}
    ca80:	e2414021 	sub	r4, r1, #33	; 0x21
    ca84:	e35400de 	cmp	r4, #222	; 0xde
    ca88:	8a00000f 	bhi	cacc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    ca8c:	e1a06003 	mov	r6, r3
    ca90:	e5903000 	ldr	r3, [r0]
    ca94:	e1a05002 	mov	r5, r2
    ca98:	e1530002 	cmp	r3, r2
    ca9c:	9a00000c 	bls	cad4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x5c>
    caa0:	e356000f 	cmp	r6, #15
    caa4:	8a000008 	bhi	cacc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    caa8:	e30119d4 	movw	r1, #6612	; 0x19d4
    caac:	e3401005 	movt	r1, #5
    cab0:	e3a02080 	mov	r2, #128	; 0x80
    cab4:	e0811204 	add	r1, r1, r4, lsl #4
    cab8:	e7d13006 	ldrb	r3, [r1, r6]
    cabc:	e0133552 	ands	r3, r3, r2, asr r5
    cac0:	13a00001 	movne	r0, #1
    cac4:	03a00000 	moveq	r0, #0
    cac8:	e8bd8070 	pop	{r4, r5, r6, pc}
    cacc:	e3a00000 	mov	r0, #0
    cad0:	e8bd8070 	pop	{r4, r5, r6, pc}
    cad4:	e30217c4 	movw	r1, #10180	; 0x27c4
    cad8:	e3401005 	movt	r1, #5
    cadc:	e30207d8 	movw	r0, #10200	; 0x27d8
    cae0:	e3400005 	movt	r0, #5
    cae4:	e3a0204e 	mov	r2, #78	; 0x4e
    cae8:	ebffffb6 	bl	c9c8 <assertion_failed>
    caec:	e356000f 	cmp	r6, #15
    caf0:	9affffec 	bls	caa8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
    caf4:	eafffff4 	b	cacc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>

0000caf8 <debug_hexdump(void const*, unsigned int, char const*)>:
    caf8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cafc:	e3520000 	cmp	r2, #0
    cb00:	e1a05001 	mov	r5, r1
    cb04:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    cb08:	e1a04000 	mov	r4, r0
    cb0c:	e30277f0 	movw	r7, #10224	; 0x27f0
    cb10:	e3407005 	movt	r7, #5
    cb14:	11a07002 	movne	r7, r2
    cb18:	eb000129 	bl	cfc4 <CLogger::Get()>
    cb1c:	e58d4004 	str	r4, [sp, #4]
    cb20:	e1a01007 	mov	r1, r7
    cb24:	e58d5000 	str	r5, [sp]
    cb28:	e30237f8 	movw	r3, #10232	; 0x27f8
    cb2c:	e3403005 	movt	r3, #5
    cb30:	e3a02004 	mov	r2, #4
    cb34:	eb0001ff 	bl	d338 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cb38:	e3550000 	cmp	r5, #0
    cb3c:	0a00002a 	beq	cbec <debug_hexdump(void const*, unsigned int, char const*)+0xf4>
    cb40:	e302881c 	movw	r8, #10268	; 0x281c
    cb44:	e3408005 	movt	r8, #5
    cb48:	eb00011d 	bl	cfc4 <CLogger::Get()>
    cb4c:	e5d4e00f 	ldrb	lr, [r4, #15]
    cb50:	e5d4b00e 	ldrb	fp, [r4, #14]
    cb54:	e6ffc074 	uxth	ip, r4
    cb58:	e5d4a00d 	ldrb	sl, [r4, #13]
    cb5c:	e1a03008 	mov	r3, r8
    cb60:	e5d4900c 	ldrb	r9, [r4, #12]
    cb64:	e3a02004 	mov	r2, #4
    cb68:	e5d4600b 	ldrb	r6, [r4, #11]
    cb6c:	e1a01007 	mov	r1, r7
    cb70:	e58de040 	str	lr, [sp, #64]	; 0x40
    cb74:	e2844010 	add	r4, r4, #16
    cb78:	e554e006 	ldrb	lr, [r4, #-6]
    cb7c:	e58db03c 	str	fp, [sp, #60]	; 0x3c
    cb80:	e554b007 	ldrb	fp, [r4, #-7]
    cb84:	e58da038 	str	sl, [sp, #56]	; 0x38
    cb88:	e554a008 	ldrb	sl, [r4, #-8]
    cb8c:	e58d9034 	str	r9, [sp, #52]	; 0x34
    cb90:	e5549009 	ldrb	r9, [r4, #-9]
    cb94:	e58d6030 	str	r6, [sp, #48]	; 0x30
    cb98:	e554600a 	ldrb	r6, [r4, #-10]
    cb9c:	e58de02c 	str	lr, [sp, #44]	; 0x2c
    cba0:	e554e00b 	ldrb	lr, [r4, #-11]
    cba4:	e58db028 	str	fp, [sp, #40]	; 0x28
    cba8:	e554b00c 	ldrb	fp, [r4, #-12]
    cbac:	e58da024 	str	sl, [sp, #36]	; 0x24
    cbb0:	e554a00d 	ldrb	sl, [r4, #-13]
    cbb4:	e58d9020 	str	r9, [sp, #32]
    cbb8:	e554900e 	ldrb	r9, [r4, #-14]
    cbbc:	e58d601c 	str	r6, [sp, #28]
    cbc0:	e554600f 	ldrb	r6, [r4, #-15]
    cbc4:	e58de018 	str	lr, [sp, #24]
    cbc8:	e554e010 	ldrb	lr, [r4, #-16]
    cbcc:	e58db014 	str	fp, [sp, #20]
    cbd0:	e58da010 	str	sl, [sp, #16]
    cbd4:	e58d900c 	str	r9, [sp, #12]
    cbd8:	e58d6008 	str	r6, [sp, #8]
    cbdc:	e88d5000 	stm	sp, {ip, lr}
    cbe0:	eb0001d4 	bl	d338 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cbe4:	e355000f 	cmp	r5, #15
    cbe8:	8a000001 	bhi	cbf4 <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
    cbec:	e28dd04c 	add	sp, sp, #76	; 0x4c
    cbf0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbf4:	e2555010 	subs	r5, r5, #16
    cbf8:	1affffd2 	bne	cb48 <debug_hexdump(void const*, unsigned int, char const*)+0x50>
    cbfc:	e28dd04c 	add	sp, sp, #76	; 0x4c
    cc00:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cc04 <debug_stacktrace(unsigned int const*, char const*)>:
    cc04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cc08:	e3510000 	cmp	r1, #0
    cc0c:	e30277f0 	movw	r7, #10224	; 0x27f0
    cc10:	e3407005 	movt	r7, #5
    cc14:	11a07001 	movne	r7, r1
    cc18:	e3006944 	movw	r6, #2372	; 0x944
    cc1c:	e3406001 	movt	r6, #1
    cc20:	e3028874 	movw	r8, #10356	; 0x2874
    cc24:	e3408005 	movt	r8, #5
    cc28:	e24dd008 	sub	sp, sp, #8
    cc2c:	e1a05000 	mov	r5, r0
    cc30:	e3a04000 	mov	r4, #0
    cc34:	ea000003 	b	cc48 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    cc38:	e2844001 	add	r4, r4, #1
    cc3c:	e2855004 	add	r5, r5, #4
    cc40:	e3540040 	cmp	r4, #64	; 0x40
    cc44:	0a000010 	beq	cc8c <debug_stacktrace(unsigned int const*, char const*)+0x88>
    cc48:	e5953000 	ldr	r3, [r5]
    cc4c:	e3530902 	cmp	r3, #32768	; 0x8000
    cc50:	3afffff8 	bcc	cc38 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    cc54:	e1530006 	cmp	r3, r6
    cc58:	2afffff6 	bcs	cc38 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    cc5c:	eb0000d8 	bl	cfc4 <CLogger::Get()>
    cc60:	e5952000 	ldr	r2, [r5]
    cc64:	e1a03008 	mov	r3, r8
    cc68:	e58d4000 	str	r4, [sp]
    cc6c:	e58d2004 	str	r2, [sp, #4]
    cc70:	e1a01007 	mov	r1, r7
    cc74:	e3a02004 	mov	r2, #4
    cc78:	e2844001 	add	r4, r4, #1
    cc7c:	eb0001ad 	bl	d338 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cc80:	e3540040 	cmp	r4, #64	; 0x40
    cc84:	e2855004 	add	r5, r5, #4
    cc88:	1affffee 	bne	cc48 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    cc8c:	e28dd008 	add	sp, sp, #8
    cc90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000cc94 <CDeviceNameService::CDeviceNameService()>:
    cc94:	e92d4070 	push	{r4, r5, r6, lr}
    cc98:	e30351c8 	movw	r5, #12744	; 0x31c8
    cc9c:	e3405005 	movt	r5, #5
    cca0:	e3a03000 	mov	r3, #0
    cca4:	e1a04000 	mov	r4, r0
    cca8:	e5803004 	str	r3, [r0, #4]
    ccac:	e5952000 	ldr	r2, [r5]
    ccb0:	e5803000 	str	r3, [r0]
    ccb4:	e1520003 	cmp	r2, r3
    ccb8:	0a000005 	beq	ccd4 <CDeviceNameService::CDeviceNameService()+0x40>
    ccbc:	e3021888 	movw	r1, #10376	; 0x2888
    ccc0:	e3401005 	movt	r1, #5
    ccc4:	e30208a0 	movw	r0, #10400	; 0x28a0
    ccc8:	e3400005 	movt	r0, #5
    cccc:	e3a0201e 	mov	r2, #30
    ccd0:	ebffff3c 	bl	c9c8 <assertion_failed>
    ccd4:	e5854000 	str	r4, [r5]
    ccd8:	e1a00004 	mov	r0, r4
    ccdc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cce0 <CDeviceNameService::~CDeviceNameService()>:
    cce0:	e5903000 	ldr	r3, [r0]
    cce4:	e92d4070 	push	{r4, r5, r6, lr}
    cce8:	e1a05000 	mov	r5, r0
    ccec:	e3530000 	cmp	r3, #0
    ccf0:	0a00000d 	beq	cd2c <CDeviceNameService::~CDeviceNameService()+0x4c>
    ccf4:	e3a06000 	mov	r6, #0
    ccf8:	e5930004 	ldr	r0, [r3, #4]
    ccfc:	e5934000 	ldr	r4, [r3]
    cd00:	e3500000 	cmp	r0, #0
    cd04:	0a000000 	beq	cd0c <CDeviceNameService::~CDeviceNameService()+0x2c>
    cd08:	ebfff584 	bl	a320 <operator delete[](void*)>
    cd0c:	e5953000 	ldr	r3, [r5]
    cd10:	e1a00003 	mov	r0, r3
    cd14:	e5836004 	str	r6, [r3, #4]
    cd18:	e5836008 	str	r6, [r3, #8]
    cd1c:	ebfff57e 	bl	a31c <operator delete(void*)>
    cd20:	e2543000 	subs	r3, r4, #0
    cd24:	e5854000 	str	r4, [r5]
    cd28:	1afffff2 	bne	ccf8 <CDeviceNameService::~CDeviceNameService()+0x18>
    cd2c:	e30331c8 	movw	r3, #12744	; 0x31c8
    cd30:	e3403005 	movt	r3, #5
    cd34:	e3a02000 	mov	r2, #0
    cd38:	e1a00005 	mov	r0, r5
    cd3c:	e5832000 	str	r2, [r3]
    cd40:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cd44 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
    cd44:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cd48:	e1a08003 	mov	r8, r3
    cd4c:	e5903004 	ldr	r3, [r0, #4]
    cd50:	e1a05000 	mov	r5, r0
    cd54:	e1a06001 	mov	r6, r1
    cd58:	e3530000 	cmp	r3, #0
    cd5c:	e1a07002 	mov	r7, r2
    cd60:	1a000017 	bne	cdc4 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x80>
    cd64:	e3a00010 	mov	r0, #16
    cd68:	ebfff569 	bl	a314 <operator new(unsigned int)>
    cd6c:	e3560000 	cmp	r6, #0
    cd70:	e1a04000 	mov	r4, r0
    cd74:	0a00001b 	beq	cde8 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xa4>
    cd78:	e1a00006 	mov	r0, r6
    cd7c:	eb000cfa 	bl	1016c <strlen>
    cd80:	e2800001 	add	r0, r0, #1
    cd84:	ebfff563 	bl	a318 <operator new[](unsigned int)>
    cd88:	e1a01006 	mov	r1, r6
    cd8c:	e5840004 	str	r0, [r4, #4]
    cd90:	eb000d1a 	bl	10200 <strcpy>
    cd94:	e3570000 	cmp	r7, #0
    cd98:	0a00000b 	beq	cdcc <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x88>
    cd9c:	e5952004 	ldr	r2, [r5, #4]
    cda0:	e5953000 	ldr	r3, [r5]
    cda4:	e3520000 	cmp	r2, #0
    cda8:	e5847008 	str	r7, [r4, #8]
    cdac:	e584800c 	str	r8, [r4, #12]
    cdb0:	e5843000 	str	r3, [r4]
    cdb4:	e5854000 	str	r4, [r5]
    cdb8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    cdbc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    cdc0:	eafff564 	b	a358 <LeaveCritical>
    cdc4:	ebfff556 	bl	a324 <EnterCritical>
    cdc8:	eaffffe5 	b	cd64 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x20>
    cdcc:	e3021888 	movw	r1, #10376	; 0x2888
    cdd0:	e3401005 	movt	r1, #5
    cdd4:	e30208b8 	movw	r0, #10424	; 0x28b8
    cdd8:	e3400005 	movt	r0, #5
    cddc:	e3a0203f 	mov	r2, #63	; 0x3f
    cde0:	ebfffef8 	bl	c9c8 <assertion_failed>
    cde4:	eaffffec 	b	cd9c <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x58>
    cde8:	e3021888 	movw	r1, #10376	; 0x2888
    cdec:	e3401005 	movt	r1, #5
    cdf0:	e30208ac 	movw	r0, #10412	; 0x28ac
    cdf4:	e3400005 	movt	r0, #5
    cdf8:	e3a0203a 	mov	r2, #58	; 0x3a
    cdfc:	ebfffef1 	bl	c9c8 <assertion_failed>
    ce00:	eaffffdc 	b	cd78 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x34>

0000ce04 <CDeviceNameService::GetDevice(char const*, int)>:
    ce04:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ce08:	e2515000 	subs	r5, r1, #0
    ce0c:	e1a07000 	mov	r7, r0
    ce10:	e1a06002 	mov	r6, r2
    ce14:	0a000037 	beq	cef8 <CDeviceNameService::GetDevice(char const*, int)+0xf4>
    ce18:	e5973004 	ldr	r3, [r7, #4]
    ce1c:	e3530000 	cmp	r3, #0
    ce20:	1a00001a 	bne	ce90 <CDeviceNameService::GetDevice(char const*, int)+0x8c>
    ce24:	e5974000 	ldr	r4, [r7]
    ce28:	e3540000 	cmp	r4, #0
    ce2c:	0a00001f 	beq	ceb0 <CDeviceNameService::GetDevice(char const*, int)+0xac>
    ce30:	e3029888 	movw	r9, #10376	; 0x2888
    ce34:	e3409005 	movt	r9, #5
    ce38:	e30288c8 	movw	r8, #10440	; 0x28c8
    ce3c:	e3408005 	movt	r8, #5
    ce40:	ea000009 	b	ce6c <CDeviceNameService::GetDevice(char const*, int)+0x68>
    ce44:	e1a00005 	mov	r0, r5
    ce48:	eb000cd1 	bl	10194 <strcmp>
    ce4c:	e3500000 	cmp	r0, #0
    ce50:	1a000002 	bne	ce60 <CDeviceNameService::GetDevice(char const*, int)+0x5c>
    ce54:	e594300c 	ldr	r3, [r4, #12]
    ce58:	e1530006 	cmp	r3, r6
    ce5c:	0a000016 	beq	cebc <CDeviceNameService::GetDevice(char const*, int)+0xb8>
    ce60:	e5944000 	ldr	r4, [r4]
    ce64:	e3540000 	cmp	r4, #0
    ce68:	0a00000c 	beq	cea0 <CDeviceNameService::GetDevice(char const*, int)+0x9c>
    ce6c:	e5941004 	ldr	r1, [r4, #4]
    ce70:	e3510000 	cmp	r1, #0
    ce74:	1afffff2 	bne	ce44 <CDeviceNameService::GetDevice(char const*, int)+0x40>
    ce78:	e1a01009 	mov	r1, r9
    ce7c:	e3a02053 	mov	r2, #83	; 0x53
    ce80:	e1a00008 	mov	r0, r8
    ce84:	ebfffecf 	bl	c9c8 <assertion_failed>
    ce88:	e5941004 	ldr	r1, [r4, #4]
    ce8c:	eaffffec 	b	ce44 <CDeviceNameService::GetDevice(char const*, int)+0x40>
    ce90:	ebfff523 	bl	a324 <EnterCritical>
    ce94:	e5974000 	ldr	r4, [r7]
    ce98:	e3540000 	cmp	r4, #0
    ce9c:	1affffe3 	bne	ce30 <CDeviceNameService::GetDevice(char const*, int)+0x2c>
    cea0:	e5973004 	ldr	r3, [r7, #4]
    cea4:	e3530000 	cmp	r3, #0
    cea8:	0a000000 	beq	ceb0 <CDeviceNameService::GetDevice(char const*, int)+0xac>
    ceac:	ebfff529 	bl	a358 <LeaveCritical>
    ceb0:	e3a04000 	mov	r4, #0
    ceb4:	e1a00004 	mov	r0, r4
    ceb8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    cebc:	e5973004 	ldr	r3, [r7, #4]
    cec0:	e5944008 	ldr	r4, [r4, #8]
    cec4:	e3530000 	cmp	r3, #0
    cec8:	1a000008 	bne	cef0 <CDeviceNameService::GetDevice(char const*, int)+0xec>
    cecc:	e3540000 	cmp	r4, #0
    ced0:	1afffff7 	bne	ceb4 <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    ced4:	e3021888 	movw	r1, #10376	; 0x2888
    ced8:	e3401005 	movt	r1, #5
    cedc:	e30208dc 	movw	r0, #10460	; 0x28dc
    cee0:	e3400005 	movt	r0, #5
    cee4:	e3a0205b 	mov	r2, #91	; 0x5b
    cee8:	ebfffeb6 	bl	c9c8 <assertion_failed>
    ceec:	eafffff0 	b	ceb4 <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    cef0:	ebfff518 	bl	a358 <LeaveCritical>
    cef4:	eafffff4 	b	cecc <CDeviceNameService::GetDevice(char const*, int)+0xc8>
    cef8:	e3021888 	movw	r1, #10376	; 0x2888
    cefc:	e3401005 	movt	r1, #5
    cf00:	e30208ac 	movw	r0, #10412	; 0x28ac
    cf04:	e3400005 	movt	r0, #5
    cf08:	e3a0204c 	mov	r2, #76	; 0x4c
    cf0c:	ebfffead 	bl	c9c8 <assertion_failed>
    cf10:	eaffffc0 	b	ce18 <CDeviceNameService::GetDevice(char const*, int)+0x14>

0000cf14 <CDeviceNameService::Get()>:
    cf14:	e92d4010 	push	{r4, lr}
    cf18:	e30341c8 	movw	r4, #12744	; 0x31c8
    cf1c:	e3404005 	movt	r4, #5
    cf20:	e5940000 	ldr	r0, [r4]
    cf24:	e3500000 	cmp	r0, #0
    cf28:	18bd8010 	popne	{r4, pc}
    cf2c:	e3a02069 	mov	r2, #105	; 0x69
    cf30:	e3021888 	movw	r1, #10376	; 0x2888
    cf34:	e3401005 	movt	r1, #5
    cf38:	e30208ec 	movw	r0, #10476	; 0x28ec
    cf3c:	e3400005 	movt	r0, #5
    cf40:	ebfffea0 	bl	c9c8 <assertion_failed>
    cf44:	e5940000 	ldr	r0, [r4]
    cf48:	e8bd8010 	pop	{r4, pc}

0000cf4c <CLogger::CLogger(unsigned int, CTimer*)>:
    cf4c:	e92d4010 	push	{r4, lr}
    cf50:	e1a04000 	mov	r4, r0
    cf54:	e3a03000 	mov	r3, #0
    cf58:	e3a0c001 	mov	ip, #1
    cf5c:	e3a00901 	mov	r0, #16384	; 0x4000
    cf60:	e5843008 	str	r3, [r4, #8]
    cf64:	e584300c 	str	r3, [r4, #12]
    cf68:	e5843010 	str	r3, [r4, #16]
    cf6c:	e5843014 	str	r3, [r4, #20]
    cf70:	e8840006 	stm	r4, {r1, r2}
    cf74:	e584c018 	str	ip, [r4, #24]
    cf78:	ebfff4e6 	bl	a318 <operator new[](unsigned int)>
    cf7c:	e30331cc 	movw	r3, #12748	; 0x31cc
    cf80:	e3403005 	movt	r3, #5
    cf84:	e584000c 	str	r0, [r4, #12]
    cf88:	e1a00004 	mov	r0, r4
    cf8c:	e5834000 	str	r4, [r3]
    cf90:	e8bd8010 	pop	{r4, pc}

0000cf94 <CLogger::~CLogger()>:
    cf94:	e92d4010 	push	{r4, lr}
    cf98:	e1a04000 	mov	r4, r0
    cf9c:	e590000c 	ldr	r0, [r0, #12]
    cfa0:	e3a02000 	mov	r2, #0
    cfa4:	e30331cc 	movw	r3, #12748	; 0x31cc
    cfa8:	e3403005 	movt	r3, #5
    cfac:	e1500002 	cmp	r0, r2
    cfb0:	e5832000 	str	r2, [r3]
    cfb4:	0a000000 	beq	cfbc <CLogger::~CLogger()+0x28>
    cfb8:	ebfff4d8 	bl	a320 <operator delete[](void*)>
    cfbc:	e1a00004 	mov	r0, r4
    cfc0:	e8bd8010 	pop	{r4, pc}

0000cfc4 <CLogger::Get()>:
    cfc4:	e30331cc 	movw	r3, #12748	; 0x31cc
    cfc8:	e3403005 	movt	r3, #5
    cfcc:	e5930000 	ldr	r0, [r3]
    cfd0:	e12fff1e 	bx	lr

0000cfd4 <CLogger::Write(char const*)>:
    cfd4:	e92d4070 	push	{r4, r5, r6, lr}
    cfd8:	e1a04000 	mov	r4, r0
    cfdc:	e1a00001 	mov	r0, r1
    cfe0:	e1a05001 	mov	r5, r1
    cfe4:	eb000c60 	bl	1016c <strlen>
    cfe8:	e5943008 	ldr	r3, [r4, #8]
    cfec:	e1a02000 	mov	r2, r0
    cff0:	e1a06000 	mov	r6, r0
    cff4:	e1a01005 	mov	r1, r5
    cff8:	e1a00003 	mov	r0, r3
    cffc:	e5933000 	ldr	r3, [r3]
    d000:	e593300c 	ldr	r3, [r3, #12]
    d004:	e12fff33 	blx	r3
    d008:	e5943018 	ldr	r3, [r4, #24]
    d00c:	e3530000 	cmp	r3, #0
    d010:	1a000017 	bne	d074 <CLogger::Write(char const*)+0xa0>
    d014:	e0850006 	add	r0, r5, r6
    d018:	e1550000 	cmp	r5, r0
    d01c:	0a00000f 	beq	d060 <CLogger::Write(char const*)+0x8c>
    d020:	e0d530d1 	ldrsb	r3, [r5], #1
    d024:	e353000d 	cmp	r3, #13
    d028:	0afffffa 	beq	d018 <CLogger::Write(char const*)+0x44>
    d02c:	e5941010 	ldr	r1, [r4, #16]
    d030:	e594c00c 	ldr	ip, [r4, #12]
    d034:	e7cc3001 	strb	r3, [ip, r1]
    d038:	e5943010 	ldr	r3, [r4, #16]
    d03c:	e5941014 	ldr	r1, [r4, #20]
    d040:	e2833001 	add	r3, r3, #1
    d044:	e7ed3053 	ubfx	r3, r3, #0, #14
    d048:	e1530001 	cmp	r3, r1
    d04c:	e5843010 	str	r3, [r4, #16]
    d050:	1afffff0 	bne	d018 <CLogger::Write(char const*)+0x44>
    d054:	e2433001 	sub	r3, r3, #1
    d058:	e7ed3053 	ubfx	r3, r3, #0, #14
    d05c:	e5843010 	str	r3, [r4, #16]
    d060:	e5943018 	ldr	r3, [r4, #24]
    d064:	e3530000 	cmp	r3, #0
    d068:	08bd8070 	popeq	{r4, r5, r6, pc}
    d06c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d070:	eafff4b8 	b	a358 <LeaveCritical>
    d074:	ebfff4aa 	bl	a324 <EnterCritical>
    d078:	eaffffe5 	b	d014 <CLogger::Write(char const*)+0x40>

0000d07c <CLogger::Read(void*, unsigned int)>:
    d07c:	e5903018 	ldr	r3, [r0, #24]
    d080:	e92d4070 	push	{r4, r5, r6, lr}
    d084:	e1a04000 	mov	r4, r0
    d088:	e3530000 	cmp	r3, #0
    d08c:	e1a05001 	mov	r5, r1
    d090:	e1a06002 	mov	r6, r2
    d094:	1a00001b 	bne	d108 <CLogger::Read(void*, unsigned int)+0x8c>
    d098:	e5902010 	ldr	r2, [r0, #16]
    d09c:	e5903014 	ldr	r3, [r0, #20]
    d0a0:	e1520003 	cmp	r2, r3
    d0a4:	0a000020 	beq	d12c <CLogger::Read(void*, unsigned int)+0xb0>
    d0a8:	e1a01005 	mov	r1, r5
    d0ac:	e3a05000 	mov	r5, #0
    d0b0:	ea00000a 	b	d0e0 <CLogger::Read(void*, unsigned int)+0x64>
    d0b4:	e594000c 	ldr	r0, [r4, #12]
    d0b8:	e2855001 	add	r5, r5, #1
    d0bc:	e19030d3 	ldrsb	r3, [r0, r3]
    d0c0:	e4c13001 	strb	r3, [r1], #1
    d0c4:	e5943014 	ldr	r3, [r4, #20]
    d0c8:	e5940010 	ldr	r0, [r4, #16]
    d0cc:	e2833001 	add	r3, r3, #1
    d0d0:	e7ed3053 	ubfx	r3, r3, #0, #14
    d0d4:	e1530000 	cmp	r3, r0
    d0d8:	e5843014 	str	r3, [r4, #20]
    d0dc:	0a000001 	beq	d0e8 <CLogger::Read(void*, unsigned int)+0x6c>
    d0e0:	e1550006 	cmp	r5, r6
    d0e4:	1afffff2 	bne	d0b4 <CLogger::Read(void*, unsigned int)+0x38>
    d0e8:	e5943018 	ldr	r3, [r4, #24]
    d0ec:	e3530000 	cmp	r3, #0
    d0f0:	1a000001 	bne	d0fc <CLogger::Read(void*, unsigned int)+0x80>
    d0f4:	e1a00005 	mov	r0, r5
    d0f8:	e8bd8070 	pop	{r4, r5, r6, pc}
    d0fc:	ebfff495 	bl	a358 <LeaveCritical>
    d100:	e1a00005 	mov	r0, r5
    d104:	e8bd8070 	pop	{r4, r5, r6, pc}
    d108:	ebfff485 	bl	a324 <EnterCritical>
    d10c:	e5942010 	ldr	r2, [r4, #16]
    d110:	e5943014 	ldr	r3, [r4, #20]
    d114:	e1520003 	cmp	r2, r3
    d118:	1affffe2 	bne	d0a8 <CLogger::Read(void*, unsigned int)+0x2c>
    d11c:	e5943018 	ldr	r3, [r4, #24]
    d120:	e3530000 	cmp	r3, #0
    d124:	0a000000 	beq	d12c <CLogger::Read(void*, unsigned int)+0xb0>
    d128:	ebfff48a 	bl	a358 <LeaveCritical>
    d12c:	e3e05000 	mvn	r5, #0
    d130:	e1a00005 	mov	r0, r5
    d134:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d138 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    d138:	e590c000 	ldr	ip, [r0]
    d13c:	e152000c 	cmp	r2, ip
    d140:	812fff1e 	bxhi	lr
    d144:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d148:	e1a05002 	mov	r5, r2
    d14c:	e1a04000 	mov	r4, r0
    d150:	e24dd020 	sub	sp, sp, #32
    d154:	e1a07003 	mov	r7, r3
    d158:	e1a0000d 	mov	r0, sp
    d15c:	e1a06001 	mov	r6, r1
    d160:	eb00017c 	bl	d758 <CString::CString()>
    d164:	e3550000 	cmp	r5, #0
    d168:	0a000049 	beq	d294 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
    d16c:	e5940004 	ldr	r0, [r4, #4]
    d170:	e3500000 	cmp	r0, #0
    d174:	0a000032 	beq	d244 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    d178:	ebfff563 	bl	a70c <CTimer::GetTimeString()>
    d17c:	e2508000 	subs	r8, r0, #0
    d180:	0a00000b 	beq	d1b4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
    d184:	eb000189 	bl	d7b0 <CString::operator char const*() const>
    d188:	e1a01000 	mov	r1, r0
    d18c:	e1a0000d 	mov	r0, sp
    d190:	eb0001a1 	bl	d81c <CString::Append(char const*)>
    d194:	e1a0000d 	mov	r0, sp
    d198:	e3021900 	movw	r1, #10496	; 0x2900
    d19c:	e3401005 	movt	r1, #5
    d1a0:	eb00019d 	bl	d81c <CString::Append(char const*)>
    d1a4:	e5983000 	ldr	r3, [r8]
    d1a8:	e1a00008 	mov	r0, r8
    d1ac:	e5933004 	ldr	r3, [r3, #4]
    d1b0:	e12fff33 	blx	r3
    d1b4:	e1a01006 	mov	r1, r6
    d1b8:	e1a0000d 	mov	r0, sp
    d1bc:	eb000196 	bl	d81c <CString::Append(char const*)>
    d1c0:	e28d6010 	add	r6, sp, #16
    d1c4:	e1a0000d 	mov	r0, sp
    d1c8:	e3021904 	movw	r1, #10500	; 0x2904
    d1cc:	e3401005 	movt	r1, #5
    d1d0:	eb000191 	bl	d81c <CString::Append(char const*)>
    d1d4:	e1a00006 	mov	r0, r6
    d1d8:	eb00015e 	bl	d758 <CString::CString()>
    d1dc:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    d1e0:	e1a01007 	mov	r1, r7
    d1e4:	e1a00006 	mov	r0, r6
    d1e8:	eb000292 	bl	dc38 <CString::FormatV(char const*, std::__va_list)>
    d1ec:	e1a00006 	mov	r0, r6
    d1f0:	eb00016e 	bl	d7b0 <CString::operator char const*() const>
    d1f4:	e1a01000 	mov	r1, r0
    d1f8:	e1a0000d 	mov	r0, sp
    d1fc:	eb000186 	bl	d81c <CString::Append(char const*)>
    d200:	e3550000 	cmp	r5, #0
    d204:	0a00003c 	beq	d2fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    d208:	e1a0000d 	mov	r0, sp
    d20c:	e3021910 	movw	r1, #10512	; 0x2910
    d210:	e3401005 	movt	r1, #5
    d214:	eb000180 	bl	d81c <CString::Append(char const*)>
    d218:	e1a0000d 	mov	r0, sp
    d21c:	eb000163 	bl	d7b0 <CString::operator char const*() const>
    d220:	e1a01000 	mov	r1, r0
    d224:	e1a00004 	mov	r0, r4
    d228:	ebffff69 	bl	cfd4 <CLogger::Write(char const*)>
    d22c:	e1a00006 	mov	r0, r6
    d230:	eb000116 	bl	d690 <CString::~CString()>
    d234:	e1a0000d 	mov	r0, sp
    d238:	eb000114 	bl	d690 <CString::~CString()>
    d23c:	e28dd020 	add	sp, sp, #32
    d240:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d244:	e1a01006 	mov	r1, r6
    d248:	e1a0000d 	mov	r0, sp
    d24c:	eb000172 	bl	d81c <CString::Append(char const*)>
    d250:	e28d6010 	add	r6, sp, #16
    d254:	e1a0000d 	mov	r0, sp
    d258:	e3021904 	movw	r1, #10500	; 0x2904
    d25c:	e3401005 	movt	r1, #5
    d260:	eb00016d 	bl	d81c <CString::Append(char const*)>
    d264:	e1a00006 	mov	r0, r6
    d268:	eb00013a 	bl	d758 <CString::CString()>
    d26c:	e1a01007 	mov	r1, r7
    d270:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    d274:	e1a00006 	mov	r0, r6
    d278:	eb00026e 	bl	dc38 <CString::FormatV(char const*, std::__va_list)>
    d27c:	e1a00006 	mov	r0, r6
    d280:	eb00014a 	bl	d7b0 <CString::operator char const*() const>
    d284:	e1a01000 	mov	r1, r0
    d288:	e1a0000d 	mov	r0, sp
    d28c:	eb000162 	bl	d81c <CString::Append(char const*)>
    d290:	eaffffdc 	b	d208 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
    d294:	e30218f8 	movw	r1, #10488	; 0x28f8
    d298:	e3401005 	movt	r1, #5
    d29c:	e1a0000d 	mov	r0, sp
    d2a0:	eb000148 	bl	d7c8 <CString::operator=(char const*)>
    d2a4:	e5940004 	ldr	r0, [r4, #4]
    d2a8:	e3500000 	cmp	r0, #0
    d2ac:	1affffb1 	bne	d178 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    d2b0:	e1a01006 	mov	r1, r6
    d2b4:	e1a0000d 	mov	r0, sp
    d2b8:	eb000157 	bl	d81c <CString::Append(char const*)>
    d2bc:	e28d6010 	add	r6, sp, #16
    d2c0:	e1a0000d 	mov	r0, sp
    d2c4:	e3021904 	movw	r1, #10500	; 0x2904
    d2c8:	e3401005 	movt	r1, #5
    d2cc:	eb000152 	bl	d81c <CString::Append(char const*)>
    d2d0:	e1a00006 	mov	r0, r6
    d2d4:	eb00011f 	bl	d758 <CString::CString()>
    d2d8:	e1a01007 	mov	r1, r7
    d2dc:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    d2e0:	e1a00006 	mov	r0, r6
    d2e4:	eb000253 	bl	dc38 <CString::FormatV(char const*, std::__va_list)>
    d2e8:	e1a00006 	mov	r0, r6
    d2ec:	eb00012f 	bl	d7b0 <CString::operator char const*() const>
    d2f0:	e1a01000 	mov	r1, r0
    d2f4:	e1a0000d 	mov	r0, sp
    d2f8:	eb000147 	bl	d81c <CString::Append(char const*)>
    d2fc:	e1a0000d 	mov	r0, sp
    d300:	e3021908 	movw	r1, #10504	; 0x2908
    d304:	e3401005 	movt	r1, #5
    d308:	eb000143 	bl	d81c <CString::Append(char const*)>
    d30c:	e1a0000d 	mov	r0, sp
    d310:	e3021910 	movw	r1, #10512	; 0x2910
    d314:	e3401005 	movt	r1, #5
    d318:	eb00013f 	bl	d81c <CString::Append(char const*)>
    d31c:	e1a0000d 	mov	r0, sp
    d320:	eb000122 	bl	d7b0 <CString::operator char const*() const>
    d324:	e1a01000 	mov	r1, r0
    d328:	e1a00004 	mov	r0, r4
    d32c:	ebffff28 	bl	cfd4 <CLogger::Write(char const*)>
    d330:	ebfff429 	bl	a3dc <halt>
    d334:	eaffffbc 	b	d22c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

0000d338 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    d338:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    d33c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d340:	e24dd010 	sub	sp, sp, #16
    d344:	e28dc018 	add	ip, sp, #24
    d348:	e59d3014 	ldr	r3, [sp, #20]
    d34c:	e58dc000 	str	ip, [sp]
    d350:	e58dc00c 	str	ip, [sp, #12]
    d354:	ebffff77 	bl	d138 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    d358:	e28dd010 	add	sp, sp, #16
    d35c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    d360:	e28dd004 	add	sp, sp, #4
    d364:	e12fff1e 	bx	lr

0000d368 <CLogger::Initialize(CDevice*)>:
    d368:	e92d4010 	push	{r4, lr}
    d36c:	e1a04000 	mov	r4, r0
    d370:	e24dd008 	sub	sp, sp, #8
    d374:	e5801008 	str	r1, [r0, #8]
    d378:	eb00082f 	bl	f43c <CMachineInfo::Get()>
    d37c:	eb0007bc 	bl	f274 <CMachineInfo::GetMachineName() const>
    d380:	e3a02003 	mov	r2, #3
    d384:	e58d0000 	str	r0, [sp]
    d388:	e3023914 	movw	r3, #10516	; 0x2914
    d38c:	e3403005 	movt	r3, #5
    d390:	e1a00004 	mov	r0, r4
    d394:	e302192c 	movw	r1, #10540	; 0x292c
    d398:	e3401005 	movt	r1, #5
    d39c:	ebffffe5 	bl	d338 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d3a0:	e3a00001 	mov	r0, #1
    d3a4:	e28dd008 	add	sp, sp, #8
    d3a8:	e8bd8010 	pop	{r4, pc}

0000d3ac <CSerialDevice::Write(void const*, unsigned int)>:
    d3ac:	e5903084 	ldr	r3, [r0, #132]	; 0x84
    d3b0:	e92d4070 	push	{r4, r5, r6, lr}
    d3b4:	e1a06000 	mov	r6, r0
    d3b8:	e3530000 	cmp	r3, #0
    d3bc:	e1a04001 	mov	r4, r1
    d3c0:	e1a05002 	mov	r5, r2
    d3c4:	1a00001d 	bne	d440 <CSerialDevice::Write(void const*, unsigned int)+0x94>
    d3c8:	e3540000 	cmp	r4, #0
    d3cc:	0a00001d 	beq	d448 <CSerialDevice::Write(void const*, unsigned int)+0x9c>
    d3d0:	e3550000 	cmp	r5, #0
    d3d4:	0a00000e 	beq	d414 <CSerialDevice::Write(void const*, unsigned int)+0x68>
    d3d8:	e3a02a01 	mov	r2, #4096	; 0x1000
    d3dc:	e3432f20 	movt	r2, #16160	; 0x3f20
    d3e0:	e084c005 	add	ip, r4, r5
    d3e4:	e1a01004 	mov	r1, r4
    d3e8:	e3a0e00d 	mov	lr, #13
    d3ec:	e5d10000 	ldrb	r0, [r1]
    d3f0:	e5923018 	ldr	r3, [r2, #24]
    d3f4:	e3130020 	tst	r3, #32
    d3f8:	1afffffc 	bne	d3f0 <CSerialDevice::Write(void const*, unsigned int)+0x44>
    d3fc:	e5820000 	str	r0, [r2]
    d400:	e4d13001 	ldrb	r3, [r1], #1
    d404:	e353000a 	cmp	r3, #10
    d408:	0a000007 	beq	d42c <CSerialDevice::Write(void const*, unsigned int)+0x80>
    d40c:	e15c0001 	cmp	ip, r1
    d410:	1afffff5 	bne	d3ec <CSerialDevice::Write(void const*, unsigned int)+0x40>
    d414:	e5963084 	ldr	r3, [r6, #132]	; 0x84
    d418:	e3530000 	cmp	r3, #0
    d41c:	0a000000 	beq	d424 <CSerialDevice::Write(void const*, unsigned int)+0x78>
    d420:	ebfff3cc 	bl	a358 <LeaveCritical>
    d424:	e1a00005 	mov	r0, r5
    d428:	e8bd8070 	pop	{r4, r5, r6, pc}
    d42c:	e5923018 	ldr	r3, [r2, #24]
    d430:	e3130020 	tst	r3, #32
    d434:	1afffffc 	bne	d42c <CSerialDevice::Write(void const*, unsigned int)+0x80>
    d438:	e582e000 	str	lr, [r2]
    d43c:	eafffff2 	b	d40c <CSerialDevice::Write(void const*, unsigned int)+0x60>
    d440:	ebfff3b7 	bl	a324 <EnterCritical>
    d444:	eaffffdf 	b	d3c8 <CSerialDevice::Write(void const*, unsigned int)+0x1c>
    d448:	e3021950 	movw	r1, #10576	; 0x2950
    d44c:	e3401005 	movt	r1, #5
    d450:	e302095c 	movw	r0, #10588	; 0x295c
    d454:	e3400005 	movt	r0, #5
    d458:	e3a02090 	mov	r2, #144	; 0x90
    d45c:	ebfffd59 	bl	c9c8 <assertion_failed>
    d460:	eaffffda 	b	d3d0 <CSerialDevice::Write(void const*, unsigned int)+0x24>

0000d464 <CSerialDevice::CSerialDevice()>:
    d464:	e92d4010 	push	{r4, lr}
    d468:	e1a04000 	mov	r4, r0
    d46c:	eb000d30 	bl	10934 <CDevice::CDevice()>
    d470:	e1a00004 	mov	r0, r4
    d474:	e59fc05c 	ldr	ip, [pc, #92]	; d4d8 <CSerialDevice::CSerialDevice()+0x74>
    d478:	e3a03000 	mov	r3, #0
    d47c:	e3a01020 	mov	r1, #32
    d480:	e1a02003 	mov	r2, r3
    d484:	e480c004 	str	ip, [r0], #4
    d488:	ebfff281 	bl	9e94 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    d48c:	e3a03000 	mov	r3, #0
    d490:	e1a02003 	mov	r2, r3
    d494:	e2840024 	add	r0, r4, #36	; 0x24
    d498:	e3a01021 	mov	r1, #33	; 0x21
    d49c:	ebfff27c 	bl	9e94 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    d4a0:	e2840044 	add	r0, r4, #68	; 0x44
    d4a4:	e3a03000 	mov	r3, #0
    d4a8:	e3a02004 	mov	r2, #4
    d4ac:	e3a0100e 	mov	r1, #14
    d4b0:	ebfff277 	bl	9e94 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    d4b4:	e2840064 	add	r0, r4, #100	; 0x64
    d4b8:	e3a03000 	mov	r3, #0
    d4bc:	e3a02004 	mov	r2, #4
    d4c0:	e3a0100f 	mov	r1, #15
    d4c4:	ebfff272 	bl	9e94 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    d4c8:	e3a03001 	mov	r3, #1
    d4cc:	e5843084 	str	r3, [r4, #132]	; 0x84
    d4d0:	e1a00004 	mov	r0, r4
    d4d4:	e8bd8010 	pop	{r4, pc}
    d4d8:	0005293c 	.word	0x0005293c

0000d4dc <CSerialDevice::Initialize(unsigned int)>:
    d4dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d4e0:	e1a07001 	mov	r7, r1
    d4e4:	e1a05000 	mov	r5, r0
    d4e8:	eb0007d3 	bl	f43c <CMachineInfo::Get()>
    d4ec:	e3a01002 	mov	r1, #2
    d4f0:	eb000775 	bl	f2cc <CMachineInfo::GetClockRate(unsigned int) const>
    d4f4:	e2508000 	subs	r8, r0, #0
    d4f8:	0a00003a 	beq	d5e8 <CSerialDevice::Initialize(unsigned int)+0x10c>
    d4fc:	e30c3594 	movw	r3, #50580	; 0xc594
    d500:	e340302d 	movt	r3, #45	; 0x2d
    d504:	e2472f4b 	sub	r2, r7, #300	; 0x12c
    d508:	e1520003 	cmp	r2, r3
    d50c:	8a00002e 	bhi	d5cc <CSerialDevice::Initialize(unsigned int)+0xf0>
    d510:	e1a04207 	lsl	r4, r7, #4
    d514:	e30f3ffe 	movw	r3, #65534	; 0xfffe
    d518:	e736f418 	udiv	r6, r8, r4
    d51c:	e2462001 	sub	r2, r6, #1
    d520:	e1520003 	cmp	r2, r3
    d524:	8a000021 	bhi	d5b0 <CSerialDevice::Initialize(unsigned int)+0xd4>
    d528:	e0618694 	mls	r1, r4, r6, r8
    d52c:	e1a01181 	lsl	r1, r1, #3
    d530:	e731f711 	udiv	r1, r1, r7
    d534:	e2014001 	and	r4, r1, #1
    d538:	e08440a1 	add	r4, r4, r1, lsr #1
    d53c:	e354003f 	cmp	r4, #63	; 0x3f
    d540:	9a000005 	bls	d55c <CSerialDevice::Initialize(unsigned int)+0x80>
    d544:	e3021950 	movw	r1, #10576	; 0x2950
    d548:	e3401005 	movt	r1, #5
    d54c:	e30209c8 	movw	r0, #10696	; 0x29c8
    d550:	e3400005 	movt	r0, #5
    d554:	e3a02076 	mov	r2, #118	; 0x76
    d558:	ebfffd1a 	bl	c9c8 <assertion_failed>
    d55c:	e3a02a01 	mov	r2, #4096	; 0x1000
    d560:	e3432f20 	movt	r2, #16160	; 0x3f20
    d564:	e3003301 	movw	r3, #769	; 0x301
    d568:	e30007ff 	movw	r0, #2047	; 0x7ff
    d56c:	e3a07000 	mov	r7, #0
    d570:	e3a01060 	mov	r1, #96	; 0x60
    d574:	e5827038 	str	r7, [r2, #56]	; 0x38
    d578:	e5820044 	str	r0, [r2, #68]	; 0x44
    d57c:	e5826024 	str	r6, [r2, #36]	; 0x24
    d580:	e5824028 	str	r4, [r2, #40]	; 0x28
    d584:	e582102c 	str	r1, [r2, #44]	; 0x2c
    d588:	e5827034 	str	r7, [r2, #52]	; 0x34
    d58c:	e5823030 	str	r3, [r2, #48]	; 0x30
    d590:	ebfffe5f 	bl	cf14 <CDeviceNameService::Get()>
    d594:	e1a03007 	mov	r3, r7
    d598:	e1a02005 	mov	r2, r5
    d59c:	e30219dc 	movw	r1, #10716	; 0x29dc
    d5a0:	e3401005 	movt	r1, #5
    d5a4:	ebfffde6 	bl	cd44 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    d5a8:	e3a00001 	mov	r0, #1
    d5ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d5b0:	e3021950 	movw	r1, #10576	; 0x2950
    d5b4:	e3401005 	movt	r1, #5
    d5b8:	e30209a4 	movw	r0, #10660	; 0x29a4
    d5bc:	e3400005 	movt	r0, #5
    d5c0:	e3a02073 	mov	r2, #115	; 0x73
    d5c4:	ebfffcff 	bl	c9c8 <assertion_failed>
    d5c8:	eaffffd6 	b	d528 <CSerialDevice::Initialize(unsigned int)+0x4c>
    d5cc:	e3021950 	movw	r1, #10576	; 0x2950
    d5d0:	e3401005 	movt	r1, #5
    d5d4:	e3020978 	movw	r0, #10616	; 0x2978
    d5d8:	e3400005 	movt	r0, #5
    d5dc:	e3a02070 	mov	r2, #112	; 0x70
    d5e0:	ebfffcf8 	bl	c9c8 <assertion_failed>
    d5e4:	eaffffc9 	b	d510 <CSerialDevice::Initialize(unsigned int)+0x34>
    d5e8:	e3021950 	movw	r1, #10576	; 0x2950
    d5ec:	e3401005 	movt	r1, #5
    d5f0:	e3020968 	movw	r0, #10600	; 0x2968
    d5f4:	e3400005 	movt	r0, #5
    d5f8:	e3a0206e 	mov	r2, #110	; 0x6e
    d5fc:	ebfffcf1 	bl	c9c8 <assertion_failed>
    d600:	eaffffbd 	b	d4fc <CSerialDevice::Initialize(unsigned int)+0x20>

0000d604 <CSerialDevice::Write(unsigned char)>:
    d604:	e3a02a01 	mov	r2, #4096	; 0x1000
    d608:	e3432f20 	movt	r2, #16160	; 0x3f20
    d60c:	e5923018 	ldr	r3, [r2, #24]
    d610:	e3130020 	tst	r3, #32
    d614:	1afffffc 	bne	d60c <CSerialDevice::Write(unsigned char)+0x8>
    d618:	e5821000 	str	r1, [r2]
    d61c:	e12fff1e 	bx	lr

0000d620 <CSerialDevice::~CSerialDevice()>:
    d620:	e3a03a01 	mov	r3, #4096	; 0x1000
    d624:	e3433f20 	movt	r3, #16160	; 0x3f20
    d628:	e59f1040 	ldr	r1, [pc, #64]	; d670 <CSerialDevice::~CSerialDevice()+0x50>
    d62c:	e3a02000 	mov	r2, #0
    d630:	e92d4010 	push	{r4, lr}
    d634:	e1a04000 	mov	r4, r0
    d638:	e4801064 	str	r1, [r0], #100	; 0x64
    d63c:	e5832038 	str	r2, [r3, #56]	; 0x38
    d640:	e5832030 	str	r2, [r3, #48]	; 0x30
    d644:	ebffef13 	bl	9298 <CGPIOPin::~CGPIOPin()>
    d648:	e2840044 	add	r0, r4, #68	; 0x44
    d64c:	ebffef11 	bl	9298 <CGPIOPin::~CGPIOPin()>
    d650:	e2840024 	add	r0, r4, #36	; 0x24
    d654:	ebffef0f 	bl	9298 <CGPIOPin::~CGPIOPin()>
    d658:	e2840004 	add	r0, r4, #4
    d65c:	ebffef0d 	bl	9298 <CGPIOPin::~CGPIOPin()>
    d660:	e1a00004 	mov	r0, r4
    d664:	eb000ca7 	bl	10908 <CDevice::~CDevice()>
    d668:	e1a00004 	mov	r0, r4
    d66c:	e8bd8010 	pop	{r4, pc}
    d670:	0005293c 	.word	0x0005293c

0000d674 <CSerialDevice::~CSerialDevice()>:
    d674:	e92d4010 	push	{r4, lr}
    d678:	e1a04000 	mov	r4, r0
    d67c:	ebffffe7 	bl	d620 <CSerialDevice::~CSerialDevice()>
    d680:	e1a00004 	mov	r0, r4
    d684:	ebfff324 	bl	a31c <operator delete(void*)>
    d688:	e1a00004 	mov	r0, r4
    d68c:	e8bd8010 	pop	{r4, pc}

0000d690 <CString::~CString()>:
    d690:	e92d4010 	push	{r4, lr}
    d694:	e1a04000 	mov	r4, r0
    d698:	e5900004 	ldr	r0, [r0, #4]
    d69c:	e59f3014 	ldr	r3, [pc, #20]	; d6b8 <CString::~CString()+0x28>
    d6a0:	e3500000 	cmp	r0, #0
    d6a4:	e5843000 	str	r3, [r4]
    d6a8:	0a000000 	beq	d6b0 <CString::~CString()+0x20>
    d6ac:	ebfff31b 	bl	a320 <operator delete[](void*)>
    d6b0:	e1a00004 	mov	r0, r4
    d6b4:	e8bd8010 	pop	{r4, pc}
    d6b8:	000529ec 	.word	0x000529ec

0000d6bc <CString::~CString()>:
    d6bc:	e92d4010 	push	{r4, lr}
    d6c0:	e1a04000 	mov	r4, r0
    d6c4:	e5900004 	ldr	r0, [r0, #4]
    d6c8:	e59f301c 	ldr	r3, [pc, #28]	; d6ec <CString::~CString()+0x30>
    d6cc:	e3500000 	cmp	r0, #0
    d6d0:	e5843000 	str	r3, [r4]
    d6d4:	0a000000 	beq	d6dc <CString::~CString()+0x20>
    d6d8:	ebfff310 	bl	a320 <operator delete[](void*)>
    d6dc:	e1a00004 	mov	r0, r4
    d6e0:	ebfff30d 	bl	a31c <operator delete(void*)>
    d6e4:	e1a00004 	mov	r0, r4
    d6e8:	e8bd8010 	pop	{r4, pc}
    d6ec:	000529ec 	.word	0x000529ec

0000d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    d6f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d6f4:	e990002c 	ldmib	r0, {r2, r3, r5}
    d6f8:	e0455002 	sub	r5, r5, r2
    d6fc:	e0851001 	add	r1, r5, r1
    d700:	e2812001 	add	r2, r1, #1
    d704:	e1520003 	cmp	r2, r3
    d708:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    d70c:	e1a04000 	mov	r4, r0
    d710:	e2816041 	add	r6, r1, #65	; 0x41
    d714:	e1a00006 	mov	r0, r6
    d718:	ebfff2fe 	bl	a318 <operator new[](unsigned int)>
    d71c:	e3a02000 	mov	r2, #0
    d720:	e594300c 	ldr	r3, [r4, #12]
    d724:	e1a07000 	mov	r7, r0
    d728:	e5c32000 	strb	r2, [r3]
    d72c:	e5941004 	ldr	r1, [r4, #4]
    d730:	eb000ab2 	bl	10200 <strcpy>
    d734:	e5940004 	ldr	r0, [r4, #4]
    d738:	e3500000 	cmp	r0, #0
    d73c:	0a000000 	beq	d744 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    d740:	ebfff2f6 	bl	a320 <operator delete[](void*)>
    d744:	e0875005 	add	r5, r7, r5
    d748:	e5847004 	str	r7, [r4, #4]
    d74c:	e584500c 	str	r5, [r4, #12]
    d750:	e5846008 	str	r6, [r4, #8]
    d754:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d758 <CString::CString()>:
    d758:	e59f100c 	ldr	r1, [pc, #12]	; d76c <CString::CString()+0x14>
    d75c:	e3a02000 	mov	r2, #0
    d760:	e5802008 	str	r2, [r0, #8]
    d764:	e8800006 	stm	r0, {r1, r2}
    d768:	e12fff1e 	bx	lr
    d76c:	000529ec 	.word	0x000529ec

0000d770 <CString::CString(char const*)>:
    d770:	e92d4070 	push	{r4, r5, r6, lr}
    d774:	e1a04000 	mov	r4, r0
    d778:	e59f302c 	ldr	r3, [pc, #44]	; d7ac <CString::CString(char const*)+0x3c>
    d77c:	e1a00001 	mov	r0, r1
    d780:	e1a05001 	mov	r5, r1
    d784:	e5843000 	str	r3, [r4]
    d788:	eb000a77 	bl	1016c <strlen>
    d78c:	e2800001 	add	r0, r0, #1
    d790:	e5840008 	str	r0, [r4, #8]
    d794:	ebfff2df 	bl	a318 <operator new[](unsigned int)>
    d798:	e1a01005 	mov	r1, r5
    d79c:	e5840004 	str	r0, [r4, #4]
    d7a0:	eb000a96 	bl	10200 <strcpy>
    d7a4:	e1a00004 	mov	r0, r4
    d7a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    d7ac:	000529ec 	.word	0x000529ec

0000d7b0 <CString::operator char const*() const>:
    d7b0:	e5900004 	ldr	r0, [r0, #4]
    d7b4:	e30136e4 	movw	r3, #5860	; 0x16e4
    d7b8:	e3403005 	movt	r3, #5
    d7bc:	e3500000 	cmp	r0, #0
    d7c0:	01a00003 	moveq	r0, r3
    d7c4:	e12fff1e 	bx	lr

0000d7c8 <CString::operator=(char const*)>:
    d7c8:	e92d4070 	push	{r4, r5, r6, lr}
    d7cc:	e1a04000 	mov	r4, r0
    d7d0:	e5900004 	ldr	r0, [r0, #4]
    d7d4:	e1a05001 	mov	r5, r1
    d7d8:	e3500000 	cmp	r0, #0
    d7dc:	0a000000 	beq	d7e4 <CString::operator=(char const*)+0x1c>
    d7e0:	ebfff2ce 	bl	a320 <operator delete[](void*)>
    d7e4:	e1a00005 	mov	r0, r5
    d7e8:	eb000a5f 	bl	1016c <strlen>
    d7ec:	e2800001 	add	r0, r0, #1
    d7f0:	e5840008 	str	r0, [r4, #8]
    d7f4:	ebfff2c7 	bl	a318 <operator new[](unsigned int)>
    d7f8:	e1a01005 	mov	r1, r5
    d7fc:	e5840004 	str	r0, [r4, #4]
    d800:	eb000a7e 	bl	10200 <strcpy>
    d804:	e5940004 	ldr	r0, [r4, #4]
    d808:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d80c <CString::GetLength() const>:
    d80c:	e5900004 	ldr	r0, [r0, #4]
    d810:	e3500000 	cmp	r0, #0
    d814:	012fff1e 	bxeq	lr
    d818:	ea000a53 	b	1016c <strlen>

0000d81c <CString::Append(char const*)>:
    d81c:	e92d4070 	push	{r4, r5, r6, lr}
    d820:	e1a04000 	mov	r4, r0
    d824:	e5900004 	ldr	r0, [r0, #4]
    d828:	e3a03001 	mov	r3, #1
    d82c:	e1a06001 	mov	r6, r1
    d830:	e3500000 	cmp	r0, #0
    d834:	e5843008 	str	r3, [r4, #8]
    d838:	0a000003 	beq	d84c <CString::Append(char const*)+0x30>
    d83c:	eb000a4a 	bl	1016c <strlen>
    d840:	e5943008 	ldr	r3, [r4, #8]
    d844:	e0830000 	add	r0, r3, r0
    d848:	e5840008 	str	r0, [r4, #8]
    d84c:	e1a00006 	mov	r0, r6
    d850:	eb000a45 	bl	1016c <strlen>
    d854:	e5943008 	ldr	r3, [r4, #8]
    d858:	e0800003 	add	r0, r0, r3
    d85c:	e5840008 	str	r0, [r4, #8]
    d860:	ebfff2ac 	bl	a318 <operator new[](unsigned int)>
    d864:	e5941004 	ldr	r1, [r4, #4]
    d868:	e1a05000 	mov	r5, r0
    d86c:	e3510000 	cmp	r1, #0
    d870:	05c01000 	strbeq	r1, [r0]
    d874:	0a000004 	beq	d88c <CString::Append(char const*)+0x70>
    d878:	eb000a60 	bl	10200 <strcpy>
    d87c:	e5940004 	ldr	r0, [r4, #4]
    d880:	e3500000 	cmp	r0, #0
    d884:	0a000000 	beq	d88c <CString::Append(char const*)+0x70>
    d888:	ebfff2a4 	bl	a320 <operator delete[](void*)>
    d88c:	e1a01006 	mov	r1, r6
    d890:	e1a00005 	mov	r0, r5
    d894:	eb000a77 	bl	10278 <strcat>
    d898:	e5845004 	str	r5, [r4, #4]
    d89c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d8a0 <CString::Compare(char const*) const>:
    d8a0:	e5900004 	ldr	r0, [r0, #4]
    d8a4:	ea000a3a 	b	10194 <strcmp>

0000d8a8 <CString::Find(char) const>:
    d8a8:	e5902004 	ldr	r2, [r0, #4]
    d8ac:	e1d230d0 	ldrsb	r3, [r2]
    d8b0:	e3530000 	cmp	r3, #0
    d8b4:	0a000009 	beq	d8e0 <CString::Find(char) const+0x38>
    d8b8:	e1510003 	cmp	r1, r3
    d8bc:	e3a00000 	mov	r0, #0
    d8c0:	1a000002 	bne	d8d0 <CString::Find(char) const+0x28>
    d8c4:	ea000007 	b	d8e8 <CString::Find(char) const+0x40>
    d8c8:	e1530001 	cmp	r3, r1
    d8cc:	012fff1e 	bxeq	lr
    d8d0:	e1f230d1 	ldrsb	r3, [r2, #1]!
    d8d4:	e2800001 	add	r0, r0, #1
    d8d8:	e3530000 	cmp	r3, #0
    d8dc:	1afffff9 	bne	d8c8 <CString::Find(char) const+0x20>
    d8e0:	e3e00000 	mvn	r0, #0
    d8e4:	e12fff1e 	bx	lr
    d8e8:	e12fff1e 	bx	lr

0000d8ec <CString::PutChar(char, unsigned int)>:
    d8ec:	e92d4070 	push	{r4, r5, r6, lr}
    d8f0:	e2524000 	subs	r4, r2, #0
    d8f4:	08bd8070 	popeq	{r4, r5, r6, pc}
    d8f8:	e1a06001 	mov	r6, r1
    d8fc:	e1a01004 	mov	r1, r4
    d900:	e1a05000 	mov	r5, r0
    d904:	ebffff79 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d908:	e2443001 	sub	r3, r4, #1
    d90c:	e595200c 	ldr	r2, [r5, #12]
    d910:	e2433001 	sub	r3, r3, #1
    d914:	e3730001 	cmn	r3, #1
    d918:	e2820001 	add	r0, r2, #1
    d91c:	e585000c 	str	r0, [r5, #12]
    d920:	e5c26000 	strb	r6, [r2]
    d924:	1afffff8 	bne	d90c <CString::PutChar(char, unsigned int)+0x20>
    d928:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d92c <CString::PutString(char const*)>:
    d92c:	e92d4070 	push	{r4, r5, r6, lr}
    d930:	e1a04000 	mov	r4, r0
    d934:	e1a00001 	mov	r0, r1
    d938:	e1a05001 	mov	r5, r1
    d93c:	eb000a0a 	bl	1016c <strlen>
    d940:	e2506000 	subs	r6, r0, #0
    d944:	0a000002 	beq	d954 <CString::PutString(char const*)+0x28>
    d948:	e1a01006 	mov	r1, r6
    d94c:	e1a00004 	mov	r0, r4
    d950:	ebffff66 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d954:	e1a01005 	mov	r1, r5
    d958:	e594000c 	ldr	r0, [r4, #12]
    d95c:	eb000a27 	bl	10200 <strcpy>
    d960:	e594100c 	ldr	r1, [r4, #12]
    d964:	e0811006 	add	r1, r1, r6
    d968:	e584100c 	str	r1, [r4, #12]
    d96c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d970 <CString::ReserveSpace(unsigned int)>:
    d970:	e3510000 	cmp	r1, #0
    d974:	012fff1e 	bxeq	lr
    d978:	eaffff5c 	b	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000d97c <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    d97c:	e1510002 	cmp	r1, r2
    d980:	e92d4070 	push	{r4, r5, r6, lr}
    d984:	23a0c001 	movcs	ip, #1
    d988:	3a000018 	bcc	d9f0 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x74>
    d98c:	e00c0c92 	mul	ip, r2, ip
    d990:	e734fc11 	udiv	r4, r1, ip
    d994:	e1540002 	cmp	r4, r2
    d998:	e1a0e004 	mov	lr, r4
    d99c:	2afffffa 	bcs	d98c <CString::ntoa(char*, unsigned long, unsigned int, int)+0x10>
    d9a0:	e3530000 	cmp	r3, #0
    d9a4:	e1a05000 	mov	r5, r0
    d9a8:	13a06037 	movne	r6, #55	; 0x37
    d9ac:	03a06057 	moveq	r6, #87	; 0x57
    d9b0:	ea000001 	b	d9bc <CString::ntoa(char*, unsigned long, unsigned int, int)+0x40>
    d9b4:	e734fc11 	udiv	r4, r1, ip
    d9b8:	e1a0e004 	mov	lr, r4
    d9bc:	e061149c 	mls	r1, ip, r4, r1
    d9c0:	e35e0009 	cmp	lr, #9
    d9c4:	e73cf21c 	udiv	ip, ip, r2
    d9c8:	e086300e 	add	r3, r6, lr
    d9cc:	e28ee030 	add	lr, lr, #48	; 0x30
    d9d0:	e2855001 	add	r5, r5, #1
    d9d4:	e6af3073 	sxtb	r3, r3
    d9d8:	96af307e 	sxtbls	r3, lr
    d9dc:	e35c0000 	cmp	ip, #0
    d9e0:	e5453001 	strb	r3, [r5, #-1]
    d9e4:	1afffff2 	bne	d9b4 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x38>
    d9e8:	e5c5c000 	strb	ip, [r5]
    d9ec:	e8bd8070 	pop	{r4, r5, r6, pc}
    d9f0:	e1a0e001 	mov	lr, r1
    d9f4:	e3a0c001 	mov	ip, #1
    d9f8:	e1a04001 	mov	r4, r1
    d9fc:	eaffffe7 	b	d9a0 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x24>

0000da00 <CString::ftoa(char*, double, unsigned int)>:
    da00:	eeb50bc0 	vcmpe.f64	d0, #0.0
    da04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    da08:	eddf0b88 	vldr	d16, [pc, #544]	; dc30 <CString::ftoa(char*, double, unsigned int)+0x230>
    da0c:	ed2d8b02 	vpush	{d8}
    da10:	eeb08b40 	vmov.f64	d8, d0
    da14:	e24dd010 	sub	sp, sp, #16
    da18:	e1a05000 	mov	r5, r0
    da1c:	e1a06001 	mov	r6, r1
    da20:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    da24:	4eb18b40 	vnegmi.f64	d8, d0
    da28:	43a0302d 	movmi	r3, #45	; 0x2d
    da2c:	45c03000 	strbmi	r3, [r0]
    da30:	42807001 	addmi	r7, r0, #1
    da34:	51a07000 	movpl	r7, r0
    da38:	eeb48be0 	vcmpe.f64	d8, d16
    da3c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    da40:	ca000068 	bgt	dbe8 <CString::ftoa(char*, double, unsigned int)+0x1e8>
    da44:	eefc7bc8 	vcvt.u32.f64	s15, d8
    da48:	ee174a90 	vmov	r4, s15
    da4c:	e3540009 	cmp	r4, #9
    da50:	83a03001 	movhi	r3, #1
    da54:	83a0100a 	movhi	r1, #10
    da58:	9a00006a 	bls	dc08 <CString::ftoa(char*, double, unsigned int)+0x208>
    da5c:	e0030391 	mul	r3, r1, r3
    da60:	e732f314 	udiv	r2, r4, r3
    da64:	e3520009 	cmp	r2, #9
    da68:	8afffffb 	bhi	da5c <CString::ftoa(char*, double, unsigned int)+0x5c>
    da6c:	e30c8ccd 	movw	r8, #52429	; 0xcccd
    da70:	e34c8ccc 	movt	r8, #52428	; 0xcccc
    da74:	e1a0c007 	mov	ip, r7
    da78:	e1a01004 	mov	r1, r4
    da7c:	e73ef314 	udiv	lr, r4, r3
    da80:	ea000001 	b	da8c <CString::ftoa(char*, double, unsigned int)+0x8c>
    da84:	e73ef311 	udiv	lr, r1, r3
    da88:	e1a0200e 	mov	r2, lr
    da8c:	e3520009 	cmp	r2, #9
    da90:	e2820057 	add	r0, r2, #87	; 0x57
    da94:	e2822030 	add	r2, r2, #48	; 0x30
    da98:	e0611e93 	mls	r1, r3, lr, r1
    da9c:	e6af0070 	sxtb	r0, r0
    daa0:	e28cc001 	add	ip, ip, #1
    daa4:	96af0072 	sxtbls	r0, r2
    daa8:	e0832398 	umull	r2, r3, r8, r3
    daac:	e1b031a3 	lsrs	r3, r3, #3
    dab0:	e54c0001 	strb	r0, [ip, #-1]
    dab4:	1afffff2 	bne	da84 <CString::ftoa(char*, double, unsigned int)+0x84>
    dab8:	e3560000 	cmp	r6, #0
    dabc:	e5cc3000 	strb	r3, [ip]
    dac0:	1a000003 	bne	dad4 <CString::ftoa(char*, double, unsigned int)+0xd4>
    dac4:	e1a00005 	mov	r0, r5
    dac8:	e28dd010 	add	sp, sp, #16
    dacc:	ecbd8b02 	vpop	{d8}
    dad0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dad4:	e1a00007 	mov	r0, r7
    dad8:	eb0009a3 	bl	1016c <strlen>
    dadc:	e3560009 	cmp	r6, #9
    dae0:	23a06009 	movcs	r6, #9
    dae4:	e3a0302e 	mov	r3, #46	; 0x2e
    dae8:	e3560001 	cmp	r6, #1
    daec:	e0878000 	add	r8, r7, r0
    daf0:	e7c73000 	strb	r3, [r7, r0]
    daf4:	e2887001 	add	r7, r8, #1
    daf8:	0a000049 	beq	dc24 <CString::ftoa(char*, double, unsigned int)+0x224>
    dafc:	e3a0200a 	mov	r2, #10
    db00:	e3a03002 	mov	r3, #2
    db04:	e1a01002 	mov	r1, r2
    db08:	e2833001 	add	r3, r3, #1
    db0c:	e0020291 	mul	r2, r1, r2
    db10:	e1530006 	cmp	r3, r6
    db14:	9afffffb 	bls	db08 <CString::ftoa(char*, double, unsigned int)+0x108>
    db18:	ee072a90 	vmov	s15, r2
    db1c:	eef81b67 	vcvt.f64.u32	d17, s15
    db20:	ee074a90 	vmov	s15, r4
    db24:	eef80b67 	vcvt.f64.u32	d16, s15
    db28:	ee388b60 	vsub.f64	d8, d8, d16
    db2c:	ee288b21 	vmul.f64	d8, d8, d17
    db30:	eefc7bc8 	vcvt.u32.f64	s15, d8
    db34:	ee17ca90 	vmov	ip, s15
    db38:	e35c0009 	cmp	ip, #9
    db3c:	83a03001 	movhi	r3, #1
    db40:	83a0000a 	movhi	r0, #10
    db44:	9a000032 	bls	dc14 <CString::ftoa(char*, double, unsigned int)+0x214>
    db48:	e0030390 	mul	r3, r0, r3
    db4c:	e731f31c 	udiv	r1, ip, r3
    db50:	e3510009 	cmp	r1, #9
    db54:	e1a02001 	mov	r2, r1
    db58:	8afffffa 	bhi	db48 <CString::ftoa(char*, double, unsigned int)+0x148>
    db5c:	e30c4ccd 	movw	r4, #52429	; 0xcccd
    db60:	e34c4ccc 	movt	r4, #52428	; 0xcccc
    db64:	e28de004 	add	lr, sp, #4
    db68:	ea000001 	b	db74 <CString::ftoa(char*, double, unsigned int)+0x174>
    db6c:	e731f31c 	udiv	r1, ip, r3
    db70:	e1a02001 	mov	r2, r1
    db74:	e3520009 	cmp	r2, #9
    db78:	e2820057 	add	r0, r2, #87	; 0x57
    db7c:	e2822030 	add	r2, r2, #48	; 0x30
    db80:	e06cc193 	mls	ip, r3, r1, ip
    db84:	e6af1070 	sxtb	r1, r0
    db88:	e28ee001 	add	lr, lr, #1
    db8c:	96af1072 	sxtbls	r1, r2
    db90:	e0832394 	umull	r2, r3, r4, r3
    db94:	e1b031a3 	lsrs	r3, r3, #3
    db98:	e54e1001 	strb	r1, [lr, #-1]
    db9c:	1afffff2 	bne	db6c <CString::ftoa(char*, double, unsigned int)+0x16c>
    dba0:	e28d0004 	add	r0, sp, #4
    dba4:	e5ce3000 	strb	r3, [lr]
    dba8:	eb00096f 	bl	1016c <strlen>
    dbac:	e0566000 	subs	r6, r6, r0
    dbb0:	0a000005 	beq	dbcc <CString::ftoa(char*, double, unsigned int)+0x1cc>
    dbb4:	e3a02030 	mov	r2, #48	; 0x30
    dbb8:	e0883006 	add	r3, r8, r6
    dbbc:	e5e82001 	strb	r2, [r8, #1]!
    dbc0:	e1580003 	cmp	r8, r3
    dbc4:	1afffffc 	bne	dbbc <CString::ftoa(char*, double, unsigned int)+0x1bc>
    dbc8:	e0877006 	add	r7, r7, r6
    dbcc:	e28d1004 	add	r1, sp, #4
    dbd0:	e1a00007 	mov	r0, r7
    dbd4:	eb000989 	bl	10200 <strcpy>
    dbd8:	e1a00005 	mov	r0, r5
    dbdc:	e28dd010 	add	sp, sp, #16
    dbe0:	ecbd8b02 	vpop	{d8}
    dbe4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dbe8:	e1a00007 	mov	r0, r7
    dbec:	e30219f4 	movw	r1, #10740	; 0x29f4
    dbf0:	e3401005 	movt	r1, #5
    dbf4:	eb000981 	bl	10200 <strcpy>
    dbf8:	e1a00005 	mov	r0, r5
    dbfc:	e28dd010 	add	sp, sp, #16
    dc00:	ecbd8b02 	vpop	{d8}
    dc04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dc08:	ee172a90 	vmov	r2, s15
    dc0c:	e3a03001 	mov	r3, #1
    dc10:	eaffff95 	b	da6c <CString::ftoa(char*, double, unsigned int)+0x6c>
    dc14:	ee172a90 	vmov	r2, s15
    dc18:	e3a03001 	mov	r3, #1
    dc1c:	ee171a90 	vmov	r1, s15
    dc20:	eaffffcd 	b	db5c <CString::ftoa(char*, double, unsigned int)+0x15c>
    dc24:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    dc28:	eaffffbc 	b	db20 <CString::ftoa(char*, double, unsigned int)+0x120>
    dc2c:	e320f000 	nop	{0}
    dc30:	ffe00000 	.word	0xffe00000
    dc34:	41efffff 	.word	0x41efffff

0000dc38 <CString::FormatV(char const*, std::__va_list)>:
    dc38:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc3c:	e1a06000 	mov	r6, r0
    dc40:	e5900004 	ldr	r0, [r0, #4]
    dc44:	e24dd024 	sub	sp, sp, #36	; 0x24
    dc48:	e1a05001 	mov	r5, r1
    dc4c:	e3500000 	cmp	r0, #0
    dc50:	e1a09002 	mov	r9, r2
    dc54:	0a000000 	beq	dc5c <CString::FormatV(char const*, std::__va_list)+0x24>
    dc58:	ebfff1b0 	bl	a320 <operator delete[](void*)>
    dc5c:	e3a00040 	mov	r0, #64	; 0x40
    dc60:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    dc64:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    dc68:	e5860008 	str	r0, [r6, #8]
    dc6c:	e58d3004 	str	r3, [sp, #4]
    dc70:	ebfff1a8 	bl	a318 <operator new[](unsigned int)>
    dc74:	e5860004 	str	r0, [r6, #4]
    dc78:	e586000c 	str	r0, [r6, #12]
    dc7c:	e1d540d0 	ldrsb	r4, [r5]
    dc80:	e3540000 	cmp	r4, #0
    dc84:	0a00008a 	beq	deb4 <CString::FormatV(char const*, std::__va_list)+0x27c>
    dc88:	e3540025 	cmp	r4, #37	; 0x25
    dc8c:	13a01001 	movne	r1, #1
    dc90:	11a00006 	movne	r0, r6
    dc94:	1a000129 	bne	e140 <CString::FormatV(char const*, std::__va_list)+0x508>
    dc98:	e1d570d1 	ldrsb	r7, [r5, #1]
    dc9c:	e3570025 	cmp	r7, #37	; 0x25
    dca0:	0a00013c 	beq	e198 <CString::FormatV(char const*, std::__va_list)+0x560>
    dca4:	e357002d 	cmp	r7, #45	; 0x2d
    dca8:	e3a04000 	mov	r4, #0
    dcac:	12855001 	addne	r5, r5, #1
    dcb0:	13a08000 	movne	r8, #0
    dcb4:	03a08001 	moveq	r8, #1
    dcb8:	01d570d2 	ldrsbeq	r7, [r5, #2]
    dcbc:	02855002 	addeq	r5, r5, #2
    dcc0:	e3570030 	cmp	r7, #48	; 0x30
    dcc4:	03a03001 	moveq	r3, #1
    dcc8:	13a03000 	movne	r3, #0
    dccc:	058d3000 	streq	r3, [sp]
    dcd0:	01d570d1 	ldrsbeq	r7, [r5, #1]
    dcd4:	00855003 	addeq	r5, r5, r3
    dcd8:	158d3000 	strne	r3, [sp]
    dcdc:	e2473030 	sub	r3, r7, #48	; 0x30
    dce0:	e6ef3073 	uxtb	r3, r3
    dce4:	e3530009 	cmp	r3, #9
    dce8:	8a000007 	bhi	dd0c <CString::FormatV(char const*, std::__va_list)+0xd4>
    dcec:	e3a0200a 	mov	r2, #10
    dcf0:	e0247492 	mla	r4, r2, r4, r7
    dcf4:	e1f570d1 	ldrsb	r7, [r5, #1]!
    dcf8:	e2473030 	sub	r3, r7, #48	; 0x30
    dcfc:	e2444030 	sub	r4, r4, #48	; 0x30
    dd00:	e6ef3073 	uxtb	r3, r3
    dd04:	e3530009 	cmp	r3, #9
    dd08:	9afffff8 	bls	dcf0 <CString::FormatV(char const*, std::__va_list)+0xb8>
    dd0c:	e357002e 	cmp	r7, #46	; 0x2e
    dd10:	0a000110 	beq	e158 <CString::FormatV(char const*, std::__va_list)+0x520>
    dd14:	e1d500d0 	ldrsb	r0, [r5]
    dd18:	e3a01006 	mov	r1, #6
    dd1c:	e350006c 	cmp	r0, #108	; 0x6c
    dd20:	03a02001 	moveq	r2, #1
    dd24:	01d500d1 	ldrsbeq	r0, [r5, #1]
    dd28:	00855002 	addeq	r5, r5, r2
    dd2c:	e2403058 	sub	r3, r0, #88	; 0x58
    dd30:	e3530020 	cmp	r3, #32
    dd34:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    dd38:	ea0000f5 	b	e114 <CString::FormatV(char const*, std::__va_list)+0x4dc>
    dd3c:	0000e09c 	.word	0x0000e09c
    dd40:	0000e114 	.word	0x0000e114
    dd44:	0000e114 	.word	0x0000e114
    dd48:	0000e114 	.word	0x0000e114
    dd4c:	0000e114 	.word	0x0000e114
    dd50:	0000e114 	.word	0x0000e114
    dd54:	0000e114 	.word	0x0000e114
    dd58:	0000e114 	.word	0x0000e114
    dd5c:	0000e114 	.word	0x0000e114
    dd60:	0000e114 	.word	0x0000e114
    dd64:	0000e114 	.word	0x0000e114
    dd68:	0000e030 	.word	0x0000e030
    dd6c:	0000df34 	.word	0x0000df34
    dd70:	0000e114 	.word	0x0000e114
    dd74:	0000dec4 	.word	0x0000dec4
    dd78:	0000e114 	.word	0x0000e114
    dd7c:	0000e114 	.word	0x0000e114
    dd80:	0000e114 	.word	0x0000e114
    dd84:	0000e114 	.word	0x0000e114
    dd88:	0000e114 	.word	0x0000e114
    dd8c:	0000e114 	.word	0x0000e114
    dd90:	0000e114 	.word	0x0000e114
    dd94:	0000e114 	.word	0x0000e114
    dd98:	0000ddc0 	.word	0x0000ddc0
    dd9c:	0000e114 	.word	0x0000e114
    dda0:	0000e114 	.word	0x0000e114
    dda4:	0000e114 	.word	0x0000e114
    dda8:	0000e0ac 	.word	0x0000e0ac
    ddac:	0000e114 	.word	0x0000e114
    ddb0:	0000e0a4 	.word	0x0000e0a4
    ddb4:	0000e114 	.word	0x0000e114
    ddb8:	0000e114 	.word	0x0000e114
    ddbc:	0000e09c 	.word	0x0000e09c
    ddc0:	e3a0a008 	mov	sl, #8
    ddc4:	e599c000 	ldr	ip, [r9]
    ddc8:	e2899004 	add	r9, r9, #4
    ddcc:	e15c000a 	cmp	ip, sl
    ddd0:	23a03001 	movcs	r3, #1
    ddd4:	3a00016e 	bcc	e394 <CString::FormatV(char const*, std::__va_list)+0x75c>
    ddd8:	e003039a 	mul	r3, sl, r3
    dddc:	e731f31c 	udiv	r1, ip, r3
    dde0:	e15a0001 	cmp	sl, r1
    dde4:	e1a02001 	mov	r2, r1
    dde8:	9afffffa 	bls	ddd8 <CString::FormatV(char const*, std::__va_list)+0x1a0>
    ddec:	e3500058 	cmp	r0, #88	; 0x58
    ddf0:	e28d7008 	add	r7, sp, #8
    ddf4:	13a0b057 	movne	fp, #87	; 0x57
    ddf8:	03a0b037 	moveq	fp, #55	; 0x37
    ddfc:	e1a0e007 	mov	lr, r7
    de00:	ea000001 	b	de0c <CString::FormatV(char const*, std::__va_list)+0x1d4>
    de04:	e731f31c 	udiv	r1, ip, r3
    de08:	e1a02001 	mov	r2, r1
    de0c:	e06cc193 	mls	ip, r3, r1, ip
    de10:	e3520009 	cmp	r2, #9
    de14:	e733fa13 	udiv	r3, r3, sl
    de18:	e08b0002 	add	r0, fp, r2
    de1c:	e2822030 	add	r2, r2, #48	; 0x30
    de20:	e28ee001 	add	lr, lr, #1
    de24:	e6af0070 	sxtb	r0, r0
    de28:	96af0072 	sxtbls	r0, r2
    de2c:	e3530000 	cmp	r3, #0
    de30:	e54e0001 	strb	r0, [lr, #-1]
    de34:	1afffff2 	bne	de04 <CString::FormatV(char const*, std::__va_list)+0x1cc>
    de38:	e1a00007 	mov	r0, r7
    de3c:	e5ce3000 	strb	r3, [lr]
    de40:	eb0008c9 	bl	1016c <strlen>
    de44:	e3580000 	cmp	r8, #0
    de48:	e1a0a000 	mov	sl, r0
    de4c:	1a0000f4 	bne	e224 <CString::FormatV(char const*, std::__va_list)+0x5ec>
    de50:	e1500004 	cmp	r0, r4
    de54:	2a00000f 	bcs	de98 <CString::FormatV(char const*, std::__va_list)+0x260>
    de58:	e59d3000 	ldr	r3, [sp]
    de5c:	e0444000 	sub	r4, r4, r0
    de60:	e1a01004 	mov	r1, r4
    de64:	e1a00006 	mov	r0, r6
    de68:	e3530000 	cmp	r3, #0
    de6c:	03a08020 	moveq	r8, #32
    de70:	13a08030 	movne	r8, #48	; 0x30
    de74:	ebfffe1d 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    de78:	e2443001 	sub	r3, r4, #1
    de7c:	e596200c 	ldr	r2, [r6, #12]
    de80:	e2433001 	sub	r3, r3, #1
    de84:	e3730001 	cmn	r3, #1
    de88:	e2821001 	add	r1, r2, #1
    de8c:	e586100c 	str	r1, [r6, #12]
    de90:	e5c28000 	strb	r8, [r2]
    de94:	1afffff8 	bne	de7c <CString::FormatV(char const*, std::__va_list)+0x244>
    de98:	e1a01007 	mov	r1, r7
    de9c:	e1a00006 	mov	r0, r6
    dea0:	ebfffea1 	bl	d92c <CString::PutString(char const*)>
    dea4:	e2855001 	add	r5, r5, #1
    dea8:	e1d540d0 	ldrsb	r4, [r5]
    deac:	e3540000 	cmp	r4, #0
    deb0:	1affff74 	bne	dc88 <CString::FormatV(char const*, std::__va_list)+0x50>
    deb4:	e596300c 	ldr	r3, [r6, #12]
    deb8:	e5c34000 	strb	r4, [r3]
    debc:	e28dd024 	add	sp, sp, #36	; 0x24
    dec0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dec4:	e2893007 	add	r3, r9, #7
    dec8:	e28d7008 	add	r7, sp, #8
    decc:	e3c33007 	bic	r3, r3, #7
    ded0:	e1a00007 	mov	r0, r7
    ded4:	e2839008 	add	r9, r3, #8
    ded8:	ed930b00 	vldr	d0, [r3]
    dedc:	ebfffec7 	bl	da00 <CString::ftoa(char*, double, unsigned int)>
    dee0:	e1a00007 	mov	r0, r7
    dee4:	eb0008a0 	bl	1016c <strlen>
    dee8:	e3580000 	cmp	r8, #0
    deec:	e1a0a000 	mov	sl, r0
    def0:	1a000108 	bne	e318 <CString::FormatV(char const*, std::__va_list)+0x6e0>
    def4:	e1500004 	cmp	r0, r4
    def8:	2affffe6 	bcs	de98 <CString::FormatV(char const*, std::__va_list)+0x260>
    defc:	e0444000 	sub	r4, r4, r0
    df00:	e1a00006 	mov	r0, r6
    df04:	e1a01004 	mov	r1, r4
    df08:	ebfffdf8 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    df0c:	e2443001 	sub	r3, r4, #1
    df10:	e3a00020 	mov	r0, #32
    df14:	e596200c 	ldr	r2, [r6, #12]
    df18:	e2433001 	sub	r3, r3, #1
    df1c:	e3730001 	cmn	r3, #1
    df20:	e2821001 	add	r1, r2, #1
    df24:	e586100c 	str	r1, [r6, #12]
    df28:	e5c20000 	strb	r0, [r2]
    df2c:	1afffff8 	bne	df14 <CString::FormatV(char const*, std::__va_list)+0x2dc>
    df30:	eaffffd8 	b	de98 <CString::FormatV(char const*, std::__va_list)+0x260>
    df34:	e5990000 	ldr	r0, [r9]
    df38:	e2899004 	add	r9, r9, #4
    df3c:	e3500000 	cmp	r0, #0
    df40:	b2600000 	rsblt	r0, r0, #0
    df44:	b3a0b001 	movlt	fp, #1
    df48:	a3a0b000 	movge	fp, #0
    df4c:	e3500009 	cmp	r0, #9
    df50:	e1a0a00b 	mov	sl, fp
    df54:	e1a0e000 	mov	lr, r0
    df58:	c3a03001 	movgt	r3, #1
    df5c:	c3a0100a 	movgt	r1, #10
    df60:	da000108 	ble	e388 <CString::FormatV(char const*, std::__va_list)+0x750>
    df64:	e0030391 	mul	r3, r1, r3
    df68:	e732f310 	udiv	r2, r0, r3
    df6c:	e3520009 	cmp	r2, #9
    df70:	8afffffb 	bhi	df64 <CString::FormatV(char const*, std::__va_list)+0x32c>
    df74:	e28d7008 	add	r7, sp, #8
    df78:	e58d8000 	str	r8, [sp]
    df7c:	e730f310 	udiv	r0, r0, r3
    df80:	e1a0c007 	mov	ip, r7
    df84:	e59d8004 	ldr	r8, [sp, #4]
    df88:	ea000001 	b	df94 <CString::FormatV(char const*, std::__va_list)+0x35c>
    df8c:	e730f31e 	udiv	r0, lr, r3
    df90:	e1a02000 	mov	r2, r0
    df94:	e3520009 	cmp	r2, #9
    df98:	e2821057 	add	r1, r2, #87	; 0x57
    df9c:	e2822030 	add	r2, r2, #48	; 0x30
    dfa0:	e06ee093 	mls	lr, r3, r0, lr
    dfa4:	e6af1071 	sxtb	r1, r1
    dfa8:	e28cc001 	add	ip, ip, #1
    dfac:	96af1072 	sxtbls	r1, r2
    dfb0:	e0832398 	umull	r2, r3, r8, r3
    dfb4:	e1b031a3 	lsrs	r3, r3, #3
    dfb8:	e54c1001 	strb	r1, [ip, #-1]
    dfbc:	1afffff2 	bne	df8c <CString::FormatV(char const*, std::__va_list)+0x354>
    dfc0:	e59d8000 	ldr	r8, [sp]
    dfc4:	e1a00007 	mov	r0, r7
    dfc8:	e5cc3000 	strb	r3, [ip]
    dfcc:	eb000866 	bl	1016c <strlen>
    dfd0:	e3580000 	cmp	r8, #0
    dfd4:	e080b00b 	add	fp, r0, fp
    dfd8:	0a000077 	beq	e1bc <CString::FormatV(char const*, std::__va_list)+0x584>
    dfdc:	e35a0000 	cmp	sl, #0
    dfe0:	1a0000df 	bne	e364 <CString::FormatV(char const*, std::__va_list)+0x72c>
    dfe4:	e1a01007 	mov	r1, r7
    dfe8:	e1a00006 	mov	r0, r6
    dfec:	ebfffe4e 	bl	d92c <CString::PutString(char const*)>
    dff0:	e15b0004 	cmp	fp, r4
    dff4:	2affffaa 	bcs	dea4 <CString::FormatV(char const*, std::__va_list)+0x26c>
    dff8:	e044b00b 	sub	fp, r4, fp
    dffc:	e1a00006 	mov	r0, r6
    e000:	e1a0100b 	mov	r1, fp
    e004:	ebfffdb9 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e008:	e24b3001 	sub	r3, fp, #1
    e00c:	e3a00020 	mov	r0, #32
    e010:	e596200c 	ldr	r2, [r6, #12]
    e014:	e2433001 	sub	r3, r3, #1
    e018:	e3730001 	cmn	r3, #1
    e01c:	e2821001 	add	r1, r2, #1
    e020:	e586100c 	str	r1, [r6, #12]
    e024:	e5c20000 	strb	r0, [r2]
    e028:	1afffff8 	bne	e010 <CString::FormatV(char const*, std::__va_list)+0x3d8>
    e02c:	eaffff9c 	b	dea4 <CString::FormatV(char const*, std::__va_list)+0x26c>
    e030:	e3580000 	cmp	r8, #0
    e034:	e2897004 	add	r7, r9, #4
    e038:	e1d980d0 	ldrsb	r8, [r9]
    e03c:	1a00008b 	bne	e270 <CString::FormatV(char const*, std::__va_list)+0x638>
    e040:	e3540001 	cmp	r4, #1
    e044:	9a00000b 	bls	e078 <CString::FormatV(char const*, std::__va_list)+0x440>
    e048:	e2441001 	sub	r1, r4, #1
    e04c:	e1a00006 	mov	r0, r6
    e050:	ebfffda6 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e054:	e2444002 	sub	r4, r4, #2
    e058:	e3a01020 	mov	r1, #32
    e05c:	e596300c 	ldr	r3, [r6, #12]
    e060:	e2444001 	sub	r4, r4, #1
    e064:	e3740001 	cmn	r4, #1
    e068:	e2832001 	add	r2, r3, #1
    e06c:	e586200c 	str	r2, [r6, #12]
    e070:	e5c31000 	strb	r1, [r3]
    e074:	1afffff8 	bne	e05c <CString::FormatV(char const*, std::__va_list)+0x424>
    e078:	e3a01001 	mov	r1, #1
    e07c:	e1a00006 	mov	r0, r6
    e080:	ebfffd9a 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e084:	e596300c 	ldr	r3, [r6, #12]
    e088:	e1a09007 	mov	r9, r7
    e08c:	e2832001 	add	r2, r3, #1
    e090:	e586200c 	str	r2, [r6, #12]
    e094:	e5c38000 	strb	r8, [r3]
    e098:	eaffff81 	b	dea4 <CString::FormatV(char const*, std::__va_list)+0x26c>
    e09c:	e3a0a010 	mov	sl, #16
    e0a0:	eaffff47 	b	ddc4 <CString::FormatV(char const*, std::__va_list)+0x18c>
    e0a4:	e3a0a00a 	mov	sl, #10
    e0a8:	eaffff45 	b	ddc4 <CString::FormatV(char const*, std::__va_list)+0x18c>
    e0ac:	e599a000 	ldr	sl, [r9]
    e0b0:	e2899004 	add	r9, r9, #4
    e0b4:	e1a0000a 	mov	r0, sl
    e0b8:	eb00082b 	bl	1016c <strlen>
    e0bc:	e3580000 	cmp	r8, #0
    e0c0:	e1a07000 	mov	r7, r0
    e0c4:	1a000080 	bne	e2cc <CString::FormatV(char const*, std::__va_list)+0x694>
    e0c8:	e1500004 	cmp	r0, r4
    e0cc:	2a00000c 	bcs	e104 <CString::FormatV(char const*, std::__va_list)+0x4cc>
    e0d0:	e0444000 	sub	r4, r4, r0
    e0d4:	e1a00006 	mov	r0, r6
    e0d8:	e1a01004 	mov	r1, r4
    e0dc:	ebfffd83 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e0e0:	e2443001 	sub	r3, r4, #1
    e0e4:	e3a00020 	mov	r0, #32
    e0e8:	e596200c 	ldr	r2, [r6, #12]
    e0ec:	e2433001 	sub	r3, r3, #1
    e0f0:	e3730001 	cmn	r3, #1
    e0f4:	e2821001 	add	r1, r2, #1
    e0f8:	e586100c 	str	r1, [r6, #12]
    e0fc:	e5c20000 	strb	r0, [r2]
    e100:	1afffff8 	bne	e0e8 <CString::FormatV(char const*, std::__va_list)+0x4b0>
    e104:	e1a0100a 	mov	r1, sl
    e108:	e1a00006 	mov	r0, r6
    e10c:	ebfffe06 	bl	d92c <CString::PutString(char const*)>
    e110:	eaffff63 	b	dea4 <CString::FormatV(char const*, std::__va_list)+0x26c>
    e114:	e3a01001 	mov	r1, #1
    e118:	e1a00006 	mov	r0, r6
    e11c:	ebfffd73 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e120:	e596300c 	ldr	r3, [r6, #12]
    e124:	e3a01001 	mov	r1, #1
    e128:	e3a02025 	mov	r2, #37	; 0x25
    e12c:	e0830001 	add	r0, r3, r1
    e130:	e586000c 	str	r0, [r6, #12]
    e134:	e1a00006 	mov	r0, r6
    e138:	e5c32000 	strb	r2, [r3]
    e13c:	e1d540d0 	ldrsb	r4, [r5]
    e140:	ebfffd6a 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e144:	e596300c 	ldr	r3, [r6, #12]
    e148:	e2832001 	add	r2, r3, #1
    e14c:	e586200c 	str	r2, [r6, #12]
    e150:	e5c34000 	strb	r4, [r3]
    e154:	eaffff52 	b	dea4 <CString::FormatV(char const*, std::__va_list)+0x26c>
    e158:	e1d500d1 	ldrsb	r0, [r5, #1]
    e15c:	e3a01000 	mov	r1, #0
    e160:	e2855001 	add	r5, r5, #1
    e164:	e2403030 	sub	r3, r0, #48	; 0x30
    e168:	e6ef3073 	uxtb	r3, r3
    e16c:	e3530009 	cmp	r3, #9
    e170:	8afffee9 	bhi	dd1c <CString::FormatV(char const*, std::__va_list)+0xe4>
    e174:	e3a0200a 	mov	r2, #10
    e178:	e0210192 	mla	r1, r2, r1, r0
    e17c:	e1f500d1 	ldrsb	r0, [r5, #1]!
    e180:	e2403030 	sub	r3, r0, #48	; 0x30
    e184:	e2411030 	sub	r1, r1, #48	; 0x30
    e188:	e6ef3073 	uxtb	r3, r3
    e18c:	e3530009 	cmp	r3, #9
    e190:	9afffff8 	bls	e178 <CString::FormatV(char const*, std::__va_list)+0x540>
    e194:	eafffee0 	b	dd1c <CString::FormatV(char const*, std::__va_list)+0xe4>
    e198:	e3a01001 	mov	r1, #1
    e19c:	e1a00006 	mov	r0, r6
    e1a0:	ebfffd52 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e1a4:	e596300c 	ldr	r3, [r6, #12]
    e1a8:	e2855002 	add	r5, r5, #2
    e1ac:	e2832001 	add	r2, r3, #1
    e1b0:	e586200c 	str	r2, [r6, #12]
    e1b4:	e5c37000 	strb	r7, [r3]
    e1b8:	eafffeaf 	b	dc7c <CString::FormatV(char const*, std::__va_list)+0x44>
    e1bc:	e15b0004 	cmp	fp, r4
    e1c0:	2a00000c 	bcs	e1f8 <CString::FormatV(char const*, std::__va_list)+0x5c0>
    e1c4:	e044b00b 	sub	fp, r4, fp
    e1c8:	e1a00006 	mov	r0, r6
    e1cc:	e1a0100b 	mov	r1, fp
    e1d0:	ebfffd46 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e1d4:	e24b3001 	sub	r3, fp, #1
    e1d8:	e3a00020 	mov	r0, #32
    e1dc:	e596200c 	ldr	r2, [r6, #12]
    e1e0:	e2433001 	sub	r3, r3, #1
    e1e4:	e3730001 	cmn	r3, #1
    e1e8:	e2821001 	add	r1, r2, #1
    e1ec:	e586100c 	str	r1, [r6, #12]
    e1f0:	e5c20000 	strb	r0, [r2]
    e1f4:	1afffff8 	bne	e1dc <CString::FormatV(char const*, std::__va_list)+0x5a4>
    e1f8:	e35a0000 	cmp	sl, #0
    e1fc:	0affff25 	beq	de98 <CString::FormatV(char const*, std::__va_list)+0x260>
    e200:	e3a01001 	mov	r1, #1
    e204:	e1a00006 	mov	r0, r6
    e208:	ebfffd38 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e20c:	e596300c 	ldr	r3, [r6, #12]
    e210:	e3a0202d 	mov	r2, #45	; 0x2d
    e214:	e2831001 	add	r1, r3, #1
    e218:	e586100c 	str	r1, [r6, #12]
    e21c:	e5c32000 	strb	r2, [r3]
    e220:	eaffff1c 	b	de98 <CString::FormatV(char const*, std::__va_list)+0x260>
    e224:	e1a01007 	mov	r1, r7
    e228:	e1a00006 	mov	r0, r6
    e22c:	ebfffdbe 	bl	d92c <CString::PutString(char const*)>
    e230:	e15a0004 	cmp	sl, r4
    e234:	2affff1a 	bcs	dea4 <CString::FormatV(char const*, std::__va_list)+0x26c>
    e238:	e044400a 	sub	r4, r4, sl
    e23c:	e1a00006 	mov	r0, r6
    e240:	e1a01004 	mov	r1, r4
    e244:	ebfffd29 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e248:	e2443001 	sub	r3, r4, #1
    e24c:	e3a00020 	mov	r0, #32
    e250:	e596200c 	ldr	r2, [r6, #12]
    e254:	e2433001 	sub	r3, r3, #1
    e258:	e3730001 	cmn	r3, #1
    e25c:	e2821001 	add	r1, r2, #1
    e260:	e586100c 	str	r1, [r6, #12]
    e264:	e5c20000 	strb	r0, [r2]
    e268:	1afffff8 	bne	e250 <CString::FormatV(char const*, std::__va_list)+0x618>
    e26c:	eaffff0c 	b	dea4 <CString::FormatV(char const*, std::__va_list)+0x26c>
    e270:	e3a01001 	mov	r1, #1
    e274:	e1a00006 	mov	r0, r6
    e278:	ebfffd1c 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e27c:	e596300c 	ldr	r3, [r6, #12]
    e280:	e3540001 	cmp	r4, #1
    e284:	e2832001 	add	r2, r3, #1
    e288:	e586200c 	str	r2, [r6, #12]
    e28c:	e5c38000 	strb	r8, [r3]
    e290:	9a00000b 	bls	e2c4 <CString::FormatV(char const*, std::__va_list)+0x68c>
    e294:	e2441001 	sub	r1, r4, #1
    e298:	e1a00006 	mov	r0, r6
    e29c:	ebfffd13 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e2a0:	e2444002 	sub	r4, r4, #2
    e2a4:	e3a01020 	mov	r1, #32
    e2a8:	e596300c 	ldr	r3, [r6, #12]
    e2ac:	e2444001 	sub	r4, r4, #1
    e2b0:	e3740001 	cmn	r4, #1
    e2b4:	e2832001 	add	r2, r3, #1
    e2b8:	e586200c 	str	r2, [r6, #12]
    e2bc:	e5c31000 	strb	r1, [r3]
    e2c0:	1afffff8 	bne	e2a8 <CString::FormatV(char const*, std::__va_list)+0x670>
    e2c4:	e1a09007 	mov	r9, r7
    e2c8:	eafffef5 	b	dea4 <CString::FormatV(char const*, std::__va_list)+0x26c>
    e2cc:	e1a0100a 	mov	r1, sl
    e2d0:	e1a00006 	mov	r0, r6
    e2d4:	ebfffd94 	bl	d92c <CString::PutString(char const*)>
    e2d8:	e1570004 	cmp	r7, r4
    e2dc:	2afffef0 	bcs	dea4 <CString::FormatV(char const*, std::__va_list)+0x26c>
    e2e0:	e0444007 	sub	r4, r4, r7
    e2e4:	e1a00006 	mov	r0, r6
    e2e8:	e1a01004 	mov	r1, r4
    e2ec:	ebfffcff 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e2f0:	e2443001 	sub	r3, r4, #1
    e2f4:	e3a00020 	mov	r0, #32
    e2f8:	e596200c 	ldr	r2, [r6, #12]
    e2fc:	e2433001 	sub	r3, r3, #1
    e300:	e3730001 	cmn	r3, #1
    e304:	e2821001 	add	r1, r2, #1
    e308:	e586100c 	str	r1, [r6, #12]
    e30c:	e5c20000 	strb	r0, [r2]
    e310:	1afffff8 	bne	e2f8 <CString::FormatV(char const*, std::__va_list)+0x6c0>
    e314:	eafffee2 	b	dea4 <CString::FormatV(char const*, std::__va_list)+0x26c>
    e318:	e1a01007 	mov	r1, r7
    e31c:	e1a00006 	mov	r0, r6
    e320:	ebfffd81 	bl	d92c <CString::PutString(char const*)>
    e324:	e15a0004 	cmp	sl, r4
    e328:	2afffedd 	bcs	dea4 <CString::FormatV(char const*, std::__va_list)+0x26c>
    e32c:	e044400a 	sub	r4, r4, sl
    e330:	e1a00006 	mov	r0, r6
    e334:	e1a01004 	mov	r1, r4
    e338:	ebfffcec 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e33c:	e2443001 	sub	r3, r4, #1
    e340:	e3a00020 	mov	r0, #32
    e344:	e596200c 	ldr	r2, [r6, #12]
    e348:	e2433001 	sub	r3, r3, #1
    e34c:	e3730001 	cmn	r3, #1
    e350:	e2821001 	add	r1, r2, #1
    e354:	e586100c 	str	r1, [r6, #12]
    e358:	e5c20000 	strb	r0, [r2]
    e35c:	1afffff8 	bne	e344 <CString::FormatV(char const*, std::__va_list)+0x70c>
    e360:	eafffecf 	b	dea4 <CString::FormatV(char const*, std::__va_list)+0x26c>
    e364:	e3a01001 	mov	r1, #1
    e368:	e1a00006 	mov	r0, r6
    e36c:	ebfffcdf 	bl	d6f0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e370:	e596300c 	ldr	r3, [r6, #12]
    e374:	e3a0202d 	mov	r2, #45	; 0x2d
    e378:	e2831001 	add	r1, r3, #1
    e37c:	e586100c 	str	r1, [r6, #12]
    e380:	e5c32000 	strb	r2, [r3]
    e384:	eaffff16 	b	dfe4 <CString::FormatV(char const*, std::__va_list)+0x3ac>
    e388:	e1a02000 	mov	r2, r0
    e38c:	e3a03001 	mov	r3, #1
    e390:	eafffef7 	b	df74 <CString::FormatV(char const*, std::__va_list)+0x33c>
    e394:	e1a0200c 	mov	r2, ip
    e398:	e3a03001 	mov	r3, #1
    e39c:	e1a0100c 	mov	r1, ip
    e3a0:	eafffe91 	b	ddec <CString::FormatV(char const*, std::__va_list)+0x1b4>

0000e3a4 <CString::Format(char const*, ...)>:
    e3a4:	e92d000e 	push	{r1, r2, r3}
    e3a8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    e3ac:	e24dd008 	sub	sp, sp, #8
    e3b0:	e28d3010 	add	r3, sp, #16
    e3b4:	e1a02003 	mov	r2, r3
    e3b8:	e59d100c 	ldr	r1, [sp, #12]
    e3bc:	e58d3004 	str	r3, [sp, #4]
    e3c0:	ebfffe1c 	bl	dc38 <CString::FormatV(char const*, std::__va_list)>
    e3c4:	e28dd008 	add	sp, sp, #8
    e3c8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    e3cc:	e28dd00c 	add	sp, sp, #12
    e3d0:	e12fff1e 	bx	lr
    e3d4:	00000000 	andeq	r0, r0, r0

0000e3d8 <DelayLoop>:
    e3d8:	e2500001 	subs	r0, r0, #1
    e3dc:	8afffffd 	bhi	e3d8 <DelayLoop>
    e3e0:	e1a0f00e 	mov	pc, lr

0000e3e4 <CExceptionHandler::CExceptionHandler()>:
    e3e4:	e92d4070 	push	{r4, r5, r6, lr}
    e3e8:	e30351d0 	movw	r5, #12752	; 0x31d0
    e3ec:	e3405005 	movt	r5, #5
    e3f0:	e1a04000 	mov	r4, r0
    e3f4:	e5953000 	ldr	r3, [r5]
    e3f8:	e3530000 	cmp	r3, #0
    e3fc:	0a000005 	beq	e418 <CExceptionHandler::CExceptionHandler()+0x34>
    e400:	e3021a08 	movw	r1, #10760	; 0x2a08
    e404:	e3401005 	movt	r1, #5
    e408:	e30107a0 	movw	r0, #6048	; 0x17a0
    e40c:	e3400005 	movt	r0, #5
    e410:	e3a0202e 	mov	r2, #46	; 0x2e
    e414:	ebfff96b 	bl	c9c8 <assertion_failed>
    e418:	e59f1048 	ldr	r1, [pc, #72]	; e468 <CExceptionHandler::CExceptionHandler()+0x84>
    e41c:	e3a00000 	mov	r0, #0
    e420:	e59f2044 	ldr	r2, [pc, #68]	; e46c <CExceptionHandler::CExceptionHandler()+0x88>
    e424:	e59f3044 	ldr	r3, [pc, #68]	; e470 <CExceptionHandler::CExceptionHandler()+0x8c>
    e428:	e1a01141 	asr	r1, r1, #2
    e42c:	e5854000 	str	r4, [r5]
    e430:	e1a02142 	asr	r2, r2, #2
    e434:	e2411002 	sub	r1, r1, #2
    e438:	e1a03143 	asr	r3, r3, #2
    e43c:	e2422002 	sub	r2, r2, #2
    e440:	e2433002 	sub	r3, r3, #2
    e444:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    e448:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    e44c:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    e450:	e5801004 	str	r1, [r0, #4]
    e454:	e580200c 	str	r2, [r0, #12]
    e458:	e5803010 	str	r3, [r0, #16]
    e45c:	ebffefd5 	bl	a3b8 <SyncDataAndInstructionCache>
    e460:	e1a00004 	mov	r0, r4
    e464:	e8bd8070 	pop	{r4, r5, r6, pc}
    e468:	0000e638 	.word	0x0000e638
    e46c:	0000e670 	.word	0x0000e670
    e470:	0000e6ac 	.word	0x0000e6ac

0000e474 <CExceptionHandler::~CExceptionHandler()>:
    e474:	e30331d0 	movw	r3, #12752	; 0x31d0
    e478:	e3403005 	movt	r3, #5
    e47c:	e3a02000 	mov	r2, #0
    e480:	e5832000 	str	r2, [r3]
    e484:	e12fff1e 	bx	lr

0000e488 <CExceptionHandler::Throw(unsigned int)>:
    e488:	e92d4010 	push	{r4, lr}
    e48c:	e1a04001 	mov	r4, r1
    e490:	e24dd008 	sub	sp, sp, #8
    e494:	ebfffaca 	bl	cfc4 <CLogger::Get()>
    e498:	e30320f4 	movw	r2, #12532	; 0x30f4
    e49c:	e3402005 	movt	r2, #5
    e4a0:	e3023a20 	movw	r3, #10784	; 0x2a20
    e4a4:	e3403005 	movt	r3, #5
    e4a8:	e3021a00 	movw	r1, #10752	; 0x2a00
    e4ac:	e3401005 	movt	r1, #5
    e4b0:	e792c104 	ldr	ip, [r2, r4, lsl #2]
    e4b4:	e3a02000 	mov	r2, #0
    e4b8:	e58dc000 	str	ip, [sp]
    e4bc:	ebfffb9d 	bl	d338 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e4c0:	e28dd008 	add	sp, sp, #8
    e4c4:	e8bd8010 	pop	{r4, pc}

0000e4c8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    e4c8:	e3510002 	cmp	r1, #2
    e4cc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    e4d0:	e1a05001 	mov	r5, r1
    e4d4:	e24dd024 	sub	sp, sp, #36	; 0x24
    e4d8:	e1a04002 	mov	r4, r2
    e4dc:	0a000027 	beq	e580 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb8>
    e4e0:	e3510003 	cmp	r1, #3
    e4e4:	0a000022 	beq	e574 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
    e4e8:	e3a07000 	mov	r7, #0
    e4ec:	e1a08007 	mov	r8, r7
    e4f0:	e3540000 	cmp	r4, #0
    e4f4:	0a000024 	beq	e58c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
    e4f8:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    e4fc:	e3021a00 	movw	r1, #10752	; 0x2a00
    e500:	e3401005 	movt	r1, #5
    e504:	e203301f 	and	r3, r3, #31
    e508:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    e50c:	e3530012 	cmp	r3, #18
    e510:	e5949040 	ldr	r9, [r4, #64]	; 0x40
    e514:	08940240 	ldmeq	r4, {r6, r9}
    e518:	e1a00006 	mov	r0, r6
    e51c:	ebfff9b8 	bl	cc04 <debug_stacktrace(unsigned int const*, char const*)>
    e520:	ebfffaa7 	bl	cfc4 <CLogger::Get()>
    e524:	e30330f4 	movw	r3, #12532	; 0x30f4
    e528:	e3403005 	movt	r3, #5
    e52c:	e594e044 	ldr	lr, [r4, #68]	; 0x44
    e530:	e3a02000 	mov	r2, #0
    e534:	e594c048 	ldr	ip, [r4, #72]	; 0x48
    e538:	e3021a00 	movw	r1, #10752	; 0x2a00
    e53c:	e3401005 	movt	r1, #5
    e540:	e7934105 	ldr	r4, [r3, r5, lsl #2]
    e544:	e3023a3c 	movw	r3, #10812	; 0x2a3c
    e548:	e3403005 	movt	r3, #5
    e54c:	e58d9014 	str	r9, [sp, #20]
    e550:	e58d6010 	str	r6, [sp, #16]
    e554:	e58d700c 	str	r7, [sp, #12]
    e558:	e58d8008 	str	r8, [sp, #8]
    e55c:	e58d4000 	str	r4, [sp]
    e560:	e58de018 	str	lr, [sp, #24]
    e564:	e58dc004 	str	ip, [sp, #4]
    e568:	ebfffb72 	bl	d338 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e56c:	e28dd024 	add	sp, sp, #36	; 0x24
    e570:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    e574:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
    e578:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
    e57c:	eaffffdb 	b	e4f0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    e580:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
    e584:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
    e588:	eaffffd8 	b	e4f0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    e58c:	e3021a08 	movw	r1, #10760	; 0x2a08
    e590:	e3401005 	movt	r1, #5
    e594:	e3020a30 	movw	r0, #10800	; 0x2a30
    e598:	e3400005 	movt	r0, #5
    e59c:	e3a02067 	mov	r2, #103	; 0x67
    e5a0:	ebfff908 	bl	c9c8 <assertion_failed>
    e5a4:	eaffffd3 	b	e4f8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>

0000e5a8 <CExceptionHandler::Get()>:
    e5a8:	e92d4010 	push	{r4, lr}
    e5ac:	e30341d0 	movw	r4, #12752	; 0x31d0
    e5b0:	e3404005 	movt	r4, #5
    e5b4:	e5940000 	ldr	r0, [r4]
    e5b8:	e3500000 	cmp	r0, #0
    e5bc:	18bd8010 	popne	{r4, pc}
    e5c0:	e3a0207e 	mov	r2, #126	; 0x7e
    e5c4:	e3021a08 	movw	r1, #10760	; 0x2a08
    e5c8:	e3401005 	movt	r1, #5
    e5cc:	e30108ac 	movw	r0, #6316	; 0x18ac
    e5d0:	e3400005 	movt	r0, #5
    e5d4:	ebfff8fb 	bl	c9c8 <assertion_failed>
    e5d8:	e5940000 	ldr	r0, [r4]
    e5dc:	e8bd8010 	pop	{r4, pc}

0000e5e0 <ExceptionHandler>:
    e5e0:	e92d4070 	push	{r4, r5, r6, lr}
    e5e4:	e30341d0 	movw	r4, #12752	; 0x31d0
    e5e8:	e3404005 	movt	r4, #5
    e5ec:	e1a05000 	mov	r5, r0
    e5f0:	e1a06001 	mov	r6, r1
    e5f4:	e5940000 	ldr	r0, [r4]
    e5f8:	e3500000 	cmp	r0, #0
    e5fc:	0a000003 	beq	e610 <ExceptionHandler+0x30>
    e600:	e1a02006 	mov	r2, r6
    e604:	e1a01005 	mov	r1, r5
    e608:	e8bd4070 	pop	{r4, r5, r6, lr}
    e60c:	eaffffad 	b	e4c8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
    e610:	e3a0207e 	mov	r2, #126	; 0x7e
    e614:	e3021a08 	movw	r1, #10760	; 0x2a08
    e618:	e3401005 	movt	r1, #5
    e61c:	e30108ac 	movw	r0, #6316	; 0x18ac
    e620:	e3400005 	movt	r0, #5
    e624:	ebfff8e7 	bl	c9c8 <assertion_failed>
    e628:	e5940000 	ldr	r0, [r4]
    e62c:	e1a02006 	mov	r2, r6
    e630:	e1a01005 	mov	r1, r5
    e634:	e8bd4070 	pop	{r4, r5, r6, lr}
    e638:	eaffffa2 	b	e4c8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

0000e63c <UndefinedInstructionStub>:
    e63c:	e24ee004 	sub	lr, lr, #4
    e640:	e92d4000 	stmfd	sp!, {lr}
    e644:	e14fe000 	mrs	lr, SPSR
    e648:	e92d4000 	stmfd	sp!, {lr}
    e64c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e650:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e654:	e1a0100d 	mov	r1, sp
    e658:	f1020012 	cps	#18
    e65c:	e1a0200d 	mov	r2, sp
    e660:	e1a0300e 	mov	r3, lr
    e664:	f102001f 	cps	#31
    e668:	e1a0d001 	mov	sp, r1
    e66c:	e92d000c 	push	{r2, r3}
    e670:	e1a0100d 	mov	r1, sp
    e674:	e3a00001 	mov	r0, #1
    e678:	eaffffd8 	b	e5e0 <ExceptionHandler>

0000e67c <PrefetchAbortStub>:
    e67c:	e24ee004 	sub	lr, lr, #4
    e680:	e92d4000 	stmfd	sp!, {lr}
    e684:	e14fe000 	mrs	lr, SPSR
    e688:	e92d4000 	stmfd	sp!, {lr}
    e68c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e690:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e694:	e1a0100d 	mov	r1, sp
    e698:	f1020012 	cps	#18
    e69c:	e1a0200d 	mov	r2, sp
    e6a0:	e1a0300e 	mov	r3, lr
    e6a4:	f102001f 	cps	#31
    e6a8:	e1a0d001 	mov	sp, r1
    e6ac:	e92d000c 	push	{r2, r3}
    e6b0:	e1a0100d 	mov	r1, sp
    e6b4:	e3a00002 	mov	r0, #2
    e6b8:	eaffffc8 	b	e5e0 <ExceptionHandler>

0000e6bc <DataAbortStub>:
    e6bc:	e24ee008 	sub	lr, lr, #8
    e6c0:	e92d4000 	stmfd	sp!, {lr}
    e6c4:	e14fe000 	mrs	lr, SPSR
    e6c8:	e92d4000 	stmfd	sp!, {lr}
    e6cc:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e6d0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e6d4:	e1a0100d 	mov	r1, sp
    e6d8:	f1020012 	cps	#18
    e6dc:	e1a0200d 	mov	r2, sp
    e6e0:	e1a0300e 	mov	r3, lr
    e6e4:	f102001f 	cps	#31
    e6e8:	e1a0d001 	mov	sp, r1
    e6ec:	e92d000c 	push	{r2, r3}
    e6f0:	e1a0100d 	mov	r1, sp
    e6f4:	e3a00003 	mov	r0, #3
    e6f8:	eaffffb8 	b	e5e0 <ExceptionHandler>

0000e6fc <IRQStub>:
    e6fc:	e24ee004 	sub	lr, lr, #4
    e700:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e704:	eb0000f2 	bl	ead4 <InterruptHandler>
    e708:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000e70c <CInterruptSystem::CInterruptSystem()>:
    e70c:	e2802f47 	add	r2, r0, #284	; 0x11c
    e710:	e1a0c000 	mov	ip, r0
    e714:	e2403004 	sub	r3, r0, #4
    e718:	e3a01000 	mov	r1, #0
    e71c:	e1a00002 	mov	r0, r2
    e720:	e5a31004 	str	r1, [r3, #4]!
    e724:	e5a21004 	str	r1, [r2, #4]!
    e728:	e1530000 	cmp	r3, r0
    e72c:	1afffffb 	bne	e720 <CInterruptSystem::CInterruptSystem()+0x14>
    e730:	e30331d4 	movw	r3, #12756	; 0x31d4
    e734:	e3403005 	movt	r3, #5
    e738:	e1a0000c 	mov	r0, ip
    e73c:	e583c000 	str	ip, [r3]
    e740:	e12fff1e 	bx	lr

0000e744 <CInterruptSystem::~CInterruptSystem()>:
    e744:	e30331d4 	movw	r3, #12756	; 0x31d4
    e748:	e3403005 	movt	r3, #5
    e74c:	e3a02000 	mov	r2, #0
    e750:	e5832000 	str	r2, [r3]
    e754:	e12fff1e 	bx	lr

0000e758 <CInterruptSystem::Initialize()>:
    e758:	e59f3040 	ldr	r3, [pc, #64]	; e7a0 <CInterruptSystem::Initialize()+0x48>
    e75c:	e92d4010 	push	{r4, lr}
    e760:	e3a04000 	mov	r4, #0
    e764:	e1a03143 	asr	r3, r3, #2
    e768:	e2433002 	sub	r3, r3, #2
    e76c:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    e770:	e5843018 	str	r3, [r4, #24]
    e774:	ebffef0f 	bl	a3b8 <SyncDataAndInstructionCache>
    e778:	e3a03a0b 	mov	r3, #45056	; 0xb000
    e77c:	e3433f00 	movt	r3, #16128	; 0x3f00
    e780:	e3e02000 	mvn	r2, #0
    e784:	e583420c 	str	r4, [r3, #524]	; 0x20c
    e788:	e583221c 	str	r2, [r3, #540]	; 0x21c
    e78c:	e5832220 	str	r2, [r3, #544]	; 0x220
    e790:	e5832224 	str	r2, [r3, #548]	; 0x224
    e794:	f1080080 	cpsie	i
    e798:	e3a00001 	mov	r0, #1
    e79c:	e8bd8010 	pop	{r4, pc}
    e7a0:	0000e6e4 	.word	0x0000e6e4

0000e7a4 <CInterruptSystem::EnableIRQ(unsigned int)>:
    e7a4:	e3500047 	cmp	r0, #71	; 0x47
    e7a8:	e92d4010 	push	{r4, lr}
    e7ac:	e1a04000 	mov	r4, r0
    e7b0:	8a00000e 	bhi	e7f0 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
    e7b4:	e350001f 	cmp	r0, #31
    e7b8:	930b2210 	movwls	r2, #45584	; 0xb210
    e7bc:	93432f00 	movtls	r2, #16128	; 0x3f00
    e7c0:	8a000004 	bhi	e7d8 <CInterruptSystem::EnableIRQ(unsigned int)+0x34>
    e7c4:	e204401f 	and	r4, r4, #31
    e7c8:	e3a03001 	mov	r3, #1
    e7cc:	e1a04413 	lsl	r4, r3, r4
    e7d0:	e5824000 	str	r4, [r2]
    e7d4:	e8bd8010 	pop	{r4, pc}
    e7d8:	e350003f 	cmp	r0, #63	; 0x3f
    e7dc:	930b2214 	movwls	r2, #45588	; 0xb214
    e7e0:	93432f00 	movtls	r2, #16128	; 0x3f00
    e7e4:	830b2218 	movwhi	r2, #45592	; 0xb218
    e7e8:	83432f00 	movthi	r2, #16128	; 0x3f00
    e7ec:	eafffff4 	b	e7c4 <CInterruptSystem::EnableIRQ(unsigned int)+0x20>
    e7f0:	e3a02074 	mov	r2, #116	; 0x74
    e7f4:	e3021ac4 	movw	r1, #10948	; 0x2ac4
    e7f8:	e3401005 	movt	r1, #5
    e7fc:	e3020ad4 	movw	r0, #10964	; 0x2ad4
    e800:	e3400005 	movt	r0, #5
    e804:	ebfff86f 	bl	c9c8 <assertion_failed>
    e808:	e30b2218 	movw	r2, #45592	; 0xb218
    e80c:	e3432f00 	movt	r2, #16128	; 0x3f00
    e810:	eaffffeb 	b	e7c4 <CInterruptSystem::EnableIRQ(unsigned int)+0x20>

0000e814 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    e814:	e3510047 	cmp	r1, #71	; 0x47
    e818:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e81c:	e1a04001 	mov	r4, r1
    e820:	e1a05000 	mov	r5, r0
    e824:	e1a08002 	mov	r8, r2
    e828:	e1a07003 	mov	r7, r3
    e82c:	8a00000e 	bhi	e86c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
    e830:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e834:	e0856104 	add	r6, r5, r4, lsl #2
    e838:	e3530000 	cmp	r3, #0
    e83c:	0a000005 	beq	e858 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x44>
    e840:	e3021ac4 	movw	r1, #10948	; 0x2ac4
    e844:	e3401005 	movt	r1, #5
    e848:	e3020ae8 	movw	r0, #10984	; 0x2ae8
    e84c:	e3400005 	movt	r0, #5
    e850:	e3a0205d 	mov	r2, #93	; 0x5d
    e854:	ebfff85b 	bl	c9c8 <assertion_failed>
    e858:	e7858104 	str	r8, [r5, r4, lsl #2]
    e85c:	e1a00004 	mov	r0, r4
    e860:	e5867120 	str	r7, [r6, #288]	; 0x120
    e864:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    e868:	eaffffcd 	b	e7a4 <CInterruptSystem::EnableIRQ(unsigned int)>
    e86c:	e3021ac4 	movw	r1, #10948	; 0x2ac4
    e870:	e3401005 	movt	r1, #5
    e874:	e3020ad4 	movw	r0, #10964	; 0x2ad4
    e878:	e3400005 	movt	r0, #5
    e87c:	e3a0205c 	mov	r2, #92	; 0x5c
    e880:	ebfff850 	bl	c9c8 <assertion_failed>
    e884:	eaffffe9 	b	e830 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>

0000e888 <CInterruptSystem::DisableIRQ(unsigned int)>:
    e888:	e3500047 	cmp	r0, #71	; 0x47
    e88c:	e92d4010 	push	{r4, lr}
    e890:	e1a04000 	mov	r4, r0
    e894:	8a00000e 	bhi	e8d4 <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
    e898:	e350001f 	cmp	r0, #31
    e89c:	930b221c 	movwls	r2, #45596	; 0xb21c
    e8a0:	93432f00 	movtls	r2, #16128	; 0x3f00
    e8a4:	8a000004 	bhi	e8bc <CInterruptSystem::DisableIRQ(unsigned int)+0x34>
    e8a8:	e204401f 	and	r4, r4, #31
    e8ac:	e3a03001 	mov	r3, #1
    e8b0:	e1a04413 	lsl	r4, r3, r4
    e8b4:	e5824000 	str	r4, [r2]
    e8b8:	e8bd8010 	pop	{r4, pc}
    e8bc:	e350003f 	cmp	r0, #63	; 0x3f
    e8c0:	930b2220 	movwls	r2, #45600	; 0xb220
    e8c4:	93432f00 	movtls	r2, #16128	; 0x3f00
    e8c8:	830b2224 	movwhi	r2, #45604	; 0xb224
    e8cc:	83432f00 	movthi	r2, #16128	; 0x3f00
    e8d0:	eafffff4 	b	e8a8 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>
    e8d4:	e3a0207f 	mov	r2, #127	; 0x7f
    e8d8:	e3021ac4 	movw	r1, #10948	; 0x2ac4
    e8dc:	e3401005 	movt	r1, #5
    e8e0:	e3020ad4 	movw	r0, #10964	; 0x2ad4
    e8e4:	e3400005 	movt	r0, #5
    e8e8:	ebfff836 	bl	c9c8 <assertion_failed>
    e8ec:	e30b2224 	movw	r2, #45604	; 0xb224
    e8f0:	e3432f00 	movt	r2, #16128	; 0x3f00
    e8f4:	eaffffeb 	b	e8a8 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>

0000e8f8 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    e8f8:	e3510047 	cmp	r1, #71	; 0x47
    e8fc:	e92d4070 	push	{r4, r5, r6, lr}
    e900:	e1a04001 	mov	r4, r1
    e904:	e1a05000 	mov	r5, r0
    e908:	8a000009 	bhi	e934 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    e90c:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e910:	e0856104 	add	r6, r5, r4, lsl #2
    e914:	e3530000 	cmp	r3, #0
    e918:	0a00000f 	beq	e95c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
    e91c:	e1a00004 	mov	r0, r4
    e920:	ebffffd8 	bl	e888 <CInterruptSystem::DisableIRQ(unsigned int)>
    e924:	e3a03000 	mov	r3, #0
    e928:	e7853104 	str	r3, [r5, r4, lsl #2]
    e92c:	e5863120 	str	r3, [r6, #288]	; 0x120
    e930:	e8bd8070 	pop	{r4, r5, r6, pc}
    e934:	e3021ac4 	movw	r1, #10948	; 0x2ac4
    e938:	e3401005 	movt	r1, #5
    e93c:	e3020ad4 	movw	r0, #10964	; 0x2ad4
    e940:	e3400005 	movt	r0, #5
    e944:	e3a02067 	mov	r2, #103	; 0x67
    e948:	e0856104 	add	r6, r5, r4, lsl #2
    e94c:	ebfff81d 	bl	c9c8 <assertion_failed>
    e950:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e954:	e3530000 	cmp	r3, #0
    e958:	1affffef 	bne	e91c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    e95c:	e3021ac4 	movw	r1, #10948	; 0x2ac4
    e960:	e3401005 	movt	r1, #5
    e964:	e3020b04 	movw	r0, #11012	; 0x2b04
    e968:	e3400005 	movt	r0, #5
    e96c:	e3a02068 	mov	r2, #104	; 0x68
    e970:	ebfff814 	bl	c9c8 <assertion_failed>
    e974:	eaffffe8 	b	e91c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>

0000e978 <CInterruptSystem::Get()>:
    e978:	e92d4010 	push	{r4, lr}
    e97c:	e30341d4 	movw	r4, #12756	; 0x31d4
    e980:	e3404005 	movt	r4, #5
    e984:	e5940000 	ldr	r0, [r4]
    e988:	e3500000 	cmp	r0, #0
    e98c:	18bd8010 	popne	{r4, pc}
    e990:	e3a02088 	mov	r2, #136	; 0x88
    e994:	e3021ac4 	movw	r1, #10948	; 0x2ac4
    e998:	e3401005 	movt	r1, #5
    e99c:	e30108ac 	movw	r0, #6316	; 0x18ac
    e9a0:	e3400005 	movt	r0, #5
    e9a4:	ebfff807 	bl	c9c8 <assertion_failed>
    e9a8:	e5940000 	ldr	r0, [r4]
    e9ac:	e8bd8010 	pop	{r4, pc}

0000e9b0 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    e9b0:	e3510047 	cmp	r1, #71	; 0x47
    e9b4:	e92d4070 	push	{r4, r5, r6, lr}
    e9b8:	e1a06001 	mov	r6, r1
    e9bc:	e1a05000 	mov	r5, r0
    e9c0:	8a000007 	bhi	e9e4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    e9c4:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    e9c8:	e0855106 	add	r5, r5, r6, lsl #2
    e9cc:	e3540000 	cmp	r4, #0
    e9d0:	0a00000d 	beq	ea0c <CInterruptSystem::CallIRQHandler(unsigned int)+0x5c>
    e9d4:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    e9d8:	e12fff34 	blx	r4
    e9dc:	e3a00001 	mov	r0, #1
    e9e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e9e4:	e3021ac4 	movw	r1, #10948	; 0x2ac4
    e9e8:	e3401005 	movt	r1, #5
    e9ec:	e3020ad4 	movw	r0, #10964	; 0x2ad4
    e9f0:	e3400005 	movt	r0, #5
    e9f4:	e3a0208e 	mov	r2, #142	; 0x8e
    e9f8:	ebfff7f2 	bl	c9c8 <assertion_failed>
    e9fc:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    ea00:	e0855106 	add	r5, r5, r6, lsl #2
    ea04:	e3540000 	cmp	r4, #0
    ea08:	1afffff1 	bne	e9d4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    ea0c:	e1a00006 	mov	r0, r6
    ea10:	ebffff9c 	bl	e888 <CInterruptSystem::DisableIRQ(unsigned int)>
    ea14:	e1a00004 	mov	r0, r4
    ea18:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ea1c <CInterruptSystem::InterruptHandler()>:
    ea1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ea20:	e30361d4 	movw	r6, #12756	; 0x31d4
    ea24:	e3406005 	movt	r6, #5
    ea28:	e24dd010 	sub	sp, sp, #16
    ea2c:	e5963000 	ldr	r3, [r6]
    ea30:	e3530000 	cmp	r3, #0
    ea34:	0a00001f 	beq	eab8 <CInterruptSystem::InterruptHandler()+0x9c>
    ea38:	e3a03a0b 	mov	r3, #45056	; 0xb000
    ea3c:	e3433f00 	movt	r3, #16128	; 0x3f00
    ea40:	e28d8008 	add	r8, sp, #8
    ea44:	e3a07000 	mov	r7, #0
    ea48:	e5934204 	ldr	r4, [r3, #516]	; 0x204
    ea4c:	e58d4004 	str	r4, [sp, #4]
    ea50:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    ea54:	e58d2008 	str	r2, [sp, #8]
    ea58:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    ea5c:	e6ef3073 	uxtb	r3, r3
    ea60:	e58d300c 	str	r3, [sp, #12]
    ea64:	e3540000 	cmp	r4, #0
    ea68:	0a00000d 	beq	eaa4 <CInterruptSystem::InterruptHandler()+0x88>
    ea6c:	e1a05007 	mov	r5, r7
    ea70:	ea000002 	b	ea80 <CInterruptSystem::InterruptHandler()+0x64>
    ea74:	e1b040a4 	lsrs	r4, r4, #1
    ea78:	e2855001 	add	r5, r5, #1
    ea7c:	0a000008 	beq	eaa4 <CInterruptSystem::InterruptHandler()+0x88>
    ea80:	e3140001 	tst	r4, #1
    ea84:	0afffffa 	beq	ea74 <CInterruptSystem::InterruptHandler()+0x58>
    ea88:	e1a01005 	mov	r1, r5
    ea8c:	e5960000 	ldr	r0, [r6]
    ea90:	ebffffc6 	bl	e9b0 <CInterruptSystem::CallIRQHandler(unsigned int)>
    ea94:	e3500000 	cmp	r0, #0
    ea98:	0afffff5 	beq	ea74 <CInterruptSystem::InterruptHandler()+0x58>
    ea9c:	e28dd010 	add	sp, sp, #16
    eaa0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    eaa4:	e2877020 	add	r7, r7, #32
    eaa8:	e3570060 	cmp	r7, #96	; 0x60
    eaac:	0afffffa 	beq	ea9c <CInterruptSystem::InterruptHandler()+0x80>
    eab0:	e4984004 	ldr	r4, [r8], #4
    eab4:	eaffffea 	b	ea64 <CInterruptSystem::InterruptHandler()+0x48>
    eab8:	e3021ac4 	movw	r1, #10948	; 0x2ac4
    eabc:	e3401005 	movt	r1, #5
    eac0:	e30108ac 	movw	r0, #6316	; 0x18ac
    eac4:	e3400005 	movt	r0, #5
    eac8:	e3a020a1 	mov	r2, #161	; 0xa1
    eacc:	ebfff7bd 	bl	c9c8 <assertion_failed>
    ead0:	eaffffd8 	b	ea38 <CInterruptSystem::InterruptHandler()+0x1c>

0000ead4 <InterruptHandler>:
    ead4:	eaffffd0 	b	ea1c <CInterruptSystem::InterruptHandler()>

0000ead8 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    ead8:	e1a03000 	mov	r3, r0
    eadc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    eae0:	e3a0e000 	mov	lr, #0
    eae4:	e1a0c00e 	mov	ip, lr
    eae8:	e28020dc 	add	r2, r0, #220	; 0xdc
    eaec:	e5801000 	str	r1, [r0]
    eaf0:	e5a3e004 	str	lr, [r3, #4]!
    eaf4:	e5a3c004 	str	ip, [r3, #4]!
    eaf8:	e1530002 	cmp	r3, r2
    eafc:	1afffffc 	bne	eaf4 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    eb00:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000eb04 <CGPIOManager::~CGPIOManager()>:
    eb04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    eb08:	e3026b20 	movw	r6, #11040	; 0x2b20
    eb0c:	e3406005 	movt	r6, #5
    eb10:	e3025b30 	movw	r5, #11056	; 0x2b30
    eb14:	e3405005 	movt	r5, #5
    eb18:	e1a08000 	mov	r8, r0
    eb1c:	e2804004 	add	r4, r0, #4
    eb20:	e28070dc 	add	r7, r0, #220	; 0xdc
    eb24:	e5b43004 	ldr	r3, [r4, #4]!
    eb28:	e3a0202c 	mov	r2, #44	; 0x2c
    eb2c:	e1a01006 	mov	r1, r6
    eb30:	e1a00005 	mov	r0, r5
    eb34:	e3530000 	cmp	r3, #0
    eb38:	0a000000 	beq	eb40 <CGPIOManager::~CGPIOManager()+0x3c>
    eb3c:	ebfff7a1 	bl	c9c8 <assertion_failed>
    eb40:	e1540007 	cmp	r4, r7
    eb44:	1afffff6 	bne	eb24 <CGPIOManager::~CGPIOManager()+0x20>
    eb48:	e5983004 	ldr	r3, [r8, #4]
    eb4c:	e3530000 	cmp	r3, #0
    eb50:	0a000004 	beq	eb68 <CGPIOManager::~CGPIOManager()+0x64>
    eb54:	e5980000 	ldr	r0, [r8]
    eb58:	e3500000 	cmp	r0, #0
    eb5c:	0a000003 	beq	eb70 <CGPIOManager::~CGPIOManager()+0x6c>
    eb60:	e3a01034 	mov	r1, #52	; 0x34
    eb64:	ebffff63 	bl	e8f8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    eb68:	e1a00008 	mov	r0, r8
    eb6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    eb70:	e3021b20 	movw	r1, #11040	; 0x2b20
    eb74:	e3401005 	movt	r1, #5
    eb78:	e3020b44 	movw	r0, #11076	; 0x2b44
    eb7c:	e3400005 	movt	r0, #5
    eb80:	e3a02032 	mov	r2, #50	; 0x32
    eb84:	ebfff78f 	bl	c9c8 <assertion_failed>
    eb88:	e5980000 	ldr	r0, [r8]
    eb8c:	eafffff3 	b	eb60 <CGPIOManager::~CGPIOManager()+0x5c>

0000eb90 <CGPIOManager::Initialize()>:
    eb90:	e5903004 	ldr	r3, [r0, #4]
    eb94:	e92d4010 	push	{r4, lr}
    eb98:	e1a04000 	mov	r4, r0
    eb9c:	e3530000 	cmp	r3, #0
    eba0:	1a00000a 	bne	ebd0 <CGPIOManager::Initialize()+0x40>
    eba4:	e5940000 	ldr	r0, [r4]
    eba8:	e3500000 	cmp	r0, #0
    ebac:	0a000010 	beq	ebf4 <CGPIOManager::Initialize()+0x64>
    ebb0:	e1a03004 	mov	r3, r4
    ebb4:	e3a01034 	mov	r1, #52	; 0x34
    ebb8:	e30e2e34 	movw	r2, #60980	; 0xee34
    ebbc:	e3402000 	movt	r2, #0
    ebc0:	ebffff13 	bl	e814 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    ebc4:	e3a00001 	mov	r0, #1
    ebc8:	e5840004 	str	r0, [r4, #4]
    ebcc:	e8bd8010 	pop	{r4, pc}
    ebd0:	e3021b20 	movw	r1, #11040	; 0x2b20
    ebd4:	e3401005 	movt	r1, #5
    ebd8:	e3020b58 	movw	r0, #11096	; 0x2b58
    ebdc:	e3400005 	movt	r0, #5
    ebe0:	e3a0203b 	mov	r2, #59	; 0x3b
    ebe4:	ebfff777 	bl	c9c8 <assertion_failed>
    ebe8:	e5940000 	ldr	r0, [r4]
    ebec:	e3500000 	cmp	r0, #0
    ebf0:	1affffee 	bne	ebb0 <CGPIOManager::Initialize()+0x20>
    ebf4:	e3021b20 	movw	r1, #11040	; 0x2b20
    ebf8:	e3401005 	movt	r1, #5
    ebfc:	e3020b44 	movw	r0, #11076	; 0x2b44
    ec00:	e3400005 	movt	r0, #5
    ec04:	e3a0203c 	mov	r2, #60	; 0x3c
    ec08:	ebfff76e 	bl	c9c8 <assertion_failed>
    ec0c:	e5940000 	ldr	r0, [r4]
    ec10:	eaffffe6 	b	ebb0 <CGPIOManager::Initialize()+0x20>

0000ec14 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    ec14:	e5903004 	ldr	r3, [r0, #4]
    ec18:	e92d4070 	push	{r4, r5, r6, lr}
    ec1c:	e1a04000 	mov	r4, r0
    ec20:	e3530000 	cmp	r3, #0
    ec24:	e1a05001 	mov	r5, r1
    ec28:	0a000010 	beq	ec70 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
    ec2c:	e3550000 	cmp	r5, #0
    ec30:	0a00001c 	beq	eca8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    ec34:	e5956004 	ldr	r6, [r5, #4]
    ec38:	e3560035 	cmp	r6, #53	; 0x35
    ec3c:	8a000012 	bhi	ec8c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x78>
    ec40:	e0844106 	add	r4, r4, r6, lsl #2
    ec44:	e5943008 	ldr	r3, [r4, #8]
    ec48:	e3530000 	cmp	r3, #0
    ec4c:	0a000005 	beq	ec68 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
    ec50:	e3021b20 	movw	r1, #11040	; 0x2b20
    ec54:	e3401005 	movt	r1, #5
    ec58:	e3020b30 	movw	r0, #11056	; 0x2b30
    ec5c:	e3400005 	movt	r0, #5
    ec60:	e3a0204b 	mov	r2, #75	; 0x4b
    ec64:	ebfff757 	bl	c9c8 <assertion_failed>
    ec68:	e5845008 	str	r5, [r4, #8]
    ec6c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ec70:	e3021b20 	movw	r1, #11040	; 0x2b20
    ec74:	e3401005 	movt	r1, #5
    ec78:	e3020b6c 	movw	r0, #11116	; 0x2b6c
    ec7c:	e3400005 	movt	r0, #5
    ec80:	e3a02045 	mov	r2, #69	; 0x45
    ec84:	ebfff74f 	bl	c9c8 <assertion_failed>
    ec88:	eaffffe7 	b	ec2c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
    ec8c:	e3021b20 	movw	r1, #11040	; 0x2b20
    ec90:	e3401005 	movt	r1, #5
    ec94:	e301068c 	movw	r0, #5772	; 0x168c
    ec98:	e3400005 	movt	r0, #5
    ec9c:	e3a02049 	mov	r2, #73	; 0x49
    eca0:	ebfff748 	bl	c9c8 <assertion_failed>
    eca4:	eaffffe5 	b	ec40 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
    eca8:	e3021b20 	movw	r1, #11040	; 0x2b20
    ecac:	e3401005 	movt	r1, #5
    ecb0:	e3020b7c 	movw	r0, #11132	; 0x2b7c
    ecb4:	e3400005 	movt	r0, #5
    ecb8:	e3a02047 	mov	r2, #71	; 0x47
    ecbc:	ebfff741 	bl	c9c8 <assertion_failed>
    ecc0:	eaffffdb 	b	ec34 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>

0000ecc4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    ecc4:	e5903004 	ldr	r3, [r0, #4]
    ecc8:	e92d4070 	push	{r4, r5, r6, lr}
    eccc:	e1a04000 	mov	r4, r0
    ecd0:	e3530000 	cmp	r3, #0
    ecd4:	e1a05001 	mov	r5, r1
    ecd8:	0a00000b 	beq	ed0c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
    ecdc:	e3550000 	cmp	r5, #0
    ece0:	0a000021 	beq	ed6c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    ece4:	e5955004 	ldr	r5, [r5, #4]
    ece8:	e3550035 	cmp	r5, #53	; 0x35
    ecec:	8a00000d 	bhi	ed28 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x64>
    ecf0:	e0844105 	add	r4, r4, r5, lsl #2
    ecf4:	e5943008 	ldr	r3, [r4, #8]
    ecf8:	e3530000 	cmp	r3, #0
    ecfc:	0a000013 	beq	ed50 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
    ed00:	e3a03000 	mov	r3, #0
    ed04:	e5843008 	str	r3, [r4, #8]
    ed08:	e8bd8070 	pop	{r4, r5, r6, pc}
    ed0c:	e3021b20 	movw	r1, #11040	; 0x2b20
    ed10:	e3401005 	movt	r1, #5
    ed14:	e3020b6c 	movw	r0, #11116	; 0x2b6c
    ed18:	e3400005 	movt	r0, #5
    ed1c:	e3a02052 	mov	r2, #82	; 0x52
    ed20:	ebfff728 	bl	c9c8 <assertion_failed>
    ed24:	eaffffec 	b	ecdc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
    ed28:	e0844105 	add	r4, r4, r5, lsl #2
    ed2c:	e3021b20 	movw	r1, #11040	; 0x2b20
    ed30:	e3401005 	movt	r1, #5
    ed34:	e301068c 	movw	r0, #5772	; 0x168c
    ed38:	e3400005 	movt	r0, #5
    ed3c:	e3a02056 	mov	r2, #86	; 0x56
    ed40:	ebfff720 	bl	c9c8 <assertion_failed>
    ed44:	e5943008 	ldr	r3, [r4, #8]
    ed48:	e3530000 	cmp	r3, #0
    ed4c:	1affffeb 	bne	ed00 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    ed50:	e3021b20 	movw	r1, #11040	; 0x2b20
    ed54:	e3401005 	movt	r1, #5
    ed58:	e3020b88 	movw	r0, #11144	; 0x2b88
    ed5c:	e3400005 	movt	r0, #5
    ed60:	e3a02058 	mov	r2, #88	; 0x58
    ed64:	ebfff717 	bl	c9c8 <assertion_failed>
    ed68:	eaffffe4 	b	ed00 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    ed6c:	e3021b20 	movw	r1, #11040	; 0x2b20
    ed70:	e3401005 	movt	r1, #5
    ed74:	e3020b7c 	movw	r0, #11132	; 0x2b7c
    ed78:	e3400005 	movt	r0, #5
    ed7c:	e3a02054 	mov	r2, #84	; 0x54
    ed80:	ebfff710 	bl	c9c8 <assertion_failed>
    ed84:	eaffffd6 	b	ece4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>

0000ed88 <CGPIOManager::InterruptHandler()>:
    ed88:	e5903004 	ldr	r3, [r0, #4]
    ed8c:	e92d4070 	push	{r4, r5, r6, lr}
    ed90:	e1a06000 	mov	r6, r0
    ed94:	e3530000 	cmp	r3, #0
    ed98:	0a00001b 	beq	ee0c <CGPIOManager::InterruptHandler()+0x84>
    ed9c:	e3a03000 	mov	r3, #0
    eda0:	e3433f20 	movt	r3, #16160	; 0x3f20
    eda4:	e1a02003 	mov	r2, r3
    eda8:	e3a04000 	mov	r4, #0
    edac:	e5933040 	ldr	r3, [r3, #64]	; 0x40
    edb0:	ea000004 	b	edc8 <CGPIOManager::InterruptHandler()+0x40>
    edb4:	e2844001 	add	r4, r4, #1
    edb8:	e314001f 	tst	r4, #31
    edbc:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    edc0:	e3540036 	cmp	r4, #54	; 0x36
    edc4:	08bd8070 	popeq	{r4, r5, r6, pc}
    edc8:	e3130001 	tst	r3, #1
    edcc:	e1a030a3 	lsr	r3, r3, #1
    edd0:	0afffff7 	beq	edb4 <CGPIOManager::InterruptHandler()+0x2c>
    edd4:	e2843002 	add	r3, r4, #2
    edd8:	e204501f 	and	r5, r4, #31
    eddc:	e3a02001 	mov	r2, #1
    ede0:	e7960103 	ldr	r0, [r6, r3, lsl #2]
    ede4:	e1a05512 	lsl	r5, r2, r5
    ede8:	e3500000 	cmp	r0, #0
    edec:	0a00000d 	beq	ee28 <CGPIOManager::InterruptHandler()+0xa0>
    edf0:	ebffec4c 	bl	9f28 <CGPIOPin::InterruptHandler()>
    edf4:	e3a03010 	mov	r3, #16
    edf8:	e3403fc8 	movt	r3, #4040	; 0xfc8
    edfc:	e08332a4 	add	r3, r3, r4, lsr #5
    ee00:	e1a03103 	lsl	r3, r3, #2
    ee04:	e5835000 	str	r5, [r3]
    ee08:	e8bd8070 	pop	{r4, r5, r6, pc}
    ee0c:	e3021b20 	movw	r1, #11040	; 0x2b20
    ee10:	e3401005 	movt	r1, #5
    ee14:	e3020b6c 	movw	r0, #11116	; 0x2b6c
    ee18:	e3400005 	movt	r0, #5
    ee1c:	e3a0205e 	mov	r2, #94	; 0x5e
    ee20:	ebfff6e8 	bl	c9c8 <assertion_failed>
    ee24:	eaffffdc 	b	ed9c <CGPIOManager::InterruptHandler()+0x14>
    ee28:	e1a00004 	mov	r0, r4
    ee2c:	ebffec69 	bl	9fd8 <CGPIOPin::DisableAllInterrupts(unsigned int)>
    ee30:	eaffffef 	b	edf4 <CGPIOManager::InterruptHandler()+0x6c>

0000ee34 <CGPIOManager::InterruptStub(void*)>:
    ee34:	e92d4010 	push	{r4, lr}
    ee38:	e2504000 	subs	r4, r0, #0
    ee3c:	0a000002 	beq	ee4c <CGPIOManager::InterruptStub(void*)+0x18>
    ee40:	e1a00004 	mov	r0, r4
    ee44:	e8bd4010 	pop	{r4, lr}
    ee48:	eaffffce 	b	ed88 <CGPIOManager::InterruptHandler()>
    ee4c:	e3021b20 	movw	r1, #11040	; 0x2b20
    ee50:	e3401005 	movt	r1, #5
    ee54:	e3020b9c 	movw	r0, #11164	; 0x2b9c
    ee58:	e3400005 	movt	r0, #5
    ee5c:	e3a0208a 	mov	r2, #138	; 0x8a
    ee60:	ebfff6d8 	bl	c9c8 <assertion_failed>
    ee64:	e1a00004 	mov	r0, r4
    ee68:	e8bd4010 	pop	{r4, lr}
    ee6c:	eaffffc5 	b	ed88 <CGPIOManager::InterruptHandler()>

0000ee70 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    ee70:	e12fff1e 	bx	lr

0000ee74 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    ee74:	e92d4010 	push	{r4, lr}
    ee78:	e1a04000 	mov	r4, r0
    ee7c:	ebffed26 	bl	a31c <operator delete(void*)>
    ee80:	e1a00004 	mov	r0, r4
    ee84:	e8bd8010 	pop	{r4, pc}

0000ee88 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
    ee88:	e92d4070 	push	{r4, r5, r6, lr}
    ee8c:	e30341d8 	movw	r4, #12760	; 0x31d8
    ee90:	e3404005 	movt	r4, #5
    ee94:	e1a05000 	mov	r5, r0
    ee98:	e1a06001 	mov	r6, r1
    ee9c:	e5943000 	ldr	r3, [r4]
    eea0:	e3530000 	cmp	r3, #0
    eea4:	1a00001a 	bne	ef14 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x8c>
    eea8:	e1d500bc 	ldrh	r0, [r5, #12]
    eeac:	e1d530be 	ldrh	r3, [r5, #14]
    eeb0:	e5856008 	str	r6, [r5, #8]
    eeb4:	e0402003 	sub	r2, r0, r3
    eeb8:	e6bf2072 	sxth	r2, r2
    eebc:	e3520000 	cmp	r2, #0
    eec0:	da00000c 	ble	eef8 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x70>
    eec4:	e3560000 	cmp	r6, #0
    eec8:	1a00000c 	bne	ef00 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x78>
    eecc:	e2833001 	add	r3, r3, #1
    eed0:	e6ff3073 	uxth	r3, r3
    eed4:	e1c530be 	strh	r3, [r5, #14]
    eed8:	e5951004 	ldr	r1, [r5, #4]
    eedc:	e1833800 	orr	r3, r3, r0, lsl #16
    eee0:	e5942004 	ldr	r2, [r4, #4]
    eee4:	e7823101 	str	r3, [r2, r1, lsl #2]
    eee8:	e5943000 	ldr	r3, [r4]
    eeec:	e3530000 	cmp	r3, #0
    eef0:	1a000005 	bne	ef0c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x84>
    eef4:	e8bd8070 	pop	{r4, r5, r6, pc}
    eef8:	e3560000 	cmp	r6, #0
    eefc:	1a000006 	bne	ef1c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x94>
    ef00:	e5943000 	ldr	r3, [r4]
    ef04:	e3530000 	cmp	r3, #0
    ef08:	08bd8070 	popeq	{r4, r5, r6, pc}
    ef0c:	e8bd4070 	pop	{r4, r5, r6, lr}
    ef10:	eaffed10 	b	a358 <LeaveCritical>
    ef14:	ebffed02 	bl	a324 <EnterCritical>
    ef18:	eaffffe2 	b	eea8 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x20>
    ef1c:	e2800001 	add	r0, r0, #1
    ef20:	e6ff0070 	uxth	r0, r0
    ef24:	e1c500bc 	strh	r0, [r5, #12]
    ef28:	eaffffea 	b	eed8 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x50>

0000ef2c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    ef2c:	e3510001 	cmp	r1, #1
    ef30:	e92d4030 	push	{r4, r5, lr}
    ef34:	e59f20dc 	ldr	r2, [pc, #220]	; f018 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xec>
    ef38:	e3a03000 	mov	r3, #0
    ef3c:	e24dd024 	sub	sp, sp, #36	; 0x24
    ef40:	e1a04000 	mov	r4, r0
    ef44:	e5801004 	str	r1, [r0, #4]
    ef48:	e5802000 	str	r2, [r0]
    ef4c:	e1c030bc 	strh	r3, [r0, #12]
    ef50:	e1c030be 	strh	r3, [r0, #14]
    ef54:	9a000002 	bls	ef64 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
    ef58:	e1a00004 	mov	r0, r4
    ef5c:	e28dd024 	add	sp, sp, #36	; 0x24
    ef60:	e8bd8030 	pop	{r4, r5, pc}
    ef64:	e30351d8 	movw	r5, #12760	; 0x31d8
    ef68:	e3405005 	movt	r5, #5
    ef6c:	e5953000 	ldr	r3, [r5]
    ef70:	e3530000 	cmp	r3, #0
    ef74:	1a000009 	bne	efa0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x74>
    ef78:	e5953004 	ldr	r3, [r5, #4]
    ef7c:	e3530000 	cmp	r3, #0
    ef80:	0a00000a 	beq	efb0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x84>
    ef84:	e5953004 	ldr	r3, [r5, #4]
    ef88:	e3530000 	cmp	r3, #0
    ef8c:	0afffff1 	beq	ef58 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    ef90:	e3a01000 	mov	r1, #0
    ef94:	e1a00004 	mov	r0, r4
    ef98:	ebffffba 	bl	ee88 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
    ef9c:	eaffffed 	b	ef58 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    efa0:	ebffecdf 	bl	a324 <EnterCritical>
    efa4:	e5953004 	ldr	r3, [r5, #4]
    efa8:	e3530000 	cmp	r3, #0
    efac:	1a00000f 	bne	eff0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xc4>
    efb0:	e28d0008 	add	r0, sp, #8
    efb4:	ebffe843 	bl	90c8 <CBcmPropertyTags::CBcmPropertyTags()>
    efb8:	e3a03000 	mov	r3, #0
    efbc:	e58d3000 	str	r3, [sp]
    efc0:	e3a03010 	mov	r3, #16
    efc4:	e08d2003 	add	r2, sp, r3
    efc8:	e28d0008 	add	r0, sp, #8
    efcc:	e3a01010 	mov	r1, #16
    efd0:	e3401004 	movt	r1, #4
    efd4:	ebffe883 	bl	91e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    efd8:	e3500000 	cmp	r0, #0
    efdc:	e28d0008 	add	r0, sp, #8
    efe0:	159d301c 	ldrne	r3, [sp, #28]
    efe4:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    efe8:	15853004 	strne	r3, [r5, #4]
    efec:	ebffe83b 	bl	90e0 <CBcmPropertyTags::~CBcmPropertyTags()>
    eff0:	e5953000 	ldr	r3, [r5]
    eff4:	e3530000 	cmp	r3, #0
    eff8:	0a000000 	beq	f000 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xd4>
    effc:	ebffecd5 	bl	a358 <LeaveCritical>
    f000:	e5943004 	ldr	r3, [r4, #4]
    f004:	e3530001 	cmp	r3, #1
    f008:	9affffdd 	bls	ef84 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x58>
    f00c:	e1a00004 	mov	r0, r4
    f010:	e28dd024 	add	sp, sp, #36	; 0x24
    f014:	e8bd8030 	pop	{r4, r5, pc}
    f018:	00052bb0 	.word	0x00052bb0

0000f01c <CVirtualGPIOPin::Write(unsigned int)>:
    f01c:	e5902004 	ldr	r2, [r0, #4]
    f020:	e1a03001 	mov	r3, r1
    f024:	e3520001 	cmp	r2, #1
    f028:	812fff1e 	bxhi	lr
    f02c:	e30321d8 	movw	r2, #12760	; 0x31d8
    f030:	e3402005 	movt	r2, #5
    f034:	e3510001 	cmp	r1, #1
    f038:	93a03000 	movls	r3, #0
    f03c:	83a03001 	movhi	r3, #1
    f040:	e5922004 	ldr	r2, [r2, #4]
    f044:	e3520000 	cmp	r2, #0
    f048:	03833001 	orreq	r3, r3, #1
    f04c:	e3530000 	cmp	r3, #0
    f050:	112fff1e 	bxne	lr
    f054:	eaffff8b 	b	ee88 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>

0000f058 <CVirtualGPIOPin::Invert()>:
    f058:	e5901008 	ldr	r1, [r0, #8]
    f05c:	e2211001 	eor	r1, r1, #1
    f060:	eaffffed 	b	f01c <CVirtualGPIOPin::Write(unsigned int)>

0000f064 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    f064:	e30331d8 	movw	r3, #12760	; 0x31d8
    f068:	e3403005 	movt	r3, #5
    f06c:	e3a02000 	mov	r2, #0
    f070:	e5832000 	str	r2, [r3]
    f074:	e12fff1e 	bx	lr

0000f078 <CMachineInfo::CMachineInfo()>:
    f078:	e30321e0 	movw	r2, #12768	; 0x31e0
    f07c:	e3402005 	movt	r2, #5
    f080:	e92d4030 	push	{r4, r5, lr}
    f084:	e3a03000 	mov	r3, #0
    f088:	e1a04000 	mov	r4, r0
    f08c:	e5925000 	ldr	r5, [r2]
    f090:	e3a0000a 	mov	r0, #10
    f094:	e3a01003 	mov	r1, #3
    f098:	e24dd024 	sub	sp, sp, #36	; 0x24
    f09c:	e1550003 	cmp	r5, r3
    f0a0:	e5c40004 	strb	r0, [r4, #4]
    f0a4:	e5c41010 	strb	r1, [r4, #16]
    f0a8:	e5843000 	str	r3, [r4]
    f0ac:	e5843008 	str	r3, [r4, #8]
    f0b0:	e584300c 	str	r3, [r4, #12]
    f0b4:	e5843014 	str	r3, [r4, #20]
    f0b8:	0a00000e 	beq	f0f8 <CMachineInfo::CMachineInfo()+0x80>
    f0bc:	e595e000 	ldr	lr, [r5]
    f0c0:	e5d5c004 	ldrb	ip, [r5, #4]
    f0c4:	e5950008 	ldr	r0, [r5, #8]
    f0c8:	e595100c 	ldr	r1, [r5, #12]
    f0cc:	e5d52010 	ldrb	r2, [r5, #16]
    f0d0:	e5953014 	ldr	r3, [r5, #20]
    f0d4:	e584e000 	str	lr, [r4]
    f0d8:	e5c4c004 	strb	ip, [r4, #4]
    f0dc:	e5840008 	str	r0, [r4, #8]
    f0e0:	e584100c 	str	r1, [r4, #12]
    f0e4:	e5c42010 	strb	r2, [r4, #16]
    f0e8:	e5843014 	str	r3, [r4, #20]
    f0ec:	e1a00004 	mov	r0, r4
    f0f0:	e28dd024 	add	sp, sp, #36	; 0x24
    f0f4:	e8bd8030 	pop	{r4, r5, pc}
    f0f8:	e28d0008 	add	r0, sp, #8
    f0fc:	e5824000 	str	r4, [r2]
    f100:	ebffe7f0 	bl	90c8 <CBcmPropertyTags::CBcmPropertyTags()>
    f104:	e3a03010 	mov	r3, #16
    f108:	e58d5000 	str	r5, [sp]
    f10c:	e28d0008 	add	r0, sp, #8
    f110:	e3a01002 	mov	r1, #2
    f114:	e3401001 	movt	r1, #1
    f118:	e08d2003 	add	r2, sp, r3
    f11c:	ebffe831 	bl	91e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f120:	e3500000 	cmp	r0, #0
    f124:	0a00000c 	beq	f15c <CMachineInfo::CMachineInfo()+0xe4>
    f128:	e59d201c 	ldr	r2, [sp, #28]
    f12c:	e2123502 	ands	r3, r2, #8388608	; 0x800000
    f130:	e5842000 	str	r2, [r4]
    f134:	1a00000b 	bne	f168 <CMachineInfo::CMachineInfo()+0xf0>
    f138:	e3a01002 	mov	r1, #2
    f13c:	e59f00fc 	ldr	r0, [pc, #252]	; f240 <CMachineInfo::CMachineInfo()+0x1c8>
    f140:	ea000000 	b	f148 <CMachineInfo::CMachineInfo()+0xd0>
    f144:	e7901203 	ldr	r1, [r0, r3, lsl #4]
    f148:	e1520001 	cmp	r2, r1
    f14c:	0a000011 	beq	f198 <CMachineInfo::CMachineInfo()+0x120>
    f150:	e2833001 	add	r3, r3, #1
    f154:	e3530011 	cmp	r3, #17
    f158:	1afffff9 	bne	f144 <CMachineInfo::CMachineInfo()+0xcc>
    f15c:	e28d0008 	add	r0, sp, #8
    f160:	ebffe7de 	bl	90e0 <CBcmPropertyTags::~CBcmPropertyTags()>
    f164:	eaffffe0 	b	f0ec <CMachineInfo::CMachineInfo()+0x74>
    f168:	e59f10d4 	ldr	r1, [pc, #212]	; f244 <CMachineInfo::CMachineInfo()+0x1cc>
    f16c:	e1a03005 	mov	r3, r5
    f170:	e7e70252 	ubfx	r0, r2, #4, #8
    f174:	ea000000 	b	f17c <CMachineInfo::CMachineInfo()+0x104>
    f178:	e511500c 	ldr	r5, [r1, #-12]
    f17c:	e1550000 	cmp	r5, r0
    f180:	e281100c 	add	r1, r1, #12
    f184:	0a000011 	beq	f1d0 <CMachineInfo::CMachineInfo()+0x158>
    f188:	e2833001 	add	r3, r3, #1
    f18c:	e3530008 	cmp	r3, #8
    f190:	1afffff8 	bne	f178 <CMachineInfo::CMachineInfo()+0x100>
    f194:	eafffff0 	b	f15c <CMachineInfo::CMachineInfo()+0xe4>
    f198:	e3022bb8 	movw	r2, #11192	; 0x2bb8
    f19c:	e3402005 	movt	r2, #5
    f1a0:	e3a01000 	mov	r1, #0
    f1a4:	e3a00001 	mov	r0, #1
    f1a8:	e0823203 	add	r3, r2, r3, lsl #4
    f1ac:	e5c41010 	strb	r1, [r4, #16]
    f1b0:	e5840008 	str	r0, [r4, #8]
    f1b4:	e5d31064 	ldrb	r1, [r3, #100]	; 0x64
    f1b8:	e5932068 	ldr	r2, [r3, #104]	; 0x68
    f1bc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    f1c0:	e5c41004 	strb	r1, [r4, #4]
    f1c4:	e584200c 	str	r2, [r4, #12]
    f1c8:	e5843014 	str	r3, [r4, #20]
    f1cc:	eaffffe2 	b	f15c <CMachineInfo::CMachineInfo()+0xe4>
    f1d0:	e3a0c00c 	mov	ip, #12
    f1d4:	e7e2ea52 	ubfx	lr, r2, #20, #3
    f1d8:	e3021bb8 	movw	r1, #11192	; 0x2bb8
    f1dc:	e3401005 	movt	r1, #5
    f1e0:	e3a00c01 	mov	r0, #256	; 0x100
    f1e4:	e7e35652 	ubfx	r5, r2, #12, #4
    f1e8:	e021139c 	mla	r1, ip, r3, r1
    f1ec:	e3550002 	cmp	r5, #2
    f1f0:	e202300f 	and	r3, r2, #15
    f1f4:	e5c45010 	strb	r5, [r4, #16]
    f1f8:	e5d1c004 	ldrb	ip, [r1, #4]
    f1fc:	e1a02e10 	lsl	r2, r0, lr
    f200:	e5842014 	str	r2, [r4, #20]
    f204:	83a02003 	movhi	r2, #3
    f208:	85c42010 	strbhi	r2, [r4, #16]
    f20c:	e35e0000 	cmp	lr, #0
    f210:	035c0003 	cmpeq	ip, #3
    f214:	e5911008 	ldr	r1, [r1, #8]
    f218:	e2833001 	add	r3, r3, #1
    f21c:	e5c4c004 	strb	ip, [r4, #4]
    f220:	e5841008 	str	r1, [r4, #8]
    f224:	e584300c 	str	r3, [r4, #12]
    f228:	1affffcb 	bne	f15c <CMachineInfo::CMachineInfo()+0xe4>
    f22c:	e3530001 	cmp	r3, #1
    f230:	13a03002 	movne	r3, #2
    f234:	03a03001 	moveq	r3, #1
    f238:	e5c43004 	strb	r3, [r4, #4]
    f23c:	eaffffc6 	b	f15c <CMachineInfo::CMachineInfo()+0xe4>
    f240:	00052c18 	.word	0x00052c18
    f244:	00052bc4 	.word	0x00052bc4

0000f248 <CMachineInfo::~CMachineInfo()>:
    f248:	e30331e0 	movw	r3, #12768	; 0x31e0
    f24c:	e3403005 	movt	r3, #5
    f250:	e3a0100a 	mov	r1, #10
    f254:	e5c01004 	strb	r1, [r0, #4]
    f258:	e5932000 	ldr	r2, [r3]
    f25c:	e1500002 	cmp	r0, r2
    f260:	03a02000 	moveq	r2, #0
    f264:	05832000 	streq	r2, [r3]
    f268:	e12fff1e 	bx	lr

0000f26c <CMachineInfo::GetMachineModel() const>:
    f26c:	e5d00004 	ldrb	r0, [r0, #4]
    f270:	e12fff1e 	bx	lr

0000f274 <CMachineInfo::GetMachineName() const>:
    f274:	e5d02004 	ldrb	r2, [r0, #4]
    f278:	e3023bb8 	movw	r3, #11192	; 0x2bb8
    f27c:	e3403005 	movt	r3, #5
    f280:	e0833102 	add	r3, r3, r2, lsl #2
    f284:	e5930170 	ldr	r0, [r3, #368]	; 0x170
    f288:	e12fff1e 	bx	lr

0000f28c <CMachineInfo::GetModelMajor() const>:
    f28c:	e5900008 	ldr	r0, [r0, #8]
    f290:	e12fff1e 	bx	lr

0000f294 <CMachineInfo::GetModelRevision() const>:
    f294:	e590000c 	ldr	r0, [r0, #12]
    f298:	e12fff1e 	bx	lr

0000f29c <CMachineInfo::GetSoCType() const>:
    f29c:	e5d00010 	ldrb	r0, [r0, #16]
    f2a0:	e12fff1e 	bx	lr

0000f2a4 <CMachineInfo::GetRAMSize() const>:
    f2a4:	e5900014 	ldr	r0, [r0, #20]
    f2a8:	e12fff1e 	bx	lr

0000f2ac <CMachineInfo::GetSoCName() const>:
    f2ac:	e5d02010 	ldrb	r2, [r0, #16]
    f2b0:	e3023bb8 	movw	r3, #11192	; 0x2bb8
    f2b4:	e3403005 	movt	r3, #5
    f2b8:	e0833102 	add	r3, r3, r2, lsl #2
    f2bc:	e593019c 	ldr	r0, [r3, #412]	; 0x19c
    f2c0:	e12fff1e 	bx	lr

0000f2c4 <CMachineInfo::GetRevisionRaw() const>:
    f2c4:	e5900000 	ldr	r0, [r0]
    f2c8:	e12fff1e 	bx	lr

0000f2cc <CMachineInfo::GetClockRate(unsigned int) const>:
    f2cc:	e92d4070 	push	{r4, r5, r6, lr}
    f2d0:	e1a06000 	mov	r6, r0
    f2d4:	e1a05001 	mov	r5, r1
    f2d8:	e24dd028 	sub	sp, sp, #40	; 0x28
    f2dc:	e28d000c 	add	r0, sp, #12
    f2e0:	ebffe778 	bl	90c8 <CBcmPropertyTags::CBcmPropertyTags()>
    f2e4:	e3a03004 	mov	r3, #4
    f2e8:	e58d3000 	str	r3, [sp]
    f2ec:	e3a03014 	mov	r3, #20
    f2f0:	e28d000c 	add	r0, sp, #12
    f2f4:	e3a01002 	mov	r1, #2
    f2f8:	e3401003 	movt	r1, #3
    f2fc:	e08d2003 	add	r2, sp, r3
    f300:	e58d5020 	str	r5, [sp, #32]
    f304:	ebffe7b7 	bl	91e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f308:	e2504000 	subs	r4, r0, #0
    f30c:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
    f310:	1a00000b 	bne	f344 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    f314:	e3550002 	cmp	r5, #2
    f318:	0a00000e 	beq	f358 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    f31c:	e3550004 	cmp	r5, #4
    f320:	0a000012 	beq	f370 <CMachineInfo::GetClockRate(unsigned int) const+0xa4>
    f324:	e3550001 	cmp	r5, #1
    f328:	0a00000d 	beq	f364 <CMachineInfo::GetClockRate(unsigned int) const+0x98>
    f32c:	e3021d64 	movw	r1, #11620	; 0x2d64
    f330:	e3401005 	movt	r1, #5
    f334:	e3020b1c 	movw	r0, #11036	; 0x2b1c
    f338:	e3400005 	movt	r0, #5
    f33c:	e3a02f43 	mov	r2, #268	; 0x10c
    f340:	ebfff5a0 	bl	c9c8 <assertion_failed>
    f344:	e28d000c 	add	r0, sp, #12
    f348:	ebffe764 	bl	90e0 <CBcmPropertyTags::~CBcmPropertyTags()>
    f34c:	e1a00004 	mov	r0, r4
    f350:	e28dd028 	add	sp, sp, #40	; 0x28
    f354:	e8bd8070 	pop	{r4, r5, r6, pc}
    f358:	e3a04b1b 	mov	r4, #27648	; 0x6c00
    f35c:	e34042dc 	movt	r4, #732	; 0x2dc
    f360:	eafffff7 	b	f344 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    f364:	e3a04ce1 	mov	r4, #57600	; 0xe100
    f368:	e34045f5 	movt	r4, #1525	; 0x5f5
    f36c:	eafffff4 	b	f344 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    f370:	e5962008 	ldr	r2, [r6, #8]
    f374:	e3a03ca3 	mov	r3, #41728	; 0xa300
    f378:	e34131e1 	movt	r3, #4577	; 0x11e1
    f37c:	e3520002 	cmp	r2, #2
    f380:	e30b4280 	movw	r4, #45696	; 0xb280
    f384:	e3404ee6 	movt	r4, #3814	; 0xee6
    f388:	81a04003 	movhi	r4, r3
    f38c:	eaffffec 	b	f344 <CMachineInfo::GetClockRate(unsigned int) const+0x78>

0000f390 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    f390:	e3510036 	cmp	r1, #54	; 0x36
    f394:	0a00000f 	beq	f3d8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x48>
    f398:	e3510037 	cmp	r1, #55	; 0x37
    f39c:	1a000004 	bne	f3b4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    f3a0:	e5d03004 	ldrb	r3, [r0, #4]
    f3a4:	e3530003 	cmp	r3, #3
    f3a8:	c3a00028 	movgt	r0, #40	; 0x28
    f3ac:	d3a0002d 	movle	r0, #45	; 0x2d
    f3b0:	e12fff1e 	bx	lr
    f3b4:	e92d4010 	push	{r4, lr}
    f3b8:	e3002137 	movw	r2, #311	; 0x137
    f3bc:	e3021d64 	movw	r1, #11620	; 0x2d64
    f3c0:	e3401005 	movt	r1, #5
    f3c4:	e3020b1c 	movw	r0, #11036	; 0x2b1c
    f3c8:	e3400005 	movt	r0, #5
    f3cc:	ebfff57d 	bl	c9c8 <assertion_failed>
    f3d0:	e3a00000 	mov	r0, #0
    f3d4:	e8bd8010 	pop	{r4, pc}
    f3d8:	e5d03004 	ldrb	r3, [r0, #4]
    f3dc:	e3530003 	cmp	r3, #3
    f3e0:	ca000001 	bgt	f3ec <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
    f3e4:	e3a00028 	mov	r0, #40	; 0x28
    f3e8:	e12fff1e 	bx	lr
    f3ec:	e5903008 	ldr	r3, [r0, #8]
    f3f0:	e3530003 	cmp	r3, #3
    f3f4:	33a0002d 	movcc	r0, #45	; 0x2d
    f3f8:	23a00029 	movcs	r0, #41	; 0x29
    f3fc:	e12fff1e 	bx	lr

0000f400 <CMachineInfo::GetDevice(TDeviceId) const>:
    f400:	e3510000 	cmp	r1, #0
    f404:	1a000003 	bne	f418 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    f408:	e5d00004 	ldrb	r0, [r0, #4]
    f40c:	e2500001 	subs	r0, r0, #1
    f410:	13a00001 	movne	r0, #1
    f414:	e12fff1e 	bx	lr
    f418:	e92d4010 	push	{r4, lr}
    f41c:	e3a02e15 	mov	r2, #336	; 0x150
    f420:	e3021d64 	movw	r1, #11620	; 0x2d64
    f424:	e3401005 	movt	r1, #5
    f428:	e3020b1c 	movw	r0, #11036	; 0x2b1c
    f42c:	e3400005 	movt	r0, #5
    f430:	ebfff564 	bl	c9c8 <assertion_failed>
    f434:	e3a00000 	mov	r0, #0
    f438:	e8bd8010 	pop	{r4, pc}

0000f43c <CMachineInfo::Get()>:
    f43c:	e92d4010 	push	{r4, lr}
    f440:	e30341e0 	movw	r4, #12768	; 0x31e0
    f444:	e3404005 	movt	r4, #5
    f448:	e5940000 	ldr	r0, [r4]
    f44c:	e3500000 	cmp	r0, #0
    f450:	18bd8010 	popne	{r4, pc}
    f454:	e3002159 	movw	r2, #345	; 0x159
    f458:	e3021d64 	movw	r1, #11620	; 0x2d64
    f45c:	e3401005 	movt	r1, #5
    f460:	e30108ac 	movw	r0, #6316	; 0x18ac
    f464:	e3400005 	movt	r0, #5
    f468:	ebfff556 	bl	c9c8 <assertion_failed>
    f46c:	e5940000 	ldr	r0, [r4]
    f470:	e8bd8010 	pop	{r4, pc}

0000f474 <InvalidateDataCacheL1Only>:
    f474:	e92d0070 	push	{r4, r5, r6}
    f478:	e3a00000 	mov	r0, #0
    f47c:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
    f480:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
    f484:	e3071fff 	movw	r1, #32767	; 0x7fff
    f488:	e00126a0 	and	r2, r1, r0, lsr #13
    f48c:	e30013ff 	movw	r1, #1023	; 0x3ff
    f490:	e00131a0 	and	r3, r1, r0, lsr #3
    f494:	e2822001 	add	r2, r2, #1
    f498:	e2000007 	and	r0, r0, #7
    f49c:	e2800004 	add	r0, r0, #4
    f4a0:	e16f1f13 	clz	r1, r3
    f4a4:	e2834001 	add	r4, r3, #1
    f4a8:	e2422001 	sub	r2, r2, #1
    f4ac:	e1a03004 	mov	r3, r4
    f4b0:	e2533001 	subs	r3, r3, #1
    f4b4:	e1a05113 	lsl	r5, r3, r1
    f4b8:	e1a06012 	lsl	r6, r2, r0
    f4bc:	e1855006 	orr	r5, r5, r6
    f4c0:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
    f4c4:	cafffff9 	bgt	f4b0 <InvalidateDataCacheL1Only+0x3c>
    f4c8:	e3520000 	cmp	r2, #0
    f4cc:	cafffff5 	bgt	f4a8 <InvalidateDataCacheL1Only+0x34>
    f4d0:	f57ff04e 	dsb	st
    f4d4:	f57ff06f 	isb	sy
    f4d8:	e8bd0070 	pop	{r4, r5, r6}
    f4dc:	e12fff1e 	bx	lr

0000f4e0 <InvalidateDataCache>:
    f4e0:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    f4e4:	f57ff05f 	dmb	sy
    f4e8:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    f4ec:	e1a03ba0 	lsr	r3, r0, #23
    f4f0:	e213300e 	ands	r3, r3, #14
    f4f4:	0a00001d 	beq	f570 <InvalidateDataCache+0x90>
    f4f8:	e3a0a000 	mov	sl, #0
    f4fc:	e08a20aa 	add	r2, sl, sl, lsr #1
    f500:	e1a01230 	lsr	r1, r0, r2
    f504:	e2011007 	and	r1, r1, #7
    f508:	e3510002 	cmp	r1, #2
    f50c:	ba000014 	blt	f564 <InvalidateDataCache+0x84>
    f510:	e10f9000 	mrs	r9, CPSR
    f514:	f10c0080 	cpsid	i
    f518:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    f51c:	f57ff06f 	isb	sy
    f520:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    f524:	e121f009 	msr	CPSR_c, r9
    f528:	e2012007 	and	r2, r1, #7
    f52c:	e2822004 	add	r2, r2, #4
    f530:	e30043ff 	movw	r4, #1023	; 0x3ff
    f534:	e01441a1 	ands	r4, r4, r1, lsr #3
    f538:	e16f5f14 	clz	r5, r4
    f53c:	e3077fff 	movw	r7, #32767	; 0x7fff
    f540:	e01776a1 	ands	r7, r7, r1, lsr #13
    f544:	e1a09007 	mov	r9, r7
    f548:	e18ab514 	orr	fp, sl, r4, lsl r5
    f54c:	e18bb219 	orr	fp, fp, r9, lsl r2
    f550:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
    f554:	e2599001 	subs	r9, r9, #1
    f558:	aafffffa 	bge	f548 <InvalidateDataCache+0x68>
    f55c:	e2544001 	subs	r4, r4, #1
    f560:	aafffff7 	bge	f544 <InvalidateDataCache+0x64>
    f564:	e28aa002 	add	sl, sl, #2
    f568:	e153000a 	cmp	r3, sl
    f56c:	caffffe2 	bgt	f4fc <InvalidateDataCache+0x1c>
    f570:	e3a0a000 	mov	sl, #0
    f574:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    f578:	f57ff04e 	dsb	st
    f57c:	f57ff06f 	isb	sy
    f580:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    f584:	e12fff1e 	bx	lr

0000f588 <CleanDataCache>:
    f588:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    f58c:	f57ff05f 	dmb	sy
    f590:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    f594:	e1a03ba0 	lsr	r3, r0, #23
    f598:	e213300e 	ands	r3, r3, #14
    f59c:	0a00001d 	beq	f618 <CleanDataCache+0x90>
    f5a0:	e3a0a000 	mov	sl, #0
    f5a4:	e08a20aa 	add	r2, sl, sl, lsr #1
    f5a8:	e1a01230 	lsr	r1, r0, r2
    f5ac:	e2011007 	and	r1, r1, #7
    f5b0:	e3510002 	cmp	r1, #2
    f5b4:	ba000014 	blt	f60c <CleanDataCache+0x84>
    f5b8:	e10f9000 	mrs	r9, CPSR
    f5bc:	f10c0080 	cpsid	i
    f5c0:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    f5c4:	f57ff06f 	isb	sy
    f5c8:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    f5cc:	e121f009 	msr	CPSR_c, r9
    f5d0:	e2012007 	and	r2, r1, #7
    f5d4:	e2822004 	add	r2, r2, #4
    f5d8:	e30043ff 	movw	r4, #1023	; 0x3ff
    f5dc:	e01441a1 	ands	r4, r4, r1, lsr #3
    f5e0:	e16f5f14 	clz	r5, r4
    f5e4:	e3077fff 	movw	r7, #32767	; 0x7fff
    f5e8:	e01776a1 	ands	r7, r7, r1, lsr #13
    f5ec:	e1a09007 	mov	r9, r7
    f5f0:	e18ab514 	orr	fp, sl, r4, lsl r5
    f5f4:	e18bb219 	orr	fp, fp, r9, lsl r2
    f5f8:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
    f5fc:	e2599001 	subs	r9, r9, #1
    f600:	aafffffa 	bge	f5f0 <CleanDataCache+0x68>
    f604:	e2544001 	subs	r4, r4, #1
    f608:	aafffff7 	bge	f5ec <CleanDataCache+0x64>
    f60c:	e28aa002 	add	sl, sl, #2
    f610:	e153000a 	cmp	r3, sl
    f614:	caffffe2 	bgt	f5a4 <CleanDataCache+0x1c>
    f618:	e3a0a000 	mov	sl, #0
    f61c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    f620:	f57ff04e 	dsb	st
    f624:	f57ff06f 	isb	sy
    f628:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    f62c:	e12fff1e 	bx	lr

0000f630 <CleanAndInvalidateDataCacheRange>:
    f630:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
    f634:	e1a03823 	lsr	r3, r3, #16
    f638:	e203300f 	and	r3, r3, #15
    f63c:	e3a02004 	mov	r2, #4
    f640:	e1a02312 	lsl	r2, r2, r3
    f644:	e0801001 	add	r1, r0, r1
    f648:	e2423001 	sub	r3, r2, #1
    f64c:	e1c00003 	bic	r0, r0, r3
    f650:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    f654:	e0800002 	add	r0, r0, r2
    f658:	e1500001 	cmp	r0, r1
    f65c:	3afffffb 	bcc	f650 <CleanAndInvalidateDataCacheRange+0x20>
    f660:	f57ff04e 	dsb	st
    f664:	e12fff1e 	bx	lr

0000f668 <CPtrList::CPtrList()>:
    f668:	e3a02000 	mov	r2, #0
    f66c:	e5802000 	str	r2, [r0]
    f670:	e12fff1e 	bx	lr

0000f674 <CPtrList::~CPtrList()>:
    f674:	e5903000 	ldr	r3, [r0]
    f678:	e92d4010 	push	{r4, lr}
    f67c:	e1a04000 	mov	r4, r0
    f680:	e3530000 	cmp	r3, #0
    f684:	0a000005 	beq	f6a0 <CPtrList::~CPtrList()+0x2c>
    f688:	e3021e58 	movw	r1, #11864	; 0x2e58
    f68c:	e3401005 	movt	r1, #5
    f690:	e3020e64 	movw	r0, #11876	; 0x2e64
    f694:	e3400005 	movt	r0, #5
    f698:	e3a0202a 	mov	r2, #42	; 0x2a
    f69c:	ebfff4c9 	bl	c9c8 <assertion_failed>
    f6a0:	e1a00004 	mov	r0, r4
    f6a4:	e8bd8010 	pop	{r4, pc}

0000f6a8 <CPtrList::GetFirst()>:
    f6a8:	e5900000 	ldr	r0, [r0]
    f6ac:	e12fff1e 	bx	lr

0000f6b0 <CPtrList::GetNext(TPtrListElement*)>:
    f6b0:	e92d4010 	push	{r4, lr}
    f6b4:	e2514000 	subs	r4, r1, #0
    f6b8:	0a00000c 	beq	f6f0 <CPtrList::GetNext(TPtrListElement*)+0x40>
    f6bc:	e5942000 	ldr	r2, [r4]
    f6c0:	e3043d43 	movw	r3, #19779	; 0x4d43
    f6c4:	e345304c 	movt	r3, #20556	; 0x504c
    f6c8:	e1520003 	cmp	r2, r3
    f6cc:	0a000005 	beq	f6e8 <CPtrList::GetNext(TPtrListElement*)+0x38>
    f6d0:	e3021e58 	movw	r1, #11864	; 0x2e58
    f6d4:	e3401005 	movt	r1, #5
    f6d8:	e3020e84 	movw	r0, #11908	; 0x2e84
    f6dc:	e3400005 	movt	r0, #5
    f6e0:	e3a02035 	mov	r2, #53	; 0x35
    f6e4:	ebfff4b7 	bl	c9c8 <assertion_failed>
    f6e8:	e5940008 	ldr	r0, [r4, #8]
    f6ec:	e8bd8010 	pop	{r4, pc}
    f6f0:	e3021e58 	movw	r1, #11864	; 0x2e58
    f6f4:	e3401005 	movt	r1, #5
    f6f8:	e3020e74 	movw	r0, #11892	; 0x2e74
    f6fc:	e3400005 	movt	r0, #5
    f700:	e3a02034 	mov	r2, #52	; 0x34
    f704:	ebfff4af 	bl	c9c8 <assertion_failed>
    f708:	eaffffeb 	b	f6bc <CPtrList::GetNext(TPtrListElement*)+0xc>

0000f70c <CPtrList::GetPtr(TPtrListElement*)>:
    f70c:	e92d4010 	push	{r4, lr}
    f710:	e2514000 	subs	r4, r1, #0
    f714:	0a00000c 	beq	f74c <CPtrList::GetPtr(TPtrListElement*)+0x40>
    f718:	e5942000 	ldr	r2, [r4]
    f71c:	e3043d43 	movw	r3, #19779	; 0x4d43
    f720:	e345304c 	movt	r3, #20556	; 0x504c
    f724:	e1520003 	cmp	r2, r3
    f728:	0a000005 	beq	f744 <CPtrList::GetPtr(TPtrListElement*)+0x38>
    f72c:	e3021e58 	movw	r1, #11864	; 0x2e58
    f730:	e3401005 	movt	r1, #5
    f734:	e3020e84 	movw	r0, #11908	; 0x2e84
    f738:	e3400005 	movt	r0, #5
    f73c:	e3a0203d 	mov	r2, #61	; 0x3d
    f740:	ebfff4a0 	bl	c9c8 <assertion_failed>
    f744:	e594000c 	ldr	r0, [r4, #12]
    f748:	e8bd8010 	pop	{r4, pc}
    f74c:	e3021e58 	movw	r1, #11864	; 0x2e58
    f750:	e3401005 	movt	r1, #5
    f754:	e3020e74 	movw	r0, #11892	; 0x2e74
    f758:	e3400005 	movt	r0, #5
    f75c:	e3a0203c 	mov	r2, #60	; 0x3c
    f760:	ebfff498 	bl	c9c8 <assertion_failed>
    f764:	eaffffeb 	b	f718 <CPtrList::GetPtr(TPtrListElement*)+0xc>

0000f768 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
    f768:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f76c:	e1a06000 	mov	r6, r0
    f770:	e3a00010 	mov	r0, #16
    f774:	e1a07002 	mov	r7, r2
    f778:	e1a04001 	mov	r4, r1
    f77c:	ebffeae4 	bl	a314 <operator new(unsigned int)>
    f780:	e5962000 	ldr	r2, [r6]
    f784:	e3043d43 	movw	r3, #19779	; 0x4d43
    f788:	e345304c 	movt	r3, #20556	; 0x504c
    f78c:	e3520000 	cmp	r2, #0
    f790:	e1a05000 	mov	r5, r0
    f794:	e580700c 	str	r7, [r0, #12]
    f798:	e5803000 	str	r3, [r0]
    f79c:	0a000029 	beq	f848 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
    f7a0:	e3540000 	cmp	r4, #0
    f7a4:	0a00002e 	beq	f864 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
    f7a8:	e5942000 	ldr	r2, [r4]
    f7ac:	e3043d43 	movw	r3, #19779	; 0x4d43
    f7b0:	e345304c 	movt	r3, #20556	; 0x504c
    f7b4:	e1520003 	cmp	r2, r3
    f7b8:	0a000005 	beq	f7d4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x6c>
    f7bc:	e3021e58 	movw	r1, #11864	; 0x2e58
    f7c0:	e3401005 	movt	r1, #5
    f7c4:	e3020ec4 	movw	r0, #11972	; 0x2ec4
    f7c8:	e3400005 	movt	r0, #5
    f7cc:	e3a0204e 	mov	r2, #78	; 0x4e
    f7d0:	ebfff47c 	bl	c9c8 <assertion_failed>
    f7d4:	e5963000 	ldr	r3, [r6]
    f7d8:	e1540003 	cmp	r4, r3
    f7dc:	0a000013 	beq	f830 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
    f7e0:	e5943004 	ldr	r3, [r4, #4]
    f7e4:	e5854008 	str	r4, [r5, #8]
    f7e8:	e3530000 	cmp	r3, #0
    f7ec:	e5853004 	str	r3, [r5, #4]
    f7f0:	0a00000c 	beq	f828 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
    f7f4:	e5931000 	ldr	r1, [r3]
    f7f8:	e3042d43 	movw	r2, #19779	; 0x4d43
    f7fc:	e345204c 	movt	r2, #20556	; 0x504c
    f800:	e1510002 	cmp	r1, r2
    f804:	0a000006 	beq	f824 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xbc>
    f808:	e3021e58 	movw	r1, #11864	; 0x2e58
    f80c:	e3401005 	movt	r1, #5
    f810:	e3020ee8 	movw	r0, #12008	; 0x2ee8
    f814:	e3400005 	movt	r0, #5
    f818:	e3a02060 	mov	r2, #96	; 0x60
    f81c:	ebfff469 	bl	c9c8 <assertion_failed>
    f820:	e5943004 	ldr	r3, [r4, #4]
    f824:	e5835008 	str	r5, [r3, #8]
    f828:	e5845004 	str	r5, [r4, #4]
    f82c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f830:	e3a03000 	mov	r3, #0
    f834:	e5845004 	str	r5, [r4, #4]
    f838:	e5854008 	str	r4, [r5, #8]
    f83c:	e5865000 	str	r5, [r6]
    f840:	e5853004 	str	r3, [r5, #4]
    f844:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f848:	e3021e58 	movw	r1, #11864	; 0x2e58
    f84c:	e3401005 	movt	r1, #5
    f850:	e3020ea8 	movw	r0, #11944	; 0x2ea8
    f854:	e3400005 	movt	r0, #5
    f858:	e3a0204c 	mov	r2, #76	; 0x4c
    f85c:	ebfff459 	bl	c9c8 <assertion_failed>
    f860:	eaffffce 	b	f7a0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x38>
    f864:	e3021e58 	movw	r1, #11864	; 0x2e58
    f868:	e3401005 	movt	r1, #5
    f86c:	e3020eb8 	movw	r0, #11960	; 0x2eb8
    f870:	e3400005 	movt	r0, #5
    f874:	e3a0204d 	mov	r2, #77	; 0x4d
    f878:	ebfff452 	bl	c9c8 <assertion_failed>
    f87c:	eaffffc9 	b	f7a8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x40>

0000f880 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
    f880:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f884:	e1a06000 	mov	r6, r0
    f888:	e1a05001 	mov	r5, r1
    f88c:	e3a00010 	mov	r0, #16
    f890:	e1a07002 	mov	r7, r2
    f894:	ebffea9e 	bl	a314 <operator new(unsigned int)>
    f898:	e3550000 	cmp	r5, #0
    f89c:	e3043d43 	movw	r3, #19779	; 0x4d43
    f8a0:	e345304c 	movt	r3, #20556	; 0x504c
    f8a4:	e5803000 	str	r3, [r0]
    f8a8:	e1a04000 	mov	r4, r0
    f8ac:	e580700c 	str	r7, [r0, #12]
    f8b0:	e5963000 	ldr	r3, [r6]
    f8b4:	0a000020 	beq	f93c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
    f8b8:	e3530000 	cmp	r3, #0
    f8bc:	0a00002b 	beq	f970 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
    f8c0:	e5952000 	ldr	r2, [r5]
    f8c4:	e3043d43 	movw	r3, #19779	; 0x4d43
    f8c8:	e345304c 	movt	r3, #20556	; 0x504c
    f8cc:	e1520003 	cmp	r2, r3
    f8d0:	0a000005 	beq	f8ec <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
    f8d4:	e3021e58 	movw	r1, #11864	; 0x2e58
    f8d8:	e3401005 	movt	r1, #5
    f8dc:	e3020f10 	movw	r0, #12048	; 0x2f10
    f8e0:	e3400005 	movt	r0, #5
    f8e4:	e3a0207e 	mov	r2, #126	; 0x7e
    f8e8:	ebfff436 	bl	c9c8 <assertion_failed>
    f8ec:	e5953008 	ldr	r3, [r5, #8]
    f8f0:	e5845004 	str	r5, [r4, #4]
    f8f4:	e3530000 	cmp	r3, #0
    f8f8:	e5843008 	str	r3, [r4, #8]
    f8fc:	0a00000c 	beq	f934 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>
    f900:	e5931000 	ldr	r1, [r3]
    f904:	e3042d43 	movw	r2, #19779	; 0x4d43
    f908:	e345204c 	movt	r2, #20556	; 0x504c
    f90c:	e1510002 	cmp	r1, r2
    f910:	0a000006 	beq	f930 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb0>
    f914:	e3021e58 	movw	r1, #11864	; 0x2e58
    f918:	e3401005 	movt	r1, #5
    f91c:	e3020f34 	movw	r0, #12084	; 0x2f34
    f920:	e3400005 	movt	r0, #5
    f924:	e3a02085 	mov	r2, #133	; 0x85
    f928:	ebfff426 	bl	c9c8 <assertion_failed>
    f92c:	e5953008 	ldr	r3, [r5, #8]
    f930:	e5834004 	str	r4, [r3, #4]
    f934:	e5854008 	str	r4, [r5, #8]
    f938:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f93c:	e3530000 	cmp	r3, #0
    f940:	0a000005 	beq	f95c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
    f944:	e3021e58 	movw	r1, #11864	; 0x2e58
    f948:	e3401005 	movt	r1, #5
    f94c:	e3020e64 	movw	r0, #11876	; 0x2e64
    f950:	e3400005 	movt	r0, #5
    f954:	e3a02074 	mov	r2, #116	; 0x74
    f958:	ebfff41a 	bl	c9c8 <assertion_failed>
    f95c:	e3a03000 	mov	r3, #0
    f960:	e5864000 	str	r4, [r6]
    f964:	e5843004 	str	r3, [r4, #4]
    f968:	e5843008 	str	r3, [r4, #8]
    f96c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f970:	e3021e58 	movw	r1, #11864	; 0x2e58
    f974:	e3401005 	movt	r1, #5
    f978:	e3020ea8 	movw	r0, #11944	; 0x2ea8
    f97c:	e3400005 	movt	r0, #5
    f980:	e3a0207d 	mov	r2, #125	; 0x7d
    f984:	ebfff40f 	bl	c9c8 <assertion_failed>
    f988:	eaffffcc 	b	f8c0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x40>

0000f98c <CPtrList::Remove(TPtrListElement*)>:
    f98c:	e92d4070 	push	{r4, r5, r6, lr}
    f990:	e2514000 	subs	r4, r1, #0
    f994:	e1a05000 	mov	r5, r0
    f998:	0a000047 	beq	fabc <CPtrList::Remove(TPtrListElement*)+0x130>
    f99c:	e5942000 	ldr	r2, [r4]
    f9a0:	e3043d43 	movw	r3, #19779	; 0x4d43
    f9a4:	e345304c 	movt	r3, #20556	; 0x504c
    f9a8:	e1520003 	cmp	r2, r3
    f9ac:	0a000005 	beq	f9c8 <CPtrList::Remove(TPtrListElement*)+0x3c>
    f9b0:	e3021e58 	movw	r1, #11864	; 0x2e58
    f9b4:	e3401005 	movt	r1, #5
    f9b8:	e3020e84 	movw	r0, #11908	; 0x2e84
    f9bc:	e3400005 	movt	r0, #5
    f9c0:	e3a02090 	mov	r2, #144	; 0x90
    f9c4:	ebfff3ff 	bl	c9c8 <assertion_failed>
    f9c8:	e5953000 	ldr	r3, [r5]
    f9cc:	e1540003 	cmp	r4, r3
    f9d0:	0a000026 	beq	fa70 <CPtrList::Remove(TPtrListElement*)+0xe4>
    f9d4:	e5943004 	ldr	r3, [r4, #4]
    f9d8:	e3530000 	cmp	r3, #0
    f9dc:	0a00003d 	beq	fad8 <CPtrList::Remove(TPtrListElement*)+0x14c>
    f9e0:	e5931000 	ldr	r1, [r3]
    f9e4:	e3042d43 	movw	r2, #19779	; 0x4d43
    f9e8:	e345204c 	movt	r2, #20556	; 0x504c
    f9ec:	e1510002 	cmp	r1, r2
    f9f0:	0a000006 	beq	fa10 <CPtrList::Remove(TPtrListElement*)+0x84>
    f9f4:	e3021e58 	movw	r1, #11864	; 0x2e58
    f9f8:	e3401005 	movt	r1, #5
    f9fc:	e3020fa4 	movw	r0, #12196	; 0x2fa4
    fa00:	e3400005 	movt	r0, #5
    fa04:	e3a0209f 	mov	r2, #159	; 0x9f
    fa08:	ebfff3ee 	bl	c9c8 <assertion_failed>
    fa0c:	e5943004 	ldr	r3, [r4, #4]
    fa10:	e5942008 	ldr	r2, [r4, #8]
    fa14:	e5832008 	str	r2, [r3, #8]
    fa18:	e5942008 	ldr	r2, [r4, #8]
    fa1c:	e3520000 	cmp	r2, #0
    fa20:	0a00000d 	beq	fa5c <CPtrList::Remove(TPtrListElement*)+0xd0>
    fa24:	e5920000 	ldr	r0, [r2]
    fa28:	e3041d43 	movw	r1, #19779	; 0x4d43
    fa2c:	e345104c 	movt	r1, #20556	; 0x504c
    fa30:	e1500001 	cmp	r0, r1
    fa34:	0a000007 	beq	fa58 <CPtrList::Remove(TPtrListElement*)+0xcc>
    fa38:	e3a020a4 	mov	r2, #164	; 0xa4
    fa3c:	e3021e58 	movw	r1, #11864	; 0x2e58
    fa40:	e3401005 	movt	r1, #5
    fa44:	e3020f60 	movw	r0, #12128	; 0x2f60
    fa48:	e3400005 	movt	r0, #5
    fa4c:	ebfff3dd 	bl	c9c8 <assertion_failed>
    fa50:	e5942008 	ldr	r2, [r4, #8]
    fa54:	e5943004 	ldr	r3, [r4, #4]
    fa58:	e5823004 	str	r3, [r2, #4]
    fa5c:	e3a03000 	mov	r3, #0
    fa60:	e1a00004 	mov	r0, r4
    fa64:	e5843000 	str	r3, [r4]
    fa68:	e8bd4070 	pop	{r4, r5, r6, lr}
    fa6c:	eaffea2a 	b	a31c <operator delete(void*)>
    fa70:	e5943008 	ldr	r3, [r4, #8]
    fa74:	e3530000 	cmp	r3, #0
    fa78:	e5853000 	str	r3, [r5]
    fa7c:	0afffff6 	beq	fa5c <CPtrList::Remove(TPtrListElement*)+0xd0>
    fa80:	e5931000 	ldr	r1, [r3]
    fa84:	e3042d43 	movw	r2, #19779	; 0x4d43
    fa88:	e345204c 	movt	r2, #20556	; 0x504c
    fa8c:	e1510002 	cmp	r1, r2
    fa90:	0a000006 	beq	fab0 <CPtrList::Remove(TPtrListElement*)+0x124>
    fa94:	e3021e58 	movw	r1, #11864	; 0x2e58
    fa98:	e3401005 	movt	r1, #5
    fa9c:	e3020f60 	movw	r0, #12128	; 0x2f60
    faa0:	e3400005 	movt	r0, #5
    faa4:	e3a02098 	mov	r2, #152	; 0x98
    faa8:	ebfff3c6 	bl	c9c8 <assertion_failed>
    faac:	e5943008 	ldr	r3, [r4, #8]
    fab0:	e3a02000 	mov	r2, #0
    fab4:	e5832004 	str	r2, [r3, #4]
    fab8:	eaffffe7 	b	fa5c <CPtrList::Remove(TPtrListElement*)+0xd0>
    fabc:	e3021e58 	movw	r1, #11864	; 0x2e58
    fac0:	e3401005 	movt	r1, #5
    fac4:	e3020e74 	movw	r0, #11892	; 0x2e74
    fac8:	e3400005 	movt	r0, #5
    facc:	e3a0208f 	mov	r2, #143	; 0x8f
    fad0:	ebfff3bc 	bl	c9c8 <assertion_failed>
    fad4:	eaffffb0 	b	f99c <CPtrList::Remove(TPtrListElement*)+0x10>
    fad8:	e3021e58 	movw	r1, #11864	; 0x2e58
    fadc:	e3401005 	movt	r1, #5
    fae0:	e3020f8c 	movw	r0, #12172	; 0x2f8c
    fae4:	e3400005 	movt	r0, #5
    fae8:	e3a0209e 	mov	r2, #158	; 0x9e
    faec:	ebfff3b5 	bl	c9c8 <assertion_failed>
    faf0:	e5943004 	ldr	r3, [r4, #4]
    faf4:	eaffffb9 	b	f9e0 <CPtrList::Remove(TPtrListElement*)+0x54>

0000faf8 <CPtrList::Find(void*)>:
    faf8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fafc:	e5904000 	ldr	r4, [r0]
    fb00:	e3540000 	cmp	r4, #0
    fb04:	0a000016 	beq	fb64 <CPtrList::Find(void*)+0x6c>
    fb08:	e3048d43 	movw	r8, #19779	; 0x4d43
    fb0c:	e345804c 	movt	r8, #20556	; 0x504c
    fb10:	e3027e58 	movw	r7, #11864	; 0x2e58
    fb14:	e3407005 	movt	r7, #5
    fb18:	e3026e84 	movw	r6, #11908	; 0x2e84
    fb1c:	e3406005 	movt	r6, #5
    fb20:	e1a05001 	mov	r5, r1
    fb24:	ea000002 	b	fb34 <CPtrList::Find(void*)+0x3c>
    fb28:	e5944008 	ldr	r4, [r4, #8]
    fb2c:	e3540000 	cmp	r4, #0
    fb30:	0a00000b 	beq	fb64 <CPtrList::Find(void*)+0x6c>
    fb34:	e5943000 	ldr	r3, [r4]
    fb38:	e3a020b3 	mov	r2, #179	; 0xb3
    fb3c:	e1a01007 	mov	r1, r7
    fb40:	e1a00006 	mov	r0, r6
    fb44:	e1530008 	cmp	r3, r8
    fb48:	0a000000 	beq	fb50 <CPtrList::Find(void*)+0x58>
    fb4c:	ebfff39d 	bl	c9c8 <assertion_failed>
    fb50:	e594300c 	ldr	r3, [r4, #12]
    fb54:	e1530005 	cmp	r3, r5
    fb58:	1afffff2 	bne	fb28 <CPtrList::Find(void*)+0x30>
    fb5c:	e1a00004 	mov	r0, r4
    fb60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fb64:	e3a04000 	mov	r4, #0
    fb68:	e1a00004 	mov	r0, r4
    fb6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000fb70 <mem_init>:
    fb70:	e0801001 	add	r1, r0, r1
    fb74:	e30321e4 	movw	r2, #12772	; 0x31e4
    fb78:	e3402005 	movt	r2, #5
    fb7c:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
    fb80:	e3500605 	cmp	r0, #5242880	; 0x500000
    fb84:	e2433a03 	sub	r3, r3, #12288	; 0x3000
    fb88:	33a00605 	movcc	r0, #5242880	; 0x500000
    fb8c:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
    fb90:	e241c501 	sub	ip, r1, #4194304	; 0x400000
    fb94:	e3c3300f 	bic	r3, r3, #15
    fb98:	e5820000 	str	r0, [r2]
    fb9c:	e582100c 	str	r1, [r2, #12]
    fba0:	e582c004 	str	ip, [r2, #4]
    fba4:	e5823008 	str	r3, [r2, #8]
    fba8:	e12fff1e 	bx	lr

0000fbac <mem_get_size>:
    fbac:	e30331e4 	movw	r3, #12772	; 0x31e4
    fbb0:	e3403005 	movt	r3, #5
    fbb4:	e5930004 	ldr	r0, [r3, #4]
    fbb8:	e5931000 	ldr	r1, [r3]
    fbbc:	e593200c 	ldr	r2, [r3, #12]
    fbc0:	e5933008 	ldr	r3, [r3, #8]
    fbc4:	e0400001 	sub	r0, r0, r1
    fbc8:	e0423003 	sub	r3, r2, r3
    fbcc:	e0800003 	add	r0, r0, r3
    fbd0:	e12fff1e 	bx	lr

0000fbd4 <malloc>:
    fbd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fbd8:	e30371e4 	movw	r7, #12772	; 0x31e4
    fbdc:	e3407005 	movt	r7, #5
    fbe0:	e1a05000 	mov	r5, r0
    fbe4:	e5973000 	ldr	r3, [r7]
    fbe8:	e3530000 	cmp	r3, #0
    fbec:	0a000053 	beq	fd40 <malloc+0x16c>
    fbf0:	e5973010 	ldr	r3, [r7, #16]
    fbf4:	e3530000 	cmp	r3, #0
    fbf8:	1a00004b 	bne	fd2c <malloc+0x158>
    fbfc:	e3034104 	movw	r4, #12548	; 0x3104
    fc00:	e3404005 	movt	r4, #5
    fc04:	e5943000 	ldr	r3, [r4]
    fc08:	e3530000 	cmp	r3, #0
    fc0c:	0a000007 	beq	fc30 <malloc+0x5c>
    fc10:	e1550003 	cmp	r5, r3
    fc14:	8a000002 	bhi	fc24 <malloc+0x50>
    fc18:	ea000011 	b	fc64 <malloc+0x90>
    fc1c:	e1530005 	cmp	r3, r5
    fc20:	2a00000f 	bcs	fc64 <malloc+0x90>
    fc24:	e5b43008 	ldr	r3, [r4, #8]!
    fc28:	e3530000 	cmp	r3, #0
    fc2c:	1afffffa 	bne	fc1c <malloc+0x48>
    fc30:	e5976000 	ldr	r6, [r7]
    fc34:	e285301f 	add	r3, r5, #31
    fc38:	e3c3300f 	bic	r3, r3, #15
    fc3c:	e5972004 	ldr	r2, [r7, #4]
    fc40:	e0863003 	add	r3, r6, r3
    fc44:	e1530002 	cmp	r3, r2
    fc48:	e5873000 	str	r3, [r7]
    fc4c:	9a000028 	bls	fcf4 <malloc+0x120>
    fc50:	e5974010 	ldr	r4, [r7, #16]
    fc54:	e3540000 	cmp	r4, #0
    fc58:	1a000035 	bne	fd34 <malloc+0x160>
    fc5c:	e1a00004 	mov	r0, r4
    fc60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fc64:	e5946004 	ldr	r6, [r4, #4]
    fc68:	e3560000 	cmp	r6, #0
    fc6c:	01a05003 	moveq	r5, r3
    fc70:	0affffee 	beq	fc30 <malloc+0x5c>
    fc74:	e5962000 	ldr	r2, [r6]
    fc78:	e3043d43 	movw	r3, #19779	; 0x4d43
    fc7c:	e344324c 	movt	r3, #16972	; 0x424c
    fc80:	e1520003 	cmp	r2, r3
    fc84:	0a000005 	beq	fca0 <malloc+0xcc>
    fc88:	e3021fd0 	movw	r1, #12240	; 0x2fd0
    fc8c:	e3401005 	movt	r1, #5
    fc90:	e3020ff0 	movw	r0, #12272	; 0x2ff0
    fc94:	e3400005 	movt	r0, #5
    fc98:	e3a02089 	mov	r2, #137	; 0x89
    fc9c:	ebfff349 	bl	c9c8 <assertion_failed>
    fca0:	e5963008 	ldr	r3, [r6, #8]
    fca4:	e5843004 	str	r3, [r4, #4]
    fca8:	e5973010 	ldr	r3, [r7, #16]
    fcac:	e3530000 	cmp	r3, #0
    fcb0:	1a00001b 	bne	fd24 <malloc+0x150>
    fcb4:	e2864010 	add	r4, r6, #16
    fcb8:	e3a03000 	mov	r3, #0
    fcbc:	e314000f 	tst	r4, #15
    fcc0:	e5c63008 	strb	r3, [r6, #8]
    fcc4:	e5c63009 	strb	r3, [r6, #9]
    fcc8:	e5c6300a 	strb	r3, [r6, #10]
    fccc:	e5c6300b 	strb	r3, [r6, #11]
    fcd0:	0affffe1 	beq	fc5c <malloc+0x88>
    fcd4:	e3a020a1 	mov	r2, #161	; 0xa1
    fcd8:	e3021fd0 	movw	r1, #12240	; 0x2fd0
    fcdc:	e3401005 	movt	r1, #5
    fce0:	e3030014 	movw	r0, #12308	; 0x3014
    fce4:	e3400005 	movt	r0, #5
    fce8:	ebfff336 	bl	c9c8 <assertion_failed>
    fcec:	e1a00004 	mov	r0, r4
    fcf0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fcf4:	e3a03042 	mov	r3, #66	; 0x42
    fcf8:	e3a00043 	mov	r0, #67	; 0x43
    fcfc:	e5c63003 	strb	r3, [r6, #3]
    fd00:	e3a0104d 	mov	r1, #77	; 0x4d
    fd04:	e5973010 	ldr	r3, [r7, #16]
    fd08:	e3a0204c 	mov	r2, #76	; 0x4c
    fd0c:	e5865004 	str	r5, [r6, #4]
    fd10:	e3530000 	cmp	r3, #0
    fd14:	e5c60000 	strb	r0, [r6]
    fd18:	e5c61001 	strb	r1, [r6, #1]
    fd1c:	e5c62002 	strb	r2, [r6, #2]
    fd20:	0affffe3 	beq	fcb4 <malloc+0xe0>
    fd24:	ebffe98b 	bl	a358 <LeaveCritical>
    fd28:	eaffffe1 	b	fcb4 <malloc+0xe0>
    fd2c:	ebffe97c 	bl	a324 <EnterCritical>
    fd30:	eaffffb1 	b	fbfc <malloc+0x28>
    fd34:	ebffe987 	bl	a358 <LeaveCritical>
    fd38:	e3a04000 	mov	r4, #0
    fd3c:	eaffffc6 	b	fc5c <malloc+0x88>
    fd40:	e3021fd0 	movw	r1, #12240	; 0x2fd0
    fd44:	e3401005 	movt	r1, #5
    fd48:	e3020fdc 	movw	r0, #12252	; 0x2fdc
    fd4c:	e3400005 	movt	r0, #5
    fd50:	e3a0206f 	mov	r2, #111	; 0x6f
    fd54:	ebfff31b 	bl	c9c8 <assertion_failed>
    fd58:	eaffffa4 	b	fbf0 <malloc+0x1c>

0000fd5c <free>:
    fd5c:	e92d4070 	push	{r4, r5, r6, lr}
    fd60:	e2505000 	subs	r5, r0, #0
    fd64:	08bd8070 	popeq	{r4, r5, r6, pc}
    fd68:	e5352010 	ldr	r2, [r5, #-16]!
    fd6c:	e3043d43 	movw	r3, #19779	; 0x4d43
    fd70:	e344324c 	movt	r3, #16972	; 0x424c
    fd74:	e1520003 	cmp	r2, r3
    fd78:	0a000005 	beq	fd94 <free+0x38>
    fd7c:	e3021fd0 	movw	r1, #12240	; 0x2fd0
    fd80:	e3401005 	movt	r1, #5
    fd84:	e3020ff0 	movw	r0, #12272	; 0x2ff0
    fd88:	e3400005 	movt	r0, #5
    fd8c:	e3a020ae 	mov	r2, #174	; 0xae
    fd90:	ebfff30c 	bl	c9c8 <assertion_failed>
    fd94:	e3034104 	movw	r4, #12548	; 0x3104
    fd98:	e3404005 	movt	r4, #5
    fd9c:	e5943000 	ldr	r3, [r4]
    fda0:	e3530000 	cmp	r3, #0
    fda4:	08bd8070 	popeq	{r4, r5, r6, pc}
    fda8:	e5952004 	ldr	r2, [r5, #4]
    fdac:	e1520003 	cmp	r2, r3
    fdb0:	1a000002 	bne	fdc0 <free+0x64>
    fdb4:	ea000005 	b	fdd0 <free+0x74>
    fdb8:	e1530002 	cmp	r3, r2
    fdbc:	0a000003 	beq	fdd0 <free+0x74>
    fdc0:	e5b43008 	ldr	r3, [r4, #8]!
    fdc4:	e3530000 	cmp	r3, #0
    fdc8:	1afffffa 	bne	fdb8 <free+0x5c>
    fdcc:	e8bd8070 	pop	{r4, r5, r6, pc}
    fdd0:	e30361e4 	movw	r6, #12772	; 0x31e4
    fdd4:	e3406005 	movt	r6, #5
    fdd8:	e5963010 	ldr	r3, [r6, #16]
    fddc:	e3530000 	cmp	r3, #0
    fde0:	1a000003 	bne	fdf4 <free+0x98>
    fde4:	e5943004 	ldr	r3, [r4, #4]
    fde8:	e5853008 	str	r3, [r5, #8]
    fdec:	e5845004 	str	r5, [r4, #4]
    fdf0:	e8bd8070 	pop	{r4, r5, r6, pc}
    fdf4:	ebffe94a 	bl	a324 <EnterCritical>
    fdf8:	e5962010 	ldr	r2, [r6, #16]
    fdfc:	e5943004 	ldr	r3, [r4, #4]
    fe00:	e3520000 	cmp	r2, #0
    fe04:	e5853008 	str	r3, [r5, #8]
    fe08:	e5845004 	str	r5, [r4, #4]
    fe0c:	08bd8070 	popeq	{r4, r5, r6, pc}
    fe10:	e8bd4070 	pop	{r4, r5, r6, lr}
    fe14:	eaffe94f 	b	a358 <LeaveCritical>

0000fe18 <palloc>:
    fe18:	e92d4070 	push	{r4, r5, r6, lr}
    fe1c:	e30341e4 	movw	r4, #12772	; 0x31e4
    fe20:	e3404005 	movt	r4, #5
    fe24:	e5943008 	ldr	r3, [r4, #8]
    fe28:	e3530000 	cmp	r3, #0
    fe2c:	0a00002c 	beq	fee4 <palloc+0xcc>
    fe30:	e5943014 	ldr	r3, [r4, #20]
    fe34:	e3530000 	cmp	r3, #0
    fe38:	1a000019 	bne	fea4 <palloc+0x8c>
    fe3c:	e5945018 	ldr	r5, [r4, #24]
    fe40:	e3550000 	cmp	r5, #0
    fe44:	0a00001a 	beq	feb4 <palloc+0x9c>
    fe48:	e5952000 	ldr	r2, [r5]
    fe4c:	e3043d43 	movw	r3, #19779	; 0x4d43
    fe50:	e3453047 	movt	r3, #20551	; 0x5047
    fe54:	e1520003 	cmp	r2, r3
    fe58:	0a000005 	beq	fe74 <palloc+0x5c>
    fe5c:	e3021fd0 	movw	r1, #12240	; 0x2fd0
    fe60:	e3401005 	movt	r1, #5
    fe64:	e3030054 	movw	r0, #12372	; 0x3054
    fe68:	e3400005 	movt	r0, #5
    fe6c:	e3a020d4 	mov	r2, #212	; 0xd4
    fe70:	ebfff2d4 	bl	c9c8 <assertion_failed>
    fe74:	e5953004 	ldr	r3, [r5, #4]
    fe78:	e3a02000 	mov	r2, #0
    fe7c:	e5852000 	str	r2, [r5]
    fe80:	e5843018 	str	r3, [r4, #24]
    fe84:	e5943014 	ldr	r3, [r4, #20]
    fe88:	e3530000 	cmp	r3, #0
    fe8c:	1a000001 	bne	fe98 <palloc+0x80>
    fe90:	e1a00005 	mov	r0, r5
    fe94:	e8bd8070 	pop	{r4, r5, r6, pc}
    fe98:	ebffe92e 	bl	a358 <LeaveCritical>
    fe9c:	e1a00005 	mov	r0, r5
    fea0:	e8bd8070 	pop	{r4, r5, r6, pc}
    fea4:	ebffe91e 	bl	a324 <EnterCritical>
    fea8:	e5945018 	ldr	r5, [r4, #24]
    feac:	e3550000 	cmp	r5, #0
    feb0:	1affffe4 	bne	fe48 <palloc+0x30>
    feb4:	e5945008 	ldr	r5, [r4, #8]
    feb8:	e594200c 	ldr	r2, [r4, #12]
    febc:	e2853a01 	add	r3, r5, #4096	; 0x1000
    fec0:	e1530002 	cmp	r3, r2
    fec4:	e5843008 	str	r3, [r4, #8]
    fec8:	9affffed 	bls	fe84 <palloc+0x6c>
    fecc:	e5945014 	ldr	r5, [r4, #20]
    fed0:	e3550000 	cmp	r5, #0
    fed4:	0affffed 	beq	fe90 <palloc+0x78>
    fed8:	ebffe91e 	bl	a358 <LeaveCritical>
    fedc:	e3a00000 	mov	r0, #0
    fee0:	e8bd8070 	pop	{r4, r5, r6, pc}
    fee4:	e3021fd0 	movw	r1, #12240	; 0x2fd0
    fee8:	e3401005 	movt	r1, #5
    feec:	e3030040 	movw	r0, #12352	; 0x3040
    fef0:	e3400005 	movt	r0, #5
    fef4:	e3a020c6 	mov	r2, #198	; 0xc6
    fef8:	ebfff2b2 	bl	c9c8 <assertion_failed>
    fefc:	eaffffcb 	b	fe30 <palloc+0x18>

0000ff00 <pfree>:
    ff00:	e92d4070 	push	{r4, r5, r6, lr}
    ff04:	e2505000 	subs	r5, r0, #0
    ff08:	08bd8070 	popeq	{r4, r5, r6, pc}
    ff0c:	e30341e4 	movw	r4, #12772	; 0x31e4
    ff10:	e3404005 	movt	r4, #5
    ff14:	e5943014 	ldr	r3, [r4, #20]
    ff18:	e3530000 	cmp	r3, #0
    ff1c:	1a000006 	bne	ff3c <pfree+0x3c>
    ff20:	e5942018 	ldr	r2, [r4, #24]
    ff24:	e3043d43 	movw	r3, #19779	; 0x4d43
    ff28:	e3453047 	movt	r3, #20551	; 0x5047
    ff2c:	e5853000 	str	r3, [r5]
    ff30:	e5852004 	str	r2, [r5, #4]
    ff34:	e5845018 	str	r5, [r4, #24]
    ff38:	e8bd8070 	pop	{r4, r5, r6, pc}
    ff3c:	ebffe8f8 	bl	a324 <EnterCritical>
    ff40:	e5941014 	ldr	r1, [r4, #20]
    ff44:	e5942018 	ldr	r2, [r4, #24]
    ff48:	e3043d43 	movw	r3, #19779	; 0x4d43
    ff4c:	e3453047 	movt	r3, #20551	; 0x5047
    ff50:	e3510000 	cmp	r1, #0
    ff54:	e5853000 	str	r3, [r5]
    ff58:	e5852004 	str	r2, [r5, #4]
    ff5c:	e5845018 	str	r5, [r4, #24]
    ff60:	08bd8070 	popeq	{r4, r5, r6, pc}
    ff64:	e8bd4070 	pop	{r4, r5, r6, lr}
    ff68:	eaffe8fa 	b	a358 <LeaveCritical>

0000ff6c <_GLOBAL__sub_I_mem_init>:
    ff6c:	e30331e4 	movw	r3, #12772	; 0x31e4
    ff70:	e3403005 	movt	r3, #5
    ff74:	e3a02001 	mov	r2, #1
    ff78:	e5832010 	str	r2, [r3, #16]
    ff7c:	e5832014 	str	r2, [r3, #20]
    ff80:	e12fff1e 	bx	lr

0000ff84 <CBcmMailBox::CBcmMailBox(unsigned int)>:
    ff84:	e3a02000 	mov	r2, #0
    ff88:	e8800006 	stm	r0, {r1, r2}
    ff8c:	e12fff1e 	bx	lr

0000ff90 <CBcmMailBox::~CBcmMailBox()>:
    ff90:	e12fff1e 	bx	lr

0000ff94 <CBcmMailBox::Flush()>:
    ff94:	e92d4010 	push	{r4, lr}
    ff98:	e3a04a0b 	mov	r4, #45056	; 0xb000
    ff9c:	e3434f00 	movt	r4, #16128	; 0x3f00
    ffa0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    ffa4:	e3130101 	tst	r3, #1073741824	; 0x40000000
    ffa8:	18bd8010 	popne	{r4, pc}
    ffac:	e3a00014 	mov	r0, #20
    ffb0:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    ffb4:	ebffebc7 	bl	aed8 <CTimer::SimpleMsDelay(unsigned int)>
    ffb8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    ffbc:	e3130101 	tst	r3, #1073741824	; 0x40000000
    ffc0:	0afffff9 	beq	ffac <CBcmMailBox::Flush()+0x18>
    ffc4:	e8bd8010 	pop	{r4, pc}

0000ffc8 <CBcmMailBox::Read()>:
    ffc8:	e5901000 	ldr	r1, [r0]
    ffcc:	e3a02a0b 	mov	r2, #45056	; 0xb000
    ffd0:	e3432f00 	movt	r2, #16128	; 0x3f00
    ffd4:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    ffd8:	e3130101 	tst	r3, #1073741824	; 0x40000000
    ffdc:	1afffffc 	bne	ffd4 <CBcmMailBox::Read()+0xc>
    ffe0:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
    ffe4:	e200300f 	and	r3, r0, #15
    ffe8:	e1510003 	cmp	r1, r3
    ffec:	1afffff8 	bne	ffd4 <CBcmMailBox::Read()+0xc>
    fff0:	e3c0000f 	bic	r0, r0, #15
    fff4:	e12fff1e 	bx	lr

0000fff8 <CBcmMailBox::Write(unsigned int)>:
    fff8:	e92d4070 	push	{r4, r5, r6, lr}
    fffc:	e3a02a0b 	mov	r2, #45056	; 0xb000
   10000:	e3432f00 	movt	r2, #16128	; 0x3f00
   10004:	e1a05000 	mov	r5, r0
   10008:	e1a04001 	mov	r4, r1
   1000c:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   10010:	e3530000 	cmp	r3, #0
   10014:	bafffffc 	blt	1000c <CBcmMailBox::Write(unsigned int)+0x14>
   10018:	e314000f 	tst	r4, #15
   1001c:	0a000005 	beq	10038 <CBcmMailBox::Write(unsigned int)+0x40>
   10020:	e3031078 	movw	r1, #12408	; 0x3078
   10024:	e3401005 	movt	r1, #5
   10028:	e3030088 	movw	r0, #12424	; 0x3088
   1002c:	e3400005 	movt	r0, #5
   10030:	e3a0205a 	mov	r2, #90	; 0x5a
   10034:	ebfff263 	bl	c9c8 <assertion_failed>
   10038:	e5952000 	ldr	r2, [r5]
   1003c:	e3a03a0b 	mov	r3, #45056	; 0xb000
   10040:	e3433f00 	movt	r3, #16128	; 0x3f00
   10044:	e1844002 	orr	r4, r4, r2
   10048:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   1004c:	e8bd8070 	pop	{r4, r5, r6, pc}

00010050 <CBcmMailBox::WriteRead(unsigned int)>:
   10050:	e5903004 	ldr	r3, [r0, #4]
   10054:	e92d4070 	push	{r4, r5, r6, lr}
   10058:	e1a05000 	mov	r5, r0
   1005c:	e3530000 	cmp	r3, #0
   10060:	e1a06001 	mov	r6, r1
   10064:	1a00001e 	bne	100e4 <CBcmMailBox::WriteRead(unsigned int)+0x94>
   10068:	e3a04a0b 	mov	r4, #45056	; 0xb000
   1006c:	e3434f00 	movt	r4, #16128	; 0x3f00
   10070:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   10074:	e3130101 	tst	r3, #1073741824	; 0x40000000
   10078:	1a000005 	bne	10094 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   1007c:	e3a00014 	mov	r0, #20
   10080:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   10084:	ebffeb93 	bl	aed8 <CTimer::SimpleMsDelay(unsigned int)>
   10088:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1008c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   10090:	0afffff9 	beq	1007c <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   10094:	e1a00005 	mov	r0, r5
   10098:	e1a01006 	mov	r1, r6
   1009c:	ebffffd5 	bl	fff8 <CBcmMailBox::Write(unsigned int)>
   100a0:	e5950000 	ldr	r0, [r5]
   100a4:	e3a02a0b 	mov	r2, #45056	; 0xb000
   100a8:	e3432f00 	movt	r2, #16128	; 0x3f00
   100ac:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   100b0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   100b4:	1afffffc 	bne	100ac <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   100b8:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   100bc:	e203100f 	and	r1, r3, #15
   100c0:	e1510000 	cmp	r1, r0
   100c4:	1afffff8 	bne	100ac <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   100c8:	e5952004 	ldr	r2, [r5, #4]
   100cc:	e3c3400f 	bic	r4, r3, #15
   100d0:	e3520000 	cmp	r2, #0
   100d4:	0a000000 	beq	100dc <CBcmMailBox::WriteRead(unsigned int)+0x8c>
   100d8:	ebffe89e 	bl	a358 <LeaveCritical>
   100dc:	e1a00004 	mov	r0, r4
   100e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   100e4:	ebffe88e 	bl	a324 <EnterCritical>
   100e8:	eaffffde 	b	10068 <CBcmMailBox::WriteRead(unsigned int)+0x18>

000100ec <memset>:
   100ec:	e3520000 	cmp	r2, #0
   100f0:	012fff1e 	bxeq	lr
   100f4:	e6af1071 	sxtb	r1, r1
   100f8:	e0802002 	add	r2, r0, r2
   100fc:	e1a03000 	mov	r3, r0
   10100:	e4c31001 	strb	r1, [r3], #1
   10104:	e1530002 	cmp	r3, r2
   10108:	1afffffc 	bne	10100 <memset+0x14>
   1010c:	e12fff1e 	bx	lr

00010110 <memcmp>:
   10110:	e3520000 	cmp	r2, #0
   10114:	0a00000e 	beq	10154 <memcmp+0x44>
   10118:	e5d0c000 	ldrb	ip, [r0]
   1011c:	e5d13000 	ldrb	r3, [r1]
   10120:	e15c0003 	cmp	ip, r3
   10124:	ca00000c 	bgt	1015c <memcmp+0x4c>
   10128:	ba00000d 	blt	10164 <memcmp+0x54>
   1012c:	e0812002 	add	r2, r1, r2
   10130:	e2811001 	add	r1, r1, #1
   10134:	ea000004 	b	1014c <memcmp+0x3c>
   10138:	e5f0c001 	ldrb	ip, [r0, #1]!
   1013c:	e4d13001 	ldrb	r3, [r1], #1
   10140:	e15c0003 	cmp	ip, r3
   10144:	ca000004 	bgt	1015c <memcmp+0x4c>
   10148:	ba000005 	blt	10164 <memcmp+0x54>
   1014c:	e1510002 	cmp	r1, r2
   10150:	1afffff8 	bne	10138 <memcmp+0x28>
   10154:	e3a00000 	mov	r0, #0
   10158:	e12fff1e 	bx	lr
   1015c:	e3a00001 	mov	r0, #1
   10160:	e12fff1e 	bx	lr
   10164:	e3e00000 	mvn	r0, #0
   10168:	e12fff1e 	bx	lr

0001016c <strlen>:
   1016c:	e1d010d0 	ldrsb	r1, [r0]
   10170:	e2803001 	add	r3, r0, #1
   10174:	e3510000 	cmp	r1, #0
   10178:	0a000003 	beq	1018c <strlen+0x20>
   1017c:	e0431000 	sub	r1, r3, r0
   10180:	e0d320d1 	ldrsb	r2, [r3], #1
   10184:	e3520000 	cmp	r2, #0
   10188:	1afffffb 	bne	1017c <strlen+0x10>
   1018c:	e1a00001 	mov	r0, r1
   10190:	e12fff1e 	bx	lr

00010194 <strcmp>:
   10194:	e1d030d0 	ldrsb	r3, [r0]
   10198:	e1d120d0 	ldrsb	r2, [r1]
   1019c:	e3530000 	cmp	r3, #0
   101a0:	1a000007 	bne	101c4 <strcmp+0x30>
   101a4:	ea000008 	b	101cc <strcmp+0x38>
   101a8:	e1530002 	cmp	r3, r2
   101ac:	ca00000b 	bgt	101e0 <strcmp+0x4c>
   101b0:	ba00000c 	blt	101e8 <strcmp+0x54>
   101b4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   101b8:	e3530000 	cmp	r3, #0
   101bc:	0a00000b 	beq	101f0 <strcmp+0x5c>
   101c0:	e1f120d1 	ldrsb	r2, [r1, #1]!
   101c4:	e3520000 	cmp	r2, #0
   101c8:	1afffff6 	bne	101a8 <strcmp+0x14>
   101cc:	e1530002 	cmp	r3, r2
   101d0:	ca000002 	bgt	101e0 <strcmp+0x4c>
   101d4:	b3e00000 	mvnlt	r0, #0
   101d8:	a3a00000 	movge	r0, #0
   101dc:	e12fff1e 	bx	lr
   101e0:	e3a00001 	mov	r0, #1
   101e4:	e12fff1e 	bx	lr
   101e8:	e3e00000 	mvn	r0, #0
   101ec:	e12fff1e 	bx	lr
   101f0:	e1d120d1 	ldrsb	r2, [r1, #1]
   101f4:	e1530002 	cmp	r3, r2
   101f8:	dafffff5 	ble	101d4 <strcmp+0x40>
   101fc:	eafffff7 	b	101e0 <strcmp+0x4c>

00010200 <strcpy>:
   10200:	e1d130d0 	ldrsb	r3, [r1]
   10204:	e1a02000 	mov	r2, r0
   10208:	e3530000 	cmp	r3, #0
   1020c:	0a000003 	beq	10220 <strcpy+0x20>
   10210:	e4c23001 	strb	r3, [r2], #1
   10214:	e1f130d1 	ldrsb	r3, [r1, #1]!
   10218:	e3530000 	cmp	r3, #0
   1021c:	1afffffb 	bne	10210 <strcpy+0x10>
   10220:	e3a03000 	mov	r3, #0
   10224:	e5c23000 	strb	r3, [r2]
   10228:	e12fff1e 	bx	lr

0001022c <strncpy>:
   1022c:	e3520000 	cmp	r2, #0
   10230:	012fff1e 	bxeq	lr
   10234:	e1d1c0d0 	ldrsb	ip, [r1]
   10238:	e35c0000 	cmp	ip, #0
   1023c:	0a000009 	beq	10268 <strncpy+0x3c>
   10240:	e0802002 	add	r2, r0, r2
   10244:	e1a03000 	mov	r3, r0
   10248:	ea000002 	b	10258 <strncpy+0x2c>
   1024c:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   10250:	e35c0000 	cmp	ip, #0
   10254:	0a000004 	beq	1026c <strncpy+0x40>
   10258:	e4c3c001 	strb	ip, [r3], #1
   1025c:	e1530002 	cmp	r3, r2
   10260:	1afffff9 	bne	1024c <strncpy+0x20>
   10264:	e12fff1e 	bx	lr
   10268:	e1a03000 	mov	r3, r0
   1026c:	e3a02000 	mov	r2, #0
   10270:	e5c32000 	strb	r2, [r3]
   10274:	e12fff1e 	bx	lr

00010278 <strcat>:
   10278:	e1d030d0 	ldrsb	r3, [r0]
   1027c:	e3530000 	cmp	r3, #0
   10280:	e1a03000 	mov	r3, r0
   10284:	0a000002 	beq	10294 <strcat+0x1c>
   10288:	e1f320d1 	ldrsb	r2, [r3, #1]!
   1028c:	e3520000 	cmp	r2, #0
   10290:	1afffffc 	bne	10288 <strcat+0x10>
   10294:	e1d120d0 	ldrsb	r2, [r1]
   10298:	e3520000 	cmp	r2, #0
   1029c:	0a000003 	beq	102b0 <strcat+0x38>
   102a0:	e4c32001 	strb	r2, [r3], #1
   102a4:	e1f120d1 	ldrsb	r2, [r1, #1]!
   102a8:	e3520000 	cmp	r2, #0
   102ac:	1afffffb 	bne	102a0 <strcat+0x28>
   102b0:	e3a02000 	mov	r2, #0
   102b4:	e5c32000 	strb	r2, [r3]
   102b8:	e12fff1e 	bx	lr

000102bc <strchr>:
   102bc:	e1d020d0 	ldrsb	r2, [r0]
   102c0:	e3520000 	cmp	r2, #0
   102c4:	0a000009 	beq	102f0 <strchr+0x34>
   102c8:	e1510002 	cmp	r1, r2
   102cc:	1a000002 	bne	102dc <strchr+0x20>
   102d0:	ea000008 	b	102f8 <strchr+0x3c>
   102d4:	e1530001 	cmp	r3, r1
   102d8:	012fff1e 	bxeq	lr
   102dc:	e1f030d1 	ldrsb	r3, [r0, #1]!
   102e0:	e3530000 	cmp	r3, #0
   102e4:	1afffffa 	bne	102d4 <strchr+0x18>
   102e8:	e1a00003 	mov	r0, r3
   102ec:	e12fff1e 	bx	lr
   102f0:	e1a00002 	mov	r0, r2
   102f4:	e12fff1e 	bx	lr
   102f8:	e12fff1e 	bx	lr

000102fc <strtok_r>:
   102fc:	e3500000 	cmp	r0, #0
   10300:	0a00002c 	beq	103b8 <strtok_r+0xbc>
   10304:	e92d4030 	push	{r4, r5, lr}
   10308:	e1d0e0d0 	ldrsb	lr, [r0]
   1030c:	e35e0000 	cmp	lr, #0
   10310:	11d140d0 	ldrsbne	r4, [r1]
   10314:	0a000024 	beq	103ac <strtok_r+0xb0>
   10318:	e3540000 	cmp	r4, #0
   1031c:	0a000008 	beq	10344 <strtok_r+0x48>
   10320:	e15e0004 	cmp	lr, r4
   10324:	0a000019 	beq	10390 <strtok_r+0x94>
   10328:	e1a0c001 	mov	ip, r1
   1032c:	ea000001 	b	10338 <strtok_r+0x3c>
   10330:	e15e0003 	cmp	lr, r3
   10334:	0a000015 	beq	10390 <strtok_r+0x94>
   10338:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   1033c:	e3530000 	cmp	r3, #0
   10340:	1afffffa 	bne	10330 <strtok_r+0x34>
   10344:	e35e0000 	cmp	lr, #0
   10348:	0a000017 	beq	103ac <strtok_r+0xb0>
   1034c:	e1a05000 	mov	r5, r0
   10350:	e3540000 	cmp	r4, #0
   10354:	0a000008 	beq	1037c <strtok_r+0x80>
   10358:	e15e0004 	cmp	lr, r4
   1035c:	0a00000d 	beq	10398 <strtok_r+0x9c>
   10360:	e1a0c001 	mov	ip, r1
   10364:	ea000001 	b	10370 <strtok_r+0x74>
   10368:	e15e0003 	cmp	lr, r3
   1036c:	0a000009 	beq	10398 <strtok_r+0x9c>
   10370:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   10374:	e3530000 	cmp	r3, #0
   10378:	1afffffa 	bne	10368 <strtok_r+0x6c>
   1037c:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   10380:	e35e0000 	cmp	lr, #0
   10384:	1afffff1 	bne	10350 <strtok_r+0x54>
   10388:	e5825000 	str	r5, [r2]
   1038c:	e8bd8030 	pop	{r4, r5, pc}
   10390:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   10394:	eaffffdf 	b	10318 <strtok_r+0x1c>
   10398:	e3a03000 	mov	r3, #0
   1039c:	e2855001 	add	r5, r5, #1
   103a0:	e5453001 	strb	r3, [r5, #-1]
   103a4:	e5825000 	str	r5, [r2]
   103a8:	e8bd8030 	pop	{r4, r5, pc}
   103ac:	e3a00000 	mov	r0, #0
   103b0:	e5820000 	str	r0, [r2]
   103b4:	e8bd8030 	pop	{r4, r5, pc}
   103b8:	e5920000 	ldr	r0, [r2]
   103bc:	e3500000 	cmp	r0, #0
   103c0:	1affffcf 	bne	10304 <strtok_r+0x8>
   103c4:	e12fff1e 	bx	lr

000103c8 <strtoul>:
   103c8:	e3510000 	cmp	r1, #0
   103cc:	e92d4070 	push	{r4, r5, r6, lr}
   103d0:	e2425002 	sub	r5, r2, #2
   103d4:	e3c2e010 	bic	lr, r2, #16
   103d8:	15810000 	strne	r0, [r1]
   103dc:	e3520000 	cmp	r2, #0
   103e0:	13550022 	cmpne	r5, #34	; 0x22
   103e4:	83a05001 	movhi	r5, #1
   103e8:	93a05000 	movls	r5, #0
   103ec:	8a000036 	bhi	104cc <strtoul+0x104>
   103f0:	e1d0c0d0 	ldrsb	ip, [r0]
   103f4:	e1a04000 	mov	r4, r0
   103f8:	e2800001 	add	r0, r0, #1
   103fc:	e35c0020 	cmp	ip, #32
   10400:	e24c3009 	sub	r3, ip, #9
   10404:	e6ef3073 	uxtb	r3, r3
   10408:	0afffff8 	beq	103f0 <strtoul+0x28>
   1040c:	e3530004 	cmp	r3, #4
   10410:	9afffff6 	bls	103f0 <strtoul+0x28>
   10414:	e35c002b 	cmp	ip, #43	; 0x2b
   10418:	0a00002d 	beq	104d4 <strtoul+0x10c>
   1041c:	e35c002d 	cmp	ip, #45	; 0x2d
   10420:	03a06001 	moveq	r6, #1
   10424:	13a06000 	movne	r6, #0
   10428:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   1042c:	01a04000 	moveq	r4, r0
   10430:	e35c0030 	cmp	ip, #48	; 0x30
   10434:	0a00002b 	beq	104e8 <strtoul+0x120>
   10438:	e3520000 	cmp	r2, #0
   1043c:	03a0200a 	moveq	r2, #10
   10440:	e35c002f 	cmp	ip, #47	; 0x2f
   10444:	e1a0300c 	mov	r3, ip
   10448:	da00001c 	ble	104c0 <strtoul+0xf8>
   1044c:	e3a05001 	mov	r5, #1
   10450:	e3a0e000 	mov	lr, #0
   10454:	ea000007 	b	10478 <strtoul+0xb0>
   10458:	e150000e 	cmp	r0, lr
   1045c:	e3a05000 	mov	r5, #0
   10460:	e1a0e000 	mov	lr, r0
   10464:	3a000028 	bcc	1050c <strtoul+0x144>
   10468:	e1f430d1 	ldrsb	r3, [r4, #1]!
   1046c:	e353002f 	cmp	r3, #47	; 0x2f
   10470:	e1a0c003 	mov	ip, r3
   10474:	da000029 	ble	10520 <strtoul+0x158>
   10478:	e24cc061 	sub	ip, ip, #97	; 0x61
   1047c:	e35c0019 	cmp	ip, #25
   10480:	92433020 	subls	r3, r3, #32
   10484:	e3530040 	cmp	r3, #64	; 0x40
   10488:	c2433007 	subgt	r3, r3, #7
   1048c:	e2433030 	sub	r3, r3, #48	; 0x30
   10490:	e1520003 	cmp	r2, r3
   10494:	e020329e 	mla	r0, lr, r2, r3
   10498:	caffffee 	bgt	10458 <strtoul+0x90>
   1049c:	e2255001 	eor	r5, r5, #1
   104a0:	e1a0000e 	mov	r0, lr
   104a4:	e3510000 	cmp	r1, #0
   104a8:	e0055006 	and	r5, r5, r6
   104ac:	0a000000 	beq	104b4 <strtoul+0xec>
   104b0:	e5814000 	str	r4, [r1]
   104b4:	e3550000 	cmp	r5, #0
   104b8:	12600000 	rsbne	r0, r0, #0
   104bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   104c0:	e3510000 	cmp	r1, #0
   104c4:	13a00000 	movne	r0, #0
   104c8:	1afffff8 	bne	104b0 <strtoul+0xe8>
   104cc:	e3a00000 	mov	r0, #0
   104d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   104d4:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   104d8:	e3a06000 	mov	r6, #0
   104dc:	e1a04000 	mov	r4, r0
   104e0:	e35c0030 	cmp	ip, #48	; 0x30
   104e4:	1affffd3 	bne	10438 <strtoul+0x70>
   104e8:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   104ec:	e2840001 	add	r0, r4, #1
   104f0:	e3cc3020 	bic	r3, ip, #32
   104f4:	e3530058 	cmp	r3, #88	; 0x58
   104f8:	0a00000a 	beq	10528 <strtoul+0x160>
   104fc:	e3520000 	cmp	r2, #0
   10500:	e1a04000 	mov	r4, r0
   10504:	03a02008 	moveq	r2, #8
   10508:	eaffffcc 	b	10440 <strtoul+0x78>
   1050c:	e1510005 	cmp	r1, r5
   10510:	0a00000a 	beq	10540 <strtoul+0x178>
   10514:	e5814000 	str	r4, [r1]
   10518:	e3e00000 	mvn	r0, #0
   1051c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10520:	e3a05001 	mov	r5, #1
   10524:	eaffffde 	b	104a4 <strtoul+0xdc>
   10528:	e35e0000 	cmp	lr, #0
   1052c:	1affffe6 	bne	104cc <strtoul+0x104>
   10530:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   10534:	e3a02010 	mov	r2, #16
   10538:	e2844002 	add	r4, r4, #2
   1053c:	eaffffbf 	b	10440 <strtoul+0x78>
   10540:	e3e00000 	mvn	r0, #0
   10544:	e8bd8070 	pop	{r4, r5, r6, pc}

00010548 <char2int>:
   10548:	e12fff1e 	bx	lr

0001054c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   1054c:	e92d4010 	push	{r4, lr}
   10550:	e1a04000 	mov	r4, r0
   10554:	e3a01000 	mov	r1, #0
   10558:	e24dd010 	sub	sp, sp, #16
   1055c:	e3a02c01 	mov	r2, #256	; 0x100
   10560:	e5943020 	ldr	r3, [r4, #32]
   10564:	e28d0008 	add	r0, sp, #8
   10568:	e583100c 	str	r1, [r3, #12]
   1056c:	e5832010 	str	r2, [r3, #16]
   10570:	ebffe2d4 	bl	90c8 <CBcmPropertyTags::CBcmPropertyTags()>
   10574:	e3003408 	movw	r3, #1032	; 0x408
   10578:	e5942020 	ldr	r2, [r4, #32]
   1057c:	e28d0008 	add	r0, sp, #8
   10580:	e58d3000 	str	r3, [sp]
   10584:	e308100b 	movw	r1, #32779	; 0x800b
   10588:	e3401004 	movt	r1, #4
   1058c:	e3003414 	movw	r3, #1044	; 0x414
   10590:	ebffe314 	bl	91e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10594:	e3500000 	cmp	r0, #0
   10598:	e28d0008 	add	r0, sp, #8
   1059c:	0a000003 	beq	105b0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x64>
   105a0:	e5943020 	ldr	r3, [r4, #32]
   105a4:	e593300c 	ldr	r3, [r3, #12]
   105a8:	e3530000 	cmp	r3, #0
   105ac:	0a000003 	beq	105c0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
   105b0:	ebffe2ca 	bl	90e0 <CBcmPropertyTags::~CBcmPropertyTags()>
   105b4:	e3a00000 	mov	r0, #0
   105b8:	e28dd010 	add	sp, sp, #16
   105bc:	e8bd8010 	pop	{r4, pc}
   105c0:	ebffe2c6 	bl	90e0 <CBcmPropertyTags::~CBcmPropertyTags()>
   105c4:	e3a00001 	mov	r0, #1
   105c8:	e28dd010 	add	sp, sp, #16
   105cc:	e8bd8010 	pop	{r4, pc}

000105d0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   105d0:	e92d4030 	push	{r4, r5, lr}
   105d4:	e3510000 	cmp	r1, #0
   105d8:	13520000 	cmpne	r2, #0
   105dc:	e1a04000 	mov	r4, r0
   105e0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   105e4:	e3a05000 	mov	r5, #0
   105e8:	e8840006 	stm	r4, {r1, r2}
   105ec:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
   105f0:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
   105f4:	e5843010 	str	r3, [r4, #16]
   105f8:	e584c00c 	str	ip, [r4, #12]
   105fc:	e5840008 	str	r0, [r4, #8]
   10600:	e5845014 	str	r5, [r4, #20]
   10604:	e5845018 	str	r5, [r4, #24]
   10608:	e584501c 	str	r5, [r4, #28]
   1060c:	e5845020 	str	r5, [r4, #32]
   10610:	1a000011 	bne	1065c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   10614:	e28d000c 	add	r0, sp, #12
   10618:	ebffe2aa 	bl	90c8 <CBcmPropertyTags::CBcmPropertyTags()>
   1061c:	e3a03014 	mov	r3, #20
   10620:	e58d5000 	str	r5, [sp]
   10624:	e28d000c 	add	r0, sp, #12
   10628:	e3a01003 	mov	r1, #3
   1062c:	e3401004 	movt	r1, #4
   10630:	e08d2003 	add	r2, sp, r3
   10634:	ebffe2eb 	bl	91e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10638:	e1500005 	cmp	r0, r5
   1063c:	1a000027 	bne	106e0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
   10640:	e3a02d0a 	mov	r2, #640	; 0x280
   10644:	e3a03e1e 	mov	r3, #480	; 0x1e0
   10648:	e884000c 	stm	r4, {r2, r3}
   1064c:	e28d000c 	add	r0, sp, #12
   10650:	ebffe2a2 	bl	90e0 <CBcmPropertyTags::~CBcmPropertyTags()>
   10654:	e5940008 	ldr	r0, [r4, #8]
   10658:	e5943010 	ldr	r3, [r4, #16]
   1065c:	e3500000 	cmp	r0, #0
   10660:	0a00001a 	beq	106d0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   10664:	e594200c 	ldr	r2, [r4, #12]
   10668:	e3520000 	cmp	r2, #0
   1066c:	0a000017 	beq	106d0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   10670:	e3530008 	cmp	r3, #8
   10674:	8a000007 	bhi	10698 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
   10678:	e3000414 	movw	r0, #1044	; 0x414
   1067c:	ebffe725 	bl	a318 <operator new[](unsigned int)>
   10680:	e3a02b01 	mov	r2, #1024	; 0x400
   10684:	e5840020 	str	r0, [r4, #32]
   10688:	e3a01000 	mov	r1, #0
   1068c:	e2800014 	add	r0, r0, #20
   10690:	ebfffe95 	bl	100ec <memset>
   10694:	e5943010 	ldr	r3, [r4, #16]
   10698:	e303213c 	movw	r2, #12604	; 0x313c
   1069c:	e3402005 	movt	r2, #5
   106a0:	e5945000 	ldr	r5, [r4]
   106a4:	e1a00004 	mov	r0, r4
   106a8:	e594e004 	ldr	lr, [r4, #4]
   106ac:	e594c008 	ldr	ip, [r4, #8]
   106b0:	e594100c 	ldr	r1, [r4, #12]
   106b4:	e582500c 	str	r5, [r2, #12]
   106b8:	e582e010 	str	lr, [r2, #16]
   106bc:	e582c020 	str	ip, [r2, #32]
   106c0:	e5821024 	str	r1, [r2, #36]	; 0x24
   106c4:	e5823034 	str	r3, [r2, #52]	; 0x34
   106c8:	e28dd02c 	add	sp, sp, #44	; 0x2c
   106cc:	e8bd8030 	pop	{r4, r5, pc}
   106d0:	e8940006 	ldm	r4, {r1, r2}
   106d4:	e5841008 	str	r1, [r4, #8]
   106d8:	e584200c 	str	r2, [r4, #12]
   106dc:	eaffffe3 	b	10670 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   106e0:	e59d2020 	ldr	r2, [sp, #32]
   106e4:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   106e8:	e2421d0a 	sub	r1, r2, #640	; 0x280
   106ec:	e5842000 	str	r2, [r4]
   106f0:	e2432e1e 	sub	r2, r3, #480	; 0x1e0
   106f4:	e5843004 	str	r3, [r4, #4]
   106f8:	e3520f96 	cmp	r2, #600	; 0x258
   106fc:	93510c05 	cmpls	r1, #1280	; 0x500
   10700:	9affffd1 	bls	1064c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
   10704:	eaffffcd 	b	10640 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>

00010708 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   10708:	e92d4010 	push	{r4, lr}
   1070c:	e1a04000 	mov	r4, r0
   10710:	e5900020 	ldr	r0, [r0, #32]
   10714:	ebffe700 	bl	a31c <operator delete(void*)>
   10718:	e1a00004 	mov	r0, r4
   1071c:	e8bd8010 	pop	{r4, pc}

00010720 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   10720:	e5903010 	ldr	r3, [r0, #16]
   10724:	e3530008 	cmp	r3, #8
   10728:	812fff1e 	bxhi	lr
   1072c:	e5900020 	ldr	r0, [r0, #32]
   10730:	e1a03982 	lsl	r3, r2, #19
   10734:	e1a0c5a2 	lsr	ip, r2, #11
   10738:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   1073c:	e1a02282 	lsl	r2, r2, #5
   10740:	e0801101 	add	r1, r0, r1, lsl #2
   10744:	e183318c 	orr	r3, r3, ip, lsl #3
   10748:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   1074c:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   10750:	e1822003 	orr	r2, r2, r3
   10754:	e5812014 	str	r2, [r1, #20]
   10758:	e12fff1e 	bx	lr

0001075c <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   1075c:	e5903010 	ldr	r3, [r0, #16]
   10760:	e3530008 	cmp	r3, #8
   10764:	95903020 	ldrls	r3, [r0, #32]
   10768:	90831101 	addls	r1, r3, r1, lsl #2
   1076c:	95812014 	strls	r2, [r1, #20]
   10770:	e12fff1e 	bx	lr

00010774 <CBcmFrameBuffer::Initialize()>:
   10774:	e92d4070 	push	{r4, r5, r6, lr}
   10778:	e1a05000 	mov	r5, r0
   1077c:	e303613c 	movw	r6, #12604	; 0x313c
   10780:	e3406005 	movt	r6, #5
   10784:	e24dd008 	sub	sp, sp, #8
   10788:	e1a0000d 	mov	r0, sp
   1078c:	ebffe24d 	bl	90c8 <CBcmPropertyTags::CBcmPropertyTags()>
   10790:	e1a01006 	mov	r1, r6
   10794:	e1a0000d 	mov	r0, sp
   10798:	e3a02070 	mov	r2, #112	; 0x70
   1079c:	ebffe254 	bl	90f4 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   107a0:	e2504000 	subs	r4, r0, #0
   107a4:	0a00001e 	beq	10824 <CBcmFrameBuffer::Initialize()+0xb0>
   107a8:	e596400c 	ldr	r4, [r6, #12]
   107ac:	e3540000 	cmp	r4, #0
   107b0:	0a00001b 	beq	10824 <CBcmFrameBuffer::Initialize()+0xb0>
   107b4:	e5964010 	ldr	r4, [r6, #16]
   107b8:	e3540000 	cmp	r4, #0
   107bc:	0a000018 	beq	10824 <CBcmFrameBuffer::Initialize()+0xb0>
   107c0:	e5964020 	ldr	r4, [r6, #32]
   107c4:	e3540000 	cmp	r4, #0
   107c8:	0a000015 	beq	10824 <CBcmFrameBuffer::Initialize()+0xb0>
   107cc:	e5964024 	ldr	r4, [r6, #36]	; 0x24
   107d0:	e3540000 	cmp	r4, #0
   107d4:	0a000012 	beq	10824 <CBcmFrameBuffer::Initialize()+0xb0>
   107d8:	e5964034 	ldr	r4, [r6, #52]	; 0x34
   107dc:	e3540000 	cmp	r4, #0
   107e0:	0a00000f 	beq	10824 <CBcmFrameBuffer::Initialize()+0xb0>
   107e4:	e5964058 	ldr	r4, [r6, #88]	; 0x58
   107e8:	e3540000 	cmp	r4, #0
   107ec:	0a00000c 	beq	10824 <CBcmFrameBuffer::Initialize()+0xb0>
   107f0:	e5953010 	ldr	r3, [r5, #16]
   107f4:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
   107f8:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
   107fc:	e3530008 	cmp	r3, #8
   10800:	e596306c 	ldr	r3, [r6, #108]	; 0x6c
   10804:	e5854014 	str	r4, [r5, #20]
   10808:	83a04001 	movhi	r4, #1
   1080c:	e5852018 	str	r2, [r5, #24]
   10810:	e585301c 	str	r3, [r5, #28]
   10814:	8a000002 	bhi	10824 <CBcmFrameBuffer::Initialize()+0xb0>
   10818:	e1a00005 	mov	r0, r5
   1081c:	ebffff4a 	bl	1054c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   10820:	e1a04000 	mov	r4, r0
   10824:	e1a0000d 	mov	r0, sp
   10828:	ebffe22c 	bl	90e0 <CBcmPropertyTags::~CBcmPropertyTags()>
   1082c:	e1a00004 	mov	r0, r4
   10830:	e28dd008 	add	sp, sp, #8
   10834:	e8bd8070 	pop	{r4, r5, r6, pc}

00010838 <CBcmFrameBuffer::GetWidth() const>:
   10838:	e5900000 	ldr	r0, [r0]
   1083c:	e12fff1e 	bx	lr

00010840 <CBcmFrameBuffer::GetHeight() const>:
   10840:	e5900004 	ldr	r0, [r0, #4]
   10844:	e12fff1e 	bx	lr

00010848 <CBcmFrameBuffer::GetVirtWidth() const>:
   10848:	e5900008 	ldr	r0, [r0, #8]
   1084c:	e12fff1e 	bx	lr

00010850 <CBcmFrameBuffer::GetVirtHeight() const>:
   10850:	e590000c 	ldr	r0, [r0, #12]
   10854:	e12fff1e 	bx	lr

00010858 <CBcmFrameBuffer::GetPitch() const>:
   10858:	e590001c 	ldr	r0, [r0, #28]
   1085c:	e12fff1e 	bx	lr

00010860 <CBcmFrameBuffer::GetDepth() const>:
   10860:	e5900010 	ldr	r0, [r0, #16]
   10864:	e12fff1e 	bx	lr

00010868 <CBcmFrameBuffer::GetBuffer() const>:
   10868:	e5900014 	ldr	r0, [r0, #20]
   1086c:	e12fff1e 	bx	lr

00010870 <CBcmFrameBuffer::GetSize() const>:
   10870:	e5900018 	ldr	r0, [r0, #24]
   10874:	e12fff1e 	bx	lr

00010878 <CBcmFrameBuffer::UpdatePalette()>:
   10878:	e5903010 	ldr	r3, [r0, #16]
   1087c:	e3530008 	cmp	r3, #8
   10880:	9a000001 	bls	1088c <CBcmFrameBuffer::UpdatePalette()+0x14>
   10884:	e3a00001 	mov	r0, #1
   10888:	e12fff1e 	bx	lr
   1088c:	eaffff2e 	b	1054c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00010890 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   10890:	e92d4070 	push	{r4, r5, r6, lr}
   10894:	e1a05001 	mov	r5, r1
   10898:	e1a06002 	mov	r6, r2
   1089c:	e24dd028 	sub	sp, sp, #40	; 0x28
   108a0:	e28d000c 	add	r0, sp, #12
   108a4:	ebffe207 	bl	90c8 <CBcmPropertyTags::CBcmPropertyTags()>
   108a8:	e3a03008 	mov	r3, #8
   108ac:	e58d3000 	str	r3, [sp]
   108b0:	e3a03014 	mov	r3, #20
   108b4:	e28d000c 	add	r0, sp, #12
   108b8:	e3081009 	movw	r1, #32777	; 0x8009
   108bc:	e3401004 	movt	r1, #4
   108c0:	e08d2003 	add	r2, sp, r3
   108c4:	e58d5020 	str	r5, [sp, #32]
   108c8:	e58d6024 	str	r6, [sp, #36]	; 0x24
   108cc:	ebffe245 	bl	91e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   108d0:	e2504000 	subs	r4, r0, #0
   108d4:	0a000006 	beq	108f4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   108d8:	e59d3020 	ldr	r3, [sp, #32]
   108dc:	e1550003 	cmp	r5, r3
   108e0:	13a04000 	movne	r4, #0
   108e4:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   108e8:	00444006 	subeq	r4, r4, r6
   108ec:	016f4f14 	clzeq	r4, r4
   108f0:	01a042a4 	lsreq	r4, r4, #5
   108f4:	e28d000c 	add	r0, sp, #12
   108f8:	ebffe1f8 	bl	90e0 <CBcmPropertyTags::~CBcmPropertyTags()>
   108fc:	e1a00004 	mov	r0, r4
   10900:	e28dd028 	add	sp, sp, #40	; 0x28
   10904:	e8bd8070 	pop	{r4, r5, r6, pc}

00010908 <CDevice::~CDevice()>:
   10908:	e12fff1e 	bx	lr

0001090c <CDevice::Read(void*, unsigned int)>:
   1090c:	e3e00000 	mvn	r0, #0
   10910:	e12fff1e 	bx	lr

00010914 <CDevice::Seek(unsigned long long)>:
   10914:	e3e00000 	mvn	r0, #0
   10918:	e3e01000 	mvn	r1, #0
   1091c:	e12fff1e 	bx	lr

00010920 <CDevice::~CDevice()>:
   10920:	e92d4010 	push	{r4, lr}
   10924:	e1a04000 	mov	r4, r0
   10928:	ebffe67b 	bl	a31c <operator delete(void*)>
   1092c:	e1a00004 	mov	r0, r4
   10930:	e8bd8010 	pop	{r4, pc}

00010934 <CDevice::CDevice()>:
   10934:	e59f3004 	ldr	r3, [pc, #4]	; 10940 <CDevice::CDevice()+0xc>
   10938:	e5803000 	str	r3, [r0]
   1093c:	e12fff1e 	bx	lr
   10940:	000530a4 	.word	0x000530a4
