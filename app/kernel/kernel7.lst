
kernel7.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020012 	cps	#18
    803c:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8040:	f1020017 	cps	#23
    8044:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8048:	f102001b 	cps	#27
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001f 	cps	#31
    8054:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8058:	ea0005f6 	b	9838 <sysinit>

0000805c <_start_secondary>:
    805c:	f57ff04f 	dsb	sy
    8060:	e320f003 	wfi
    8064:	eafffffd 	b	8060 <_start_secondary+0x4>

00008068 <main>:
    8068:	e92d4010 	push	{r4, lr}
    806c:	e24dd701 	sub	sp, sp, #262144	; 0x40000
    8070:	e24ddebf 	sub	sp, sp, #3056	; 0xbf0
    8074:	e1a0000d 	mov	r0, sp
    8078:	eb000012 	bl	80c8 <CKernel::CKernel()>
    807c:	e1a0000d 	mov	r0, sp
    8080:	eb000049 	bl	81ac <CKernel::Initialize()>
    8084:	e2504000 	subs	r4, r0, #0
    8088:	0a000004 	beq	80a0 <main+0x38>
    808c:	e1a0000d 	mov	r0, sp
    8090:	eb00006c 	bl	8248 <CKernel::Run()>
    8094:	e3500002 	cmp	r0, #2
    8098:	13a04000 	movne	r4, #0
    809c:	0a000006 	beq	80bc <main+0x54>
    80a0:	eb0005d7 	bl	9804 <halt>
    80a4:	e1a0000d 	mov	r0, sp
    80a8:	eb000071 	bl	8274 <CKernel::~CKernel()>
    80ac:	e1a00004 	mov	r0, r4
    80b0:	e28dd701 	add	sp, sp, #262144	; 0x40000
    80b4:	e28ddebf 	add	sp, sp, #3056	; 0xbf0
    80b8:	e8bd8010 	pop	{r4, pc}
    80bc:	eb0005d4 	bl	9814 <reboot>
    80c0:	e3a04001 	mov	r4, #1
    80c4:	eafffff6 	b	80a4 <main+0x3c>

000080c8 <CKernel::CKernel()>:
    80c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80cc:	e3a01001 	mov	r1, #1
    80d0:	e1a04000 	mov	r4, r0
    80d4:	e284501c 	add	r5, r4, #28
    80d8:	eb00055e 	bl	9658 <CMemorySystem::CMemorySystem(int)>
    80dc:	e2840010 	add	r0, r4, #16
    80e0:	e2847e95 	add	r7, r4, #2384	; 0x950
    80e4:	eb0000a4 	bl	837c <CActLED::CActLED()>
    80e8:	e1a00005 	mov	r0, r5
    80ec:	eb000946 	bl	a60c <CKernelOptions::CKernelOptions()>
    80f0:	e2840e85 	add	r0, r4, #2128	; 0x850
    80f4:	e280000c 	add	r0, r0, #12
    80f8:	e2846eb9 	add	r6, r4, #2960	; 0xb90
    80fc:	eb000fee 	bl	c0bc <CDeviceNameService::CDeviceNameService()>
    8100:	e1a00005 	mov	r0, r5
    8104:	eb00090c 	bl	a53c <CKernelOptions::GetWidth() const>
    8108:	e1a08000 	mov	r8, r0
    810c:	e1a00005 	mov	r0, r5
    8110:	eb00090b 	bl	a544 <CKernelOptions::GetHeight() const>
    8114:	e1a02000 	mov	r2, r0
    8118:	e2840e86 	add	r0, r4, #2144	; 0x860
    811c:	e3a03000 	mov	r3, #0
    8120:	e1a01008 	mov	r1, r8
    8124:	e2800004 	add	r0, r0, #4
    8128:	eb000b09 	bl	ad54 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    812c:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    8130:	e2800004 	add	r0, r0, #4
    8134:	eb0011d4 	bl	c88c <CSerialDevice::CSerialDevice()>
    8138:	e2840d25 	add	r0, r4, #2368	; 0x940
    813c:	e280000c 	add	r0, r0, #12
    8140:	eb0015b1 	bl	d80c <CExceptionHandler::CExceptionHandler()>
    8144:	e1a00007 	mov	r0, r7
    8148:	eb001679 	bl	db34 <CInterruptSystem::CInterruptSystem()>
    814c:	e1a01007 	mov	r1, r7
    8150:	e1a00006 	mov	r0, r6
    8154:	eb0005e1 	bl	98e0 <CTimer::CTimer(CInterruptSystem*)>
    8158:	e1a00005 	mov	r0, r5
    815c:	eb0008fd 	bl	a558 <CKernelOptions::GetLogLevel() const>
    8160:	e1a01000 	mov	r1, r0
    8164:	e2840ebb 	add	r0, r4, #2992	; 0xbb0
    8168:	e1a02006 	mov	r2, r6
    816c:	e2800008 	add	r0, r0, #8
    8170:	eb00107f 	bl	c374 <CLogger::CLogger(unsigned int, CTimer*)>
    8174:	e3a02010 	mov	r2, #16
    8178:	e1a03002 	mov	r3, r2
    817c:	e3a01c02 	mov	r1, #512	; 0x200
    8180:	e3403004 	movt	r3, #4
    8184:	e5842bd4 	str	r2, [r4, #3028]	; 0xbd4
    8188:	e5841bd8 	str	r1, [r4, #3032]	; 0xbd8
    818c:	e1a02003 	mov	r2, r3
    8190:	e2840ebe 	add	r0, r4, #3040	; 0xbe0
    8194:	e5843bdc 	str	r3, [r4, #3036]	; 0xbdc
    8198:	e30f1d6c 	movw	r1, #64876	; 0xfd6c
    819c:	e3401000 	movt	r1, #0
    81a0:	eb0008b1 	bl	a46c <memcpy>
    81a4:	e1a00004 	mov	r0, r4
    81a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000081ac <CKernel::Initialize()>:
    81ac:	e92d4070 	push	{r4, r5, r6, lr}
    81b0:	e2804e86 	add	r4, r0, #2144	; 0x860
    81b4:	e2844004 	add	r4, r4, #4
    81b8:	e1a05000 	mov	r5, r0
    81bc:	e1a00004 	mov	r0, r4
    81c0:	eb000e7a 	bl	bbb0 <CScreenDevice::Initialize()>
    81c4:	e3500000 	cmp	r0, #0
    81c8:	1a000001 	bne	81d4 <CKernel::Initialize()+0x28>
    81cc:	e3a00000 	mov	r0, #0
    81d0:	e8bd8070 	pop	{r4, r5, r6, pc}
    81d4:	e2850d23 	add	r0, r5, #2240	; 0x8c0
    81d8:	e3a01cc2 	mov	r1, #49664	; 0xc200
    81dc:	e3401001 	movt	r1, #1
    81e0:	e2800004 	add	r0, r0, #4
    81e4:	eb0011c6 	bl	c904 <CSerialDevice::Initialize(unsigned int)>
    81e8:	e3500000 	cmp	r0, #0
    81ec:	0afffff6 	beq	81cc <CKernel::Initialize()+0x20>
    81f0:	e285001c 	add	r0, r5, #28
    81f4:	eb0008d4 	bl	a54c <CKernelOptions::GetLogDevice() const>
    81f8:	e1a01000 	mov	r1, r0
    81fc:	e2850e85 	add	r0, r5, #2128	; 0x850
    8200:	e3a02000 	mov	r2, #0
    8204:	e280000c 	add	r0, r0, #12
    8208:	eb001007 	bl	c22c <CDeviceNameService::GetDevice(char const*, int)>
    820c:	e3500000 	cmp	r0, #0
    8210:	11a01000 	movne	r1, r0
    8214:	e2850ebb 	add	r0, r5, #2992	; 0xbb0
    8218:	01a01004 	moveq	r1, r4
    821c:	e2800008 	add	r0, r0, #8
    8220:	eb00115a 	bl	c790 <CLogger::Initialize(CDevice*)>
    8224:	e3500000 	cmp	r0, #0
    8228:	0affffe7 	beq	81cc <CKernel::Initialize()+0x20>
    822c:	e2850e95 	add	r0, r5, #2384	; 0x950
    8230:	eb001652 	bl	db80 <CInterruptSystem::Initialize()>
    8234:	e3500000 	cmp	r0, #0
    8238:	0affffe3 	beq	81cc <CKernel::Initialize()+0x20>
    823c:	e2850eb9 	add	r0, r5, #2960	; 0xb90
    8240:	e8bd4070 	pop	{r4, r5, r6, lr}
    8244:	ea00080e 	b	a284 <CTimer::Initialize()>

00008248 <CKernel::Run()>:
    8248:	e2800ebb 	add	r0, r0, #2992	; 0xbb0
    824c:	e92d4010 	push	{r4, lr}
    8250:	e2800008 	add	r0, r0, #8
    8254:	e3a02003 	mov	r2, #3
    8258:	e59f1010 	ldr	r1, [pc, #16]	; 8270 <CKernel::Run()+0x28>
    825c:	e30f3d84 	movw	r3, #64900	; 0xfd84
    8260:	e3403004 	movt	r3, #4
    8264:	eb00113d 	bl	c760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8268:	e3a00001 	mov	r0, #1
    826c:	e8bd8010 	pop	{r4, pc}
    8270:	0004fd7c 	.word	0x0004fd7c

00008274 <CKernel::~CKernel()>:
    8274:	e92d4010 	push	{r4, lr}
    8278:	e1a04000 	mov	r4, r0
    827c:	e2800ebb 	add	r0, r0, #2992	; 0xbb0
    8280:	e2800008 	add	r0, r0, #8
    8284:	eb00104c 	bl	c3bc <CLogger::~CLogger()>
    8288:	e2840eb9 	add	r0, r4, #2960	; 0xb90
    828c:	eb0005b3 	bl	9960 <CTimer::~CTimer()>
    8290:	e2840e95 	add	r0, r4, #2384	; 0x950
    8294:	eb001634 	bl	db6c <CInterruptSystem::~CInterruptSystem()>
    8298:	e2840d25 	add	r0, r4, #2368	; 0x940
    829c:	e280000c 	add	r0, r0, #12
    82a0:	eb00157d 	bl	d89c <CExceptionHandler::~CExceptionHandler()>
    82a4:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    82a8:	e2800004 	add	r0, r0, #4
    82ac:	eb0011e5 	bl	ca48 <CSerialDevice::~CSerialDevice()>
    82b0:	e2840e86 	add	r0, r4, #2144	; 0x860
    82b4:	e2800004 	add	r0, r0, #4
    82b8:	eb000a4f 	bl	abfc <CScreenDevice::~CScreenDevice()>
    82bc:	e2840e85 	add	r0, r4, #2128	; 0x850
    82c0:	e280000c 	add	r0, r0, #12
    82c4:	eb000f8f 	bl	c108 <CDeviceNameService::~CDeviceNameService()>
    82c8:	e284001c 	add	r0, r4, #28
    82cc:	eb000895 	bl	a528 <CKernelOptions::~CKernelOptions()>
    82d0:	e2840010 	add	r0, r4, #16
    82d4:	eb000003 	bl	82e8 <CActLED::~CActLED()>
    82d8:	e1a00004 	mov	r0, r4
    82dc:	eb00047b 	bl	94d0 <CMemorySystem::~CMemorySystem()>
    82e0:	e1a00004 	mov	r0, r4
    82e4:	e8bd8010 	pop	{r4, pc}

000082e8 <CActLED::~CActLED()>:
    82e8:	e3013c14 	movw	r3, #7188	; 0x1c14
    82ec:	e3403005 	movt	r3, #5
    82f0:	e3a02000 	mov	r2, #0
    82f4:	e5832000 	str	r2, [r3]
    82f8:	e12fff1e 	bx	lr

000082fc <CActLED::On()>:
    82fc:	e5903000 	ldr	r3, [r0]
    8300:	e3530000 	cmp	r3, #0
    8304:	0a000004 	beq	831c <CActLED::On()+0x20>
    8308:	e5901008 	ldr	r1, [r0, #8]
    830c:	e1a00003 	mov	r0, r3
    8310:	e2911000 	adds	r1, r1, #0
    8314:	13a01001 	movne	r1, #1
    8318:	ea0000ee 	b	86d8 <CGPIOPin::Write(unsigned int)>
    831c:	e5903004 	ldr	r3, [r0, #4]
    8320:	e3530000 	cmp	r3, #0
    8324:	012fff1e 	bxeq	lr
    8328:	e5901008 	ldr	r1, [r0, #8]
    832c:	e1a00003 	mov	r0, r3
    8330:	e2911000 	adds	r1, r1, #0
    8334:	13a01001 	movne	r1, #1
    8338:	ea001841 	b	e444 <CVirtualGPIOPin::Write(unsigned int)>

0000833c <CActLED::Off()>:
    833c:	e5903000 	ldr	r3, [r0]
    8340:	e3530000 	cmp	r3, #0
    8344:	0a000004 	beq	835c <CActLED::Off()+0x20>
    8348:	e5901008 	ldr	r1, [r0, #8]
    834c:	e1a00003 	mov	r0, r3
    8350:	e16f1f11 	clz	r1, r1
    8354:	e1a012a1 	lsr	r1, r1, #5
    8358:	ea0000de 	b	86d8 <CGPIOPin::Write(unsigned int)>
    835c:	e5903004 	ldr	r3, [r0, #4]
    8360:	e3530000 	cmp	r3, #0
    8364:	012fff1e 	bxeq	lr
    8368:	e5901008 	ldr	r1, [r0, #8]
    836c:	e1a00003 	mov	r0, r3
    8370:	e16f1f11 	clz	r1, r1
    8374:	e1a012a1 	lsr	r1, r1, #5
    8378:	ea001831 	b	e444 <CVirtualGPIOPin::Write(unsigned int)>

0000837c <CActLED::CActLED()>:
    837c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8380:	e1a04000 	mov	r4, r0
    8384:	e3013c14 	movw	r3, #7188	; 0x1c14
    8388:	e3403005 	movt	r3, #5
    838c:	e24dd024 	sub	sp, sp, #36	; 0x24
    8390:	e3a05000 	mov	r5, #0
    8394:	e5805000 	str	r5, [r0]
    8398:	e28d0008 	add	r0, sp, #8
    839c:	e5845004 	str	r5, [r4, #4]
    83a0:	e5834000 	str	r4, [r3]
    83a4:	eb000051 	bl	84f0 <CBcmPropertyTags::CBcmPropertyTags()>
    83a8:	e3a03010 	mov	r3, #16
    83ac:	e58d5000 	str	r5, [sp]
    83b0:	e28d0008 	add	r0, sp, #8
    83b4:	e3a01002 	mov	r1, #2
    83b8:	e3401001 	movt	r1, #1
    83bc:	e08d2003 	add	r2, sp, r3
    83c0:	eb000092 	bl	8610 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    83c4:	e1500005 	cmp	r0, r5
    83c8:	0a000011 	beq	8414 <CActLED::CActLED()+0x98>
    83cc:	e59d301c 	ldr	r3, [sp, #28]
    83d0:	e3130502 	tst	r3, #8388608	; 0x800000
    83d4:	1a000013 	bne	8428 <CActLED::CActLED()+0xac>
    83d8:	e6ff3073 	uxth	r3, r3
    83dc:	e353000f 	cmp	r3, #15
    83e0:	83a06001 	movhi	r6, #1
    83e4:	9a00001c 	bls	845c <CActLED::CActLED()+0xe0>
    83e8:	e3a00020 	mov	r0, #32
    83ec:	eb0004d2 	bl	973c <operator new(unsigned int)>
    83f0:	e3a03000 	mov	r3, #0
    83f4:	e1a05000 	mov	r5, r0
    83f8:	e3a02001 	mov	r2, #1
    83fc:	e3a0102f 	mov	r1, #47	; 0x2f
    8400:	eb0003ad 	bl	92bc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8404:	e5845000 	str	r5, [r4]
    8408:	e5846008 	str	r6, [r4, #8]
    840c:	e1a00004 	mov	r0, r4
    8410:	ebffffc9 	bl	833c <CActLED::Off()>
    8414:	e28d0008 	add	r0, sp, #8
    8418:	eb00003a 	bl	8508 <CBcmPropertyTags::~CBcmPropertyTags()>
    841c:	e1a00004 	mov	r0, r4
    8420:	e28dd024 	add	sp, sp, #36	; 0x24
    8424:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8428:	e7e73253 	ubfx	r3, r3, #4, #8
    842c:	e3530001 	cmp	r3, #1
    8430:	9a000009 	bls	845c <CActLED::CActLED()+0xe0>
    8434:	e3530008 	cmp	r3, #8
    8438:	1a000012 	bne	8488 <CActLED::CActLED()+0x10c>
    843c:	e3a00010 	mov	r0, #16
    8440:	e3a06001 	mov	r6, #1
    8444:	eb0004bc 	bl	973c <operator new(unsigned int)>
    8448:	e1a01005 	mov	r1, r5
    844c:	e1a07000 	mov	r7, r0
    8450:	eb0017bf 	bl	e354 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    8454:	e5847004 	str	r7, [r4, #4]
    8458:	eaffffea 	b	8408 <CActLED::CActLED()+0x8c>
    845c:	e3a00020 	mov	r0, #32
    8460:	eb0004b5 	bl	973c <operator new(unsigned int)>
    8464:	e3a03000 	mov	r3, #0
    8468:	e3a02001 	mov	r2, #1
    846c:	e3a01010 	mov	r1, #16
    8470:	e1a05000 	mov	r5, r0
    8474:	eb000390 	bl	92bc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8478:	e3a03000 	mov	r3, #0
    847c:	e5845000 	str	r5, [r4]
    8480:	e5843008 	str	r3, [r4, #8]
    8484:	eaffffe0 	b	840c <CActLED::CActLED()+0x90>
    8488:	e2536009 	subs	r6, r3, #9
    848c:	13a06001 	movne	r6, #1
    8490:	eaffffd4 	b	83e8 <CActLED::CActLED()+0x6c>

00008494 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    8494:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8498:	e2516000 	subs	r6, r1, #0
    849c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    84a0:	e1a08003 	mov	r8, r3
    84a4:	e1a07002 	mov	r7, r2
    84a8:	e1a05000 	mov	r5, r0
    84ac:	e3a04001 	mov	r4, #1
    84b0:	e1a00005 	mov	r0, r5
    84b4:	e2844001 	add	r4, r4, #1
    84b8:	ebffff8f 	bl	82fc <CActLED::On()>
    84bc:	e1a00007 	mov	r0, r7
    84c0:	eb00078e 	bl	a300 <CTimer::SimpleMsDelay(unsigned int)>
    84c4:	e1a00005 	mov	r0, r5
    84c8:	ebffff9b 	bl	833c <CActLED::Off()>
    84cc:	e1a00008 	mov	r0, r8
    84d0:	eb00078a 	bl	a300 <CTimer::SimpleMsDelay(unsigned int)>
    84d4:	e1560004 	cmp	r6, r4
    84d8:	2afffff4 	bcs	84b0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    84dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000084e0 <CActLED::Get()>:
    84e0:	e3013c14 	movw	r3, #7188	; 0x1c14
    84e4:	e3403005 	movt	r3, #5
    84e8:	e5930000 	ldr	r0, [r3]
    84ec:	e12fff1e 	bx	lr

000084f0 <CBcmPropertyTags::CBcmPropertyTags()>:
    84f0:	e92d4010 	push	{r4, lr}
    84f4:	e3a01008 	mov	r1, #8
    84f8:	e1a04000 	mov	r4, r0
    84fc:	eb001baa 	bl	f3ac <CBcmMailBox::CBcmMailBox(unsigned int)>
    8500:	e1a00004 	mov	r0, r4
    8504:	e8bd8010 	pop	{r4, pc}

00008508 <CBcmPropertyTags::~CBcmPropertyTags()>:
    8508:	e92d4010 	push	{r4, lr}
    850c:	e1a04000 	mov	r4, r0
    8510:	eb001ba8 	bl	f3b8 <CBcmMailBox::~CBcmMailBox()>
    8514:	e1a00004 	mov	r0, r4
    8518:	e8bd8010 	pop	{r4, pc}

0000851c <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    851c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8520:	e2519000 	subs	r9, r1, #0
    8524:	e1a0a000 	mov	sl, r0
    8528:	e1a04002 	mov	r4, r2
    852c:	0a000030 	beq	85f4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd8>
    8530:	e354000f 	cmp	r4, #15
    8534:	9a000027 	bls	85d8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xbc>
    8538:	e284800c 	add	r8, r4, #12
    853c:	e3180003 	tst	r8, #3
    8540:	1a00001d 	bne	85bc <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
    8544:	e3a06501 	mov	r6, #4194304	; 0x400000
    8548:	e3a05008 	mov	r5, #8
    854c:	e3405040 	movt	r5, #64	; 0x40
    8550:	e3a07000 	mov	r7, #0
    8554:	e1a00005 	mov	r0, r5
    8558:	e5868000 	str	r8, [r6]
    855c:	e1a02004 	mov	r2, r4
    8560:	e5867004 	str	r7, [r6, #4]
    8564:	e1a01009 	mov	r1, r9
    8568:	eb0007bf 	bl	a46c <memcpy>
    856c:	e7857004 	str	r7, [r5, r4]
    8570:	f57ff04f 	dsb	sy
    8574:	e1a01007 	mov	r1, r7
    8578:	e1a0000a 	mov	r0, sl
    857c:	e34c1040 	movt	r1, #49216	; 0xc040
    8580:	eb001bbc 	bl	f478 <CBcmMailBox::WriteRead(unsigned int)>
    8584:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
    8588:	0a000001 	beq	8594 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x78>
    858c:	e3a00000 	mov	r0, #0
    8590:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8594:	f57ff05f 	dmb	sy
    8598:	e5963004 	ldr	r3, [r6, #4]
    859c:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    85a0:	1afffff9 	bne	858c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x70>
    85a4:	e1a02004 	mov	r2, r4
    85a8:	e1a01005 	mov	r1, r5
    85ac:	e1a00009 	mov	r0, r9
    85b0:	eb0007ad 	bl	a46c <memcpy>
    85b4:	e3a00001 	mov	r0, #1
    85b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    85bc:	e30f1da8 	movw	r1, #64936	; 0xfda8
    85c0:	e3401004 	movt	r1, #4
    85c4:	e30f0df4 	movw	r0, #65012	; 0xfdf4
    85c8:	e3400004 	movt	r0, #4
    85cc:	e3a02051 	mov	r2, #81	; 0x51
    85d0:	eb000e06 	bl	bdf0 <assertion_failed>
    85d4:	eaffffda 	b	8544 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    85d8:	e30f1da8 	movw	r1, #64936	; 0xfda8
    85dc:	e3401004 	movt	r1, #4
    85e0:	e30f0dc8 	movw	r0, #64968	; 0xfdc8
    85e4:	e3400004 	movt	r0, #4
    85e8:	e3a0204f 	mov	r2, #79	; 0x4f
    85ec:	eb000dff 	bl	bdf0 <assertion_failed>
    85f0:	eaffffd0 	b	8538 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    85f4:	e30f1da8 	movw	r1, #64936	; 0xfda8
    85f8:	e3401004 	movt	r1, #4
    85fc:	e30f0dbc 	movw	r0, #64956	; 0xfdbc
    8600:	e3400004 	movt	r0, #4
    8604:	e3a0204e 	mov	r2, #78	; 0x4e
    8608:	eb000df8 	bl	bdf0 <assertion_failed>
    860c:	eaffffc7 	b	8530 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>

00008610 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    8610:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8614:	e2524000 	subs	r4, r2, #0
    8618:	e1a08000 	mov	r8, r0
    861c:	e1a07001 	mov	r7, r1
    8620:	e1a05003 	mov	r5, r3
    8624:	e59d6018 	ldr	r6, [sp, #24]
    8628:	0a00001d 	beq	86a4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x94>
    862c:	e355000f 	cmp	r5, #15
    8630:	9a000014 	bls	8688 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
    8634:	e245300c 	sub	r3, r5, #12
    8638:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
    863c:	e5846008 	str	r6, [r4, #8]
    8640:	e1a00008 	mov	r0, r8
    8644:	e5847000 	str	r7, [r4]
    8648:	e1a02005 	mov	r2, r5
    864c:	e5843004 	str	r3, [r4, #4]
    8650:	e1a01004 	mov	r1, r4
    8654:	ebffffb0 	bl	851c <CBcmPropertyTags::GetTags(void*, unsigned int)>
    8658:	e3500000 	cmp	r0, #0
    865c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8660:	e5940008 	ldr	r0, [r4, #8]
    8664:	e3500000 	cmp	r0, #0
    8668:	ba000001 	blt	8674 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
    866c:	e3a00000 	mov	r0, #0
    8670:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8674:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    8678:	e5840008 	str	r0, [r4, #8]
    867c:	e2900000 	adds	r0, r0, #0
    8680:	13a00001 	movne	r0, #1
    8684:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8688:	e30f1da8 	movw	r1, #64936	; 0xfda8
    868c:	e3401004 	movt	r1, #4
    8690:	e30f0e18 	movw	r0, #65048	; 0xfe18
    8694:	e3400004 	movt	r0, #4
    8698:	e3a02032 	mov	r2, #50	; 0x32
    869c:	eb000dd3 	bl	bdf0 <assertion_failed>
    86a0:	eaffffe3 	b	8634 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    86a4:	e30f1da8 	movw	r1, #64936	; 0xfda8
    86a8:	e3401004 	movt	r1, #4
    86ac:	e30f0e0c 	movw	r0, #65036	; 0xfe0c
    86b0:	e3400004 	movt	r0, #4
    86b4:	e3a02031 	mov	r2, #49	; 0x31
    86b8:	eb000dcc 	bl	bdf0 <assertion_failed>
    86bc:	eaffffda 	b	862c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>

000086c0 <CGPIOPin::~CGPIOPin()>:
    86c0:	e12fff1e 	bx	lr

000086c4 <CGPIOPin::~CGPIOPin()>:
    86c4:	e92d4010 	push	{r4, lr}
    86c8:	e1a04000 	mov	r4, r0
    86cc:	eb00041c 	bl	9744 <operator delete(void*)>
    86d0:	e1a00004 	mov	r0, r4
    86d4:	e8bd8010 	pop	{r4, pc}

000086d8 <CGPIOPin::Write(unsigned int)>:
    86d8:	e5d03008 	ldrb	r3, [r0, #8]
    86dc:	e92d4070 	push	{r4, r5, r6, lr}
    86e0:	e1a04000 	mov	r4, r0
    86e4:	e3530003 	cmp	r3, #3
    86e8:	e1a05001 	mov	r5, r1
    86ec:	ca000017 	bgt	8750 <CGPIOPin::Write(unsigned int)+0x78>
    86f0:	e3550001 	cmp	r5, #1
    86f4:	9a000005 	bls	8710 <CGPIOPin::Write(unsigned int)+0x38>
    86f8:	e30f1e68 	movw	r1, #65128	; 0xfe68
    86fc:	e3401004 	movt	r1, #4
    8700:	e30f0e98 	movw	r0, #65176	; 0xfe98
    8704:	e3400004 	movt	r0, #4
    8708:	e3a02081 	mov	r2, #129	; 0x81
    870c:	eb000db7 	bl	bdf0 <assertion_failed>
    8710:	e5943004 	ldr	r3, [r4, #4]
    8714:	e584500c 	str	r5, [r4, #12]
    8718:	e3530035 	cmp	r3, #53	; 0x35
    871c:	8a000012 	bhi	876c <CGPIOPin::Write(unsigned int)+0x94>
    8720:	e203c01f 	and	ip, r3, #31
    8724:	e3a0001c 	mov	r0, #28
    8728:	e3430f20 	movt	r0, #16160	; 0x3f20
    872c:	e3a01001 	mov	r1, #1
    8730:	e3550000 	cmp	r5, #0
    8734:	e3a02028 	mov	r2, #40	; 0x28
    8738:	e3432f20 	movt	r2, #16160	; 0x3f20
    873c:	e1a032a3 	lsr	r3, r3, #5
    8740:	11a02000 	movne	r2, r0
    8744:	e1a01c11 	lsl	r1, r1, ip
    8748:	e7821103 	str	r1, [r2, r3, lsl #2]
    874c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8750:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8754:	e3401004 	movt	r1, #4
    8758:	e30f0e74 	movw	r0, #65140	; 0xfe74
    875c:	e3400004 	movt	r0, #4
    8760:	e3a0207d 	mov	r2, #125	; 0x7d
    8764:	eb000da1 	bl	bdf0 <assertion_failed>
    8768:	eaffffe0 	b	86f0 <CGPIOPin::Write(unsigned int)+0x18>
    876c:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8770:	e3401004 	movt	r1, #4
    8774:	e30f0eb8 	movw	r0, #65208	; 0xfeb8
    8778:	e3400004 	movt	r0, #4
    877c:	e3a02084 	mov	r2, #132	; 0x84
    8780:	eb000d9a 	bl	bdf0 <assertion_failed>
    8784:	e594500c 	ldr	r5, [r4, #12]
    8788:	e5943004 	ldr	r3, [r4, #4]
    878c:	eaffffe3 	b	8720 <CGPIOPin::Write(unsigned int)+0x48>

00008790 <CGPIOPin::Read() const>:
    8790:	e5d03008 	ldrb	r3, [r0, #8]
    8794:	e92d4010 	push	{r4, lr}
    8798:	e1a04000 	mov	r4, r0
    879c:	e2432002 	sub	r2, r3, #2
    87a0:	e3530000 	cmp	r3, #0
    87a4:	13520001 	cmpne	r2, #1
    87a8:	9a000005 	bls	87c4 <CGPIOPin::Read() const+0x34>
    87ac:	e30f1e68 	movw	r1, #65128	; 0xfe68
    87b0:	e3401004 	movt	r1, #4
    87b4:	e30f0ecc 	movw	r0, #65228	; 0xfecc
    87b8:	e3400004 	movt	r0, #4
    87bc:	e3a02091 	mov	r2, #145	; 0x91
    87c0:	eb000d8a 	bl	bdf0 <assertion_failed>
    87c4:	e5942004 	ldr	r2, [r4, #4]
    87c8:	e3520035 	cmp	r2, #53	; 0x35
    87cc:	8a000009 	bhi	87f8 <CGPIOPin::Read() const+0x68>
    87d0:	e3a0300d 	mov	r3, #13
    87d4:	e3403fc8 	movt	r3, #4040	; 0xfc8
    87d8:	e3a00001 	mov	r0, #1
    87dc:	e202101f 	and	r1, r2, #31
    87e0:	e08332a2 	add	r3, r3, r2, lsr #5
    87e4:	e1a03103 	lsl	r3, r3, #2
    87e8:	e5933000 	ldr	r3, [r3]
    87ec:	e0133110 	ands	r3, r3, r0, lsl r1
    87f0:	03a00000 	moveq	r0, #0
    87f4:	e8bd8010 	pop	{r4, pc}
    87f8:	e3a02095 	mov	r2, #149	; 0x95
    87fc:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8800:	e3401004 	movt	r1, #4
    8804:	e30f0eb8 	movw	r0, #65208	; 0xfeb8
    8808:	e3400004 	movt	r0, #4
    880c:	eb000d77 	bl	bdf0 <assertion_failed>
    8810:	e5942004 	ldr	r2, [r4, #4]
    8814:	eaffffed 	b	87d0 <CGPIOPin::Read() const+0x40>

00008818 <CGPIOPin::Invert()>:
    8818:	e5d03008 	ldrb	r3, [r0, #8]
    881c:	e92d4010 	push	{r4, lr}
    8820:	e1a04000 	mov	r4, r0
    8824:	e3530001 	cmp	r3, #1
    8828:	0a000005 	beq	8844 <CGPIOPin::Invert()+0x2c>
    882c:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8830:	e3401004 	movt	r1, #4
    8834:	e30f0f28 	movw	r0, #65320	; 0xff28
    8838:	e3400004 	movt	r0, #4
    883c:	e3a020a2 	mov	r2, #162	; 0xa2
    8840:	eb000d6a 	bl	bdf0 <assertion_failed>
    8844:	e594100c 	ldr	r1, [r4, #12]
    8848:	e1a00004 	mov	r0, r4
    884c:	e8bd4010 	pop	{r4, lr}
    8850:	e2211001 	eor	r1, r1, #1
    8854:	eaffff9f 	b	86d8 <CGPIOPin::Write(unsigned int)>

00008858 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    8858:	e5d03008 	ldrb	r3, [r0, #8]
    885c:	e92d4070 	push	{r4, r5, r6, lr}
    8860:	e1a06002 	mov	r6, r2
    8864:	e2432002 	sub	r2, r3, #2
    8868:	e3530000 	cmp	r3, #0
    886c:	13520001 	cmpne	r2, #1
    8870:	e1a04000 	mov	r4, r0
    8874:	e1a05001 	mov	r5, r1
    8878:	9a000005 	bls	8894 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x3c>
    887c:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8880:	e3401004 	movt	r1, #4
    8884:	e30f0ecc 	movw	r0, #65228	; 0xfecc
    8888:	e3400004 	movt	r0, #4
    888c:	e3a020ab 	mov	r2, #171	; 0xab
    8890:	eb000d56 	bl	bdf0 <assertion_failed>
    8894:	e5d4301c 	ldrb	r3, [r4, #28]
    8898:	e3530006 	cmp	r3, #6
    889c:	0a000005 	beq	88b8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x60>
    88a0:	e30f1e68 	movw	r1, #65128	; 0xfe68
    88a4:	e3401004 	movt	r1, #4
    88a8:	e30f0f44 	movw	r0, #65348	; 0xff44
    88ac:	e3400004 	movt	r0, #4
    88b0:	e3a020ad 	mov	r2, #173	; 0xad
    88b4:	eb000d4d 	bl	bdf0 <assertion_failed>
    88b8:	e5d4301d 	ldrb	r3, [r4, #29]
    88bc:	e3530006 	cmp	r3, #6
    88c0:	0a000005 	beq	88dc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x84>
    88c4:	e30f1e68 	movw	r1, #65128	; 0xfe68
    88c8:	e3401004 	movt	r1, #4
    88cc:	e30f0f68 	movw	r0, #65384	; 0xff68
    88d0:	e3400004 	movt	r0, #4
    88d4:	e3a020ae 	mov	r2, #174	; 0xae
    88d8:	eb000d44 	bl	bdf0 <assertion_failed>
    88dc:	e3550000 	cmp	r5, #0
    88e0:	0a00001a 	beq	8950 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    88e4:	e5943014 	ldr	r3, [r4, #20]
    88e8:	e3530000 	cmp	r3, #0
    88ec:	0a000005 	beq	8908 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    88f0:	e30f1e68 	movw	r1, #65128	; 0xfe68
    88f4:	e3401004 	movt	r1, #4
    88f8:	e30f0fa0 	movw	r0, #65440	; 0xffa0
    88fc:	e3400004 	movt	r0, #4
    8900:	e3a020b1 	mov	r2, #177	; 0xb1
    8904:	eb000d39 	bl	bdf0 <assertion_failed>
    8908:	e5940010 	ldr	r0, [r4, #16]
    890c:	e5845014 	str	r5, [r4, #20]
    8910:	e3500000 	cmp	r0, #0
    8914:	e5846018 	str	r6, [r4, #24]
    8918:	0a000002 	beq	8928 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    891c:	e1a01004 	mov	r1, r4
    8920:	e8bd4070 	pop	{r4, r5, r6, lr}
    8924:	ea0015c4 	b	e03c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8928:	e30f1e68 	movw	r1, #65128	; 0xfe68
    892c:	e3401004 	movt	r1, #4
    8930:	e30f0fb0 	movw	r0, #65456	; 0xffb0
    8934:	e3400004 	movt	r0, #4
    8938:	e3a020b6 	mov	r2, #182	; 0xb6
    893c:	eb000d2b 	bl	bdf0 <assertion_failed>
    8940:	e5940010 	ldr	r0, [r4, #16]
    8944:	e1a01004 	mov	r1, r4
    8948:	e8bd4070 	pop	{r4, r5, r6, lr}
    894c:	ea0015ba 	b	e03c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8950:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8954:	e3401004 	movt	r1, #4
    8958:	e30f0f90 	movw	r0, #65424	; 0xff90
    895c:	e3400004 	movt	r0, #4
    8960:	e3a020b0 	mov	r2, #176	; 0xb0
    8964:	eb000d21 	bl	bdf0 <assertion_failed>
    8968:	eaffffdd 	b	88e4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x8c>

0000896c <CGPIOPin::DisconnectInterrupt()>:
    896c:	e5d03008 	ldrb	r3, [r0, #8]
    8970:	e92d4010 	push	{r4, lr}
    8974:	e1a04000 	mov	r4, r0
    8978:	e2432002 	sub	r2, r3, #2
    897c:	e3530000 	cmp	r3, #0
    8980:	13520001 	cmpne	r2, #1
    8984:	9a000005 	bls	89a0 <CGPIOPin::DisconnectInterrupt()+0x34>
    8988:	e30f1e68 	movw	r1, #65128	; 0xfe68
    898c:	e3401004 	movt	r1, #4
    8990:	e30f0ecc 	movw	r0, #65228	; 0xfecc
    8994:	e3400004 	movt	r0, #4
    8998:	e3a020be 	mov	r2, #190	; 0xbe
    899c:	eb000d13 	bl	bdf0 <assertion_failed>
    89a0:	e5d4301c 	ldrb	r3, [r4, #28]
    89a4:	e3530006 	cmp	r3, #6
    89a8:	0a000005 	beq	89c4 <CGPIOPin::DisconnectInterrupt()+0x58>
    89ac:	e30f1e68 	movw	r1, #65128	; 0xfe68
    89b0:	e3401004 	movt	r1, #4
    89b4:	e30f0f44 	movw	r0, #65348	; 0xff44
    89b8:	e3400004 	movt	r0, #4
    89bc:	e3a020c0 	mov	r2, #192	; 0xc0
    89c0:	eb000d0a 	bl	bdf0 <assertion_failed>
    89c4:	e5d4301d 	ldrb	r3, [r4, #29]
    89c8:	e3530006 	cmp	r3, #6
    89cc:	0a000005 	beq	89e8 <CGPIOPin::DisconnectInterrupt()+0x7c>
    89d0:	e30f1e68 	movw	r1, #65128	; 0xfe68
    89d4:	e3401004 	movt	r1, #4
    89d8:	e30f0f68 	movw	r0, #65384	; 0xff68
    89dc:	e3400004 	movt	r0, #4
    89e0:	e3a020c1 	mov	r2, #193	; 0xc1
    89e4:	eb000d01 	bl	bdf0 <assertion_failed>
    89e8:	e5943014 	ldr	r3, [r4, #20]
    89ec:	e3530000 	cmp	r3, #0
    89f0:	0a000011 	beq	8a3c <CGPIOPin::DisconnectInterrupt()+0xd0>
    89f4:	e5940010 	ldr	r0, [r4, #16]
    89f8:	e3a03000 	mov	r3, #0
    89fc:	e5843014 	str	r3, [r4, #20]
    8a00:	e1500003 	cmp	r0, r3
    8a04:	0a000002 	beq	8a14 <CGPIOPin::DisconnectInterrupt()+0xa8>
    8a08:	e1a01004 	mov	r1, r4
    8a0c:	e8bd4010 	pop	{r4, lr}
    8a10:	ea0015b5 	b	e0ec <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    8a14:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8a18:	e3401004 	movt	r1, #4
    8a1c:	e30f0fb0 	movw	r0, #65456	; 0xffb0
    8a20:	e3400004 	movt	r0, #4
    8a24:	e3a020c6 	mov	r2, #198	; 0xc6
    8a28:	eb000cf0 	bl	bdf0 <assertion_failed>
    8a2c:	e5940010 	ldr	r0, [r4, #16]
    8a30:	e1a01004 	mov	r1, r4
    8a34:	e8bd4010 	pop	{r4, lr}
    8a38:	ea0015ab 	b	e0ec <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    8a3c:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8a40:	e3401004 	movt	r1, #4
    8a44:	e30f0fc0 	movw	r0, #65472	; 0xffc0
    8a48:	e3400004 	movt	r0, #4
    8a4c:	e3a020c3 	mov	r2, #195	; 0xc3
    8a50:	eb000ce6 	bl	bdf0 <assertion_failed>
    8a54:	eaffffe6 	b	89f4 <CGPIOPin::DisconnectInterrupt()+0x88>

00008a58 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    8a58:	e5d03008 	ldrb	r3, [r0, #8]
    8a5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8a60:	e1a04000 	mov	r4, r0
    8a64:	e2432002 	sub	r2, r3, #2
    8a68:	e3530000 	cmp	r3, #0
    8a6c:	13520001 	cmpne	r2, #1
    8a70:	e1a08001 	mov	r8, r1
    8a74:	9a000005 	bls	8a90 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x38>
    8a78:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8a7c:	e3401004 	movt	r1, #4
    8a80:	e30f0ecc 	movw	r0, #65228	; 0xfecc
    8a84:	e3400004 	movt	r0, #4
    8a88:	e3a020ce 	mov	r2, #206	; 0xce
    8a8c:	eb000cd7 	bl	bdf0 <assertion_failed>
    8a90:	e5943010 	ldr	r3, [r4, #16]
    8a94:	e3530000 	cmp	r3, #0
    8a98:	0a000043 	beq	8bac <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    8a9c:	e5943014 	ldr	r3, [r4, #20]
    8aa0:	e3530000 	cmp	r3, #0
    8aa4:	0a000047 	beq	8bc8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x170>
    8aa8:	e5d4301c 	ldrb	r3, [r4, #28]
    8aac:	e3530006 	cmp	r3, #6
    8ab0:	0a000005 	beq	8acc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x74>
    8ab4:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8ab8:	e3401004 	movt	r1, #4
    8abc:	e30f0f44 	movw	r0, #65348	; 0xff44
    8ac0:	e3400004 	movt	r0, #4
    8ac4:	e3a020d2 	mov	r2, #210	; 0xd2
    8ac8:	eb000cc8 	bl	bdf0 <assertion_failed>
    8acc:	e3580005 	cmp	r8, #5
    8ad0:	ca000025 	bgt	8b6c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
    8ad4:	e5d4301d 	ldrb	r3, [r4, #29]
    8ad8:	e1530008 	cmp	r3, r8
    8adc:	0a00002b 	beq	8b90 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x138>
    8ae0:	e5943004 	ldr	r3, [r4, #4]
    8ae4:	e5c4801c 	strb	r8, [r4, #28]
    8ae8:	e3530035 	cmp	r3, #53	; 0x35
    8aec:	8a000016 	bhi	8b4c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    8af0:	e3016c18 	movw	r6, #7192	; 0x1c18
    8af4:	e3406005 	movt	r6, #5
    8af8:	e203101f 	and	r1, r3, #31
    8afc:	e3a05001 	mov	r5, #1
    8b00:	e3a0700c 	mov	r7, #12
    8b04:	e3a04013 	mov	r4, #19
    8b08:	e3404fc8 	movt	r4, #4040	; 0xfc8
    8b0c:	e5962000 	ldr	r2, [r6]
    8b10:	e1a05115 	lsl	r5, r5, r1
    8b14:	e08442a3 	add	r4, r4, r3, lsr #5
    8b18:	e0070897 	mul	r7, r7, r8
    8b1c:	e3520000 	cmp	r2, #0
    8b20:	1a000007 	bne	8b44 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xec>
    8b24:	e7973104 	ldr	r3, [r7, r4, lsl #2]
    8b28:	e1855003 	orr	r5, r5, r3
    8b2c:	e7875104 	str	r5, [r7, r4, lsl #2]
    8b30:	e5963000 	ldr	r3, [r6]
    8b34:	e3530000 	cmp	r3, #0
    8b38:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8b3c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8b40:	ea00030e 	b	9780 <LeaveCritical>
    8b44:	eb000300 	bl	974c <EnterCritical>
    8b48:	eafffff5 	b	8b24 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
    8b4c:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8b50:	e3401004 	movt	r1, #4
    8b54:	e30f0eb8 	movw	r0, #65208	; 0xfeb8
    8b58:	e3400004 	movt	r0, #4
    8b5c:	e3a020d7 	mov	r2, #215	; 0xd7
    8b60:	eb000ca2 	bl	bdf0 <assertion_failed>
    8b64:	e5943004 	ldr	r3, [r4, #4]
    8b68:	eaffffe0 	b	8af0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x98>
    8b6c:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8b70:	e3401004 	movt	r1, #4
    8b74:	e30f0fd0 	movw	r0, #65488	; 0xffd0
    8b78:	e3400004 	movt	r0, #4
    8b7c:	e3a020d3 	mov	r2, #211	; 0xd3
    8b80:	eb000c9a 	bl	bdf0 <assertion_failed>
    8b84:	e5d4301d 	ldrb	r3, [r4, #29]
    8b88:	e1530008 	cmp	r3, r8
    8b8c:	1affffd3 	bne	8ae0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x88>
    8b90:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8b94:	e3401004 	movt	r1, #4
    8b98:	e30f0ff4 	movw	r0, #65524	; 0xfff4
    8b9c:	e3400004 	movt	r0, #4
    8ba0:	e3a020d4 	mov	r2, #212	; 0xd4
    8ba4:	eb000c91 	bl	bdf0 <assertion_failed>
    8ba8:	eaffffcc 	b	8ae0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x88>
    8bac:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8bb0:	e3401004 	movt	r1, #4
    8bb4:	e30f0fb0 	movw	r0, #65456	; 0xffb0
    8bb8:	e3400004 	movt	r0, #4
    8bbc:	e3a020cf 	mov	r2, #207	; 0xcf
    8bc0:	eb000c8a 	bl	bdf0 <assertion_failed>
    8bc4:	eaffffb4 	b	8a9c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x44>
    8bc8:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8bcc:	e3401004 	movt	r1, #4
    8bd0:	e30f0fc0 	movw	r0, #65472	; 0xffc0
    8bd4:	e3400004 	movt	r0, #4
    8bd8:	e3a020d0 	mov	r2, #208	; 0xd0
    8bdc:	eb000c83 	bl	bdf0 <assertion_failed>
    8be0:	eaffffb0 	b	8aa8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x50>

00008be4 <CGPIOPin::DisableInterrupt()>:
    8be4:	e5d03008 	ldrb	r3, [r0, #8]
    8be8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8bec:	e1a04000 	mov	r4, r0
    8bf0:	e2432002 	sub	r2, r3, #2
    8bf4:	e3530000 	cmp	r3, #0
    8bf8:	13520001 	cmpne	r2, #1
    8bfc:	9a000005 	bls	8c18 <CGPIOPin::DisableInterrupt()+0x34>
    8c00:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8c04:	e3401004 	movt	r1, #4
    8c08:	e30f0ecc 	movw	r0, #65228	; 0xfecc
    8c0c:	e3400004 	movt	r0, #4
    8c10:	e3a020e8 	mov	r2, #232	; 0xe8
    8c14:	eb000c75 	bl	bdf0 <assertion_failed>
    8c18:	e5d4301c 	ldrb	r3, [r4, #28]
    8c1c:	e3530005 	cmp	r3, #5
    8c20:	ca000024 	bgt	8cb8 <CGPIOPin::DisableInterrupt()+0xd4>
    8c24:	e5943004 	ldr	r3, [r4, #4]
    8c28:	e3530035 	cmp	r3, #53	; 0x35
    8c2c:	8a000019 	bhi	8c98 <CGPIOPin::DisableInterrupt()+0xb4>
    8c30:	e3016c18 	movw	r6, #7192	; 0x1c18
    8c34:	e3406005 	movt	r6, #5
    8c38:	e5d4201c 	ldrb	r2, [r4, #28]
    8c3c:	e203101f 	and	r1, r3, #31
    8c40:	e3a08001 	mov	r8, #1
    8c44:	e3a0700c 	mov	r7, #12
    8c48:	e5960000 	ldr	r0, [r6]
    8c4c:	e3a05013 	mov	r5, #19
    8c50:	e3405fc8 	movt	r5, #4040	; 0xfc8
    8c54:	e3500000 	cmp	r0, #0
    8c58:	e1a08118 	lsl	r8, r8, r1
    8c5c:	e08552a3 	add	r5, r5, r3, lsr #5
    8c60:	e0070297 	mul	r7, r7, r2
    8c64:	1a000009 	bne	8c90 <CGPIOPin::DisableInterrupt()+0xac>
    8c68:	e7973105 	ldr	r3, [r7, r5, lsl #2]
    8c6c:	e1c33008 	bic	r3, r3, r8
    8c70:	e7873105 	str	r3, [r7, r5, lsl #2]
    8c74:	e5963000 	ldr	r3, [r6]
    8c78:	e3530000 	cmp	r3, #0
    8c7c:	0a000000 	beq	8c84 <CGPIOPin::DisableInterrupt()+0xa0>
    8c80:	eb0002be 	bl	9780 <LeaveCritical>
    8c84:	e3a03006 	mov	r3, #6
    8c88:	e5c4301c 	strb	r3, [r4, #28]
    8c8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8c90:	eb0002ad 	bl	974c <EnterCritical>
    8c94:	eafffff3 	b	8c68 <CGPIOPin::DisableInterrupt()+0x84>
    8c98:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8c9c:	e3401004 	movt	r1, #4
    8ca0:	e30f0eb8 	movw	r0, #65208	; 0xfeb8
    8ca4:	e3400004 	movt	r0, #4
    8ca8:	e3a020ec 	mov	r2, #236	; 0xec
    8cac:	eb000c4f 	bl	bdf0 <assertion_failed>
    8cb0:	e5943004 	ldr	r3, [r4, #4]
    8cb4:	eaffffdd 	b	8c30 <CGPIOPin::DisableInterrupt()+0x4c>
    8cb8:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8cbc:	e3401004 	movt	r1, #4
    8cc0:	e3000010 	movw	r0, #16
    8cc4:	e3400005 	movt	r0, #5
    8cc8:	e3a020ea 	mov	r2, #234	; 0xea
    8ccc:	eb000c47 	bl	bdf0 <assertion_failed>
    8cd0:	eaffffd3 	b	8c24 <CGPIOPin::DisableInterrupt()+0x40>

00008cd4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    8cd4:	e5d03008 	ldrb	r3, [r0, #8]
    8cd8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8cdc:	e1a04000 	mov	r4, r0
    8ce0:	e2432002 	sub	r2, r3, #2
    8ce4:	e3530000 	cmp	r3, #0
    8ce8:	13520001 	cmpne	r2, #1
    8cec:	e1a08001 	mov	r8, r1
    8cf0:	9a000005 	bls	8d0c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x38>
    8cf4:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8cf8:	e3401004 	movt	r1, #4
    8cfc:	e30f0ecc 	movw	r0, #65228	; 0xfecc
    8d00:	e3400004 	movt	r0, #4
    8d04:	e3a020fe 	mov	r2, #254	; 0xfe
    8d08:	eb000c38 	bl	bdf0 <assertion_failed>
    8d0c:	e5943010 	ldr	r3, [r4, #16]
    8d10:	e3530000 	cmp	r3, #0
    8d14:	0a000043 	beq	8e28 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    8d18:	e5943014 	ldr	r3, [r4, #20]
    8d1c:	e3530000 	cmp	r3, #0
    8d20:	0a000047 	beq	8e44 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x170>
    8d24:	e5d4301d 	ldrb	r3, [r4, #29]
    8d28:	e3530006 	cmp	r3, #6
    8d2c:	0a000005 	beq	8d48 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x74>
    8d30:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8d34:	e3401004 	movt	r1, #4
    8d38:	e30f0f68 	movw	r0, #65384	; 0xff68
    8d3c:	e3400004 	movt	r0, #4
    8d40:	e3002102 	movw	r2, #258	; 0x102
    8d44:	eb000c29 	bl	bdf0 <assertion_failed>
    8d48:	e3580005 	cmp	r8, #5
    8d4c:	ca000025 	bgt	8de8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
    8d50:	e5d4301c 	ldrb	r3, [r4, #28]
    8d54:	e1530008 	cmp	r3, r8
    8d58:	0a00002b 	beq	8e0c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x138>
    8d5c:	e5943004 	ldr	r3, [r4, #4]
    8d60:	e5c4801d 	strb	r8, [r4, #29]
    8d64:	e3530035 	cmp	r3, #53	; 0x35
    8d68:	8a000016 	bhi	8dc8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    8d6c:	e3016c18 	movw	r6, #7192	; 0x1c18
    8d70:	e3406005 	movt	r6, #5
    8d74:	e203101f 	and	r1, r3, #31
    8d78:	e3a05001 	mov	r5, #1
    8d7c:	e3a0700c 	mov	r7, #12
    8d80:	e3a04013 	mov	r4, #19
    8d84:	e3404fc8 	movt	r4, #4040	; 0xfc8
    8d88:	e5962000 	ldr	r2, [r6]
    8d8c:	e1a05115 	lsl	r5, r5, r1
    8d90:	e08442a3 	add	r4, r4, r3, lsr #5
    8d94:	e0070897 	mul	r7, r7, r8
    8d98:	e3520000 	cmp	r2, #0
    8d9c:	1a000007 	bne	8dc0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xec>
    8da0:	e7973104 	ldr	r3, [r7, r4, lsl #2]
    8da4:	e1855003 	orr	r5, r5, r3
    8da8:	e7875104 	str	r5, [r7, r4, lsl #2]
    8dac:	e5963000 	ldr	r3, [r6]
    8db0:	e3530000 	cmp	r3, #0
    8db4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8db8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8dbc:	ea00026f 	b	9780 <LeaveCritical>
    8dc0:	eb000261 	bl	974c <EnterCritical>
    8dc4:	eafffff5 	b	8da0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
    8dc8:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8dcc:	e3401004 	movt	r1, #4
    8dd0:	e30f0eb8 	movw	r0, #65208	; 0xfeb8
    8dd4:	e3400004 	movt	r0, #4
    8dd8:	e3002107 	movw	r2, #263	; 0x107
    8ddc:	eb000c03 	bl	bdf0 <assertion_failed>
    8de0:	e5943004 	ldr	r3, [r4, #4]
    8de4:	eaffffe0 	b	8d6c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x98>
    8de8:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8dec:	e3401004 	movt	r1, #4
    8df0:	e30f0fd0 	movw	r0, #65488	; 0xffd0
    8df4:	e3400004 	movt	r0, #4
    8df8:	e3002103 	movw	r2, #259	; 0x103
    8dfc:	eb000bfb 	bl	bdf0 <assertion_failed>
    8e00:	e5d4301c 	ldrb	r3, [r4, #28]
    8e04:	e1530008 	cmp	r3, r8
    8e08:	1affffd3 	bne	8d5c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x88>
    8e0c:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8e10:	e3401004 	movt	r1, #4
    8e14:	e3000034 	movw	r0, #52	; 0x34
    8e18:	e3400005 	movt	r0, #5
    8e1c:	e3a02f41 	mov	r2, #260	; 0x104
    8e20:	eb000bf2 	bl	bdf0 <assertion_failed>
    8e24:	eaffffcc 	b	8d5c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x88>
    8e28:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8e2c:	e3401004 	movt	r1, #4
    8e30:	e30f0fb0 	movw	r0, #65456	; 0xffb0
    8e34:	e3400004 	movt	r0, #4
    8e38:	e3a020ff 	mov	r2, #255	; 0xff
    8e3c:	eb000beb 	bl	bdf0 <assertion_failed>
    8e40:	eaffffb4 	b	8d18 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x44>
    8e44:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8e48:	e3401004 	movt	r1, #4
    8e4c:	e30f0fc0 	movw	r0, #65472	; 0xffc0
    8e50:	e3400004 	movt	r0, #4
    8e54:	e3a02c01 	mov	r2, #256	; 0x100
    8e58:	eb000be4 	bl	bdf0 <assertion_failed>
    8e5c:	eaffffb0 	b	8d24 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x50>

00008e60 <CGPIOPin::DisableInterrupt2()>:
    8e60:	e5d03008 	ldrb	r3, [r0, #8]
    8e64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8e68:	e1a04000 	mov	r4, r0
    8e6c:	e2432002 	sub	r2, r3, #2
    8e70:	e3530000 	cmp	r3, #0
    8e74:	13520001 	cmpne	r2, #1
    8e78:	9a000005 	bls	8e94 <CGPIOPin::DisableInterrupt2()+0x34>
    8e7c:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8e80:	e3401004 	movt	r1, #4
    8e84:	e30f0ecc 	movw	r0, #65228	; 0xfecc
    8e88:	e3400004 	movt	r0, #4
    8e8c:	e3a02f46 	mov	r2, #280	; 0x118
    8e90:	eb000bd6 	bl	bdf0 <assertion_failed>
    8e94:	e5d4301d 	ldrb	r3, [r4, #29]
    8e98:	e3530005 	cmp	r3, #5
    8e9c:	ca000024 	bgt	8f34 <CGPIOPin::DisableInterrupt2()+0xd4>
    8ea0:	e5943004 	ldr	r3, [r4, #4]
    8ea4:	e3530035 	cmp	r3, #53	; 0x35
    8ea8:	8a000019 	bhi	8f14 <CGPIOPin::DisableInterrupt2()+0xb4>
    8eac:	e3016c18 	movw	r6, #7192	; 0x1c18
    8eb0:	e3406005 	movt	r6, #5
    8eb4:	e5d4201d 	ldrb	r2, [r4, #29]
    8eb8:	e203101f 	and	r1, r3, #31
    8ebc:	e3a08001 	mov	r8, #1
    8ec0:	e3a0700c 	mov	r7, #12
    8ec4:	e5960000 	ldr	r0, [r6]
    8ec8:	e3a05013 	mov	r5, #19
    8ecc:	e3405fc8 	movt	r5, #4040	; 0xfc8
    8ed0:	e3500000 	cmp	r0, #0
    8ed4:	e1a08118 	lsl	r8, r8, r1
    8ed8:	e08552a3 	add	r5, r5, r3, lsr #5
    8edc:	e0070297 	mul	r7, r7, r2
    8ee0:	1a000009 	bne	8f0c <CGPIOPin::DisableInterrupt2()+0xac>
    8ee4:	e7973105 	ldr	r3, [r7, r5, lsl #2]
    8ee8:	e1c33008 	bic	r3, r3, r8
    8eec:	e7873105 	str	r3, [r7, r5, lsl #2]
    8ef0:	e5963000 	ldr	r3, [r6]
    8ef4:	e3530000 	cmp	r3, #0
    8ef8:	0a000000 	beq	8f00 <CGPIOPin::DisableInterrupt2()+0xa0>
    8efc:	eb00021f 	bl	9780 <LeaveCritical>
    8f00:	e3a03006 	mov	r3, #6
    8f04:	e5c4301d 	strb	r3, [r4, #29]
    8f08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8f0c:	eb00020e 	bl	974c <EnterCritical>
    8f10:	eafffff3 	b	8ee4 <CGPIOPin::DisableInterrupt2()+0x84>
    8f14:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8f18:	e3401004 	movt	r1, #4
    8f1c:	e30f0eb8 	movw	r0, #65208	; 0xfeb8
    8f20:	e3400004 	movt	r0, #4
    8f24:	e3a02f47 	mov	r2, #284	; 0x11c
    8f28:	eb000bb0 	bl	bdf0 <assertion_failed>
    8f2c:	e5943004 	ldr	r3, [r4, #4]
    8f30:	eaffffdd 	b	8eac <CGPIOPin::DisableInterrupt2()+0x4c>
    8f34:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8f38:	e3401004 	movt	r1, #4
    8f3c:	e3000050 	movw	r0, #80	; 0x50
    8f40:	e3400005 	movt	r0, #5
    8f44:	e300211a 	movw	r2, #282	; 0x11a
    8f48:	eb000ba8 	bl	bdf0 <assertion_failed>
    8f4c:	eaffffd3 	b	8ea0 <CGPIOPin::DisableInterrupt2()+0x40>

00008f50 <CGPIOPin::SetPullUpMode(unsigned int)>:
    8f50:	e5903004 	ldr	r3, [r0, #4]
    8f54:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8f58:	e1a08001 	mov	r8, r1
    8f5c:	e3530035 	cmp	r3, #53	; 0x35
    8f60:	8a000026 	bhi	9000 <CGPIOPin::SetPullUpMode(unsigned int)+0xb0>
    8f64:	e3015c18 	movw	r5, #7192	; 0x1c18
    8f68:	e3405005 	movt	r5, #5
    8f6c:	e3a04026 	mov	r4, #38	; 0x26
    8f70:	e3404fc8 	movt	r4, #4040	; 0xfc8
    8f74:	e203701f 	and	r7, r3, #31
    8f78:	e5952000 	ldr	r2, [r5]
    8f7c:	e08442a3 	add	r4, r4, r3, lsr #5
    8f80:	e3520000 	cmp	r2, #0
    8f84:	e1a04104 	lsl	r4, r4, #2
    8f88:	1a00001a 	bne	8ff8 <CGPIOPin::SetPullUpMode(unsigned int)+0xa8>
    8f8c:	e3580002 	cmp	r8, #2
    8f90:	8a000011 	bhi	8fdc <CGPIOPin::SetPullUpMode(unsigned int)+0x8c>
    8f94:	e3a06000 	mov	r6, #0
    8f98:	e3436f20 	movt	r6, #16160	; 0x3f20
    8f9c:	e3a00005 	mov	r0, #5
    8fa0:	e5868094 	str	r8, [r6, #148]	; 0x94
    8fa4:	eb0004e5 	bl	a340 <CTimer::SimpleusDelay(unsigned int)>
    8fa8:	e3a03001 	mov	r3, #1
    8fac:	e3a00005 	mov	r0, #5
    8fb0:	e1a03713 	lsl	r3, r3, r7
    8fb4:	e5843000 	str	r3, [r4]
    8fb8:	eb0004e0 	bl	a340 <CTimer::SimpleusDelay(unsigned int)>
    8fbc:	e3a03000 	mov	r3, #0
    8fc0:	e5863094 	str	r3, [r6, #148]	; 0x94
    8fc4:	e5843000 	str	r3, [r4]
    8fc8:	e5953000 	ldr	r3, [r5]
    8fcc:	e3530000 	cmp	r3, #0
    8fd0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8fd4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8fd8:	ea0001e8 	b	9780 <LeaveCritical>
    8fdc:	e30f1e68 	movw	r1, #65128	; 0xfe68
    8fe0:	e3401004 	movt	r1, #4
    8fe4:	e3000074 	movw	r0, #116	; 0x74
    8fe8:	e3400005 	movt	r0, #5
    8fec:	e3002133 	movw	r2, #307	; 0x133
    8ff0:	eb000b7e 	bl	bdf0 <assertion_failed>
    8ff4:	eaffffe6 	b	8f94 <CGPIOPin::SetPullUpMode(unsigned int)+0x44>
    8ff8:	eb0001d3 	bl	974c <EnterCritical>
    8ffc:	eaffffe2 	b	8f8c <CGPIOPin::SetPullUpMode(unsigned int)+0x3c>
    9000:	e1a04000 	mov	r4, r0
    9004:	e30f1e68 	movw	r1, #65128	; 0xfe68
    9008:	e3401004 	movt	r1, #4
    900c:	e30f0eb8 	movw	r0, #65208	; 0xfeb8
    9010:	e3400004 	movt	r0, #4
    9014:	e300212d 	movw	r2, #301	; 0x12d
    9018:	eb000b74 	bl	bdf0 <assertion_failed>
    901c:	e5943004 	ldr	r3, [r4, #4]
    9020:	eaffffcf 	b	8f64 <CGPIOPin::SetPullUpMode(unsigned int)+0x14>

00009024 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    9024:	e5902004 	ldr	r2, [r0, #4]
    9028:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    902c:	e1a06001 	mov	r6, r1
    9030:	e3520035 	cmp	r2, #53	; 0x35
    9034:	8a000026 	bhi	90d4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
    9038:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    903c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    9040:	e3a0100a 	mov	r1, #10
    9044:	e3560005 	cmp	r6, #5
    9048:	e0843293 	umull	r3, r4, r3, r2
    904c:	e1a041a4 	lsr	r4, r4, #3
    9050:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    9054:	e2833702 	add	r3, r3, #524288	; 0x80000
    9058:	e0642491 	mls	r4, r1, r4, r2
    905c:	e1a07103 	lsl	r7, r3, #2
    9060:	e0844084 	add	r4, r4, r4, lsl #1
    9064:	8a000013 	bhi	90b8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x94>
    9068:	e3015c18 	movw	r5, #7192	; 0x1c18
    906c:	e3405005 	movt	r5, #5
    9070:	e5953000 	ldr	r3, [r5]
    9074:	e3530000 	cmp	r3, #0
    9078:	1a00000c 	bne	90b0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    907c:	e5973000 	ldr	r3, [r7]
    9080:	e30f2e40 	movw	r2, #65088	; 0xfe40
    9084:	e3402004 	movt	r2, #4
    9088:	e3a01007 	mov	r1, #7
    908c:	e7922106 	ldr	r2, [r2, r6, lsl #2]
    9090:	e1c33411 	bic	r3, r3, r1, lsl r4
    9094:	e1834412 	orr	r4, r3, r2, lsl r4
    9098:	e5874000 	str	r4, [r7]
    909c:	e5953000 	ldr	r3, [r5]
    90a0:	e3530000 	cmp	r3, #0
    90a4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    90a8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    90ac:	ea0001b3 	b	9780 <LeaveCritical>
    90b0:	eb0001a5 	bl	974c <EnterCritical>
    90b4:	eafffff0 	b	907c <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
    90b8:	e30f1e68 	movw	r1, #65128	; 0xfe68
    90bc:	e3401004 	movt	r1, #4
    90c0:	e3000080 	movw	r0, #128	; 0x80
    90c4:	e3400005 	movt	r0, #5
    90c8:	e3a02f51 	mov	r2, #324	; 0x144
    90cc:	eb000b47 	bl	bdf0 <assertion_failed>
    90d0:	eaffffe4 	b	9068 <CGPIOPin::SetAlternateFunction(unsigned int)+0x44>
    90d4:	e1a04000 	mov	r4, r0
    90d8:	e3a02d05 	mov	r2, #320	; 0x140
    90dc:	e30f1e68 	movw	r1, #65128	; 0xfe68
    90e0:	e3401004 	movt	r1, #4
    90e4:	e30f0eb8 	movw	r0, #65208	; 0xfeb8
    90e8:	e3400004 	movt	r0, #4
    90ec:	eb000b3f 	bl	bdf0 <assertion_failed>
    90f0:	e5942004 	ldr	r2, [r4, #4]
    90f4:	eaffffcf 	b	9038 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>

000090f8 <CGPIOPin::SetMode(TGPIOMode, int)>:
    90f8:	e3510009 	cmp	r1, #9
    90fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9100:	e1a04001 	mov	r4, r1
    9104:	e1a05000 	mov	r5, r0
    9108:	e1a06002 	mov	r6, r2
    910c:	e1a07001 	mov	r7, r1
    9110:	ca000037 	bgt	91f4 <CGPIOPin::SetMode(TGPIOMode, int)+0xfc>
    9114:	e2443004 	sub	r3, r4, #4
    9118:	e5c54008 	strb	r4, [r5, #8]
    911c:	e3530005 	cmp	r3, #5
    9120:	9a00002d 	bls	91dc <CGPIOPin::SetMode(TGPIOMode, int)+0xe4>
    9124:	e2963000 	adds	r3, r6, #0
    9128:	13a03001 	movne	r3, #1
    912c:	e3540001 	cmp	r4, #1
    9130:	13a03000 	movne	r3, #0
    9134:	e3530000 	cmp	r3, #0
    9138:	1a00005b 	bne	92ac <CGPIOPin::SetMode(TGPIOMode, int)+0x1b4>
    913c:	e5952004 	ldr	r2, [r5, #4]
    9140:	e3520035 	cmp	r2, #53	; 0x35
    9144:	8a00003a 	bhi	9234 <CGPIOPin::SetMode(TGPIOMode, int)+0x13c>
    9148:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    914c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    9150:	e3018c18 	movw	r8, #7192	; 0x1c18
    9154:	e3408005 	movt	r8, #5
    9158:	e3a0100a 	mov	r1, #10
    915c:	e0843293 	umull	r3, r4, r3, r2
    9160:	e5983000 	ldr	r3, [r8]
    9164:	e1a041a4 	lsr	r4, r4, #3
    9168:	e3530000 	cmp	r3, #0
    916c:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    9170:	e2833702 	add	r3, r3, #524288	; 0x80000
    9174:	e0642491 	mls	r4, r1, r4, r2
    9178:	e1a07103 	lsl	r7, r3, #2
    917c:	e0844084 	add	r4, r4, r4, lsl #1
    9180:	1a000033 	bne	9254 <CGPIOPin::SetMode(TGPIOMode, int)+0x15c>
    9184:	e5d52008 	ldrb	r2, [r5, #8]
    9188:	e3a01007 	mov	r1, #7
    918c:	e5973000 	ldr	r3, [r7]
    9190:	e2422001 	sub	r2, r2, #1
    9194:	e16f2f12 	clz	r2, r2
    9198:	e1c33411 	bic	r3, r3, r1, lsl r4
    919c:	e1a022a2 	lsr	r2, r2, #5
    91a0:	e1834412 	orr	r4, r3, r2, lsl r4
    91a4:	e5874000 	str	r4, [r7]
    91a8:	e5983000 	ldr	r3, [r8]
    91ac:	e3530000 	cmp	r3, #0
    91b0:	1a000029 	bne	925c <CGPIOPin::SetMode(TGPIOMode, int)+0x164>
    91b4:	e3560000 	cmp	r6, #0
    91b8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    91bc:	e5d53008 	ldrb	r3, [r5, #8]
    91c0:	e3530003 	cmp	r3, #3
    91c4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    91c8:	ea000010 	b	9210 <CGPIOPin::SetMode(TGPIOMode, int)+0x118>
    91cc:	0000929c 	.word	0x0000929c
    91d0:	0000928c 	.word	0x0000928c
    91d4:	0000927c 	.word	0x0000927c
    91d8:	0000926c 	.word	0x0000926c
    91dc:	e3560000 	cmp	r6, #0
    91e0:	1a00000b 	bne	9214 <CGPIOPin::SetMode(TGPIOMode, int)+0x11c>
    91e4:	e2471004 	sub	r1, r7, #4
    91e8:	e1a00005 	mov	r0, r5
    91ec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    91f0:	eaffff8b 	b	9024 <CGPIOPin::SetAlternateFunction(unsigned int)>
    91f4:	e30f1e68 	movw	r1, #65128	; 0xfe68
    91f8:	e3401004 	movt	r1, #4
    91fc:	e3000090 	movw	r0, #144	; 0x90
    9200:	e3400005 	movt	r0, #5
    9204:	e3a0203a 	mov	r2, #58	; 0x3a
    9208:	eb000af8 	bl	bdf0 <assertion_failed>
    920c:	eaffffc0 	b	9114 <CGPIOPin::SetMode(TGPIOMode, int)+0x1c>
    9210:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9214:	e1a00005 	mov	r0, r5
    9218:	e3a01000 	mov	r1, #0
    921c:	ebffff4b 	bl	8f50 <CGPIOPin::SetPullUpMode(unsigned int)>
    9220:	e5d57008 	ldrb	r7, [r5, #8]
    9224:	e1a00005 	mov	r0, r5
    9228:	e2471004 	sub	r1, r7, #4
    922c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9230:	eaffff7b 	b	9024 <CGPIOPin::SetAlternateFunction(unsigned int)>
    9234:	e3a02053 	mov	r2, #83	; 0x53
    9238:	e30f1e68 	movw	r1, #65128	; 0xfe68
    923c:	e3401004 	movt	r1, #4
    9240:	e30f0eb8 	movw	r0, #65208	; 0xfeb8
    9244:	e3400004 	movt	r0, #4
    9248:	eb000ae8 	bl	bdf0 <assertion_failed>
    924c:	e5952004 	ldr	r2, [r5, #4]
    9250:	eaffffbc 	b	9148 <CGPIOPin::SetMode(TGPIOMode, int)+0x50>
    9254:	eb00013c 	bl	974c <EnterCritical>
    9258:	eaffffc9 	b	9184 <CGPIOPin::SetMode(TGPIOMode, int)+0x8c>
    925c:	eb000147 	bl	9780 <LeaveCritical>
    9260:	e3560000 	cmp	r6, #0
    9264:	1affffd4 	bne	91bc <CGPIOPin::SetMode(TGPIOMode, int)+0xc4>
    9268:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    926c:	e1a00005 	mov	r0, r5
    9270:	e3a01001 	mov	r1, #1
    9274:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9278:	eaffff34 	b	8f50 <CGPIOPin::SetPullUpMode(unsigned int)>
    927c:	e1a00005 	mov	r0, r5
    9280:	e3a01002 	mov	r1, #2
    9284:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9288:	eaffff30 	b	8f50 <CGPIOPin::SetPullUpMode(unsigned int)>
    928c:	e1a00005 	mov	r0, r5
    9290:	e3a01000 	mov	r1, #0
    9294:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9298:	eafffd0e 	b	86d8 <CGPIOPin::Write(unsigned int)>
    929c:	e1a00005 	mov	r0, r5
    92a0:	e3a01000 	mov	r1, #0
    92a4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    92a8:	eaffff28 	b	8f50 <CGPIOPin::SetPullUpMode(unsigned int)>
    92ac:	e3a01000 	mov	r1, #0
    92b0:	e1a00005 	mov	r0, r5
    92b4:	ebffff25 	bl	8f50 <CGPIOPin::SetPullUpMode(unsigned int)>
    92b8:	eaffff9f 	b	913c <CGPIOPin::SetMode(TGPIOMode, int)+0x44>

000092bc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    92bc:	e92d4070 	push	{r4, r5, r6, lr}
    92c0:	e3510035 	cmp	r1, #53	; 0x35
    92c4:	e1a04000 	mov	r4, r0
    92c8:	e59fe07c 	ldr	lr, [pc, #124]	; 934c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x90>
    92cc:	e1a05001 	mov	r5, r1
    92d0:	e3a0c00a 	mov	ip, #10
    92d4:	e3a01006 	mov	r1, #6
    92d8:	e3a00000 	mov	r0, #0
    92dc:	e5845004 	str	r5, [r4, #4]
    92e0:	e5843010 	str	r3, [r4, #16]
    92e4:	e1a06002 	mov	r6, r2
    92e8:	e584e000 	str	lr, [r4]
    92ec:	e5c4c008 	strb	ip, [r4, #8]
    92f0:	e5840014 	str	r0, [r4, #20]
    92f4:	e5c4101c 	strb	r1, [r4, #28]
    92f8:	e5c4101d 	strb	r1, [r4, #29]
    92fc:	8a000005 	bhi	9318 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x5c>
    9300:	e1a00004 	mov	r0, r4
    9304:	e1a01006 	mov	r1, r6
    9308:	e3a02001 	mov	r2, #1
    930c:	ebffff79 	bl	90f8 <CGPIOPin::SetMode(TGPIOMode, int)>
    9310:	e1a00004 	mov	r0, r4
    9314:	e8bd8070 	pop	{r4, r5, r6, pc}
    9318:	eb001551 	bl	e864 <CMachineInfo::Get()>
    931c:	e6ef1075 	uxtb	r1, r5
    9320:	eb001524 	bl	e7b8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    9324:	e3500035 	cmp	r0, #53	; 0x35
    9328:	e5840004 	str	r0, [r4, #4]
    932c:	9afffff3 	bls	9300 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    9330:	e30f1e68 	movw	r1, #65128	; 0xfe68
    9334:	e3401004 	movt	r1, #4
    9338:	e30f0eb8 	movw	r0, #65208	; 0xfeb8
    933c:	e3400004 	movt	r0, #4
    9340:	e3a0202b 	mov	r2, #43	; 0x2b
    9344:	eb000aa9 	bl	bdf0 <assertion_failed>
    9348:	eaffffec 	b	9300 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    934c:	0004fe60 	.word	0x0004fe60

00009350 <CGPIOPin::InterruptHandler()>:
    9350:	e5d03008 	ldrb	r3, [r0, #8]
    9354:	e92d4010 	push	{r4, lr}
    9358:	e1a04000 	mov	r4, r0
    935c:	e2432002 	sub	r2, r3, #2
    9360:	e3530000 	cmp	r3, #0
    9364:	13520001 	cmpne	r2, #1
    9368:	9a000005 	bls	9384 <CGPIOPin::InterruptHandler()+0x34>
    936c:	e30f1e68 	movw	r1, #65128	; 0xfe68
    9370:	e3401004 	movt	r1, #4
    9374:	e30f0ecc 	movw	r0, #65228	; 0xfecc
    9378:	e3400004 	movt	r0, #4
    937c:	e3002153 	movw	r2, #339	; 0x153
    9380:	eb000a9a 	bl	bdf0 <assertion_failed>
    9384:	e5d4301c 	ldrb	r3, [r4, #28]
    9388:	e3530005 	cmp	r3, #5
    938c:	da000002 	ble	939c <CGPIOPin::InterruptHandler()+0x4c>
    9390:	e5d4301d 	ldrb	r3, [r4, #29]
    9394:	e3530005 	cmp	r3, #5
    9398:	ca000005 	bgt	93b4 <CGPIOPin::InterruptHandler()+0x64>
    939c:	e5943014 	ldr	r3, [r4, #20]
    93a0:	e3530000 	cmp	r3, #0
    93a4:	0a00000b 	beq	93d8 <CGPIOPin::InterruptHandler()+0x88>
    93a8:	e5940018 	ldr	r0, [r4, #24]
    93ac:	e8bd4010 	pop	{r4, lr}
    93b0:	e12fff13 	bx	r3
    93b4:	e30f1e68 	movw	r1, #65128	; 0xfe68
    93b8:	e3401004 	movt	r1, #4
    93bc:	e30000a8 	movw	r0, #168	; 0xa8
    93c0:	e3400005 	movt	r0, #5
    93c4:	e3002155 	movw	r2, #341	; 0x155
    93c8:	eb000a88 	bl	bdf0 <assertion_failed>
    93cc:	e5943014 	ldr	r3, [r4, #20]
    93d0:	e3530000 	cmp	r3, #0
    93d4:	1afffff3 	bne	93a8 <CGPIOPin::InterruptHandler()+0x58>
    93d8:	e30f1e68 	movw	r1, #65128	; 0xfe68
    93dc:	e3401004 	movt	r1, #4
    93e0:	e30f0fc0 	movw	r0, #65472	; 0xffc0
    93e4:	e3400004 	movt	r0, #4
    93e8:	e3002157 	movw	r2, #343	; 0x157
    93ec:	eb000a7f 	bl	bdf0 <assertion_failed>
    93f0:	e5943014 	ldr	r3, [r4, #20]
    93f4:	e5940018 	ldr	r0, [r4, #24]
    93f8:	e8bd4010 	pop	{r4, lr}
    93fc:	e12fff13 	bx	r3

00009400 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    9400:	e3500035 	cmp	r0, #53	; 0x35
    9404:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9408:	e1a07000 	mov	r7, r0
    940c:	8a000023 	bhi	94a0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    9410:	e3016c18 	movw	r6, #7192	; 0x1c18
    9414:	e3406005 	movt	r6, #5
    9418:	e3a04013 	mov	r4, #19
    941c:	e3404fc8 	movt	r4, #4040	; 0xfc8
    9420:	e207501f 	and	r5, r7, #31
    9424:	e3a02001 	mov	r2, #1
    9428:	e5963000 	ldr	r3, [r6]
    942c:	e08442a7 	add	r4, r4, r7, lsr #5
    9430:	e3530000 	cmp	r3, #0
    9434:	e1a04104 	lsl	r4, r4, #2
    9438:	e1a05512 	lsl	r5, r2, r5
    943c:	1a000011 	bne	9488 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
    9440:	e3a0308b 	mov	r3, #139	; 0x8b
    9444:	e3433f20 	movt	r3, #16160	; 0x3f20
    9448:	e1540003 	cmp	r4, r3
    944c:	8a00000c 	bhi	9484 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
    9450:	e3a0108b 	mov	r1, #139	; 0x8b
    9454:	e3431f20 	movt	r1, #16160	; 0x3f20
    9458:	e1e02005 	mvn	r2, r5
    945c:	e5943000 	ldr	r3, [r4]
    9460:	e0033002 	and	r3, r3, r2
    9464:	e484300c 	str	r3, [r4], #12
    9468:	e1540001 	cmp	r4, r1
    946c:	9afffffa 	bls	945c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x5c>
    9470:	e5963000 	ldr	r3, [r6]
    9474:	e3530000 	cmp	r3, #0
    9478:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    947c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9480:	ea0000be 	b	9780 <LeaveCritical>
    9484:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9488:	eb0000af 	bl	974c <EnterCritical>
    948c:	e3a0308b 	mov	r3, #139	; 0x8b
    9490:	e3433f20 	movt	r3, #16160	; 0x3f20
    9494:	e1540003 	cmp	r4, r3
    9498:	9affffec 	bls	9450 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    949c:	eafffff3 	b	9470 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
    94a0:	e30f1e68 	movw	r1, #65128	; 0xfe68
    94a4:	e3401004 	movt	r1, #4
    94a8:	e30000f4 	movw	r0, #244	; 0xf4
    94ac:	e3400005 	movt	r0, #5
    94b0:	e300215d 	movw	r2, #349	; 0x15d
    94b4:	eb000a4d 	bl	bdf0 <assertion_failed>
    94b8:	eaffffd4 	b	9410 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>

000094bc <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    94bc:	e3013c18 	movw	r3, #7192	; 0x1c18
    94c0:	e3403005 	movt	r3, #5
    94c4:	e3a02001 	mov	r2, #1
    94c8:	e5832000 	str	r2, [r3]
    94cc:	e12fff1e 	bx	lr

000094d0 <CMemorySystem::~CMemorySystem()>:
    94d0:	e5903000 	ldr	r3, [r0]
    94d4:	e92d4070 	push	{r4, r5, r6, lr}
    94d8:	e1a04000 	mov	r4, r0
    94dc:	e3530000 	cmp	r3, #0
    94e0:	0a000005 	beq	94fc <CMemorySystem::~CMemorySystem()+0x2c>
    94e4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    94e8:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    94ec:	e3c33005 	bic	r3, r3, #5
    94f0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    94f4:	e3a03000 	mov	r3, #0
    94f8:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    94fc:	e594500c 	ldr	r5, [r4, #12]
    9500:	e3550000 	cmp	r5, #0
    9504:	0a000003 	beq	9518 <CMemorySystem::~CMemorySystem()+0x48>
    9508:	e1a00005 	mov	r0, r5
    950c:	eb0005ae 	bl	abcc <CPageTable::~CPageTable()>
    9510:	e1a00005 	mov	r0, r5
    9514:	eb00008a 	bl	9744 <operator delete(void*)>
    9518:	e5945008 	ldr	r5, [r4, #8]
    951c:	e3a03000 	mov	r3, #0
    9520:	e584300c 	str	r3, [r4, #12]
    9524:	e1550003 	cmp	r5, r3
    9528:	0a000003 	beq	953c <CMemorySystem::~CMemorySystem()+0x6c>
    952c:	e1a00005 	mov	r0, r5
    9530:	eb0005a5 	bl	abcc <CPageTable::~CPageTable()>
    9534:	e1a00005 	mov	r0, r5
    9538:	eb000081 	bl	9744 <operator delete(void*)>
    953c:	e1a00004 	mov	r0, r4
    9540:	e8bd8070 	pop	{r4, r5, r6, pc}

00009544 <CMemorySystem::GetMemSize() const>:
    9544:	e5900004 	ldr	r0, [r0, #4]
    9548:	e12fff1e 	bx	lr

0000954c <CMemorySystem::EnableMMU()>:
    954c:	e5903000 	ldr	r3, [r0]
    9550:	e92d4010 	push	{r4, lr}
    9554:	e1a04000 	mov	r4, r0
    9558:	e3530000 	cmp	r3, #0
    955c:	0a00001f 	beq	95e0 <CMemorySystem::EnableMMU()+0x94>
    9560:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    9564:	e3833040 	orr	r3, r3, #64	; 0x40
    9568:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    956c:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    9570:	e3130001 	tst	r3, #1
    9574:	1a000020 	bne	95fc <CMemorySystem::EnableMMU()+0xb0>
    9578:	e3a03002 	mov	r3, #2
    957c:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    9580:	e5940008 	ldr	r0, [r4, #8]
    9584:	e3500000 	cmp	r0, #0
    9588:	0a00002a 	beq	9638 <CMemorySystem::EnableMMU()+0xec>
    958c:	eb000597 	bl	abf0 <CPageTable::GetBaseAddress() const>
    9590:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    9594:	e594000c 	ldr	r0, [r4, #12]
    9598:	e3500000 	cmp	r0, #0
    959c:	0a00001d 	beq	9618 <CMemorySystem::EnableMMU()+0xcc>
    95a0:	eb000592 	bl	abf0 <CPageTable::GetBaseAddress() const>
    95a4:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    95a8:	e3a03005 	mov	r3, #5
    95ac:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    95b0:	eb0014d4 	bl	e908 <InvalidateDataCache>
    95b4:	e3a03000 	mov	r3, #0
    95b8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    95bc:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    95c0:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    95c4:	f57ff04f 	dsb	sy
    95c8:	f57ff06f 	isb	sy
    95cc:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    95d0:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    95d4:	e3833005 	orr	r3, r3, #5
    95d8:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    95dc:	e8bd8010 	pop	{r4, pc}
    95e0:	e3001108 	movw	r1, #264	; 0x108
    95e4:	e3401005 	movt	r1, #5
    95e8:	e3000114 	movw	r0, #276	; 0x114
    95ec:	e3400005 	movt	r0, #5
    95f0:	e3a020c0 	mov	r2, #192	; 0xc0
    95f4:	eb0009fd 	bl	bdf0 <assertion_failed>
    95f8:	eaffffd8 	b	9560 <CMemorySystem::EnableMMU()+0x14>
    95fc:	e3001108 	movw	r1, #264	; 0x108
    9600:	e3401005 	movt	r1, #5
    9604:	e3000124 	movw	r0, #292	; 0x124
    9608:	e3400005 	movt	r0, #5
    960c:	e3a020cd 	mov	r2, #205	; 0xcd
    9610:	eb0009f6 	bl	bdf0 <assertion_failed>
    9614:	eaffffd7 	b	9578 <CMemorySystem::EnableMMU()+0x2c>
    9618:	e3001108 	movw	r1, #264	; 0x108
    961c:	e3401005 	movt	r1, #5
    9620:	e300016c 	movw	r0, #364	; 0x16c
    9624:	e3400005 	movt	r0, #5
    9628:	e3a020d7 	mov	r2, #215	; 0xd7
    962c:	eb0009ef 	bl	bdf0 <assertion_failed>
    9630:	e594000c 	ldr	r0, [r4, #12]
    9634:	eaffffd9 	b	95a0 <CMemorySystem::EnableMMU()+0x54>
    9638:	e3001108 	movw	r1, #264	; 0x108
    963c:	e3401005 	movt	r1, #5
    9640:	e3000150 	movw	r0, #336	; 0x150
    9644:	e3400005 	movt	r0, #5
    9648:	e3a020d3 	mov	r2, #211	; 0xd3
    964c:	eb0009e7 	bl	bdf0 <assertion_failed>
    9650:	e5940008 	ldr	r0, [r4, #8]
    9654:	eaffffcc 	b	958c <CMemorySystem::EnableMMU()+0x40>

00009658 <CMemorySystem::CMemorySystem(int)>:
    9658:	e92d4030 	push	{r4, r5, lr}
    965c:	e1a04000 	mov	r4, r0
    9660:	e3a05000 	mov	r5, #0
    9664:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    9668:	e8840022 	stm	r4, {r1, r5}
    966c:	e28d000c 	add	r0, sp, #12
    9670:	e5845008 	str	r5, [r4, #8]
    9674:	e584500c 	str	r5, [r4, #12]
    9678:	ebfffb9c 	bl	84f0 <CBcmPropertyTags::CBcmPropertyTags()>
    967c:	e3a03014 	mov	r3, #20
    9680:	e58d5000 	str	r5, [sp]
    9684:	e28d000c 	add	r0, sp, #12
    9688:	e3a01005 	mov	r1, #5
    968c:	e3401001 	movt	r1, #1
    9690:	e08d2003 	add	r2, sp, r3
    9694:	ebfffbdd 	bl	8610 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9698:	e3500000 	cmp	r0, #0
    969c:	1a000019 	bne	9708 <CMemorySystem::CMemorySystem(int)+0xb0>
    96a0:	e3a01303 	mov	r1, #201326592	; 0xc000000
    96a4:	e58d0020 	str	r0, [sp, #32]
    96a8:	e58d1024 	str	r1, [sp, #36]	; 0x24
    96ac:	e5841004 	str	r1, [r4, #4]
    96b0:	eb001638 	bl	ef98 <mem_init>
    96b4:	e5943000 	ldr	r3, [r4]
    96b8:	e3530000 	cmp	r3, #0
    96bc:	0a00000c 	beq	96f4 <CMemorySystem::CMemorySystem(int)+0x9c>
    96c0:	e3a00008 	mov	r0, #8
    96c4:	eb00001c 	bl	973c <operator new(unsigned int)>
    96c8:	e5941004 	ldr	r1, [r4, #4]
    96cc:	e1a05000 	mov	r5, r0
    96d0:	eb0004ed 	bl	aa8c <CPageTable::CPageTable(unsigned int)>
    96d4:	e5845008 	str	r5, [r4, #8]
    96d8:	e3a00008 	mov	r0, #8
    96dc:	eb000016 	bl	973c <operator new(unsigned int)>
    96e0:	e1a05000 	mov	r5, r0
    96e4:	eb0004bc 	bl	a9dc <CPageTable::CPageTable()>
    96e8:	e584500c 	str	r5, [r4, #12]
    96ec:	e1a00004 	mov	r0, r4
    96f0:	ebffff95 	bl	954c <CMemorySystem::EnableMMU()>
    96f4:	e28d000c 	add	r0, sp, #12
    96f8:	ebfffb82 	bl	8508 <CBcmPropertyTags::~CBcmPropertyTags()>
    96fc:	e1a00004 	mov	r0, r4
    9700:	e28dd02c 	add	sp, sp, #44	; 0x2c
    9704:	e8bd8030 	pop	{r4, r5, pc}
    9708:	e59d0020 	ldr	r0, [sp, #32]
    970c:	e3500000 	cmp	r0, #0
    9710:	059d1024 	ldreq	r1, [sp, #36]	; 0x24
    9714:	0affffe4 	beq	96ac <CMemorySystem::CMemorySystem(int)+0x54>
    9718:	e3001108 	movw	r1, #264	; 0x108
    971c:	e3401005 	movt	r1, #5
    9720:	e3000180 	movw	r0, #384	; 0x180
    9724:	e3400005 	movt	r0, #5
    9728:	e3a02042 	mov	r2, #66	; 0x42
    972c:	eb0009af 	bl	bdf0 <assertion_failed>
    9730:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    9734:	e59d0020 	ldr	r0, [sp, #32]
    9738:	eaffffdb 	b	96ac <CMemorySystem::CMemorySystem(int)+0x54>

0000973c <operator new(unsigned int)>:
    973c:	ea00162e 	b	effc <malloc>

00009740 <operator new[](unsigned int)>:
    9740:	ea00162d 	b	effc <malloc>

00009744 <operator delete(void*)>:
    9744:	ea00168e 	b	f184 <free>

00009748 <operator delete[](void*)>:
    9748:	ea00168d 	b	f184 <free>

0000974c <EnterCritical>:
    974c:	e10f1000 	mrs	r1, CPSR
    9750:	f10c0080 	cpsid	i
    9754:	e3013c1c 	movw	r3, #7196	; 0x1c1c
    9758:	e3403005 	movt	r3, #5
    975c:	e5932000 	ldr	r2, [r3]
    9760:	e3520000 	cmp	r2, #0
    9764:	e2822001 	add	r2, r2, #1
    9768:	02211080 	eoreq	r1, r1, #128	; 0x80
    976c:	e5832000 	str	r2, [r3]
    9770:	07e013d1 	ubfxeq	r1, r1, #7, #1
    9774:	05831004 	streq	r1, [r3, #4]
    9778:	f57ff05f 	dmb	sy
    977c:	e12fff1e 	bx	lr

00009780 <LeaveCritical>:
    9780:	e92d4010 	push	{r4, lr}
    9784:	f57ff05f 	dmb	sy
    9788:	e3014c1c 	movw	r4, #7196	; 0x1c1c
    978c:	e3404005 	movt	r4, #5
    9790:	e5943000 	ldr	r3, [r4]
    9794:	e3530000 	cmp	r3, #0
    9798:	0a000009 	beq	97c4 <LeaveCritical+0x44>
    979c:	e5943000 	ldr	r3, [r4]
    97a0:	e2433001 	sub	r3, r3, #1
    97a4:	e3530000 	cmp	r3, #0
    97a8:	e5843000 	str	r3, [r4]
    97ac:	18bd8010 	popne	{r4, pc}
    97b0:	e5943004 	ldr	r3, [r4, #4]
    97b4:	e3530000 	cmp	r3, #0
    97b8:	08bd8010 	popeq	{r4, pc}
    97bc:	f1080080 	cpsie	i
    97c0:	e8bd8010 	pop	{r4, pc}
    97c4:	e300119c 	movw	r1, #412	; 0x19c
    97c8:	e3401005 	movt	r1, #5
    97cc:	e30001ac 	movw	r0, #428	; 0x1ac
    97d0:	e3400005 	movt	r0, #5
    97d4:	e3a0205b 	mov	r2, #91	; 0x5b
    97d8:	eb000984 	bl	bdf0 <assertion_failed>
    97dc:	eaffffee 	b	979c <LeaveCritical+0x1c>

000097e0 <SyncDataAndInstructionCache>:
    97e0:	e92d4010 	push	{r4, lr}
    97e4:	eb001471 	bl	e9b0 <CleanDataCache>
    97e8:	e3a03000 	mov	r3, #0
    97ec:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    97f0:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    97f4:	f57ff04f 	dsb	sy
    97f8:	f57ff06f 	isb	sy
    97fc:	e8bd8010 	pop	{r4, pc}

00009800 <__aeabi_atexit>:
    9800:	e12fff1e 	bx	lr

00009804 <halt>:
    9804:	f10c0080 	cpsid	i
    9808:	f57ff04f 	dsb	sy
    980c:	e320f003 	wfi
    9810:	eafffffc 	b	9808 <halt+0x4>

00009814 <reboot>:
    9814:	e3a03000 	mov	r3, #0
    9818:	e3433f10 	movt	r3, #16144	; 0x3f10
    981c:	e3a01001 	mov	r1, #1
    9820:	e3451a00 	movt	r1, #23040	; 0x5a00
    9824:	e3a02020 	mov	r2, #32
    9828:	e3452a00 	movt	r2, #23040	; 0x5a00
    982c:	e5831024 	str	r1, [r3, #36]	; 0x24
    9830:	e583201c 	str	r2, [r3, #28]
    9834:	eafffffe 	b	9834 <reboot+0x20>

00009838 <sysinit>:
    9838:	e92d4030 	push	{r4, r5, lr}
    983c:	e24dd01c 	sub	sp, sp, #28
    9840:	eb001415 	bl	e89c <InvalidateDataCacheL1Only>
    9844:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    9848:	e308305c 	movw	r3, #32860	; 0x805c
    984c:	e3403000 	movt	r3, #0
    9850:	e582309c 	str	r3, [r2, #156]	; 0x9c
    9854:	e58230ac 	str	r3, [r2, #172]	; 0xac
    9858:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    985c:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    9860:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    9864:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    9868:	f57ff06f 	isb	sy
    986c:	eee82a10 	vmsr	fpexc, r2
    9870:	e3a01000 	mov	r1, #0
    9874:	eee11a10 	vmsr	fpscr, r1
    9878:	e3013c14 	movw	r3, #7188	; 0x1c14
    987c:	e3403005 	movt	r3, #5
    9880:	e3012c68 	movw	r2, #7272	; 0x1c68
    9884:	e3402005 	movt	r2, #5
    9888:	e1530002 	cmp	r3, r2
    988c:	2a000002 	bcs	989c <sysinit+0x64>
    9890:	e4c31001 	strb	r1, [r3], #1
    9894:	e1530002 	cmp	r3, r2
    9898:	1afffffc 	bne	9890 <sysinit+0x58>
    989c:	e1a0000d 	mov	r0, sp
    98a0:	e3015b2c 	movw	r5, #6956	; 0x1b2c
    98a4:	e3405005 	movt	r5, #5
    98a8:	e3014b20 	movw	r4, #6944	; 0x1b20
    98ac:	e3404005 	movt	r4, #5
    98b0:	eb0012fa 	bl	e4a0 <CMachineInfo::CMachineInfo()>
    98b4:	e1540005 	cmp	r4, r5
    98b8:	2a000003 	bcs	98cc <sysinit+0x94>
    98bc:	e4943004 	ldr	r3, [r4], #4
    98c0:	e12fff33 	blx	r3
    98c4:	e1540005 	cmp	r4, r5
    98c8:	3afffffb 	bcc	98bc <sysinit+0x84>
    98cc:	ebfff9e5 	bl	8068 <main>
    98d0:	e3500001 	cmp	r0, #1
    98d4:	0a000000 	beq	98dc <sysinit+0xa4>
    98d8:	ebffffc9 	bl	9804 <halt>
    98dc:	ebffffcc 	bl	9814 <reboot>

000098e0 <CTimer::CTimer(CInterruptSystem*)>:
    98e0:	e92d4070 	push	{r4, r5, r6, lr}
    98e4:	e1a04000 	mov	r4, r0
    98e8:	e3015c28 	movw	r5, #7208	; 0x1c28
    98ec:	e3405005 	movt	r5, #5
    98f0:	e3a03000 	mov	r3, #0
    98f4:	e3a06001 	mov	r6, #1
    98f8:	e5801000 	str	r1, [r0]
    98fc:	e2800018 	add	r0, r0, #24
    9900:	e5843004 	str	r3, [r4, #4]
    9904:	e5843014 	str	r3, [r4, #20]
    9908:	e5843008 	str	r3, [r4, #8]
    990c:	e5846010 	str	r6, [r4, #16]
    9910:	e584300c 	str	r3, [r4, #12]
    9914:	eb00145d 	bl	ea90 <CPtrList::CPtrList()>
    9918:	e5951000 	ldr	r1, [r5]
    991c:	e300215e 	movw	r2, #350	; 0x15e
    9920:	e3053730 	movw	r3, #22320	; 0x5730
    9924:	e3403005 	movt	r3, #5
    9928:	e3510000 	cmp	r1, #0
    992c:	e584601c 	str	r6, [r4, #28]
    9930:	e5843020 	str	r3, [r4, #32]
    9934:	e5842024 	str	r2, [r4, #36]	; 0x24
    9938:	0a000005 	beq	9954 <CTimer::CTimer(CInterruptSystem*)+0x74>
    993c:	e30011fc 	movw	r1, #508	; 0x1fc
    9940:	e3401005 	movt	r1, #5
    9944:	e3000208 	movw	r0, #520	; 0x208
    9948:	e3400005 	movt	r0, #5
    994c:	e3a0203b 	mov	r2, #59	; 0x3b
    9950:	eb000926 	bl	bdf0 <assertion_failed>
    9954:	e5854000 	str	r4, [r5]
    9958:	e1a00004 	mov	r0, r4
    995c:	e8bd8070 	pop	{r4, r5, r6, pc}

00009960 <CTimer::~CTimer()>:
    9960:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9964:	e1a09000 	mov	r9, r0
    9968:	e5900000 	ldr	r0, [r0]
    996c:	e3500000 	cmp	r0, #0
    9970:	0a00002b 	beq	9a24 <CTimer::~CTimer()+0xc4>
    9974:	e3a01003 	mov	r1, #3
    9978:	e30071fc 	movw	r7, #508	; 0x1fc
    997c:	e3407005 	movt	r7, #5
    9980:	e300a230 	movw	sl, #560	; 0x230
    9984:	e340a005 	movt	sl, #5
    9988:	e3048d43 	movw	r8, #19779	; 0x4d43
    998c:	e3448b54 	movt	r8, #19284	; 0x4b54
    9990:	e2894018 	add	r4, r9, #24
    9994:	eb0010e1 	bl	dd20 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    9998:	ea00000f 	b	99dc <CTimer::~CTimer()+0x7c>
    999c:	eb001464 	bl	eb34 <CPtrList::GetPtr(TPtrListElement*)>
    99a0:	e2506000 	subs	r6, r0, #0
    99a4:	0a000019 	beq	9a10 <CTimer::~CTimer()+0xb0>
    99a8:	e5963000 	ldr	r3, [r6]
    99ac:	e300023c 	movw	r0, #572	; 0x23c
    99b0:	e3400005 	movt	r0, #5
    99b4:	e1530008 	cmp	r3, r8
    99b8:	e3a02049 	mov	r2, #73	; 0x49
    99bc:	e1a01007 	mov	r1, r7
    99c0:	0a000000 	beq	99c8 <CTimer::~CTimer()+0x68>
    99c4:	eb000909 	bl	bdf0 <assertion_failed>
    99c8:	e1a00004 	mov	r0, r4
    99cc:	e1a01005 	mov	r1, r5
    99d0:	eb0014f7 	bl	edb4 <CPtrList::Remove(TPtrListElement*)>
    99d4:	e1a00006 	mov	r0, r6
    99d8:	ebffff59 	bl	9744 <operator delete(void*)>
    99dc:	e1a00004 	mov	r0, r4
    99e0:	eb00143a 	bl	ead0 <CPtrList::GetFirst()>
    99e4:	e2505000 	subs	r5, r0, #0
    99e8:	e1a01005 	mov	r1, r5
    99ec:	e1a00004 	mov	r0, r4
    99f0:	1affffe9 	bne	999c <CTimer::~CTimer()+0x3c>
    99f4:	e3013c28 	movw	r3, #7208	; 0x1c28
    99f8:	e3403005 	movt	r3, #5
    99fc:	e1a00004 	mov	r0, r4
    9a00:	e5835000 	str	r5, [r3]
    9a04:	eb001424 	bl	ea9c <CPtrList::~CPtrList()>
    9a08:	e1a00009 	mov	r0, r9
    9a0c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9a10:	e3a02048 	mov	r2, #72	; 0x48
    9a14:	e1a01007 	mov	r1, r7
    9a18:	e1a0000a 	mov	r0, sl
    9a1c:	eb0008f3 	bl	bdf0 <assertion_failed>
    9a20:	eaffffe0 	b	99a8 <CTimer::~CTimer()+0x48>
    9a24:	e30011fc 	movw	r1, #508	; 0x1fc
    9a28:	e3401005 	movt	r1, #5
    9a2c:	e3000218 	movw	r0, #536	; 0x218
    9a30:	e3400005 	movt	r0, #5
    9a34:	e3a02041 	mov	r2, #65	; 0x41
    9a38:	eb0008ec 	bl	bdf0 <assertion_failed>
    9a3c:	e5990000 	ldr	r0, [r9]
    9a40:	eaffffcb 	b	9974 <CTimer::~CTimer()+0x14>

00009a44 <CTimer::SetTimeZone(int)>:
    9a44:	e2813e59 	add	r3, r1, #1424	; 0x590
    9a48:	e3002b3e 	movw	r2, #2878	; 0xb3e
    9a4c:	e283300f 	add	r3, r3, #15
    9a50:	e1530002 	cmp	r3, r2
    9a54:	95801014 	strls	r1, [r0, #20]
    9a58:	93a00001 	movls	r0, #1
    9a5c:	83a00000 	movhi	r0, #0
    9a60:	e12fff1e 	bx	lr

00009a64 <CTimer::GetTimeZone() const>:
    9a64:	e5900014 	ldr	r0, [r0, #20]
    9a68:	e12fff1e 	bx	lr

00009a6c <CTimer::SetTime(unsigned int, int)>:
    9a6c:	e3520000 	cmp	r2, #0
    9a70:	e92d4070 	push	{r4, r5, r6, lr}
    9a74:	e1a04000 	mov	r4, r0
    9a78:	e1a05001 	mov	r5, r1
    9a7c:	1a000005 	bne	9a98 <CTimer::SetTime(unsigned int, int)+0x2c>
    9a80:	e5901014 	ldr	r1, [r0, #20]
    9a84:	e3a0303c 	mov	r3, #60	; 0x3c
    9a88:	e0030193 	mul	r3, r3, r1
    9a8c:	e3530000 	cmp	r3, #0
    9a90:	ba00000e 	blt	9ad0 <CTimer::SetTime(unsigned int, int)+0x64>
    9a94:	e0855003 	add	r5, r5, r3
    9a98:	e5943010 	ldr	r3, [r4, #16]
    9a9c:	e3530000 	cmp	r3, #0
    9aa0:	1a000002 	bne	9ab0 <CTimer::SetTime(unsigned int, int)+0x44>
    9aa4:	e3a00001 	mov	r0, #1
    9aa8:	e584500c 	str	r5, [r4, #12]
    9aac:	e8bd8070 	pop	{r4, r5, r6, pc}
    9ab0:	ebffff25 	bl	974c <EnterCritical>
    9ab4:	e5943010 	ldr	r3, [r4, #16]
    9ab8:	e584500c 	str	r5, [r4, #12]
    9abc:	e3530000 	cmp	r3, #0
    9ac0:	0a000007 	beq	9ae4 <CTimer::SetTime(unsigned int, int)+0x78>
    9ac4:	ebffff2d 	bl	9780 <LeaveCritical>
    9ac8:	e3a00001 	mov	r0, #1
    9acc:	e8bd8070 	pop	{r4, r5, r6, pc}
    9ad0:	e2631000 	rsb	r1, r3, #0
    9ad4:	e1510005 	cmp	r1, r5
    9ad8:	daffffed 	ble	9a94 <CTimer::SetTime(unsigned int, int)+0x28>
    9adc:	e1a00002 	mov	r0, r2
    9ae0:	e8bd8070 	pop	{r4, r5, r6, pc}
    9ae4:	e3a00001 	mov	r0, #1
    9ae8:	e8bd8070 	pop	{r4, r5, r6, pc}

00009aec <CTimer::GetClockTicks()>:
    9aec:	e3a03a03 	mov	r3, #12288	; 0x3000
    9af0:	e3433f00 	movt	r3, #16128	; 0x3f00
    9af4:	e5930004 	ldr	r0, [r3, #4]
    9af8:	e12fff1e 	bx	lr

00009afc <CTimer::GetTicks() const>:
    9afc:	e5900004 	ldr	r0, [r0, #4]
    9b00:	e12fff1e 	bx	lr

00009b04 <CTimer::GetUptime() const>:
    9b04:	e5900008 	ldr	r0, [r0, #8]
    9b08:	e12fff1e 	bx	lr

00009b0c <CTimer::GetTime() const>:
    9b0c:	e590000c 	ldr	r0, [r0, #12]
    9b10:	e12fff1e 	bx	lr

00009b14 <CTimer::GetUniversalTime() const>:
    9b14:	e5902014 	ldr	r2, [r0, #20]
    9b18:	e3a0303c 	mov	r3, #60	; 0x3c
    9b1c:	e590000c 	ldr	r0, [r0, #12]
    9b20:	e0030293 	mul	r3, r3, r2
    9b24:	e1530000 	cmp	r3, r0
    9b28:	d0400003 	suble	r0, r0, r3
    9b2c:	c3a00000 	movgt	r0, #0
    9b30:	e12fff1e 	bx	lr

00009b34 <CTimer::GetTimeString()>:
    9b34:	e5903010 	ldr	r3, [r0, #16]
    9b38:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b3c:	e1a04000 	mov	r4, r0
    9b40:	e3530000 	cmp	r3, #0
    9b44:	e24dd014 	sub	sp, sp, #20
    9b48:	1a00006c 	bne	9d00 <CTimer::GetTimeString()+0x1cc>
    9b4c:	e590500c 	ldr	r5, [r0, #12]
    9b50:	e5909004 	ldr	r9, [r0, #4]
    9b54:	e1950009 	orrs	r0, r5, r9
    9b58:	0a000051 	beq	9ca4 <CTimer::GetTimeString()+0x170>
    9b5c:	e3086889 	movw	r6, #34953	; 0x8889
    9b60:	e3486888 	movt	r6, #34952	; 0x8888
    9b64:	e30b73c5 	movw	r7, #46021	; 0xb3c5
    9b68:	e34971a2 	movt	r7, #37282	; 0x91a2
    9b6c:	e3044507 	movw	r4, #17671	; 0x4507
    9b70:	e34c422e 	movt	r4, #49710	; 0xc22e
    9b74:	e0813596 	umull	r3, r1, r6, r5
    9b78:	e3a0003c 	mov	r0, #60	; 0x3c
    9b7c:	e0832695 	umull	r2, r3, r5, r6
    9b80:	e308c51f 	movw	ip, #34079	; 0x851f
    9b84:	e345c1eb 	movt	ip, #20971	; 0x51eb
    9b88:	e1a012a1 	lsr	r1, r1, #5
    9b8c:	e1a082a3 	lsr	r8, r3, #5
    9b90:	e0873597 	umull	r3, r7, r7, r5
    9b94:	e3a0a064 	mov	sl, #100	; 0x64
    9b98:	e0843594 	umull	r3, r4, r4, r5
    9b9c:	e3a0ee19 	mov	lr, #400	; 0x190
    9ba0:	e0863196 	umull	r3, r6, r6, r1
    9ba4:	e1a075a7 	lsr	r7, r7, #11
    9ba8:	e0685890 	mls	r8, r0, r8, r5
    9bac:	e1a04824 	lsr	r4, r4, #16
    9bb0:	e1a062a6 	lsr	r6, r6, #5
    9bb4:	e30057b2 	movw	r5, #1970	; 0x7b2
    9bb8:	e300216d 	movw	r2, #365	; 0x16d
    9bbc:	e300316e 	movw	r3, #366	; 0x16e
    9bc0:	e0661690 	mls	r6, r0, r6, r1
    9bc4:	ea000001 	b	9bd0 <CTimer::GetTimeString()+0x9c>
    9bc8:	e0444000 	sub	r4, r4, r0
    9bcc:	e2855001 	add	r5, r5, #1
    9bd0:	e0810c95 	umull	r0, r1, r5, ip
    9bd4:	e1a002a1 	lsr	r0, r1, #5
    9bd8:	e1a013a1 	lsr	r1, r1, #7
    9bdc:	e060509a 	mls	r0, sl, r0, r5
    9be0:	e061519e 	mls	r1, lr, r1, r5
    9be4:	e3500000 	cmp	r0, #0
    9be8:	e16f1f11 	clz	r1, r1
    9bec:	01a012a1 	lsreq	r1, r1, #5
    9bf0:	0a000002 	beq	9c00 <CTimer::GetTimeString()+0xcc>
    9bf4:	e3150003 	tst	r5, #3
    9bf8:	03a01001 	moveq	r1, #1
    9bfc:	13a01000 	movne	r1, #0
    9c00:	e3510000 	cmp	r1, #0
    9c04:	01a00002 	moveq	r0, r2
    9c08:	11a00003 	movne	r0, r3
    9c0c:	e1540000 	cmp	r4, r0
    9c10:	2affffec 	bcs	9bc8 <CTimer::GetTimeString()+0x94>
    9c14:	e30001c4 	movw	r0, #452	; 0x1c4
    9c18:	e3400005 	movt	r0, #5
    9c1c:	e3a0a000 	mov	sl, #0
    9c20:	ea000001 	b	9c2c <CTimer::GetTimeString()+0xf8>
    9c24:	e0444003 	sub	r4, r4, r3
    9c28:	e28aa001 	add	sl, sl, #1
    9c2c:	e35a0001 	cmp	sl, #1
    9c30:	13a02000 	movne	r2, #0
    9c34:	02012001 	andeq	r2, r1, #1
    9c38:	e3a0301d 	mov	r3, #29
    9c3c:	e3520000 	cmp	r2, #0
    9c40:	0790310a 	ldreq	r3, [r0, sl, lsl #2]
    9c44:	e1540003 	cmp	r4, r3
    9c48:	2afffff5 	bcs	9c24 <CTimer::GetTimeString()+0xf0>
    9c4c:	e308251f 	movw	r2, #34079	; 0x851f
    9c50:	e34521eb 	movt	r2, #20971	; 0x51eb
    9c54:	e3a01064 	mov	r1, #100	; 0x64
    9c58:	e3a00010 	mov	r0, #16
    9c5c:	e0832299 	umull	r2, r3, r9, r2
    9c60:	e1a0b2a3 	lsr	fp, r3, #5
    9c64:	e06b9b91 	mls	fp, r1, fp, r9
    9c68:	ebfffeb3 	bl	973c <operator new(unsigned int)>
    9c6c:	e1a09000 	mov	r9, r0
    9c70:	eb000bc2 	bl	cb80 <CString::CString()>
    9c74:	e30037b7 	movw	r3, #1975	; 0x7b7
    9c78:	e1550003 	cmp	r5, r3
    9c7c:	8a00000a 	bhi	9cac <CTimer::GetTimeString()+0x178>
    9c80:	e1a00009 	mov	r0, r9
    9c84:	e58db004 	str	fp, [sp, #4]
    9c88:	e1a03006 	mov	r3, r6
    9c8c:	e58d8000 	str	r8, [sp]
    9c90:	e1a02007 	mov	r2, r7
    9c94:	e3001280 	movw	r1, #640	; 0x280
    9c98:	e3401005 	movt	r1, #5
    9c9c:	eb000eca 	bl	d7cc <CString::Format(char const*, ...)>
    9ca0:	e1a00009 	mov	r0, r9
    9ca4:	e28dd014 	add	sp, sp, #20
    9ca8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9cac:	e30a0aab 	movw	r0, #43691	; 0xaaab
    9cb0:	e34a0aaa 	movt	r0, #43690	; 0xaaaa
    9cb4:	e3a0c018 	mov	ip, #24
    9cb8:	e3012b2c 	movw	r2, #6956	; 0x1b2c
    9cbc:	e3402005 	movt	r2, #5
    9cc0:	e0810097 	umull	r0, r1, r7, r0
    9cc4:	e58db00c 	str	fp, [sp, #12]
    9cc8:	e58d8008 	str	r8, [sp, #8]
    9ccc:	e2843001 	add	r3, r4, #1
    9cd0:	e1a00221 	lsr	r0, r1, #4
    9cd4:	e3001264 	movw	r1, #612	; 0x264
    9cd8:	e3401005 	movt	r1, #5
    9cdc:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    9ce0:	e067709c 	mls	r7, ip, r0, r7
    9ce4:	e58d6004 	str	r6, [sp, #4]
    9ce8:	e1a00009 	mov	r0, r9
    9cec:	e58d7000 	str	r7, [sp]
    9cf0:	eb000eb5 	bl	d7cc <CString::Format(char const*, ...)>
    9cf4:	e1a00009 	mov	r0, r9
    9cf8:	e28dd014 	add	sp, sp, #20
    9cfc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d00:	ebfffe91 	bl	974c <EnterCritical>
    9d04:	e5943010 	ldr	r3, [r4, #16]
    9d08:	e594500c 	ldr	r5, [r4, #12]
    9d0c:	e3530000 	cmp	r3, #0
    9d10:	e5949004 	ldr	r9, [r4, #4]
    9d14:	0affff8e 	beq	9b54 <CTimer::GetTimeString()+0x20>
    9d18:	ebfffe98 	bl	9780 <LeaveCritical>
    9d1c:	eaffff8c 	b	9b54 <CTimer::GetTimeString()+0x20>

00009d20 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    9d20:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d24:	e1a0a000 	mov	sl, r0
    9d28:	e1a04002 	mov	r4, r2
    9d2c:	e24dd00c 	sub	sp, sp, #12
    9d30:	e3a00014 	mov	r0, #20
    9d34:	e1a06001 	mov	r6, r1
    9d38:	e1a07003 	mov	r7, r3
    9d3c:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
    9d40:	ebfffe7d 	bl	973c <operator new(unsigned int)>
    9d44:	e3540000 	cmp	r4, #0
    9d48:	e59a1004 	ldr	r1, [sl, #4]
    9d4c:	e1a09000 	mov	r9, r0
    9d50:	e0816006 	add	r6, r1, r6
    9d54:	0a000042 	beq	9e64 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
    9d58:	e59a301c 	ldr	r3, [sl, #28]
    9d5c:	e3042d43 	movw	r2, #19779	; 0x4d43
    9d60:	e3442b54 	movt	r2, #19284	; 0x4b54
    9d64:	e3530000 	cmp	r3, #0
    9d68:	e98900d0 	stmib	r9, {r4, r6, r7}
    9d6c:	e5895010 	str	r5, [r9, #16]
    9d70:	e5892000 	str	r2, [r9]
    9d74:	1a000038 	bne	9e5c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
    9d78:	e28a5018 	add	r5, sl, #24
    9d7c:	e1a00005 	mov	r0, r5
    9d80:	eb001352 	bl	ead0 <CPtrList::GetFirst()>
    9d84:	e2504000 	subs	r4, r0, #0
    9d88:	0a00002e 	beq	9e48 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    9d8c:	e3003294 	movw	r3, #660	; 0x294
    9d90:	e3403005 	movt	r3, #5
    9d94:	e30071fc 	movw	r7, #508	; 0x1fc
    9d98:	e3407005 	movt	r7, #5
    9d9c:	e3048d43 	movw	r8, #19779	; 0x4d43
    9da0:	e3448b54 	movt	r8, #19284	; 0x4b54
    9da4:	e58d3004 	str	r3, [sp, #4]
    9da8:	ea000011 	b	9df4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd4>
    9dac:	e59bc000 	ldr	ip, [fp]
    9db0:	e30002a4 	movw	r0, #676	; 0x2a4
    9db4:	e3400005 	movt	r0, #5
    9db8:	e15c0008 	cmp	ip, r8
    9dbc:	e3002116 	movw	r2, #278	; 0x116
    9dc0:	e1a01007 	mov	r1, r7
    9dc4:	0a000000 	beq	9dcc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xac>
    9dc8:	eb000808 	bl	bdf0 <assertion_failed>
    9dcc:	e59b3008 	ldr	r3, [fp, #8]
    9dd0:	e1a01004 	mov	r1, r4
    9dd4:	e1a00005 	mov	r0, r5
    9dd8:	e0433006 	sub	r3, r3, r6
    9ddc:	e3530000 	cmp	r3, #0
    9de0:	ca00000d 	bgt	9e1c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
    9de4:	eb00133b 	bl	ead8 <CPtrList::GetNext(TPtrListElement*)>
    9de8:	e3500000 	cmp	r0, #0
    9dec:	0a000015 	beq	9e48 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    9df0:	e1a04000 	mov	r4, r0
    9df4:	e1a01004 	mov	r1, r4
    9df8:	e1a00005 	mov	r0, r5
    9dfc:	eb00134c 	bl	eb34 <CPtrList::GetPtr(TPtrListElement*)>
    9e00:	e250b000 	subs	fp, r0, #0
    9e04:	1affffe8 	bne	9dac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x8c>
    9e08:	e3002115 	movw	r2, #277	; 0x115
    9e0c:	e1a01007 	mov	r1, r7
    9e10:	e59d0004 	ldr	r0, [sp, #4]
    9e14:	eb0007f5 	bl	bdf0 <assertion_failed>
    9e18:	eaffffe3 	b	9dac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x8c>
    9e1c:	e1a01004 	mov	r1, r4
    9e20:	e1a00005 	mov	r0, r5
    9e24:	e1a02009 	mov	r2, r9
    9e28:	eb001358 	bl	eb90 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    9e2c:	e59a301c 	ldr	r3, [sl, #28]
    9e30:	e3530000 	cmp	r3, #0
    9e34:	0a000000 	beq	9e3c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x11c>
    9e38:	ebfffe50 	bl	9780 <LeaveCritical>
    9e3c:	e1a00009 	mov	r0, r9
    9e40:	e28dd00c 	add	sp, sp, #12
    9e44:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e48:	e1a01004 	mov	r1, r4
    9e4c:	e1a00005 	mov	r0, r5
    9e50:	e1a02009 	mov	r2, r9
    9e54:	eb001393 	bl	eca8 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    9e58:	eafffff3 	b	9e2c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
    9e5c:	ebfffe3a 	bl	974c <EnterCritical>
    9e60:	eaffffc4 	b	9d78 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
    9e64:	e30011fc 	movw	r1, #508	; 0x1fc
    9e68:	e3401005 	movt	r1, #5
    9e6c:	e30f0f90 	movw	r0, #65424	; 0xff90
    9e70:	e3400004 	movt	r0, #4
    9e74:	e3002105 	movw	r2, #261	; 0x105
    9e78:	eb0007dc 	bl	bdf0 <assertion_failed>
    9e7c:	eaffffb5 	b	9d58 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x38>

00009e80 <CTimer::CancelKernelTimer(unsigned int)>:
    9e80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9e84:	e2514000 	subs	r4, r1, #0
    9e88:	e1a05000 	mov	r5, r0
    9e8c:	0a000021 	beq	9f18 <CTimer::CancelKernelTimer(unsigned int)+0x98>
    9e90:	e595301c 	ldr	r3, [r5, #28]
    9e94:	e3530000 	cmp	r3, #0
    9e98:	1a00001c 	bne	9f10 <CTimer::CancelKernelTimer(unsigned int)+0x90>
    9e9c:	e2856018 	add	r6, r5, #24
    9ea0:	e1a01004 	mov	r1, r4
    9ea4:	e1a00006 	mov	r0, r6
    9ea8:	eb00141c 	bl	ef20 <CPtrList::Find(void*)>
    9eac:	e2507000 	subs	r7, r0, #0
    9eb0:	0a000011 	beq	9efc <CTimer::CancelKernelTimer(unsigned int)+0x7c>
    9eb4:	e5942000 	ldr	r2, [r4]
    9eb8:	e3043d43 	movw	r3, #19779	; 0x4d43
    9ebc:	e3443b54 	movt	r3, #19284	; 0x4b54
    9ec0:	e1520003 	cmp	r2, r3
    9ec4:	0a000005 	beq	9ee0 <CTimer::CancelKernelTimer(unsigned int)+0x60>
    9ec8:	e30011fc 	movw	r1, #508	; 0x1fc
    9ecc:	e3401005 	movt	r1, #5
    9ed0:	e300023c 	movw	r0, #572	; 0x23c
    9ed4:	e3400005 	movt	r0, #5
    9ed8:	e3002139 	movw	r2, #313	; 0x139
    9edc:	eb0007c3 	bl	bdf0 <assertion_failed>
    9ee0:	e1a00006 	mov	r0, r6
    9ee4:	e1a01007 	mov	r1, r7
    9ee8:	eb0013b1 	bl	edb4 <CPtrList::Remove(TPtrListElement*)>
    9eec:	e3a03000 	mov	r3, #0
    9ef0:	e5843000 	str	r3, [r4]
    9ef4:	e1a00004 	mov	r0, r4
    9ef8:	ebfffe11 	bl	9744 <operator delete(void*)>
    9efc:	e595301c 	ldr	r3, [r5, #28]
    9f00:	e3530000 	cmp	r3, #0
    9f04:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9f08:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9f0c:	eafffe1b 	b	9780 <LeaveCritical>
    9f10:	ebfffe0d 	bl	974c <EnterCritical>
    9f14:	eaffffe0 	b	9e9c <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    9f18:	e30011fc 	movw	r1, #508	; 0x1fc
    9f1c:	e3401005 	movt	r1, #5
    9f20:	e3000230 	movw	r0, #560	; 0x230
    9f24:	e3400005 	movt	r0, #5
    9f28:	e3002132 	movw	r2, #306	; 0x132
    9f2c:	eb0007af 	bl	bdf0 <assertion_failed>
    9f30:	eaffffd6 	b	9e90 <CTimer::CancelKernelTimer(unsigned int)+0x10>

00009f34 <CTimer::PollKernelTimers()>:
    9f34:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f38:	e1a06000 	mov	r6, r0
    9f3c:	e590301c 	ldr	r3, [r0, #28]
    9f40:	e3530000 	cmp	r3, #0
    9f44:	1a00004e 	bne	a084 <CTimer::PollKernelTimers()+0x150>
    9f48:	e2867018 	add	r7, r6, #24
    9f4c:	e1a00007 	mov	r0, r7
    9f50:	eb0012de 	bl	ead0 <CPtrList::GetFirst()>
    9f54:	e2505000 	subs	r5, r0, #0
    9f58:	0a00003f 	beq	a05c <CTimer::PollKernelTimers()+0x128>
    9f5c:	e30091fc 	movw	r9, #508	; 0x1fc
    9f60:	e3409005 	movt	r9, #5
    9f64:	e300a230 	movw	sl, #560	; 0x230
    9f68:	e340a005 	movt	sl, #5
    9f6c:	e3048d43 	movw	r8, #19779	; 0x4d43
    9f70:	e3448b54 	movt	r8, #19284	; 0x4b54
    9f74:	ea00000f 	b	9fb8 <CTimer::PollKernelTimers()+0x84>
    9f78:	e5945004 	ldr	r5, [r4, #4]
    9f7c:	e3550000 	cmp	r5, #0
    9f80:	0a00002c 	beq	a038 <CTimer::PollKernelTimers()+0x104>
    9f84:	e5942010 	ldr	r2, [r4, #16]
    9f88:	e1a00004 	mov	r0, r4
    9f8c:	e594100c 	ldr	r1, [r4, #12]
    9f90:	e12fff35 	blx	r5
    9f94:	e3a03000 	mov	r3, #0
    9f98:	e5843000 	str	r3, [r4]
    9f9c:	e1a00004 	mov	r0, r4
    9fa0:	ebfffde7 	bl	9744 <operator delete(void*)>
    9fa4:	e596301c 	ldr	r3, [r6, #28]
    9fa8:	e3530000 	cmp	r3, #0
    9fac:	1a000027 	bne	a050 <CTimer::PollKernelTimers()+0x11c>
    9fb0:	e25b5000 	subs	r5, fp, #0
    9fb4:	0a000028 	beq	a05c <CTimer::PollKernelTimers()+0x128>
    9fb8:	e1a01005 	mov	r1, r5
    9fbc:	e1a00007 	mov	r0, r7
    9fc0:	eb0012db 	bl	eb34 <CPtrList::GetPtr(TPtrListElement*)>
    9fc4:	e2504000 	subs	r4, r0, #0
    9fc8:	0a000028 	beq	a070 <CTimer::PollKernelTimers()+0x13c>
    9fcc:	e5943000 	ldr	r3, [r4]
    9fd0:	e1530008 	cmp	r3, r8
    9fd4:	0a000004 	beq	9fec <CTimer::PollKernelTimers()+0xb8>
    9fd8:	e300023c 	movw	r0, #572	; 0x23c
    9fdc:	e3400005 	movt	r0, #5
    9fe0:	e300214f 	movw	r2, #335	; 0x14f
    9fe4:	e1a01009 	mov	r1, r9
    9fe8:	eb000780 	bl	bdf0 <assertion_failed>
    9fec:	e5962004 	ldr	r2, [r6, #4]
    9ff0:	e5943008 	ldr	r3, [r4, #8]
    9ff4:	e0433002 	sub	r3, r3, r2
    9ff8:	e3530000 	cmp	r3, #0
    9ffc:	ca000016 	bgt	a05c <CTimer::PollKernelTimers()+0x128>
    a000:	e1a01005 	mov	r1, r5
    a004:	e1a00007 	mov	r0, r7
    a008:	eb0012b2 	bl	ead8 <CPtrList::GetNext(TPtrListElement*)>
    a00c:	e1a01005 	mov	r1, r5
    a010:	e1a0b000 	mov	fp, r0
    a014:	e1a00007 	mov	r0, r7
    a018:	eb001365 	bl	edb4 <CPtrList::Remove(TPtrListElement*)>
    a01c:	e596301c 	ldr	r3, [r6, #28]
    a020:	e3530000 	cmp	r3, #0
    a024:	0affffd3 	beq	9f78 <CTimer::PollKernelTimers()+0x44>
    a028:	ebfffdd4 	bl	9780 <LeaveCritical>
    a02c:	e5945004 	ldr	r5, [r4, #4]
    a030:	e3550000 	cmp	r5, #0
    a034:	1affffd2 	bne	9f84 <CTimer::PollKernelTimers()+0x50>
    a038:	e30f0f90 	movw	r0, #65424	; 0xff90
    a03c:	e3400004 	movt	r0, #4
    a040:	e300215d 	movw	r2, #349	; 0x15d
    a044:	e1a01009 	mov	r1, r9
    a048:	eb000768 	bl	bdf0 <assertion_failed>
    a04c:	eaffffcc 	b	9f84 <CTimer::PollKernelTimers()+0x50>
    a050:	ebfffdbd 	bl	974c <EnterCritical>
    a054:	e25b5000 	subs	r5, fp, #0
    a058:	1affffd6 	bne	9fb8 <CTimer::PollKernelTimers()+0x84>
    a05c:	e596301c 	ldr	r3, [r6, #28]
    a060:	e3530000 	cmp	r3, #0
    a064:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a068:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a06c:	eafffdc3 	b	9780 <LeaveCritical>
    a070:	e300214e 	movw	r2, #334	; 0x14e
    a074:	e1a01009 	mov	r1, r9
    a078:	e1a0000a 	mov	r0, sl
    a07c:	eb00075b 	bl	bdf0 <assertion_failed>
    a080:	eaffffd1 	b	9fcc <CTimer::PollKernelTimers()+0x98>
    a084:	ebfffdb0 	bl	974c <EnterCritical>
    a088:	eaffffae 	b	9f48 <CTimer::PollKernelTimers()+0x14>

0000a08c <CTimer::InterruptHandler()>:
    a08c:	e3a03a03 	mov	r3, #12288	; 0x3000
    a090:	e3433f00 	movt	r3, #16128	; 0x3f00
    a094:	e92d4010 	push	{r4, lr}
    a098:	e1a04000 	mov	r4, r0
    a09c:	e5933000 	ldr	r3, [r3]
    a0a0:	e3130008 	tst	r3, #8
    a0a4:	0a000036 	beq	a184 <CTimer::InterruptHandler()+0xf8>
    a0a8:	e3a03a03 	mov	r3, #12288	; 0x3000
    a0ac:	e3433f00 	movt	r3, #16128	; 0x3f00
    a0b0:	e3021710 	movw	r1, #10000	; 0x2710
    a0b4:	e5932018 	ldr	r2, [r3, #24]
    a0b8:	e0822001 	add	r2, r2, r1
    a0bc:	e5832018 	str	r2, [r3, #24]
    a0c0:	e5930004 	ldr	r0, [r3, #4]
    a0c4:	e1520000 	cmp	r2, r0
    a0c8:	35932004 	ldrcc	r2, [r3, #4]
    a0cc:	30821001 	addcc	r1, r2, r1
    a0d0:	e3a02008 	mov	r2, #8
    a0d4:	35831018 	strcc	r1, [r3, #24]
    a0d8:	e3a03a03 	mov	r3, #12288	; 0x3000
    a0dc:	e3433f00 	movt	r3, #16128	; 0x3f00
    a0e0:	e5832000 	str	r2, [r3]
    a0e4:	e5942010 	ldr	r2, [r4, #16]
    a0e8:	e3520000 	cmp	r2, #0
    a0ec:	1a000016 	bne	a14c <CTimer::InterruptHandler()+0xc0>
    a0f0:	e5943004 	ldr	r3, [r4, #4]
    a0f4:	e308051f 	movw	r0, #34079	; 0x851f
    a0f8:	e34501eb 	movt	r0, #20971	; 0x51eb
    a0fc:	e2833001 	add	r3, r3, #1
    a100:	e3a0c064 	mov	ip, #100	; 0x64
    a104:	e5843004 	str	r3, [r4, #4]
    a108:	e0810093 	umull	r0, r1, r3, r0
    a10c:	e1a012a1 	lsr	r1, r1, #5
    a110:	e063319c 	mls	r3, ip, r1, r3
    a114:	e3530000 	cmp	r3, #0
    a118:	1a000008 	bne	a140 <CTimer::InterruptHandler()+0xb4>
    a11c:	e5943008 	ldr	r3, [r4, #8]
    a120:	e2833001 	add	r3, r3, #1
    a124:	e5843008 	str	r3, [r4, #8]
    a128:	e594300c 	ldr	r3, [r4, #12]
    a12c:	e2833001 	add	r3, r3, #1
    a130:	e584300c 	str	r3, [r4, #12]
    a134:	e3520000 	cmp	r2, #0
    a138:	0a000000 	beq	a140 <CTimer::InterruptHandler()+0xb4>
    a13c:	ebfffd8f 	bl	9780 <LeaveCritical>
    a140:	e1a00004 	mov	r0, r4
    a144:	e8bd4010 	pop	{r4, lr}
    a148:	eaffff79 	b	9f34 <CTimer::PollKernelTimers()>
    a14c:	ebfffd7e 	bl	974c <EnterCritical>
    a150:	e5943004 	ldr	r3, [r4, #4]
    a154:	e308051f 	movw	r0, #34079	; 0x851f
    a158:	e34501eb 	movt	r0, #20971	; 0x51eb
    a15c:	e2833001 	add	r3, r3, #1
    a160:	e3a0c064 	mov	ip, #100	; 0x64
    a164:	e5843004 	str	r3, [r4, #4]
    a168:	e5942010 	ldr	r2, [r4, #16]
    a16c:	e0810093 	umull	r0, r1, r3, r0
    a170:	e1a012a1 	lsr	r1, r1, #5
    a174:	e063319c 	mls	r3, ip, r1, r3
    a178:	e3530000 	cmp	r3, #0
    a17c:	1affffec 	bne	a134 <CTimer::InterruptHandler()+0xa8>
    a180:	eaffffe5 	b	a11c <CTimer::InterruptHandler()+0x90>
    a184:	e30011fc 	movw	r1, #508	; 0x1fc
    a188:	e3401005 	movt	r1, #5
    a18c:	e30002cc 	movw	r0, #716	; 0x2cc
    a190:	e3400005 	movt	r0, #5
    a194:	e300216f 	movw	r2, #367	; 0x16f
    a198:	eb000714 	bl	bdf0 <assertion_failed>
    a19c:	eaffffc1 	b	a0a8 <CTimer::InterruptHandler()+0x1c>

0000a1a0 <CTimer::InterruptHandler(void*)>:
    a1a0:	e92d4010 	push	{r4, lr}
    a1a4:	e2504000 	subs	r4, r0, #0
    a1a8:	0a000002 	beq	a1b8 <CTimer::InterruptHandler(void*)+0x18>
    a1ac:	e1a00004 	mov	r0, r4
    a1b0:	e8bd4010 	pop	{r4, lr}
    a1b4:	eaffffb4 	b	a08c <CTimer::InterruptHandler()>
    a1b8:	e30011fc 	movw	r1, #508	; 0x1fc
    a1bc:	e3401005 	movt	r1, #5
    a1c0:	e30002f0 	movw	r0, #752	; 0x2f0
    a1c4:	e3400005 	movt	r0, #5
    a1c8:	e3002191 	movw	r2, #401	; 0x191
    a1cc:	eb000707 	bl	bdf0 <assertion_failed>
    a1d0:	e1a00004 	mov	r0, r4
    a1d4:	e8bd4010 	pop	{r4, lr}
    a1d8:	eaffffab 	b	a08c <CTimer::InterruptHandler()>

0000a1dc <CTimer::TuneMsDelay()>:
    a1dc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a1e0:	e1a06000 	mov	r6, r0
    a1e4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    a1e8:	e24dd00c 	sub	sp, sp, #12
    a1ec:	e3025710 	movw	r5, #10000	; 0x2710
    a1f0:	e5963020 	ldr	r3, [r6, #32]
    a1f4:	e308451f 	movw	r4, #34079	; 0x851f
    a1f8:	e34541eb 	movt	r4, #20971	; 0x51eb
    a1fc:	e5967004 	ldr	r7, [r6, #4]
    a200:	e0000390 	mul	r0, r0, r3
    a204:	eb000d7d 	bl	d800 <DelayLoop>
    a208:	e5962004 	ldr	r2, [r6, #4]
    a20c:	e5963020 	ldr	r3, [r6, #32]
    a210:	e3041dd3 	movw	r1, #19923	; 0x4dd3
    a214:	e3411062 	movt	r1, #4194	; 0x1062
    a218:	e0422007 	sub	r2, r2, r7
    a21c:	e735f215 	udiv	r5, r5, r2
    a220:	e0030593 	mul	r3, r3, r5
    a224:	e0832394 	umull	r2, r3, r4, r3
    a228:	e1a032a3 	lsr	r3, r3, #5
    a22c:	e2832f7d 	add	r2, r3, #500	; 0x1f4
    a230:	e5863020 	str	r3, [r6, #32]
    a234:	e0832291 	umull	r2, r3, r1, r2
    a238:	e1a03323 	lsr	r3, r3, #6
    a23c:	e5863024 	str	r3, [r6, #36]	; 0x24
    a240:	eb000869 	bl	c3ec <CLogger::Get()>
    a244:	e0832495 	umull	r2, r3, r5, r4
    a248:	e3a0c064 	mov	ip, #100	; 0x64
    a24c:	e0841594 	umull	r1, r4, r4, r5
    a250:	e1a012a3 	lsr	r1, r3, #5
    a254:	e3a02003 	mov	r2, #3
    a258:	e1a042a4 	lsr	r4, r4, #5
    a25c:	e30032fc 	movw	r3, #764	; 0x2fc
    a260:	e3403005 	movt	r3, #5
    a264:	e065519c 	mls	r5, ip, r1, r5
    a268:	e58d4000 	str	r4, [sp]
    a26c:	e59f100c 	ldr	r1, [pc, #12]	; a280 <CTimer::TuneMsDelay()+0xa4>
    a270:	e58d5004 	str	r5, [sp, #4]
    a274:	eb000939 	bl	c760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a278:	e28dd00c 	add	sp, sp, #12
    a27c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a280:	000501f4 	.word	0x000501f4

0000a284 <CTimer::Initialize()>:
    a284:	e92d4010 	push	{r4, lr}
    a288:	e1a04000 	mov	r4, r0
    a28c:	e5900000 	ldr	r0, [r0]
    a290:	e3500000 	cmp	r0, #0
    a294:	0a000011 	beq	a2e0 <CTimer::Initialize()+0x5c>
    a298:	e1a03004 	mov	r3, r4
    a29c:	e3a01003 	mov	r1, #3
    a2a0:	e30a21a0 	movw	r2, #41376	; 0xa1a0
    a2a4:	e3402000 	movt	r2, #0
    a2a8:	eb000e63 	bl	dc3c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    a2ac:	e3a02a03 	mov	r2, #12288	; 0x3000
    a2b0:	e3432f00 	movt	r2, #16128	; 0x3f00
    a2b4:	e3a03df2 	mov	r3, #15488	; 0x3c80
    a2b8:	e34f3e36 	movt	r3, #65078	; 0xfe36
    a2bc:	e1a00004 	mov	r0, r4
    a2c0:	e5823004 	str	r3, [r2, #4]
    a2c4:	e5923004 	ldr	r3, [r2, #4]
    a2c8:	e2833c27 	add	r3, r3, #9984	; 0x2700
    a2cc:	e2833010 	add	r3, r3, #16
    a2d0:	e5823018 	str	r3, [r2, #24]
    a2d4:	ebffffc0 	bl	a1dc <CTimer::TuneMsDelay()>
    a2d8:	e3a00001 	mov	r0, #1
    a2dc:	e8bd8010 	pop	{r4, pc}
    a2e0:	e30011fc 	movw	r1, #508	; 0x1fc
    a2e4:	e3401005 	movt	r1, #5
    a2e8:	e3000218 	movw	r0, #536	; 0x218
    a2ec:	e3400005 	movt	r0, #5
    a2f0:	e3a02055 	mov	r2, #85	; 0x55
    a2f4:	eb0006bd 	bl	bdf0 <assertion_failed>
    a2f8:	e5940000 	ldr	r0, [r4]
    a2fc:	eaffffe5 	b	a298 <CTimer::Initialize()+0x14>

0000a300 <CTimer::SimpleMsDelay(unsigned int)>:
    a300:	e2503000 	subs	r3, r0, #0
    a304:	012fff1e 	bxeq	lr
    a308:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    a30c:	e0000390 	mul	r0, r0, r3
    a310:	e3500000 	cmp	r0, #0
    a314:	012fff1e 	bxeq	lr
    a318:	e3a03a03 	mov	r3, #12288	; 0x3000
    a31c:	e3433f00 	movt	r3, #16128	; 0x3f00
    a320:	e2800001 	add	r0, r0, #1
    a324:	e1a01003 	mov	r1, r3
    a328:	e5932004 	ldr	r2, [r3, #4]
    a32c:	e5913004 	ldr	r3, [r1, #4]
    a330:	e0433002 	sub	r3, r3, r2
    a334:	e1500003 	cmp	r0, r3
    a338:	8afffffb 	bhi	a32c <CTimer::SimpleMsDelay(unsigned int)+0x2c>
    a33c:	e12fff1e 	bx	lr

0000a340 <CTimer::SimpleusDelay(unsigned int)>:
    a340:	e3500000 	cmp	r0, #0
    a344:	012fff1e 	bxeq	lr
    a348:	e3a03a03 	mov	r3, #12288	; 0x3000
    a34c:	e3433f00 	movt	r3, #16128	; 0x3f00
    a350:	e2800001 	add	r0, r0, #1
    a354:	e1a01003 	mov	r1, r3
    a358:	e5932004 	ldr	r2, [r3, #4]
    a35c:	e5913004 	ldr	r3, [r1, #4]
    a360:	e0433002 	sub	r3, r3, r2
    a364:	e1500003 	cmp	r0, r3
    a368:	8afffffb 	bhi	a35c <CTimer::SimpleusDelay(unsigned int)+0x1c>
    a36c:	e12fff1e 	bx	lr

0000a370 <CTimer::IsLeapYear(unsigned int)>:
    a370:	e308251f 	movw	r2, #34079	; 0x851f
    a374:	e34521eb 	movt	r2, #20971	; 0x51eb
    a378:	e3a01064 	mov	r1, #100	; 0x64
    a37c:	e083c092 	umull	ip, r3, r2, r0
    a380:	e1a032a3 	lsr	r3, r3, #5
    a384:	e0630391 	mls	r3, r1, r3, r0
    a388:	e3530000 	cmp	r3, #0
    a38c:	0a000003 	beq	a3a0 <CTimer::IsLeapYear(unsigned int)+0x30>
    a390:	e3100003 	tst	r0, #3
    a394:	03a00001 	moveq	r0, #1
    a398:	13a00000 	movne	r0, #0
    a39c:	e12fff1e 	bx	lr
    a3a0:	e0832290 	umull	r2, r3, r0, r2
    a3a4:	e3a02e19 	mov	r2, #400	; 0x190
    a3a8:	e1a033a3 	lsr	r3, r3, #7
    a3ac:	e0600392 	mls	r0, r2, r3, r0
    a3b0:	e16f0f10 	clz	r0, r0
    a3b4:	e1a002a0 	lsr	r0, r0, #5
    a3b8:	e12fff1e 	bx	lr

0000a3bc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    a3bc:	e3500001 	cmp	r0, #1
    a3c0:	0a000003 	beq	a3d4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    a3c4:	e30031c4 	movw	r3, #452	; 0x1c4
    a3c8:	e3403005 	movt	r3, #5
    a3cc:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    a3d0:	e12fff1e 	bx	lr
    a3d4:	e308251f 	movw	r2, #34079	; 0x851f
    a3d8:	e34521eb 	movt	r2, #20971	; 0x51eb
    a3dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a3e0:	e3a0e064 	mov	lr, #100	; 0x64
    a3e4:	e0832291 	umull	r2, r3, r1, r2
    a3e8:	e1a0c2a3 	lsr	ip, r3, #5
    a3ec:	e06c1c9e 	mls	ip, lr, ip, r1
    a3f0:	e35c0000 	cmp	ip, #0
    a3f4:	0a000008 	beq	a41c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    a3f8:	e3110003 	tst	r1, #3
    a3fc:	03a01001 	moveq	r1, #1
    a400:	13a01000 	movne	r1, #0
    a404:	e3510000 	cmp	r1, #0
    a408:	13a0001d 	movne	r0, #29
    a40c:	030031c4 	movweq	r3, #452	; 0x1c4
    a410:	03403005 	movteq	r3, #5
    a414:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    a418:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a41c:	e1a033a3 	lsr	r3, r3, #7
    a420:	e3a02e19 	mov	r2, #400	; 0x190
    a424:	e0611392 	mls	r1, r2, r3, r1
    a428:	e16f1f11 	clz	r1, r1
    a42c:	e1a012a1 	lsr	r1, r1, #5
    a430:	eafffff3 	b	a404 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

0000a434 <CTimer::Get()>:
    a434:	e92d4010 	push	{r4, lr}
    a438:	e3014c28 	movw	r4, #7208	; 0x1c28
    a43c:	e3404005 	movt	r4, #5
    a440:	e5940000 	ldr	r0, [r4]
    a444:	e3500000 	cmp	r0, #0
    a448:	18bd8010 	popne	{r4, pc}
    a44c:	e30021d6 	movw	r2, #470	; 0x1d6
    a450:	e30011fc 	movw	r1, #508	; 0x1fc
    a454:	e3401005 	movt	r1, #5
    a458:	e3000314 	movw	r0, #788	; 0x314
    a45c:	e3400005 	movt	r0, #5
    a460:	eb000662 	bl	bdf0 <assertion_failed>
    a464:	e5940000 	ldr	r0, [r4]
    a468:	e8bd8010 	pop	{r4, pc}

0000a46c <memcpy>:
    a46c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a470:	e352007f 	cmp	r2, #127	; 0x7f
    a474:	9a00000b 	bls	a4a8 <memcpy+0x3c>
    a478:	e3110003 	tst	r1, #3
    a47c:	1a000009 	bne	a4a8 <memcpy+0x3c>
    a480:	e3100003 	tst	r0, #3
    a484:	1a000007 	bne	a4a8 <memcpy+0x3c>
    a488:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a48c:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    a490:	e2422020 	sub	r2, r2, #32
    a494:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    a498:	f5d1f040 	pld	[r1, #64]	; 0x40
    a49c:	e352001f 	cmp	r2, #31
    a4a0:	8afffff9 	bhi	a48c <memcpy+0x20>
    a4a4:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a4a8:	e3520000 	cmp	r2, #0
    a4ac:	0a000003 	beq	a4c0 <memcpy+0x54>
    a4b0:	e4d13001 	ldrb	r3, [r1], #1
    a4b4:	e2522001 	subs	r2, r2, #1
    a4b8:	e4c03001 	strb	r3, [r0], #1
    a4bc:	1afffffb 	bne	a4b0 <memcpy+0x44>
    a4c0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    a4c4:	e12fff1e 	bx	lr

0000a4c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    a4c8:	e3a01000 	mov	r1, #0
    a4cc:	e3a0c00a 	mov	ip, #10
    a4d0:	ea000009 	b	a4fc <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
    a4d4:	e3530009 	cmp	r3, #9
    a4d8:	8a00000f 	bhi	a51c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
    a4dc:	e3720001 	cmn	r2, #1
    a4e0:	13a03000 	movne	r3, #0
    a4e4:	03a03001 	moveq	r3, #1
    a4e8:	e1510002 	cmp	r1, r2
    a4ec:	83833001 	orrhi	r3, r3, #1
    a4f0:	e1a01002 	mov	r1, r2
    a4f4:	e3530000 	cmp	r3, #0
    a4f8:	1a000007 	bne	a51c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
    a4fc:	e0d020d1 	ldrsb	r2, [r0], #1
    a500:	e3520000 	cmp	r2, #0
    a504:	e2423030 	sub	r3, r2, #48	; 0x30
    a508:	e022319c 	mla	r2, ip, r1, r3
    a50c:	e6ef3073 	uxtb	r3, r3
    a510:	1affffef 	bne	a4d4 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0xc>
    a514:	e1a00001 	mov	r0, r1
    a518:	e12fff1e 	bx	lr
    a51c:	e3e01000 	mvn	r1, #0
    a520:	e1a00001 	mov	r0, r1
    a524:	e12fff1e 	bx	lr

0000a528 <CKernelOptions::~CKernelOptions()>:
    a528:	e3013c2c 	movw	r3, #7212	; 0x1c2c
    a52c:	e3403005 	movt	r3, #5
    a530:	e3a02000 	mov	r2, #0
    a534:	e5832000 	str	r2, [r3]
    a538:	e12fff1e 	bx	lr

0000a53c <CKernelOptions::GetWidth() const>:
    a53c:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    a540:	e12fff1e 	bx	lr

0000a544 <CKernelOptions::GetHeight() const>:
    a544:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    a548:	e12fff1e 	bx	lr

0000a54c <CKernelOptions::GetLogDevice() const>:
    a54c:	e2800e81 	add	r0, r0, #2064	; 0x810
    a550:	e2800008 	add	r0, r0, #8
    a554:	e12fff1e 	bx	lr

0000a558 <CKernelOptions::GetLogLevel() const>:
    a558:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    a55c:	e12fff1e 	bx	lr

0000a560 <CKernelOptions::GetKeyMap() const>:
    a560:	e2800e83 	add	r0, r0, #2096	; 0x830
    a564:	e12fff1e 	bx	lr

0000a568 <CKernelOptions::GetUSBPowerDelay() const>:
    a568:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    a56c:	e12fff1e 	bx	lr

0000a570 <CKernelOptions::GetCPUSpeed() const>:
    a570:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    a574:	e12fff1e 	bx	lr

0000a578 <CKernelOptions::GetSoCMaxTemp() const>:
    a578:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
    a57c:	e12fff1e 	bx	lr

0000a580 <CKernelOptions::Get()>:
    a580:	e3013c2c 	movw	r3, #7212	; 0x1c2c
    a584:	e3403005 	movt	r3, #5
    a588:	e5930000 	ldr	r0, [r3]
    a58c:	e12fff1e 	bx	lr

0000a590 <CKernelOptions::GetToken()>:
    a590:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    a594:	e1d320d0 	ldrsb	r2, [r3]
    a598:	e3520000 	cmp	r2, #0
    a59c:	1a000005 	bne	a5b8 <CKernelOptions::GetToken()+0x28>
    a5a0:	ea000016 	b	a600 <CKernelOptions::GetToken()+0x70>
    a5a4:	e2833001 	add	r3, r3, #1
    a5a8:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    a5ac:	e1d320d0 	ldrsb	r2, [r3]
    a5b0:	e3520000 	cmp	r2, #0
    a5b4:	0a000011 	beq	a600 <CKernelOptions::GetToken()+0x70>
    a5b8:	e3520020 	cmp	r2, #32
    a5bc:	0afffff8 	beq	a5a4 <CKernelOptions::GetToken()+0x14>
    a5c0:	e1a02003 	mov	r2, r3
    a5c4:	ea000000 	b	a5cc <CKernelOptions::GetToken()+0x3c>
    a5c8:	e1a02001 	mov	r2, r1
    a5cc:	e2821001 	add	r1, r2, #1
    a5d0:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    a5d4:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    a5d8:	e35c0000 	cmp	ip, #0
    a5dc:	0a000008 	beq	a604 <CKernelOptions::GetToken()+0x74>
    a5e0:	e35c0020 	cmp	ip, #32
    a5e4:	1afffff7 	bne	a5c8 <CKernelOptions::GetToken()+0x38>
    a5e8:	e2822002 	add	r2, r2, #2
    a5ec:	e3a0c000 	mov	ip, #0
    a5f0:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    a5f4:	e1a00003 	mov	r0, r3
    a5f8:	e5c1c000 	strb	ip, [r1]
    a5fc:	e12fff1e 	bx	lr
    a600:	e3a03000 	mov	r3, #0
    a604:	e1a00003 	mov	r0, r3
    a608:	e12fff1e 	bx	lr

0000a60c <CKernelOptions::CKernelOptions()>:
    a60c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a610:	e1a05000 	mov	r5, r0
    a614:	e2807e81 	add	r7, r0, #2064	; 0x810
    a618:	e3a04000 	mov	r4, #0
    a61c:	e3a02004 	mov	r2, #4
    a620:	e3a0303c 	mov	r3, #60	; 0x3c
    a624:	e2877008 	add	r7, r7, #8
    a628:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    a62c:	e24dd01c 	sub	sp, sp, #28
    a630:	e585383c 	str	r3, [r5, #2108]	; 0x83c
    a634:	e1a00007 	mov	r0, r7
    a638:	e3001354 	movw	r1, #852	; 0x354
    a63c:	e3401005 	movt	r1, #5
    a640:	e5854810 	str	r4, [r5, #2064]	; 0x810
    a644:	e2859e83 	add	r9, r5, #2096	; 0x830
    a648:	e5854814 	str	r4, [r5, #2068]	; 0x814
    a64c:	e5854834 	str	r4, [r5, #2100]	; 0x834
    a650:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
    a654:	eb0013f3 	bl	f628 <strcpy>
    a658:	e1a00009 	mov	r0, r9
    a65c:	e300135c 	movw	r1, #860	; 0x35c
    a660:	e3401005 	movt	r1, #5
    a664:	eb0013ef 	bl	f628 <strcpy>
    a668:	e3013c2c 	movw	r3, #7212	; 0x1c2c
    a66c:	e3403005 	movt	r3, #5
    a670:	e28d0010 	add	r0, sp, #16
    a674:	e5835000 	str	r5, [r3]
    a678:	ebfff79c 	bl	84f0 <CBcmPropertyTags::CBcmPropertyTags()>
    a67c:	e58d4000 	str	r4, [sp]
    a680:	e1a02005 	mov	r2, r5
    a684:	e28d0010 	add	r0, sp, #16
    a688:	e3a01001 	mov	r1, #1
    a68c:	e3401005 	movt	r1, #5
    a690:	e300380c 	movw	r3, #2060	; 0x80c
    a694:	ebfff7dd 	bl	8610 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a698:	e1500004 	cmp	r0, r4
    a69c:	0a000040 	beq	a7a4 <CKernelOptions::CKernelOptions()+0x198>
    a6a0:	e5953008 	ldr	r3, [r5, #8]
    a6a4:	e3530b02 	cmp	r3, #2048	; 0x800
    a6a8:	2a00003d 	bcs	a7a4 <CKernelOptions::CKernelOptions()+0x198>
    a6ac:	e0853003 	add	r3, r5, r3
    a6b0:	e285200c 	add	r2, r5, #12
    a6b4:	e30063b0 	movw	r6, #944	; 0x3b0
    a6b8:	e3406005 	movt	r6, #5
    a6bc:	e3008360 	movw	r8, #864	; 0x360
    a6c0:	e3408005 	movt	r8, #5
    a6c4:	e300a368 	movw	sl, #872	; 0x368
    a6c8:	e340a005 	movt	sl, #5
    a6cc:	e5c3400c 	strb	r4, [r3, #12]
    a6d0:	e585280c 	str	r2, [r5, #2060]	; 0x80c
    a6d4:	e1a00005 	mov	r0, r5
    a6d8:	ebffffac 	bl	a590 <CKernelOptions::GetToken()>
    a6dc:	e250b000 	subs	fp, r0, #0
    a6e0:	0a00002f 	beq	a7a4 <CKernelOptions::CKernelOptions()+0x198>
    a6e4:	e1db30d0 	ldrsb	r3, [fp]
    a6e8:	e3530000 	cmp	r3, #0
    a6ec:	0a000008 	beq	a714 <CKernelOptions::CKernelOptions()+0x108>
    a6f0:	e353003d 	cmp	r3, #61	; 0x3d
    a6f4:	e1a0400b 	mov	r4, fp
    a6f8:	1a000002 	bne	a708 <CKernelOptions::CKernelOptions()+0xfc>
    a6fc:	ea00002d 	b	a7b8 <CKernelOptions::CKernelOptions()+0x1ac>
    a700:	e353003d 	cmp	r3, #61	; 0x3d
    a704:	0a00002b 	beq	a7b8 <CKernelOptions::CKernelOptions()+0x1ac>
    a708:	e1f430d1 	ldrsb	r3, [r4, #1]!
    a70c:	e3530000 	cmp	r3, #0
    a710:	1afffffa 	bne	a700 <CKernelOptions::CKernelOptions()+0xf4>
    a714:	e1a01006 	mov	r1, r6
    a718:	e1a0000b 	mov	r0, fp
    a71c:	eb0013a6 	bl	f5bc <strcmp>
    a720:	e3500000 	cmp	r0, #0
    a724:	0affffea 	beq	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a728:	e1a01008 	mov	r1, r8
    a72c:	e1a0000b 	mov	r0, fp
    a730:	eb0013a1 	bl	f5bc <strcmp>
    a734:	e3500000 	cmp	r0, #0
    a738:	13a03000 	movne	r3, #0
    a73c:	0affffe4 	beq	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a740:	e1a0100a 	mov	r1, sl
    a744:	e1a0000b 	mov	r0, fp
    a748:	e58d300c 	str	r3, [sp, #12]
    a74c:	eb00139a 	bl	f5bc <strcmp>
    a750:	e2504000 	subs	r4, r0, #0
    a754:	e59d300c 	ldr	r3, [sp, #12]
    a758:	0a00002a 	beq	a808 <CKernelOptions::CKernelOptions()+0x1fc>
    a75c:	e3001370 	movw	r1, #880	; 0x370
    a760:	e3401005 	movt	r1, #5
    a764:	e1a0000b 	mov	r0, fp
    a768:	e58d300c 	str	r3, [sp, #12]
    a76c:	eb001392 	bl	f5bc <strcmp>
    a770:	e3500000 	cmp	r0, #0
    a774:	e59d300c 	ldr	r3, [sp, #12]
    a778:	1a000028 	bne	a820 <CKernelOptions::CKernelOptions()+0x214>
    a77c:	e3530000 	cmp	r3, #0
    a780:	0affffd3 	beq	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a784:	e1d320d0 	ldrsb	r2, [r3]
    a788:	e3520000 	cmp	r2, #0
    a78c:	0affffd0 	beq	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a790:	e1a00003 	mov	r0, r3
    a794:	ebffff4b 	bl	a4c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a798:	e3500004 	cmp	r0, #4
    a79c:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    a7a0:	eaffffcb 	b	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a7a4:	e28d0010 	add	r0, sp, #16
    a7a8:	ebfff756 	bl	8508 <CBcmPropertyTags::~CBcmPropertyTags()>
    a7ac:	e1a00005 	mov	r0, r5
    a7b0:	e28dd01c 	add	sp, sp, #28
    a7b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7b8:	e3a03000 	mov	r3, #0
    a7bc:	e1a01006 	mov	r1, r6
    a7c0:	e5c43000 	strb	r3, [r4]
    a7c4:	e1a0000b 	mov	r0, fp
    a7c8:	eb00137b 	bl	f5bc <strcmp>
    a7cc:	e3500000 	cmp	r0, #0
    a7d0:	e2843001 	add	r3, r4, #1
    a7d4:	1a000058 	bne	a93c <CKernelOptions::CKernelOptions()+0x330>
    a7d8:	e3530000 	cmp	r3, #0
    a7dc:	0affffbc 	beq	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a7e0:	e1d420d1 	ldrsb	r2, [r4, #1]
    a7e4:	e3520000 	cmp	r2, #0
    a7e8:	0affffb9 	beq	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a7ec:	e1a00003 	mov	r0, r3
    a7f0:	ebffff34 	bl	a4c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a7f4:	e300353c 	movw	r3, #1340	; 0x53c
    a7f8:	e2402d0a 	sub	r2, r0, #640	; 0x280
    a7fc:	e1520003 	cmp	r2, r3
    a800:	95850810 	strls	r0, [r5, #2064]	; 0x810
    a804:	eaffffb2 	b	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a808:	e1a01003 	mov	r1, r3
    a80c:	e3a02013 	mov	r2, #19
    a810:	e1a00007 	mov	r0, r7
    a814:	eb00138e 	bl	f654 <strncpy>
    a818:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    a81c:	eaffffac 	b	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a820:	e300137c 	movw	r1, #892	; 0x37c
    a824:	e3401005 	movt	r1, #5
    a828:	e1a0000b 	mov	r0, fp
    a82c:	e58d300c 	str	r3, [sp, #12]
    a830:	eb001361 	bl	f5bc <strcmp>
    a834:	e2504000 	subs	r4, r0, #0
    a838:	e59d300c 	ldr	r3, [sp, #12]
    a83c:	1a000005 	bne	a858 <CKernelOptions::CKernelOptions()+0x24c>
    a840:	e1a01003 	mov	r1, r3
    a844:	e3a02002 	mov	r2, #2
    a848:	e1a00009 	mov	r0, r9
    a84c:	eb001380 	bl	f654 <strncpy>
    a850:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    a854:	eaffff9e 	b	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a858:	e3001384 	movw	r1, #900	; 0x384
    a85c:	e3401005 	movt	r1, #5
    a860:	e1a0000b 	mov	r0, fp
    a864:	e58d300c 	str	r3, [sp, #12]
    a868:	eb001353 	bl	f5bc <strcmp>
    a86c:	e3500000 	cmp	r0, #0
    a870:	e59d300c 	ldr	r3, [sp, #12]
    a874:	1a00000b 	bne	a8a8 <CKernelOptions::CKernelOptions()+0x29c>
    a878:	e3530000 	cmp	r3, #0
    a87c:	0affff94 	beq	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a880:	e1d320d0 	ldrsb	r2, [r3]
    a884:	e3520000 	cmp	r2, #0
    a888:	0affff91 	beq	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a88c:	e1a00003 	mov	r0, r3
    a890:	ebffff0c 	bl	a4c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a894:	e3013e78 	movw	r3, #7800	; 0x1e78
    a898:	e24020c8 	sub	r2, r0, #200	; 0xc8
    a89c:	e1520003 	cmp	r2, r3
    a8a0:	95850834 	strls	r0, [r5, #2100]	; 0x834
    a8a4:	eaffff8a 	b	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a8a8:	e3001394 	movw	r1, #916	; 0x394
    a8ac:	e3401005 	movt	r1, #5
    a8b0:	e1a0000b 	mov	r0, fp
    a8b4:	e58d300c 	str	r3, [sp, #12]
    a8b8:	eb00133f 	bl	f5bc <strcmp>
    a8bc:	e3500000 	cmp	r0, #0
    a8c0:	e59d300c 	ldr	r3, [sp, #12]
    a8c4:	1a000007 	bne	a8e8 <CKernelOptions::CKernelOptions()+0x2dc>
    a8c8:	e1a00003 	mov	r0, r3
    a8cc:	e300139c 	movw	r1, #924	; 0x39c
    a8d0:	e3401005 	movt	r1, #5
    a8d4:	eb001338 	bl	f5bc <strcmp>
    a8d8:	e3500000 	cmp	r0, #0
    a8dc:	03a03001 	moveq	r3, #1
    a8e0:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    a8e4:	eaffff7a 	b	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a8e8:	e1a0000b 	mov	r0, fp
    a8ec:	e30013a4 	movw	r1, #932	; 0x3a4
    a8f0:	e3401005 	movt	r1, #5
    a8f4:	e58d300c 	str	r3, [sp, #12]
    a8f8:	eb00132f 	bl	f5bc <strcmp>
    a8fc:	e59d300c 	ldr	r3, [sp, #12]
    a900:	e2902000 	adds	r2, r0, #0
    a904:	13a02001 	movne	r2, #1
    a908:	e3530000 	cmp	r3, #0
    a90c:	03822001 	orreq	r2, r2, #1
    a910:	e3520000 	cmp	r2, #0
    a914:	1affff6e 	bne	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a918:	e1d320d0 	ldrsb	r2, [r3]
    a91c:	e3520000 	cmp	r2, #0
    a920:	0affff6b 	beq	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a924:	e1a00003 	mov	r0, r3
    a928:	ebfffee6 	bl	a4c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a92c:	e2403028 	sub	r3, r0, #40	; 0x28
    a930:	e3530026 	cmp	r3, #38	; 0x26
    a934:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
    a938:	eaffff65 	b	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a93c:	e1a01008 	mov	r1, r8
    a940:	e1a0000b 	mov	r0, fp
    a944:	e58d300c 	str	r3, [sp, #12]
    a948:	eb00131b 	bl	f5bc <strcmp>
    a94c:	e3500000 	cmp	r0, #0
    a950:	e59d300c 	ldr	r3, [sp, #12]
    a954:	1affff79 	bne	a740 <CKernelOptions::CKernelOptions()+0x134>
    a958:	e3530000 	cmp	r3, #0
    a95c:	0affff5c 	beq	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a960:	e1d420d1 	ldrsb	r2, [r4, #1]
    a964:	e3520000 	cmp	r2, #0
    a968:	0affff59 	beq	a6d4 <CKernelOptions::CKernelOptions()+0xc8>
    a96c:	e1a00003 	mov	r0, r3
    a970:	ebfffed4 	bl	a4c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a974:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    a978:	e3530f96 	cmp	r3, #600	; 0x258
    a97c:	95850814 	strls	r0, [r5, #2068]	; 0x814
    a980:	eaffff53 	b	a6d4 <CKernelOptions::CKernelOptions()+0xc8>

0000a984 <CKernelOptions::GetOptionValue(char*)>:
    a984:	e1d030d0 	ldrsb	r3, [r0]
    a988:	e3530000 	cmp	r3, #0
    a98c:	1a000003 	bne	a9a0 <CKernelOptions::GetOptionValue(char*)+0x1c>
    a990:	ea000007 	b	a9b4 <CKernelOptions::GetOptionValue(char*)+0x30>
    a994:	e1f030d1 	ldrsb	r3, [r0, #1]!
    a998:	e3530000 	cmp	r3, #0
    a99c:	0a000004 	beq	a9b4 <CKernelOptions::GetOptionValue(char*)+0x30>
    a9a0:	e353003d 	cmp	r3, #61	; 0x3d
    a9a4:	1afffffa 	bne	a994 <CKernelOptions::GetOptionValue(char*)+0x10>
    a9a8:	e3a02000 	mov	r2, #0
    a9ac:	e2803001 	add	r3, r0, #1
    a9b0:	e5c02000 	strb	r2, [r0]
    a9b4:	e1a00003 	mov	r0, r3
    a9b8:	e12fff1e 	bx	lr

0000a9bc <CKernelOptions::GetDecimal(char*)>:
    a9bc:	e2503000 	subs	r3, r0, #0
    a9c0:	0a000002 	beq	a9d0 <CKernelOptions::GetDecimal(char*)+0x14>
    a9c4:	e1d330d0 	ldrsb	r3, [r3]
    a9c8:	e3530000 	cmp	r3, #0
    a9cc:	1a000001 	bne	a9d8 <CKernelOptions::GetDecimal(char*)+0x1c>
    a9d0:	e3e00000 	mvn	r0, #0
    a9d4:	e12fff1e 	bx	lr
    a9d8:	eafffeba 	b	a4c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000a9dc <CPageTable::CPageTable()>:
    a9dc:	e92d4010 	push	{r4, lr}
    a9e0:	e1a04000 	mov	r4, r0
    a9e4:	e3a01000 	mov	r1, #0
    a9e8:	e3a029b2 	mov	r2, #2916352	; 0x2c8000
    a9ec:	e1a0c001 	mov	ip, r1
    a9f0:	e1a03002 	mov	r3, r2
    a9f4:	e3a0e002 	mov	lr, #2
    a9f8:	e3a00001 	mov	r0, #1
    a9fc:	e8840006 	stm	r4, {r1, r2}
    aa00:	e5d32000 	ldrb	r2, [r3]
    aa04:	e35c0b01 	cmp	ip, #1024	; 0x400
    aa08:	e5d31002 	ldrb	r1, [r3, #2]
    aa0c:	e2833004 	add	r3, r3, #4
    aa10:	e7c1201e 	bfi	r2, lr, #0, #2
    aa14:	e3811001 	orr	r1, r1, #1
    aa18:	e6ef2072 	uxtb	r2, r2
    aa1c:	e20110f9 	and	r1, r1, #249	; 0xf9
    aa20:	e3822004 	orr	r2, r2, #4
    aa24:	e7c3119f 	bfc	r1, #3, #1
    aa28:	e20220f7 	and	r2, r2, #247	; 0xf7
    aa2c:	e5431002 	strb	r1, [r3, #-2]
    aa30:	e7c4221f 	bfc	r2, #4, #1
    aa34:	e5432004 	strb	r2, [r3, #-4]
    aa38:	e15310b2 	ldrh	r1, [r3, #-2]
    aa3c:	e15320b4 	ldrh	r2, [r3, #-4]
    aa40:	e7cf121c 	bfi	r1, ip, #4, #12
    aa44:	e28cc001 	add	ip, ip, #1
    aa48:	e7c8229f 	bfc	r2, #5, #4
    aa4c:	e14310b2 	strh	r1, [r3, #-2]
    aa50:	e14320b4 	strh	r2, [r3, #-4]
    aa54:	e1a02422 	lsr	r2, r2, #8
    aa58:	e20220fd 	and	r2, r2, #253	; 0xfd
    aa5c:	e7c32110 	bfi	r2, r0, #2, #2
    aa60:	e202208f 	and	r2, r2, #143	; 0x8f
    aa64:	e7c7239f 	bfc	r2, #7, #1
    aa68:	e5432003 	strb	r2, [r3, #-3]
    aa6c:	25532004 	ldrbcs	r2, [r3, #-4]
    aa70:	23822010 	orrcs	r2, r2, #16
    aa74:	25432004 	strbcs	r2, [r3, #-4]
    aa78:	e35c0a01 	cmp	ip, #4096	; 0x1000
    aa7c:	1affffdf 	bne	aa00 <CPageTable::CPageTable()+0x24>
    aa80:	eb000fca 	bl	e9b0 <CleanDataCache>
    aa84:	e1a00004 	mov	r0, r4
    aa88:	e8bd8010 	pop	{r4, pc}

0000aa8c <CPageTable::CPageTable(unsigned int)>:
    aa8c:	e3a03001 	mov	r3, #1
    aa90:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    aa94:	e1a04000 	mov	r4, r0
    aa98:	e5803000 	str	r3, [r0]
    aa9c:	e1a05001 	mov	r5, r1
    aaa0:	eb0011e6 	bl	f240 <palloc>
    aaa4:	e3500000 	cmp	r0, #0
    aaa8:	e5840004 	str	r0, [r4, #4]
    aaac:	0a00003e 	beq	abac <CPageTable::CPageTable(unsigned int)+0x120>
    aab0:	e7eb3050 	ubfx	r3, r0, #0, #12
    aab4:	e3530000 	cmp	r3, #0
    aab8:	1a000033 	bne	ab8c <CPageTable::CPageTable(unsigned int)+0x100>
    aabc:	e3a02000 	mov	r2, #0
    aac0:	e30fed6c 	movw	lr, #64876	; 0xfd6c
    aac4:	e340e000 	movt	lr, #0
    aac8:	e1a08002 	mov	r8, r2
    aacc:	e3a07002 	mov	r7, #2
    aad0:	e3a06001 	mov	r6, #1
    aad4:	ea000009 	b	ab00 <CPageTable::CPageTable(unsigned int)+0x74>
    aad8:	e6ef3071 	uxtb	r3, r1
    aadc:	e5d01000 	ldrb	r1, [r0]
    aae0:	e3833001 	orr	r3, r3, #1
    aae4:	e7c31198 	bfi	r1, r8, #3, #1
    aae8:	e5c03002 	strb	r3, [r0, #2]
    aaec:	e5c01000 	strb	r1, [r0]
    aaf0:	e2822601 	add	r2, r2, #1048576	; 0x100000
    aaf4:	e2800004 	add	r0, r0, #4
    aaf8:	e3520101 	cmp	r2, #1073741824	; 0x40000000
    aafc:	0a00001f 	beq	ab80 <CPageTable::CPageTable(unsigned int)+0xf4>
    ab00:	e5d03001 	ldrb	r3, [r0, #1]
    ab04:	e7e31a52 	ubfx	r1, r2, #20, #4
    ab08:	e152000e 	cmp	r2, lr
    ab0c:	e387c00c 	orr	ip, r7, #12
    ab10:	e20330fc 	and	r3, r3, #252	; 0xfc
    ab14:	e1a09c22 	lsr	r9, r2, #24
    ab18:	e7c33116 	bfi	r3, r6, #2, #2
    ab1c:	e1a01201 	lsl	r1, r1, #4
    ab20:	e203308f 	and	r3, r3, #143	; 0x8f
    ab24:	e5c01002 	strb	r1, [r0, #2]
    ab28:	e7c7339f 	bfc	r3, #7, #1
    ab2c:	e5c0c000 	strb	ip, [r0]
    ab30:	e5c03001 	strb	r3, [r0, #1]
    ab34:	e5c09003 	strb	r9, [r0, #3]
    ab38:	3affffec 	bcc	aaf0 <CPageTable::CPageTable(unsigned int)+0x64>
    ab3c:	e1520005 	cmp	r2, r5
    ab40:	e6ef307c 	uxtb	r3, ip
    ab44:	e3833010 	orr	r3, r3, #16
    ab48:	e5c03000 	strb	r3, [r0]
    ab4c:	2affffe1 	bcs	aad8 <CPageTable::CPageTable(unsigned int)+0x4c>
    ab50:	e3520501 	cmp	r2, #4194304	; 0x400000
    ab54:	1affffe5 	bne	aaf0 <CPageTable::CPageTable(unsigned int)+0x64>
    ab58:	e5d03000 	ldrb	r3, [r0]
    ab5c:	e2800004 	add	r0, r0, #4
    ab60:	e5502002 	ldrb	r2, [r0, #-2]
    ab64:	e20330fb 	and	r3, r3, #251	; 0xfb
    ab68:	e3822001 	orr	r2, r2, #1
    ab6c:	e7c33198 	bfi	r3, r8, #3, #1
    ab70:	e5402002 	strb	r2, [r0, #-2]
    ab74:	e3a02605 	mov	r2, #5242880	; 0x500000
    ab78:	e5403004 	strb	r3, [r0, #-4]
    ab7c:	eaffffdf 	b	ab00 <CPageTable::CPageTable(unsigned int)+0x74>
    ab80:	eb000f8a 	bl	e9b0 <CleanDataCache>
    ab84:	e1a00004 	mov	r0, r4
    ab88:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ab8c:	e30013b8 	movw	r1, #952	; 0x3b8
    ab90:	e3401005 	movt	r1, #5
    ab94:	e30003d8 	movw	r0, #984	; 0x3d8
    ab98:	e3400005 	movt	r0, #5
    ab9c:	e3a02051 	mov	r2, #81	; 0x51
    aba0:	eb000492 	bl	bdf0 <assertion_failed>
    aba4:	e5940004 	ldr	r0, [r4, #4]
    aba8:	eaffffc3 	b	aabc <CPageTable::CPageTable(unsigned int)+0x30>
    abac:	e30013b8 	movw	r1, #952	; 0x3b8
    abb0:	e3401005 	movt	r1, #5
    abb4:	e30003c8 	movw	r0, #968	; 0x3c8
    abb8:	e3400005 	movt	r0, #5
    abbc:	e3a02050 	mov	r2, #80	; 0x50
    abc0:	eb00048a 	bl	bdf0 <assertion_failed>
    abc4:	e5940004 	ldr	r0, [r4, #4]
    abc8:	eaffffb8 	b	aab0 <CPageTable::CPageTable(unsigned int)+0x24>

0000abcc <CPageTable::~CPageTable()>:
    abcc:	e5903000 	ldr	r3, [r0]
    abd0:	e92d4010 	push	{r4, lr}
    abd4:	e1a04000 	mov	r4, r0
    abd8:	e3530000 	cmp	r3, #0
    abdc:	0a000001 	beq	abe8 <CPageTable::~CPageTable()+0x1c>
    abe0:	e5900004 	ldr	r0, [r0, #4]
    abe4:	eb0011cf 	bl	f328 <pfree>
    abe8:	e1a00004 	mov	r0, r4
    abec:	e8bd8010 	pop	{r4, pc}

0000abf0 <CPageTable::GetBaseAddress() const>:
    abf0:	e5900004 	ldr	r0, [r0, #4]
    abf4:	e3800059 	orr	r0, r0, #89	; 0x59
    abf8:	e12fff1e 	bx	lr

0000abfc <CScreenDevice::~CScreenDevice()>:
    abfc:	e590300c 	ldr	r3, [r0, #12]
    ac00:	e59f2064 	ldr	r2, [pc, #100]	; ac6c <CScreenDevice::~CScreenDevice()+0x70>
    ac04:	e3530000 	cmp	r3, #0
    ac08:	e92d4070 	push	{r4, r5, r6, lr}
    ac0c:	e1a04000 	mov	r4, r0
    ac10:	e5802000 	str	r2, [r0]
    ac14:	0a000003 	beq	ac28 <CScreenDevice::~CScreenDevice()+0x2c>
    ac18:	e5900018 	ldr	r0, [r0, #24]
    ac1c:	e3500000 	cmp	r0, #0
    ac20:	0a000000 	beq	ac28 <CScreenDevice::~CScreenDevice()+0x2c>
    ac24:	ebfffac7 	bl	9748 <operator delete[](void*)>
    ac28:	e5945010 	ldr	r5, [r4, #16]
    ac2c:	e3a03000 	mov	r3, #0
    ac30:	e5843018 	str	r3, [r4, #24]
    ac34:	e1550003 	cmp	r5, r3
    ac38:	0a000003 	beq	ac4c <CScreenDevice::~CScreenDevice()+0x50>
    ac3c:	e1a00005 	mov	r0, r5
    ac40:	eb0013ba 	bl	fb30 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    ac44:	e1a00005 	mov	r0, r5
    ac48:	ebfffabd 	bl	9744 <operator delete(void*)>
    ac4c:	e3a03000 	mov	r3, #0
    ac50:	e2840014 	add	r0, r4, #20
    ac54:	e5843010 	str	r3, [r4, #16]
    ac58:	eb000489 	bl	be84 <CCharGenerator::~CCharGenerator()>
    ac5c:	e1a00004 	mov	r0, r4
    ac60:	eb001432 	bl	fd30 <CDevice::~CDevice()>
    ac64:	e1a00004 	mov	r0, r4
    ac68:	e8bd8070 	pop	{r4, r5, r6, pc}
    ac6c:	00050400 	.word	0x00050400

0000ac70 <CScreenDevice::~CScreenDevice()>:
    ac70:	e92d4010 	push	{r4, lr}
    ac74:	e1a04000 	mov	r4, r0
    ac78:	ebffffdf 	bl	abfc <CScreenDevice::~CScreenDevice()>
    ac7c:	e1a00004 	mov	r0, r4
    ac80:	ebfffaaf 	bl	9744 <operator delete(void*)>
    ac84:	e1a00004 	mov	r0, r4
    ac88:	e8bd8010 	pop	{r4, pc}

0000ac8c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>:
    ac8c:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    ac90:	e15c0002 	cmp	ip, r2
    ac94:	8590c020 	ldrhi	ip, [r0, #32]
    ac98:	85900018 	ldrhi	r0, [r0, #24]
    ac9c:	8022029c 	mlahi	r2, ip, r2, r0
    aca0:	87c23001 	strbhi	r3, [r2, r1]
    aca4:	e12fff1e 	bx	lr

0000aca8 <CScreenDevice::InvertCursor() [clone .part.6]>:
    aca8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    acac:	e2806014 	add	r6, r0, #20
    acb0:	e1a04000 	mov	r4, r0
    acb4:	e1a00006 	mov	r0, r6
    acb8:	eb000476 	bl	be98 <CCharGenerator::GetUnderline() const>
    acbc:	e1a07000 	mov	r7, r0
    acc0:	e1a00006 	mov	r0, r6
    acc4:	eb000471 	bl	be90 <CCharGenerator::GetCharHeight() const>
    acc8:	e1500007 	cmp	r0, r7
    accc:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
    acd0:	e3a05000 	mov	r5, #0
    acd4:	ea000008 	b	acfc <CScreenDevice::InvertCursor() [clone .part.6]+0x54>
    acd8:	e5948020 	ldr	r8, [r4, #32]
    acdc:	e3a03000 	mov	r3, #0
    ace0:	e5949018 	ldr	r9, [r4, #24]
    ace4:	e0289e98 	mla	r8, r8, lr, r9
    ace8:	e7d8800c 	ldrb	r8, [r8, ip]
    acec:	e1580003 	cmp	r8, r3
    acf0:	0a000012 	beq	ad40 <CScreenDevice::InvertCursor() [clone .part.6]+0x98>
    acf4:	ebffffe4 	bl	ac8c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    acf8:	e2855001 	add	r5, r5, #1
    acfc:	e1a00006 	mov	r0, r6
    ad00:	eb000460 	bl	be88 <CCharGenerator::GetCharWidth() const>
    ad04:	e1500005 	cmp	r0, r5
    ad08:	9a00000f 	bls	ad4c <CScreenDevice::InvertCursor() [clone .part.6]+0xa4>
    ad0c:	e594c03c 	ldr	ip, [r4, #60]	; 0x3c
    ad10:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ad14:	e085c00c 	add	ip, r5, ip
    ad18:	e15c0003 	cmp	ip, r3
    ad1c:	2afffff5 	bcs	acf8 <CScreenDevice::InvertCursor() [clone .part.6]+0x50>
    ad20:	e594e040 	ldr	lr, [r4, #64]	; 0x40
    ad24:	e1a0100c 	mov	r1, ip
    ad28:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ad2c:	e1a00004 	mov	r0, r4
    ad30:	e087e00e 	add	lr, r7, lr
    ad34:	e15e0003 	cmp	lr, r3
    ad38:	e1a0200e 	mov	r2, lr
    ad3c:	3affffe5 	bcc	acd8 <CScreenDevice::InvertCursor() [clone .part.6]+0x30>
    ad40:	e5d43048 	ldrb	r3, [r4, #72]	; 0x48
    ad44:	ebffffd0 	bl	ac8c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    ad48:	eaffffea 	b	acf8 <CScreenDevice::InvertCursor() [clone .part.6]+0x50>
    ad4c:	e2877001 	add	r7, r7, #1
    ad50:	eaffffda 	b	acc0 <CScreenDevice::InvertCursor() [clone .part.6]+0x18>

0000ad54 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
    ad54:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ad58:	e1a04000 	mov	r4, r0
    ad5c:	e1a06003 	mov	r6, r3
    ad60:	e1a08001 	mov	r8, r1
    ad64:	e1a07002 	mov	r7, r2
    ad68:	eb0013fb 	bl	fd5c <CDevice::CDevice()>
    ad6c:	e59fc050 	ldr	ip, [pc, #80]	; adc4 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)+0x70>
    ad70:	e3a05000 	mov	r5, #0
    ad74:	e5848004 	str	r8, [r4, #4]
    ad78:	e5847008 	str	r7, [r4, #8]
    ad7c:	e2840014 	add	r0, r4, #20
    ad80:	e584600c 	str	r6, [r4, #12]
    ad84:	e584c000 	str	ip, [r4]
    ad88:	e5845010 	str	r5, [r4, #16]
    ad8c:	eb000439 	bl	be78 <CCharGenerator::CCharGenerator()>
    ad90:	e3a03001 	mov	r3, #1
    ad94:	e5845018 	str	r5, [r4, #24]
    ad98:	e1a00004 	mov	r0, r4
    ad9c:	e5845030 	str	r5, [r4, #48]	; 0x30
    ada0:	e5845034 	str	r5, [r4, #52]	; 0x34
    ada4:	e584503c 	str	r5, [r4, #60]	; 0x3c
    ada8:	e5845040 	str	r5, [r4, #64]	; 0x40
    adac:	e584504c 	str	r5, [r4, #76]	; 0x4c
    adb0:	e5845058 	str	r5, [r4, #88]	; 0x58
    adb4:	e5843044 	str	r3, [r4, #68]	; 0x44
    adb8:	e5c43048 	strb	r3, [r4, #72]	; 0x48
    adbc:	e584305c 	str	r3, [r4, #92]	; 0x5c
    adc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    adc4:	00050400 	.word	0x00050400

0000adc8 <CScreenDevice::GetWidth() const>:
    adc8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    adcc:	e12fff1e 	bx	lr

0000add0 <CScreenDevice::GetHeight() const>:
    add0:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    add4:	e12fff1e 	bx	lr

0000add8 <CScreenDevice::GetColumns() const>:
    add8:	e1a03000 	mov	r3, r0
    addc:	e92d4010 	push	{r4, lr}
    ade0:	e2800014 	add	r0, r0, #20
    ade4:	e5934024 	ldr	r4, [r3, #36]	; 0x24
    ade8:	eb000426 	bl	be88 <CCharGenerator::GetCharWidth() const>
    adec:	e730f014 	udiv	r0, r4, r0
    adf0:	e8bd8010 	pop	{r4, pc}

0000adf4 <CScreenDevice::GetRows() const>:
    adf4:	e1a03000 	mov	r3, r0
    adf8:	e92d4010 	push	{r4, lr}
    adfc:	e2800014 	add	r0, r0, #20
    ae00:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
    ae04:	eb000421 	bl	be90 <CCharGenerator::GetCharHeight() const>
    ae08:	e730f014 	udiv	r0, r4, r0
    ae0c:	e8bd8010 	pop	{r4, pc}

0000ae10 <CScreenDevice::GetStatus()>:
    ae10:	e591c018 	ldr	ip, [r1, #24]
    ae14:	e591201c 	ldr	r2, [r1, #28]
    ae18:	e92d4070 	push	{r4, r5, r6, lr}
    ae1c:	e5915030 	ldr	r5, [r1, #48]	; 0x30
    ae20:	e5914034 	ldr	r4, [r1, #52]	; 0x34
    ae24:	e591e038 	ldr	lr, [r1, #56]	; 0x38
    ae28:	e580c000 	str	ip, [r0]
    ae2c:	e5802004 	str	r2, [r0, #4]
    ae30:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    ae34:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    ae38:	e5805008 	str	r5, [r0, #8]
    ae3c:	e5916044 	ldr	r6, [r1, #68]	; 0x44
    ae40:	e580400c 	str	r4, [r0, #12]
    ae44:	e5d15048 	ldrb	r5, [r1, #72]	; 0x48
    ae48:	e580e010 	str	lr, [r0, #16]
    ae4c:	e591404c 	ldr	r4, [r1, #76]	; 0x4c
    ae50:	e580c014 	str	ip, [r0, #20]
    ae54:	e591e050 	ldr	lr, [r1, #80]	; 0x50
    ae58:	e5802018 	str	r2, [r0, #24]
    ae5c:	e591c054 	ldr	ip, [r1, #84]	; 0x54
    ae60:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    ae64:	e580601c 	str	r6, [r0, #28]
    ae68:	e5c05020 	strb	r5, [r0, #32]
    ae6c:	e5804024 	str	r4, [r0, #36]	; 0x24
    ae70:	e580e028 	str	lr, [r0, #40]	; 0x28
    ae74:	e580c02c 	str	ip, [r0, #44]	; 0x2c
    ae78:	e5802030 	str	r2, [r0, #48]	; 0x30
    ae7c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ae80 <CScreenDevice::SetStatus(TScreenStatus)>:
    ae80:	e24dd010 	sub	sp, sp, #16
    ae84:	e92d4070 	push	{r4, r5, r6, lr}
    ae88:	e28dc014 	add	ip, sp, #20
    ae8c:	e88c000e 	stm	ip, {r1, r2, r3}
    ae90:	e590201c 	ldr	r2, [r0, #28]
    ae94:	e59d3018 	ldr	r3, [sp, #24]
    ae98:	e1520003 	cmp	r2, r3
    ae9c:	0a000003 	beq	aeb0 <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    aea0:	e3a00000 	mov	r0, #0
    aea4:	e8bd4070 	pop	{r4, r5, r6, lr}
    aea8:	e28dd010 	add	sp, sp, #16
    aeac:	e12fff1e 	bx	lr
    aeb0:	e5901020 	ldr	r1, [r0, #32]
    aeb4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    aeb8:	e1510003 	cmp	r1, r3
    aebc:	1afffff7 	bne	aea0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    aec0:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    aec4:	e1a04000 	mov	r4, r0
    aec8:	e3530000 	cmp	r3, #0
    aecc:	1a000020 	bne	af54 <CScreenDevice::SetStatus(TScreenStatus)+0xd4>
    aed0:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    aed4:	e3530000 	cmp	r3, #0
    aed8:	1afffff0 	bne	aea0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    aedc:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    aee0:	e3530000 	cmp	r3, #0
    aee4:	1affffed 	bne	aea0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    aee8:	e59d1014 	ldr	r1, [sp, #20]
    aeec:	e5940018 	ldr	r0, [r4, #24]
    aef0:	ebfffd5d 	bl	a46c <memcpy>
    aef4:	e28d2020 	add	r2, sp, #32
    aef8:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    aefc:	e59d101c 	ldr	r1, [sp, #28]
    af00:	e3530000 	cmp	r3, #0
    af04:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
    af08:	e892402c 	ldm	r2, {r2, r3, r5, lr}
    af0c:	e5841030 	str	r1, [r4, #48]	; 0x30
    af10:	e5dd0034 	ldrb	r0, [sp, #52]	; 0x34
    af14:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    af18:	e5842034 	str	r2, [r4, #52]	; 0x34
    af1c:	e5843038 	str	r3, [r4, #56]	; 0x38
    af20:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    af24:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    af28:	e584503c 	str	r5, [r4, #60]	; 0x3c
    af2c:	e584e040 	str	lr, [r4, #64]	; 0x40
    af30:	e584c044 	str	ip, [r4, #68]	; 0x44
    af34:	e5c40048 	strb	r0, [r4, #72]	; 0x48
    af38:	e584104c 	str	r1, [r4, #76]	; 0x4c
    af3c:	e5842050 	str	r2, [r4, #80]	; 0x50
    af40:	e5843054 	str	r3, [r4, #84]	; 0x54
    af44:	1a00000f 	bne	af88 <CScreenDevice::SetStatus(TScreenStatus)+0x108>
    af48:	f57ff05f 	dmb	sy
    af4c:	e3a00001 	mov	r0, #1
    af50:	eaffffd3 	b	aea4 <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    af54:	ebfff9fc 	bl	974c <EnterCritical>
    af58:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    af5c:	e3530000 	cmp	r3, #0
    af60:	1a000003 	bne	af74 <CScreenDevice::SetStatus(TScreenStatus)+0xf4>
    af64:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    af68:	e3530000 	cmp	r3, #0
    af6c:	0594201c 	ldreq	r2, [r4, #28]
    af70:	0affffdc 	beq	aee8 <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    af74:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    af78:	e3530000 	cmp	r3, #0
    af7c:	0affffc7 	beq	aea0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    af80:	ebfff9fe 	bl	9780 <LeaveCritical>
    af84:	eaffffc5 	b	aea0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    af88:	ebfff9fc 	bl	9780 <LeaveCritical>
    af8c:	eaffffed 	b	af48 <CScreenDevice::SetStatus(TScreenStatus)+0xc8>

0000af90 <CScreenDevice::CarriageReturn()>:
    af90:	e3a03000 	mov	r3, #0
    af94:	e580303c 	str	r3, [r0, #60]	; 0x3c
    af98:	e12fff1e 	bx	lr

0000af9c <CScreenDevice::CursorHome()>:
    af9c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    afa0:	e3a02000 	mov	r2, #0
    afa4:	e580203c 	str	r2, [r0, #60]	; 0x3c
    afa8:	e5803040 	str	r3, [r0, #64]	; 0x40
    afac:	e12fff1e 	bx	lr

0000afb0 <CScreenDevice::CursorLeft()>:
    afb0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    afb4:	e92d4070 	push	{r4, r5, r6, lr}
    afb8:	e1a04000 	mov	r4, r0
    afbc:	e3530000 	cmp	r3, #0
    afc0:	1a00000f 	bne	b004 <CScreenDevice::CursorLeft()+0x54>
    afc4:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    afc8:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    afcc:	e1520003 	cmp	r2, r3
    afd0:	98bd8070 	popls	{r4, r5, r6, pc}
    afd4:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    afd8:	e2806014 	add	r6, r0, #20
    afdc:	e1a00006 	mov	r0, r6
    afe0:	eb0003a8 	bl	be88 <CCharGenerator::GetCharWidth() const>
    afe4:	e0450000 	sub	r0, r5, r0
    afe8:	e584003c 	str	r0, [r4, #60]	; 0x3c
    afec:	e1a00006 	mov	r0, r6
    aff0:	eb0003a6 	bl	be90 <CCharGenerator::GetCharHeight() const>
    aff4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    aff8:	e0430000 	sub	r0, r3, r0
    affc:	e5840040 	str	r0, [r4, #64]	; 0x40
    b000:	e8bd8070 	pop	{r4, r5, r6, pc}
    b004:	e2800014 	add	r0, r0, #20
    b008:	eb00039e 	bl	be88 <CCharGenerator::GetCharWidth() const>
    b00c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    b010:	e0430000 	sub	r0, r3, r0
    b014:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b018:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b01c <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    b01c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b020:	e1a04002 	mov	r4, r2
    b024:	e2444001 	sub	r4, r4, #1
    b028:	e1a05000 	mov	r5, r0
    b02c:	e2806014 	add	r6, r0, #20
    b030:	e1a00006 	mov	r0, r6
    b034:	e1a07001 	mov	r7, r1
    b038:	eb000392 	bl	be88 <CCharGenerator::GetCharWidth() const>
    b03c:	e0040490 	mul	r4, r0, r4
    b040:	e1a00006 	mov	r0, r6
    b044:	eb000391 	bl	be90 <CCharGenerator::GetCharHeight() const>
    b048:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    b04c:	e1540003 	cmp	r4, r3
    b050:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    b054:	e2477001 	sub	r7, r7, #1
    b058:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    b05c:	e0000790 	mul	r0, r0, r7
    b060:	e1500003 	cmp	r0, r3
    b064:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    b068:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    b06c:	e1500003 	cmp	r0, r3
    b070:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    b074:	35850040 	strcc	r0, [r5, #64]	; 0x40
    b078:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b07c <CScreenDevice::CursorUp()>:
    b07c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b080:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b084:	e1520003 	cmp	r2, r3
    b088:	912fff1e 	bxls	lr
    b08c:	e92d4010 	push	{r4, lr}
    b090:	e1a04000 	mov	r4, r0
    b094:	e2800014 	add	r0, r0, #20
    b098:	eb00037c 	bl	be90 <CCharGenerator::GetCharHeight() const>
    b09c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b0a0:	e0430000 	sub	r0, r3, r0
    b0a4:	e5840040 	str	r0, [r4, #64]	; 0x40
    b0a8:	e8bd8010 	pop	{r4, pc}

0000b0ac <CScreenDevice::DeleteChars(unsigned int)>:
    b0ac:	e12fff1e 	bx	lr

0000b0b0 <CScreenDevice::DeleteLines(unsigned int)>:
    b0b0:	e12fff1e 	bx	lr

0000b0b4 <CScreenDevice::InsertLines(unsigned int)>:
    b0b4:	e12fff1e 	bx	lr

0000b0b8 <CScreenDevice::InsertMode(int)>:
    b0b8:	e580104c 	str	r1, [r0, #76]	; 0x4c
    b0bc:	e12fff1e 	bx	lr

0000b0c0 <CScreenDevice::ReverseScroll()>:
    b0c0:	e12fff1e 	bx	lr

0000b0c4 <CScreenDevice::SetCursorMode(int)>:
    b0c4:	e5801044 	str	r1, [r0, #68]	; 0x44
    b0c8:	e12fff1e 	bx	lr

0000b0cc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    b0cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b0d0:	e1a04001 	mov	r4, r1
    b0d4:	e2444001 	sub	r4, r4, #1
    b0d8:	e1a06000 	mov	r6, r0
    b0dc:	e1a05002 	mov	r5, r2
    b0e0:	e2807014 	add	r7, r0, #20
    b0e4:	e1a00007 	mov	r0, r7
    b0e8:	eb000368 	bl	be90 <CCharGenerator::GetCharHeight() const>
    b0ec:	e0040490 	mul	r4, r0, r4
    b0f0:	e1a00007 	mov	r0, r7
    b0f4:	eb000365 	bl	be90 <CCharGenerator::GetCharHeight() const>
    b0f8:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    b0fc:	e0000095 	mul	r0, r5, r0
    b100:	e3500000 	cmp	r0, #0
    b104:	11540002 	cmpne	r4, r2
    b108:	33a03001 	movcc	r3, #1
    b10c:	23a03000 	movcs	r3, #0
    b110:	e1500002 	cmp	r0, r2
    b114:	83a03000 	movhi	r3, #0
    b118:	92033001 	andls	r3, r3, #1
    b11c:	e1540000 	cmp	r4, r0
    b120:	23a03000 	movcs	r3, #0
    b124:	32033001 	andcc	r3, r3, #1
    b128:	e3530000 	cmp	r3, #0
    b12c:	e3a03000 	mov	r3, #0
    b130:	15864034 	strne	r4, [r6, #52]	; 0x34
    b134:	15860038 	strne	r0, [r6, #56]	; 0x38
    b138:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    b13c:	e586303c 	str	r3, [r6, #60]	; 0x3c
    b140:	e5864040 	str	r4, [r6, #64]	; 0x40
    b144:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b148 <CScreenDevice::SetStandoutMode(unsigned int)>:
    b148:	e351001b 	cmp	r1, #27
    b14c:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    b150:	ea00001d 	b	b1cc <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    b154:	0000b1dc 	.word	0x0000b1dc
    b158:	0000b1d0 	.word	0x0000b1d0
    b15c:	0000b1c4 	.word	0x0000b1c4
    b160:	0000b1cc 	.word	0x0000b1cc
    b164:	0000b1cc 	.word	0x0000b1cc
    b168:	0000b1cc 	.word	0x0000b1cc
    b16c:	0000b1cc 	.word	0x0000b1cc
    b170:	0000b1cc 	.word	0x0000b1cc
    b174:	0000b1cc 	.word	0x0000b1cc
    b178:	0000b1cc 	.word	0x0000b1cc
    b17c:	0000b1cc 	.word	0x0000b1cc
    b180:	0000b1cc 	.word	0x0000b1cc
    b184:	0000b1cc 	.word	0x0000b1cc
    b188:	0000b1cc 	.word	0x0000b1cc
    b18c:	0000b1cc 	.word	0x0000b1cc
    b190:	0000b1cc 	.word	0x0000b1cc
    b194:	0000b1cc 	.word	0x0000b1cc
    b198:	0000b1cc 	.word	0x0000b1cc
    b19c:	0000b1cc 	.word	0x0000b1cc
    b1a0:	0000b1cc 	.word	0x0000b1cc
    b1a4:	0000b1cc 	.word	0x0000b1cc
    b1a8:	0000b1cc 	.word	0x0000b1cc
    b1ac:	0000b1cc 	.word	0x0000b1cc
    b1b0:	0000b1cc 	.word	0x0000b1cc
    b1b4:	0000b1cc 	.word	0x0000b1cc
    b1b8:	0000b1cc 	.word	0x0000b1cc
    b1bc:	0000b1cc 	.word	0x0000b1cc
    b1c0:	0000b1dc 	.word	0x0000b1dc
    b1c4:	e3a03003 	mov	r3, #3
    b1c8:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    b1cc:	e12fff1e 	bx	lr
    b1d0:	e3a03002 	mov	r3, #2
    b1d4:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    b1d8:	e12fff1e 	bx	lr
    b1dc:	e3a03001 	mov	r3, #1
    b1e0:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    b1e4:	e12fff1e 	bx	lr

0000b1e8 <CScreenDevice::Scroll()>:
    b1e8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b1ec:	e1a05000 	mov	r5, r0
    b1f0:	e2800014 	add	r0, r0, #20
    b1f4:	eb000325 	bl	be90 <CCharGenerator::GetCharHeight() const>
    b1f8:	e1a06000 	mov	r6, r0
    b1fc:	e5952034 	ldr	r2, [r5, #52]	; 0x34
    b200:	e5954038 	ldr	r4, [r5, #56]	; 0x38
    b204:	e5953020 	ldr	r3, [r5, #32]
    b208:	e0444002 	sub	r4, r4, r2
    b20c:	e5951018 	ldr	r1, [r5, #24]
    b210:	e0444000 	sub	r4, r4, r0
    b214:	e0271293 	mla	r7, r3, r2, r1
    b218:	e0040493 	mul	r4, r3, r4
    b21c:	e3540000 	cmp	r4, #0
    b220:	1a000007 	bne	b244 <CScreenDevice::Scroll()+0x5c>
    b224:	e0030693 	mul	r3, r3, r6
    b228:	e1b03123 	lsrs	r3, r3, #2
    b22c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    b230:	e1a00007 	mov	r0, r7
    b234:	e1a02103 	lsl	r2, r3, #2
    b238:	e3a01000 	mov	r1, #0
    b23c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    b240:	ea0010b3 	b	f514 <memset>
    b244:	e0808002 	add	r8, r0, r2
    b248:	e3c4900f 	bic	r9, r4, #15
    b24c:	e1a02009 	mov	r2, r9
    b250:	e1a00007 	mov	r0, r7
    b254:	e0281893 	mla	r8, r3, r8, r1
    b258:	e1a01008 	mov	r1, r8
    b25c:	ebfffc82 	bl	a46c <memcpy>
    b260:	e0870009 	add	r0, r7, r9
    b264:	e204200f 	and	r2, r4, #15
    b268:	e0881009 	add	r1, r8, r9
    b26c:	e3c44003 	bic	r4, r4, #3
    b270:	ebfffc7d 	bl	a46c <memcpy>
    b274:	e0877004 	add	r7, r7, r4
    b278:	e5953020 	ldr	r3, [r5, #32]
    b27c:	eaffffe8 	b	b224 <CScreenDevice::Scroll()+0x3c>

0000b280 <CScreenDevice::CursorDown()>:
    b280:	e92d4070 	push	{r4, r5, r6, lr}
    b284:	e1a04000 	mov	r4, r0
    b288:	e2805014 	add	r5, r0, #20
    b28c:	e1a00005 	mov	r0, r5
    b290:	eb0002fe 	bl	be90 <CCharGenerator::GetCharHeight() const>
    b294:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b298:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    b29c:	e0800003 	add	r0, r0, r3
    b2a0:	e1500002 	cmp	r0, r2
    b2a4:	e5840040 	str	r0, [r4, #64]	; 0x40
    b2a8:	38bd8070 	popcc	{r4, r5, r6, pc}
    b2ac:	e1a00004 	mov	r0, r4
    b2b0:	ebffffcc 	bl	b1e8 <CScreenDevice::Scroll()>
    b2b4:	e1a00005 	mov	r0, r5
    b2b8:	eb0002f4 	bl	be90 <CCharGenerator::GetCharHeight() const>
    b2bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b2c0:	e0430000 	sub	r0, r3, r0
    b2c4:	e5840040 	str	r0, [r4, #64]	; 0x40
    b2c8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b2cc <CScreenDevice::NewLine()>:
    b2cc:	e3a02000 	mov	r2, #0
    b2d0:	e580203c 	str	r2, [r0, #60]	; 0x3c
    b2d4:	eaffffe9 	b	b280 <CScreenDevice::CursorDown()>

0000b2d8 <CScreenDevice::CursorRight()>:
    b2d8:	e92d4010 	push	{r4, lr}
    b2dc:	e1a04000 	mov	r4, r0
    b2e0:	e2800014 	add	r0, r0, #20
    b2e4:	eb0002e7 	bl	be88 <CCharGenerator::GetCharWidth() const>
    b2e8:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    b2ec:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    b2f0:	e0800003 	add	r0, r0, r3
    b2f4:	e1500002 	cmp	r0, r2
    b2f8:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b2fc:	38bd8010 	popcc	{r4, pc}
    b300:	e3a03000 	mov	r3, #0
    b304:	e1a00004 	mov	r0, r4
    b308:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b30c:	e8bd4010 	pop	{r4, lr}
    b310:	eaffffda 	b	b280 <CScreenDevice::CursorDown()>

0000b314 <CScreenDevice::Tabulator()>:
    b314:	e92d4010 	push	{r4, lr}
    b318:	e1a04000 	mov	r4, r0
    b31c:	e2800014 	add	r0, r0, #20
    b320:	eb0002d8 	bl	be88 <CCharGenerator::GetCharWidth() const>
    b324:	e1a00180 	lsl	r0, r0, #3
    b328:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    b32c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    b330:	e0803003 	add	r3, r0, r3
    b334:	e733f013 	udiv	r3, r3, r0
    b338:	e0000390 	mul	r0, r0, r3
    b33c:	e1500002 	cmp	r0, r2
    b340:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b344:	38bd8010 	popcc	{r4, pc}
    b348:	e3a03000 	mov	r3, #0
    b34c:	e1a00004 	mov	r0, r4
    b350:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b354:	e8bd4010 	pop	{r4, lr}
    b358:	eaffffc8 	b	b280 <CScreenDevice::CursorDown()>

0000b35c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>:
    b35c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b360:	e2806014 	add	r6, r0, #20
    b364:	e1a08000 	mov	r8, r0
    b368:	e24dd00c 	sub	sp, sp, #12
    b36c:	e3a07000 	mov	r7, #0
    b370:	e1a00006 	mov	r0, r6
    b374:	e1a0a001 	mov	sl, r1
    b378:	e1a09002 	mov	r9, r2
    b37c:	e5ddb030 	ldrb	fp, [sp, #48]	; 0x30
    b380:	e58d3004 	str	r3, [sp, #4]
    b384:	eb0002c1 	bl	be90 <CCharGenerator::GetCharHeight() const>
    b388:	e1570000 	cmp	r7, r0
    b38c:	2a00001e 	bcs	b40c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0xb0>
    b390:	e59d3004 	ldr	r3, [sp, #4]
    b394:	e3a04000 	mov	r4, #0
    b398:	e0873003 	add	r3, r7, r3
    b39c:	e58d3000 	str	r3, [sp]
    b3a0:	e1a00006 	mov	r0, r6
    b3a4:	e0845009 	add	r5, r4, r9
    b3a8:	eb0002b6 	bl	be88 <CCharGenerator::GetCharWidth() const>
    b3ac:	e1540000 	cmp	r4, r0
    b3b0:	e1a02004 	mov	r2, r4
    b3b4:	e1a03007 	mov	r3, r7
    b3b8:	e1a0100a 	mov	r1, sl
    b3bc:	e1a00006 	mov	r0, r6
    b3c0:	e2844001 	add	r4, r4, #1
    b3c4:	2a00000b 	bcs	b3f8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x9c>
    b3c8:	eb0002b4 	bl	bea0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    b3cc:	e5982024 	ldr	r2, [r8, #36]	; 0x24
    b3d0:	e3500000 	cmp	r0, #0
    b3d4:	11a0300b 	movne	r3, fp
    b3d8:	03a03000 	moveq	r3, #0
    b3dc:	e1550002 	cmp	r5, r2
    b3e0:	2affffee 	bcs	b3a0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x44>
    b3e4:	e1a01005 	mov	r1, r5
    b3e8:	e59d2000 	ldr	r2, [sp]
    b3ec:	e1a00008 	mov	r0, r8
    b3f0:	ebfffe25 	bl	ac8c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    b3f4:	eaffffe9 	b	b3a0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x44>
    b3f8:	e2877001 	add	r7, r7, #1
    b3fc:	e1a00006 	mov	r0, r6
    b400:	eb0002a2 	bl	be90 <CCharGenerator::GetCharHeight() const>
    b404:	e1570000 	cmp	r7, r0
    b408:	3affffe0 	bcc	b390 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x34>
    b40c:	e28dd00c 	add	sp, sp, #12
    b410:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b414 <CScreenDevice::DisplayChar(char)>:
    b414:	e6ef3071 	uxtb	r3, r1
    b418:	e353001f 	cmp	r3, #31
    b41c:	912fff1e 	bxls	lr
    b420:	e92d4010 	push	{r4, lr}
    b424:	e1a04000 	mov	r4, r0
    b428:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    b42c:	e24dd008 	sub	sp, sp, #8
    b430:	e5d0c048 	ldrb	ip, [r0, #72]	; 0x48
    b434:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    b438:	e58dc000 	str	ip, [sp]
    b43c:	ebffffc6 	bl	b35c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    b440:	e1a00004 	mov	r0, r4
    b444:	e28dd008 	add	sp, sp, #8
    b448:	e8bd4010 	pop	{r4, lr}
    b44c:	eaffffa1 	b	b2d8 <CScreenDevice::CursorRight()>

0000b450 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    b450:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b454:	e1a05000 	mov	r5, r0
    b458:	e1a07001 	mov	r7, r1
    b45c:	e1a0a002 	mov	sl, r2
    b460:	e2806014 	add	r6, r0, #20
    b464:	e3a08000 	mov	r8, #0
    b468:	e1a00006 	mov	r0, r6
    b46c:	eb000287 	bl	be90 <CCharGenerator::GetCharHeight() const>
    b470:	e1580000 	cmp	r8, r0
    b474:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
    b478:	e3a04000 	mov	r4, #0
    b47c:	e088900a 	add	r9, r8, sl
    b480:	e1a00006 	mov	r0, r6
    b484:	eb00027f 	bl	be88 <CCharGenerator::GetCharWidth() const>
    b488:	e1540000 	cmp	r4, r0
    b48c:	e0841007 	add	r1, r4, r7
    b490:	e2844001 	add	r4, r4, #1
    b494:	2a000007 	bcs	b4b8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x68>
    b498:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    b49c:	e1510003 	cmp	r1, r3
    b4a0:	2afffff6 	bcs	b480 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    b4a4:	e3a03000 	mov	r3, #0
    b4a8:	e1a02009 	mov	r2, r9
    b4ac:	e1a00005 	mov	r0, r5
    b4b0:	ebfffdf5 	bl	ac8c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    b4b4:	eafffff1 	b	b480 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    b4b8:	e2888001 	add	r8, r8, #1
    b4bc:	eaffffe9 	b	b468 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x18>

0000b4c0 <CScreenDevice::ClearLineEnd()>:
    b4c0:	e92d4070 	push	{r4, r5, r6, lr}
    b4c4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b4c8:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    b4cc:	e1540003 	cmp	r4, r3
    b4d0:	28bd8070 	popcs	{r4, r5, r6, pc}
    b4d4:	e1a05000 	mov	r5, r0
    b4d8:	e2806014 	add	r6, r0, #20
    b4dc:	e1a01004 	mov	r1, r4
    b4e0:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    b4e4:	e1a00005 	mov	r0, r5
    b4e8:	ebffffd8 	bl	b450 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    b4ec:	e1a00006 	mov	r0, r6
    b4f0:	eb000264 	bl	be88 <CCharGenerator::GetCharWidth() const>
    b4f4:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    b4f8:	e0844000 	add	r4, r4, r0
    b4fc:	e1530004 	cmp	r3, r4
    b500:	8afffff5 	bhi	b4dc <CScreenDevice::ClearLineEnd()+0x1c>
    b504:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b508 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    b508:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b50c:	e1a05000 	mov	r5, r0
    b510:	e1a06001 	mov	r6, r1
    b514:	e2807014 	add	r7, r0, #20
    b518:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    b51c:	e1a00007 	mov	r0, r7
    b520:	eb000258 	bl	be88 <CCharGenerator::GetCharWidth() const>
    b524:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    b528:	e0264096 	mla	r6, r6, r0, r4
    b52c:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    b530:	e1560003 	cmp	r6, r3
    b534:	21a06003 	movcs	r6, r3
    b538:	e1540006 	cmp	r4, r6
    b53c:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    b540:	e1a01004 	mov	r1, r4
    b544:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    b548:	e1a00005 	mov	r0, r5
    b54c:	ebffffbf 	bl	b450 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    b550:	e1a00007 	mov	r0, r7
    b554:	eb00024b 	bl	be88 <CCharGenerator::GetCharWidth() const>
    b558:	e0844000 	add	r4, r4, r0
    b55c:	e1540006 	cmp	r4, r6
    b560:	3afffff6 	bcc	b540 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    b564:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b568 <CScreenDevice::EraseChars(unsigned int)>:
    b568:	e3510000 	cmp	r1, #0
    b56c:	012fff1e 	bxeq	lr
    b570:	eaffffe4 	b	b508 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000b574 <CScreenDevice::ClearDisplayEnd()>:
    b574:	e92d4070 	push	{r4, r5, r6, lr}
    b578:	e1a05000 	mov	r5, r0
    b57c:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    b580:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b584:	e2806014 	add	r6, r0, #20
    b588:	e1540003 	cmp	r4, r3
    b58c:	2a000009 	bcs	b5b8 <CScreenDevice::ClearDisplayEnd()+0x44>
    b590:	e1a01004 	mov	r1, r4
    b594:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    b598:	e1a00005 	mov	r0, r5
    b59c:	ebffffab 	bl	b450 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    b5a0:	e1a00006 	mov	r0, r6
    b5a4:	eb000237 	bl	be88 <CCharGenerator::GetCharWidth() const>
    b5a8:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    b5ac:	e0844000 	add	r4, r4, r0
    b5b0:	e1530004 	cmp	r3, r4
    b5b4:	8afffff5 	bhi	b590 <CScreenDevice::ClearDisplayEnd()+0x1c>
    b5b8:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    b5bc:	e1a00006 	mov	r0, r6
    b5c0:	eb000232 	bl	be90 <CCharGenerator::GetCharHeight() const>
    b5c4:	e5953020 	ldr	r3, [r5, #32]
    b5c8:	e0840000 	add	r0, r4, r0
    b5cc:	e595201c 	ldr	r2, [r5, #28]
    b5d0:	e5951018 	ldr	r1, [r5, #24]
    b5d4:	e0000093 	mul	r0, r3, r0
    b5d8:	e0522000 	subs	r2, r2, r0
    b5dc:	0a000003 	beq	b5f0 <CScreenDevice::ClearDisplayEnd()+0x7c>
    b5e0:	e0810000 	add	r0, r1, r0
    b5e4:	e3a01000 	mov	r1, #0
    b5e8:	e8bd4070 	pop	{r4, r5, r6, lr}
    b5ec:	ea000fc8 	b	f514 <memset>
    b5f0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b5f4 <CScreenDevice::Write(char)>:
    b5f4:	e92d4010 	push	{r4, lr}
    b5f8:	e1a04000 	mov	r4, r0
    b5fc:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    b600:	e24dd008 	sub	sp, sp, #8
    b604:	e3530007 	cmp	r3, #7
    b608:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b60c:	ea000010 	b	b654 <CScreenDevice::Write(char)+0x60>
    b610:	0000b6a0 	.word	0x0000b6a0
    b614:	0000b700 	.word	0x0000b700
    b618:	0000b71c 	.word	0x0000b71c
    b61c:	0000b774 	.word	0x0000b774
    b620:	0000b850 	.word	0x0000b850
    b624:	0000b870 	.word	0x0000b870
    b628:	0000b890 	.word	0x0000b890
    b62c:	0000b664 	.word	0x0000b664
    b630:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    b634:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    b638:	e1520003 	cmp	r2, r3
    b63c:	2a000004 	bcs	b654 <CScreenDevice::Write(char)+0x60>
    b640:	e2800014 	add	r0, r0, #20
    b644:	eb000211 	bl	be90 <CCharGenerator::GetCharHeight() const>
    b648:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b64c:	e0433000 	sub	r3, r3, r0
    b650:	e5843040 	str	r3, [r4, #64]	; 0x40
    b654:	e3a03000 	mov	r3, #0
    b658:	e5843030 	str	r3, [r4, #48]	; 0x30
    b65c:	e28dd008 	add	sp, sp, #8
    b660:	e8bd8010 	pop	{r4, pc}
    b664:	e3510068 	cmp	r1, #104	; 0x68
    b668:	0a000097 	beq	b8cc <CScreenDevice::Write(char)+0x2d8>
    b66c:	e351006c 	cmp	r1, #108	; 0x6c
    b670:	0a000095 	beq	b8cc <CScreenDevice::Write(char)+0x2d8>
    b674:	e2411030 	sub	r1, r1, #48	; 0x30
    b678:	e6ef3071 	uxtb	r3, r1
    b67c:	e3530009 	cmp	r3, #9
    b680:	8afffff3 	bhi	b654 <CScreenDevice::Write(char)+0x60>
    b684:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    b688:	e3a0200a 	mov	r2, #10
    b68c:	e0211392 	mla	r1, r2, r3, r1
    b690:	e3510063 	cmp	r1, #99	; 0x63
    b694:	e5841050 	str	r1, [r4, #80]	; 0x50
    b698:	8affffed 	bhi	b654 <CScreenDevice::Write(char)+0x60>
    b69c:	eaffffee 	b	b65c <CScreenDevice::Write(char)+0x68>
    b6a0:	e2413008 	sub	r3, r1, #8
    b6a4:	e3530013 	cmp	r3, #19
    b6a8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b6ac:	ea0000ec 	b	ba64 <CScreenDevice::Write(char)+0x470>
    b6b0:	0000b938 	.word	0x0000b938
    b6b4:	0000b92c 	.word	0x0000b92c
    b6b8:	0000b918 	.word	0x0000b918
    b6bc:	0000ba64 	.word	0x0000ba64
    b6c0:	0000ba64 	.word	0x0000ba64
    b6c4:	0000b90c 	.word	0x0000b90c
    b6c8:	0000ba64 	.word	0x0000ba64
    b6cc:	0000ba64 	.word	0x0000ba64
    b6d0:	0000ba64 	.word	0x0000ba64
    b6d4:	0000ba64 	.word	0x0000ba64
    b6d8:	0000ba64 	.word	0x0000ba64
    b6dc:	0000ba64 	.word	0x0000ba64
    b6e0:	0000ba64 	.word	0x0000ba64
    b6e4:	0000ba64 	.word	0x0000ba64
    b6e8:	0000ba64 	.word	0x0000ba64
    b6ec:	0000ba64 	.word	0x0000ba64
    b6f0:	0000ba64 	.word	0x0000ba64
    b6f4:	0000ba64 	.word	0x0000ba64
    b6f8:	0000ba64 	.word	0x0000ba64
    b6fc:	0000b900 	.word	0x0000b900
    b700:	e351004d 	cmp	r1, #77	; 0x4d
    b704:	0affffd2 	beq	b654 <CScreenDevice::Write(char)+0x60>
    b708:	e351005b 	cmp	r1, #91	; 0x5b
    b70c:	03a03002 	moveq	r3, #2
    b710:	05803030 	streq	r3, [r0, #48]	; 0x30
    b714:	0affffd0 	beq	b65c <CScreenDevice::Write(char)+0x68>
    b718:	eaffffcd 	b	b654 <CScreenDevice::Write(char)+0x60>
    b71c:	e241303f 	sub	r3, r1, #63	; 0x3f
    b720:	e3530011 	cmp	r3, #17
    b724:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b728:	ea0000d9 	b	ba94 <CScreenDevice::Write(char)+0x4a0>
    b72c:	0000ba20 	.word	0x0000ba20
    b730:	0000ba94 	.word	0x0000ba94
    b734:	0000b630 	.word	0x0000b630
    b738:	0000ba54 	.word	0x0000ba54
    b73c:	0000ba44 	.word	0x0000ba44
    b740:	0000ba94 	.word	0x0000ba94
    b744:	0000ba94 	.word	0x0000ba94
    b748:	0000ba94 	.word	0x0000ba94
    b74c:	0000ba94 	.word	0x0000ba94
    b750:	0000ba2c 	.word	0x0000ba2c
    b754:	0000ba94 	.word	0x0000ba94
    b758:	0000ba10 	.word	0x0000ba10
    b75c:	0000ba00 	.word	0x0000ba00
    b760:	0000b654 	.word	0x0000b654
    b764:	0000b654 	.word	0x0000b654
    b768:	0000ba94 	.word	0x0000ba94
    b76c:	0000ba94 	.word	0x0000ba94
    b770:	0000b654 	.word	0x0000b654
    b774:	e241303b 	sub	r3, r1, #59	; 0x3b
    b778:	e3530032 	cmp	r3, #50	; 0x32
    b77c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b780:	eaffffbb 	b	b674 <CScreenDevice::Write(char)+0x80>
    b784:	0000b9f4 	.word	0x0000b9f4
    b788:	0000b674 	.word	0x0000b674
    b78c:	0000b674 	.word	0x0000b674
    b790:	0000b674 	.word	0x0000b674
    b794:	0000b674 	.word	0x0000b674
    b798:	0000b674 	.word	0x0000b674
    b79c:	0000b674 	.word	0x0000b674
    b7a0:	0000b674 	.word	0x0000b674
    b7a4:	0000b674 	.word	0x0000b674
    b7a8:	0000b674 	.word	0x0000b674
    b7ac:	0000b674 	.word	0x0000b674
    b7b0:	0000b674 	.word	0x0000b674
    b7b4:	0000b674 	.word	0x0000b674
    b7b8:	0000b674 	.word	0x0000b674
    b7bc:	0000b674 	.word	0x0000b674
    b7c0:	0000b674 	.word	0x0000b674
    b7c4:	0000b674 	.word	0x0000b674
    b7c8:	0000b654 	.word	0x0000b654
    b7cc:	0000b654 	.word	0x0000b654
    b7d0:	0000b674 	.word	0x0000b674
    b7d4:	0000b674 	.word	0x0000b674
    b7d8:	0000b654 	.word	0x0000b654
    b7dc:	0000b674 	.word	0x0000b674
    b7e0:	0000b674 	.word	0x0000b674
    b7e4:	0000b674 	.word	0x0000b674
    b7e8:	0000b674 	.word	0x0000b674
    b7ec:	0000b674 	.word	0x0000b674
    b7f0:	0000b674 	.word	0x0000b674
    b7f4:	0000b674 	.word	0x0000b674
    b7f8:	0000b944 	.word	0x0000b944
    b7fc:	0000b674 	.word	0x0000b674
    b800:	0000b674 	.word	0x0000b674
    b804:	0000b674 	.word	0x0000b674
    b808:	0000b674 	.word	0x0000b674
    b80c:	0000b674 	.word	0x0000b674
    b810:	0000b674 	.word	0x0000b674
    b814:	0000b674 	.word	0x0000b674
    b818:	0000b674 	.word	0x0000b674
    b81c:	0000b674 	.word	0x0000b674
    b820:	0000b674 	.word	0x0000b674
    b824:	0000b674 	.word	0x0000b674
    b828:	0000b674 	.word	0x0000b674
    b82c:	0000b674 	.word	0x0000b674
    b830:	0000b674 	.word	0x0000b674
    b834:	0000b674 	.word	0x0000b674
    b838:	0000b958 	.word	0x0000b958
    b83c:	0000b674 	.word	0x0000b674
    b840:	0000b674 	.word	0x0000b674
    b844:	0000b674 	.word	0x0000b674
    b848:	0000b958 	.word	0x0000b958
    b84c:	0000b974 	.word	0x0000b974
    b850:	e2411030 	sub	r1, r1, #48	; 0x30
    b854:	e6ef3071 	uxtb	r3, r1
    b858:	e3530009 	cmp	r3, #9
    b85c:	8affff7c 	bhi	b654 <CScreenDevice::Write(char)+0x60>
    b860:	e3a03007 	mov	r3, #7
    b864:	e5801050 	str	r1, [r0, #80]	; 0x50
    b868:	e5803030 	str	r3, [r0, #48]	; 0x30
    b86c:	eaffff7a 	b	b65c <CScreenDevice::Write(char)+0x68>
    b870:	e2411030 	sub	r1, r1, #48	; 0x30
    b874:	e6ef3071 	uxtb	r3, r1
    b878:	e3530009 	cmp	r3, #9
    b87c:	8affff74 	bhi	b654 <CScreenDevice::Write(char)+0x60>
    b880:	e3a03006 	mov	r3, #6
    b884:	e5801054 	str	r1, [r0, #84]	; 0x54
    b888:	e5803030 	str	r3, [r0, #48]	; 0x30
    b88c:	eaffff72 	b	b65c <CScreenDevice::Write(char)+0x68>
    b890:	e3510048 	cmp	r1, #72	; 0x48
    b894:	0a00008f 	beq	bad8 <CScreenDevice::Write(char)+0x4e4>
    b898:	e3510072 	cmp	r1, #114	; 0x72
    b89c:	0a000011 	beq	b8e8 <CScreenDevice::Write(char)+0x2f4>
    b8a0:	e2411030 	sub	r1, r1, #48	; 0x30
    b8a4:	e6ef3071 	uxtb	r3, r1
    b8a8:	e3530009 	cmp	r3, #9
    b8ac:	8affff68 	bhi	b654 <CScreenDevice::Write(char)+0x60>
    b8b0:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    b8b4:	e3a0200a 	mov	r2, #10
    b8b8:	e0211392 	mla	r1, r2, r3, r1
    b8bc:	e35100c7 	cmp	r1, #199	; 0xc7
    b8c0:	e5801054 	str	r1, [r0, #84]	; 0x54
    b8c4:	8affff62 	bhi	b654 <CScreenDevice::Write(char)+0x60>
    b8c8:	eaffff63 	b	b65c <CScreenDevice::Write(char)+0x68>
    b8cc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    b8d0:	e3530019 	cmp	r3, #25
    b8d4:	02411068 	subeq	r1, r1, #104	; 0x68
    b8d8:	016f1f11 	clzeq	r1, r1
    b8dc:	01a012a1 	lsreq	r1, r1, #5
    b8e0:	05841044 	streq	r1, [r4, #68]	; 0x44
    b8e4:	eaffff5a 	b	b654 <CScreenDevice::Write(char)+0x60>
    b8e8:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    b8ec:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    b8f0:	ebfffdf5 	bl	b0cc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    b8f4:	e3a03000 	mov	r3, #0
    b8f8:	e5843030 	str	r3, [r4, #48]	; 0x30
    b8fc:	eaffff56 	b	b65c <CScreenDevice::Write(char)+0x68>
    b900:	e3a03001 	mov	r3, #1
    b904:	e5803030 	str	r3, [r0, #48]	; 0x30
    b908:	eaffff53 	b	b65c <CScreenDevice::Write(char)+0x68>
    b90c:	e3a03000 	mov	r3, #0
    b910:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b914:	eaffff50 	b	b65c <CScreenDevice::Write(char)+0x68>
    b918:	e3a03000 	mov	r3, #0
    b91c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b920:	e28dd008 	add	sp, sp, #8
    b924:	e8bd4010 	pop	{r4, lr}
    b928:	eafffe54 	b	b280 <CScreenDevice::CursorDown()>
    b92c:	e28dd008 	add	sp, sp, #8
    b930:	e8bd4010 	pop	{r4, lr}
    b934:	eafffe76 	b	b314 <CScreenDevice::Tabulator()>
    b938:	e28dd008 	add	sp, sp, #8
    b93c:	e8bd4010 	pop	{r4, lr}
    b940:	eafffd9a 	b	afb0 <CScreenDevice::CursorLeft()>
    b944:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    b948:	e3510000 	cmp	r1, #0
    b94c:	0affff40 	beq	b654 <CScreenDevice::Write(char)+0x60>
    b950:	ebfffeec 	bl	b508 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    b954:	eaffff3e 	b	b654 <CScreenDevice::Write(char)+0x60>
    b958:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    b95c:	e3530004 	cmp	r3, #4
    b960:	02411068 	subeq	r1, r1, #104	; 0x68
    b964:	016f1f11 	clzeq	r1, r1
    b968:	01a012a1 	lsreq	r1, r1, #5
    b96c:	0580104c 	streq	r1, [r0, #76]	; 0x4c
    b970:	eaffff37 	b	b654 <CScreenDevice::Write(char)+0x60>
    b974:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    b978:	e353001b 	cmp	r3, #27
    b97c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b980:	eaffff33 	b	b654 <CScreenDevice::Write(char)+0x60>
    b984:	0000bacc 	.word	0x0000bacc
    b988:	0000bac0 	.word	0x0000bac0
    b98c:	0000bab4 	.word	0x0000bab4
    b990:	0000b654 	.word	0x0000b654
    b994:	0000b654 	.word	0x0000b654
    b998:	0000b654 	.word	0x0000b654
    b99c:	0000b654 	.word	0x0000b654
    b9a0:	0000b654 	.word	0x0000b654
    b9a4:	0000b654 	.word	0x0000b654
    b9a8:	0000b654 	.word	0x0000b654
    b9ac:	0000b654 	.word	0x0000b654
    b9b0:	0000b654 	.word	0x0000b654
    b9b4:	0000b654 	.word	0x0000b654
    b9b8:	0000b654 	.word	0x0000b654
    b9bc:	0000b654 	.word	0x0000b654
    b9c0:	0000b654 	.word	0x0000b654
    b9c4:	0000b654 	.word	0x0000b654
    b9c8:	0000b654 	.word	0x0000b654
    b9cc:	0000b654 	.word	0x0000b654
    b9d0:	0000b654 	.word	0x0000b654
    b9d4:	0000b654 	.word	0x0000b654
    b9d8:	0000b654 	.word	0x0000b654
    b9dc:	0000b654 	.word	0x0000b654
    b9e0:	0000b654 	.word	0x0000b654
    b9e4:	0000b654 	.word	0x0000b654
    b9e8:	0000b654 	.word	0x0000b654
    b9ec:	0000b654 	.word	0x0000b654
    b9f0:	0000bacc 	.word	0x0000bacc
    b9f4:	e3a03005 	mov	r3, #5
    b9f8:	e5803030 	str	r3, [r0, #48]	; 0x30
    b9fc:	eaffff16 	b	b65c <CScreenDevice::Write(char)+0x68>
    ba00:	ebfffeae 	bl	b4c0 <CScreenDevice::ClearLineEnd()>
    ba04:	e3a03000 	mov	r3, #0
    ba08:	e5843030 	str	r3, [r4, #48]	; 0x30
    ba0c:	eaffff12 	b	b65c <CScreenDevice::Write(char)+0x68>
    ba10:	ebfffed7 	bl	b574 <CScreenDevice::ClearDisplayEnd()>
    ba14:	e3a03000 	mov	r3, #0
    ba18:	e5843030 	str	r3, [r4, #48]	; 0x30
    ba1c:	eaffff0e 	b	b65c <CScreenDevice::Write(char)+0x68>
    ba20:	e3a03004 	mov	r3, #4
    ba24:	e5803030 	str	r3, [r0, #48]	; 0x30
    ba28:	eaffff0b 	b	b65c <CScreenDevice::Write(char)+0x68>
    ba2c:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    ba30:	e3a03000 	mov	r3, #0
    ba34:	e580303c 	str	r3, [r0, #60]	; 0x3c
    ba38:	e5802040 	str	r2, [r0, #64]	; 0x40
    ba3c:	e5803030 	str	r3, [r0, #48]	; 0x30
    ba40:	eaffff05 	b	b65c <CScreenDevice::Write(char)+0x68>
    ba44:	ebfffe23 	bl	b2d8 <CScreenDevice::CursorRight()>
    ba48:	e3a03000 	mov	r3, #0
    ba4c:	e5843030 	str	r3, [r4, #48]	; 0x30
    ba50:	eaffff01 	b	b65c <CScreenDevice::Write(char)+0x68>
    ba54:	ebfffe09 	bl	b280 <CScreenDevice::CursorDown()>
    ba58:	e3a03000 	mov	r3, #0
    ba5c:	e5843030 	str	r3, [r4, #48]	; 0x30
    ba60:	eafffefd 	b	b65c <CScreenDevice::Write(char)+0x68>
    ba64:	e6ef3071 	uxtb	r3, r1
    ba68:	e353001f 	cmp	r3, #31
    ba6c:	9afffefa 	bls	b65c <CScreenDevice::Write(char)+0x68>
    ba70:	e5d0c048 	ldrb	ip, [r0, #72]	; 0x48
    ba74:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    ba78:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    ba7c:	e58dc000 	str	ip, [sp]
    ba80:	ebfffe35 	bl	b35c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    ba84:	e1a00004 	mov	r0, r4
    ba88:	e28dd008 	add	sp, sp, #8
    ba8c:	e8bd4010 	pop	{r4, lr}
    ba90:	eafffe10 	b	b2d8 <CScreenDevice::CursorRight()>
    ba94:	e2411030 	sub	r1, r1, #48	; 0x30
    ba98:	e6ef3071 	uxtb	r3, r1
    ba9c:	e3530009 	cmp	r3, #9
    baa0:	8afffeeb 	bhi	b654 <CScreenDevice::Write(char)+0x60>
    baa4:	e3a03003 	mov	r3, #3
    baa8:	e5801050 	str	r1, [r0, #80]	; 0x50
    baac:	e5803030 	str	r3, [r0, #48]	; 0x30
    bab0:	eafffee9 	b	b65c <CScreenDevice::Write(char)+0x68>
    bab4:	e3a03003 	mov	r3, #3
    bab8:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    babc:	eafffee4 	b	b654 <CScreenDevice::Write(char)+0x60>
    bac0:	e3a03002 	mov	r3, #2
    bac4:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    bac8:	eafffee1 	b	b654 <CScreenDevice::Write(char)+0x60>
    bacc:	e3a03001 	mov	r3, #1
    bad0:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    bad4:	eafffede 	b	b654 <CScreenDevice::Write(char)+0x60>
    bad8:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    badc:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    bae0:	ebfffd4d 	bl	b01c <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    bae4:	e3a03000 	mov	r3, #0
    bae8:	e5843030 	str	r3, [r4, #48]	; 0x30
    baec:	eafffeda 	b	b65c <CScreenDevice::Write(char)+0x68>

0000baf0 <CScreenDevice::Write(void const*, unsigned int)>:
    baf0:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    baf4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    baf8:	e1a05000 	mov	r5, r0
    bafc:	e3530000 	cmp	r3, #0
    bb00:	e1a06001 	mov	r6, r1
    bb04:	e1a08002 	mov	r8, r2
    bb08:	1a000026 	bne	bba8 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    bb0c:	e5954044 	ldr	r4, [r5, #68]	; 0x44
    bb10:	e3a03001 	mov	r3, #1
    bb14:	e5853058 	str	r3, [r5, #88]	; 0x58
    bb18:	e3540000 	cmp	r4, #0
    bb1c:	1a00001a 	bne	bb8c <CScreenDevice::Write(void const*, unsigned int)+0x9c>
    bb20:	e3580000 	cmp	r8, #0
    bb24:	e2487001 	sub	r7, r8, #1
    bb28:	0a00000b 	beq	bb5c <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    bb2c:	e1a04006 	mov	r4, r6
    bb30:	e0d410d1 	ldrsb	r1, [r4], #1
    bb34:	e1a00005 	mov	r0, r5
    bb38:	ebfffead 	bl	b5f4 <CScreenDevice::Write(char)>
    bb3c:	e2643001 	rsb	r3, r4, #1
    bb40:	e0833007 	add	r3, r3, r7
    bb44:	e1760003 	cmn	r6, r3
    bb48:	1afffff8 	bne	bb30 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    bb4c:	e2874001 	add	r4, r7, #1
    bb50:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    bb54:	e3530000 	cmp	r3, #0
    bb58:	1a000008 	bne	bb80 <CScreenDevice::Write(void const*, unsigned int)+0x90>
    bb5c:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
    bb60:	e3a02000 	mov	r2, #0
    bb64:	e5852058 	str	r2, [r5, #88]	; 0x58
    bb68:	e1530002 	cmp	r3, r2
    bb6c:	0a000000 	beq	bb74 <CScreenDevice::Write(void const*, unsigned int)+0x84>
    bb70:	ebfff702 	bl	9780 <LeaveCritical>
    bb74:	f57ff05f 	dmb	sy
    bb78:	e1a00004 	mov	r0, r4
    bb7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bb80:	e1a00005 	mov	r0, r5
    bb84:	ebfffc47 	bl	aca8 <CScreenDevice::InvertCursor() [clone .part.6]>
    bb88:	eafffff3 	b	bb5c <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    bb8c:	e1a00005 	mov	r0, r5
    bb90:	e2487001 	sub	r7, r8, #1
    bb94:	ebfffc43 	bl	aca8 <CScreenDevice::InvertCursor() [clone .part.6]>
    bb98:	e3580000 	cmp	r8, #0
    bb9c:	1affffe2 	bne	bb2c <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    bba0:	e1a04008 	mov	r4, r8
    bba4:	eaffffe9 	b	bb50 <CScreenDevice::Write(void const*, unsigned int)+0x60>
    bba8:	ebfff6e7 	bl	974c <EnterCritical>
    bbac:	eaffffd6 	b	bb0c <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000bbb0 <CScreenDevice::Initialize()>:
    bbb0:	e92d4070 	push	{r4, r5, r6, lr}
    bbb4:	e1a04000 	mov	r4, r0
    bbb8:	e590500c 	ldr	r5, [r0, #12]
    bbbc:	e24dd008 	sub	sp, sp, #8
    bbc0:	e3550000 	cmp	r5, #0
    bbc4:	1a00001c 	bne	bc3c <CScreenDevice::Initialize()+0x8c>
    bbc8:	e3a00024 	mov	r0, #36	; 0x24
    bbcc:	ebfff6da 	bl	973c <operator new(unsigned int)>
    bbd0:	e3a03008 	mov	r3, #8
    bbd4:	e5942008 	ldr	r2, [r4, #8]
    bbd8:	e1a06000 	mov	r6, r0
    bbdc:	e5941004 	ldr	r1, [r4, #4]
    bbe0:	e58d5004 	str	r5, [sp, #4]
    bbe4:	e58d5000 	str	r5, [sp]
    bbe8:	eb000f82 	bl	f9f8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    bbec:	e1a00006 	mov	r0, r6
    bbf0:	e30f2fdf 	movw	r2, #65503	; 0xffdf
    bbf4:	e3a01001 	mov	r1, #1
    bbf8:	e5846010 	str	r6, [r4, #16]
    bbfc:	eb000fd1 	bl	fb48 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    bc00:	e3a02b3e 	mov	r2, #63488	; 0xf800
    bc04:	e3a01002 	mov	r1, #2
    bc08:	e5940010 	ldr	r0, [r4, #16]
    bc0c:	eb000fcd 	bl	fb48 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    bc10:	e3a0201f 	mov	r2, #31
    bc14:	e3a01003 	mov	r1, #3
    bc18:	e5940010 	ldr	r0, [r4, #16]
    bc1c:	eb000fc9 	bl	fb48 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    bc20:	e5940010 	ldr	r0, [r4, #16]
    bc24:	eb000fdc 	bl	fb9c <CBcmFrameBuffer::Initialize()>
    bc28:	e3500000 	cmp	r0, #0
    bc2c:	1a000028 	bne	bcd4 <CScreenDevice::Initialize()+0x124>
    bc30:	e1a00005 	mov	r0, r5
    bc34:	e28dd008 	add	sp, sp, #8
    bc38:	e8bd8070 	pop	{r4, r5, r6, pc}
    bc3c:	e5903004 	ldr	r3, [r0, #4]
    bc40:	e5900008 	ldr	r0, [r0, #8]
    bc44:	e5843024 	str	r3, [r4, #36]	; 0x24
    bc48:	e5840028 	str	r0, [r4, #40]	; 0x28
    bc4c:	e5843020 	str	r3, [r4, #32]
    bc50:	e0000390 	mul	r0, r0, r3
    bc54:	e584001c 	str	r0, [r4, #28]
    bc58:	ebfff6b8 	bl	9740 <operator new[](unsigned int)>
    bc5c:	e5946028 	ldr	r6, [r4, #40]	; 0x28
    bc60:	e5840018 	str	r0, [r4, #24]
    bc64:	e2845014 	add	r5, r4, #20
    bc68:	e1a00005 	mov	r0, r5
    bc6c:	eb000087 	bl	be90 <CCharGenerator::GetCharHeight() const>
    bc70:	e736f016 	udiv	r6, r6, r0
    bc74:	e1a00005 	mov	r0, r5
    bc78:	eb000084 	bl	be90 <CCharGenerator::GetCharHeight() const>
    bc7c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    bc80:	e3a02000 	mov	r2, #0
    bc84:	e5843040 	str	r3, [r4, #64]	; 0x40
    bc88:	e0060690 	mul	r6, r0, r6
    bc8c:	e584203c 	str	r2, [r4, #60]	; 0x3c
    bc90:	e1a00004 	mov	r0, r4
    bc94:	e584602c 	str	r6, [r4, #44]	; 0x2c
    bc98:	e5846038 	str	r6, [r4, #56]	; 0x38
    bc9c:	ebfffe34 	bl	b574 <CScreenDevice::ClearDisplayEnd()>
    bca0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    bca4:	e3530000 	cmp	r3, #0
    bca8:	1a000021 	bne	bd34 <CScreenDevice::Initialize()+0x184>
    bcac:	eb0001a2 	bl	c33c <CDeviceNameService::Get()>
    bcb0:	e3a05001 	mov	r5, #1
    bcb4:	e1a02004 	mov	r2, r4
    bcb8:	e3a03000 	mov	r3, #0
    bcbc:	e3001354 	movw	r1, #852	; 0x354
    bcc0:	e3401005 	movt	r1, #5
    bcc4:	eb000128 	bl	c16c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    bcc8:	e1a00005 	mov	r0, r5
    bccc:	e28dd008 	add	sp, sp, #8
    bcd0:	e8bd8070 	pop	{r4, r5, r6, pc}
    bcd4:	e5940010 	ldr	r0, [r4, #16]
    bcd8:	eb000fea 	bl	fc88 <CBcmFrameBuffer::GetDepth() const>
    bcdc:	e3500008 	cmp	r0, #8
    bce0:	1affffd2 	bne	bc30 <CScreenDevice::Initialize()+0x80>
    bce4:	e5940010 	ldr	r0, [r4, #16]
    bce8:	eb000fe8 	bl	fc90 <CBcmFrameBuffer::GetBuffer() const>
    bcec:	e5840018 	str	r0, [r4, #24]
    bcf0:	e5940010 	ldr	r0, [r4, #16]
    bcf4:	eb000fe7 	bl	fc98 <CBcmFrameBuffer::GetSize() const>
    bcf8:	e584001c 	str	r0, [r4, #28]
    bcfc:	e5940010 	ldr	r0, [r4, #16]
    bd00:	eb000fde 	bl	fc80 <CBcmFrameBuffer::GetPitch() const>
    bd04:	e5840020 	str	r0, [r4, #32]
    bd08:	e5940010 	ldr	r0, [r4, #16]
    bd0c:	eb000fd3 	bl	fc60 <CBcmFrameBuffer::GetWidth() const>
    bd10:	e5840024 	str	r0, [r4, #36]	; 0x24
    bd14:	e5940010 	ldr	r0, [r4, #16]
    bd18:	eb000fd2 	bl	fc68 <CBcmFrameBuffer::GetHeight() const>
    bd1c:	e5943020 	ldr	r3, [r4, #32]
    bd20:	e1a06000 	mov	r6, r0
    bd24:	e5840028 	str	r0, [r4, #40]	; 0x28
    bd28:	e3130003 	tst	r3, #3
    bd2c:	0affffcc 	beq	bc64 <CScreenDevice::Initialize()+0xb4>
    bd30:	eaffffbe 	b	bc30 <CScreenDevice::Initialize()+0x80>
    bd34:	e1a00004 	mov	r0, r4
    bd38:	ebfffbda 	bl	aca8 <CScreenDevice::InvertCursor() [clone .part.6]>
    bd3c:	eaffffda 	b	bcac <CScreenDevice::Initialize()+0xfc>

0000bd40 <CScreenDevice::InvertCursor()>:
    bd40:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    bd44:	e3530000 	cmp	r3, #0
    bd48:	012fff1e 	bxeq	lr
    bd4c:	eafffbd5 	b	aca8 <CScreenDevice::InvertCursor() [clone .part.6]>

0000bd50 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char)>:
    bd50:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    bd54:	e15c0001 	cmp	ip, r1
    bd58:	912fff1e 	bxls	lr
    bd5c:	eafffbca 	b	ac8c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>

0000bd60 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    bd60:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bd64:	e1530001 	cmp	r3, r1
    bd68:	9a000007 	bls	bd8c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x2c>
    bd6c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    bd70:	e1530002 	cmp	r3, r2
    bd74:	9a000004 	bls	bd8c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x2c>
    bd78:	e590c020 	ldr	ip, [r0, #32]
    bd7c:	e5903018 	ldr	r3, [r0, #24]
    bd80:	e022329c 	mla	r2, ip, r2, r3
    bd84:	e7d20001 	ldrb	r0, [r2, r1]
    bd88:	e12fff1e 	bx	lr
    bd8c:	e3a00000 	mov	r0, #0
    bd90:	e12fff1e 	bx	lr

0000bd94 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    bd94:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    bd98:	e1a05000 	mov	r5, r0
    bd9c:	e1a04001 	mov	r4, r1
    bda0:	e24dd00c 	sub	sp, sp, #12
    bda4:	e1a06002 	mov	r6, r2
    bda8:	e2800014 	add	r0, r0, #20
    bdac:	e2044003 	and	r4, r4, #3
    bdb0:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    bdb4:	eb000033 	bl	be88 <CCharGenerator::GetCharWidth() const>
    bdb8:	e2061003 	and	r1, r6, #3
    bdbc:	e30033f8 	movw	r3, #1016	; 0x3f8
    bdc0:	e3403005 	movt	r3, #5
    bdc4:	e0831001 	add	r1, r3, r1
    bdc8:	e0240094 	mla	r4, r4, r0, r0
    bdcc:	e3a02002 	mov	r2, #2
    bdd0:	e3a03000 	mov	r3, #0
    bdd4:	e58d2000 	str	r2, [sp]
    bdd8:	e1a00005 	mov	r0, r5
    bddc:	e1d111dc 	ldrsb	r1, [r1, #28]
    bde0:	e0472004 	sub	r2, r7, r4
    bde4:	ebfffd5c 	bl	b35c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    bde8:	e28dd00c 	add	sp, sp, #12
    bdec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000bdf0 <assertion_failed>:
    bdf0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    bdf4:	e1a05000 	mov	r5, r0
    bdf8:	e1a06001 	mov	r6, r1
    bdfc:	e24dd01c 	sub	sp, sp, #28
    be00:	e1a07002 	mov	r7, r2
    be04:	e1a0400d 	mov	r4, sp
    be08:	e28d0008 	add	r0, sp, #8
    be0c:	eb00035b 	bl	cb80 <CString::CString()>
    be10:	e1a03007 	mov	r3, r7
    be14:	e1a02006 	mov	r2, r6
    be18:	e28d0008 	add	r0, sp, #8
    be1c:	e300141c 	movw	r1, #1052	; 0x41c
    be20:	e3401005 	movt	r1, #5
    be24:	eb000668 	bl	d7cc <CString::Format(char const*, ...)>
    be28:	e28d0008 	add	r0, sp, #8
    be2c:	eb000369 	bl	cbd8 <CString::operator char const*() const>
    be30:	e1a01000 	mov	r1, r0
    be34:	e1a00004 	mov	r0, r4
    be38:	eb00007b 	bl	c02c <debug_stacktrace(unsigned int const*, char const*)>
    be3c:	eb00016a 	bl	c3ec <CLogger::Get()>
    be40:	e1a04000 	mov	r4, r0
    be44:	e28d0008 	add	r0, sp, #8
    be48:	eb000362 	bl	cbd8 <CString::operator char const*() const>
    be4c:	e3a02000 	mov	r2, #0
    be50:	e1a01000 	mov	r1, r0
    be54:	e58d5000 	str	r5, [sp]
    be58:	e1a00004 	mov	r0, r4
    be5c:	e3003424 	movw	r3, #1060	; 0x424
    be60:	e3403005 	movt	r3, #5
    be64:	eb00023d 	bl	c760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    be68:	e28d0008 	add	r0, sp, #8
    be6c:	eb000311 	bl	cab8 <CString::~CString()>
    be70:	e28dd01c 	add	sp, sp, #28
    be74:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000be78 <CCharGenerator::CCharGenerator()>:
    be78:	e3a03008 	mov	r3, #8
    be7c:	e5803000 	str	r3, [r0]
    be80:	e12fff1e 	bx	lr

0000be84 <CCharGenerator::~CCharGenerator()>:
    be84:	e12fff1e 	bx	lr

0000be88 <CCharGenerator::GetCharWidth() const>:
    be88:	e5900000 	ldr	r0, [r0]
    be8c:	e12fff1e 	bx	lr

0000be90 <CCharGenerator::GetCharHeight() const>:
    be90:	e3a00013 	mov	r0, #19
    be94:	e12fff1e 	bx	lr

0000be98 <CCharGenerator::GetUnderline() const>:
    be98:	e3a00010 	mov	r0, #16
    be9c:	e12fff1e 	bx	lr

0000bea0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    bea0:	e6ef1071 	uxtb	r1, r1
    bea4:	e92d4070 	push	{r4, r5, r6, lr}
    bea8:	e2414021 	sub	r4, r1, #33	; 0x21
    beac:	e35400de 	cmp	r4, #222	; 0xde
    beb0:	8a00000f 	bhi	bef4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    beb4:	e1a06003 	mov	r6, r3
    beb8:	e5903000 	ldr	r3, [r0]
    bebc:	e1a05002 	mov	r5, r2
    bec0:	e1530002 	cmp	r3, r2
    bec4:	9a00000c 	bls	befc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x5c>
    bec8:	e356000f 	cmp	r6, #15
    becc:	8a000008 	bhi	bef4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    bed0:	e300143c 	movw	r1, #1084	; 0x43c
    bed4:	e3401005 	movt	r1, #5
    bed8:	e3a02080 	mov	r2, #128	; 0x80
    bedc:	e0811204 	add	r1, r1, r4, lsl #4
    bee0:	e7d13006 	ldrb	r3, [r1, r6]
    bee4:	e0133552 	ands	r3, r3, r2, asr r5
    bee8:	13a00001 	movne	r0, #1
    beec:	03a00000 	moveq	r0, #0
    bef0:	e8bd8070 	pop	{r4, r5, r6, pc}
    bef4:	e3a00000 	mov	r0, #0
    bef8:	e8bd8070 	pop	{r4, r5, r6, pc}
    befc:	e301122c 	movw	r1, #4652	; 0x122c
    bf00:	e3401005 	movt	r1, #5
    bf04:	e3010240 	movw	r0, #4672	; 0x1240
    bf08:	e3400005 	movt	r0, #5
    bf0c:	e3a0204e 	mov	r2, #78	; 0x4e
    bf10:	ebffffb6 	bl	bdf0 <assertion_failed>
    bf14:	e356000f 	cmp	r6, #15
    bf18:	9affffec 	bls	bed0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
    bf1c:	eafffff4 	b	bef4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>

0000bf20 <debug_hexdump(void const*, unsigned int, char const*)>:
    bf20:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf24:	e3520000 	cmp	r2, #0
    bf28:	e1a05001 	mov	r5, r1
    bf2c:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    bf30:	e1a04000 	mov	r4, r0
    bf34:	e3017258 	movw	r7, #4696	; 0x1258
    bf38:	e3407005 	movt	r7, #5
    bf3c:	11a07002 	movne	r7, r2
    bf40:	eb000129 	bl	c3ec <CLogger::Get()>
    bf44:	e58d4004 	str	r4, [sp, #4]
    bf48:	e1a01007 	mov	r1, r7
    bf4c:	e58d5000 	str	r5, [sp]
    bf50:	e3013260 	movw	r3, #4704	; 0x1260
    bf54:	e3403005 	movt	r3, #5
    bf58:	e3a02004 	mov	r2, #4
    bf5c:	eb0001ff 	bl	c760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bf60:	e3550000 	cmp	r5, #0
    bf64:	0a00002a 	beq	c014 <debug_hexdump(void const*, unsigned int, char const*)+0xf4>
    bf68:	e3018284 	movw	r8, #4740	; 0x1284
    bf6c:	e3408005 	movt	r8, #5
    bf70:	eb00011d 	bl	c3ec <CLogger::Get()>
    bf74:	e5d4e00f 	ldrb	lr, [r4, #15]
    bf78:	e5d4b00e 	ldrb	fp, [r4, #14]
    bf7c:	e6ffc074 	uxth	ip, r4
    bf80:	e5d4a00d 	ldrb	sl, [r4, #13]
    bf84:	e1a03008 	mov	r3, r8
    bf88:	e5d4900c 	ldrb	r9, [r4, #12]
    bf8c:	e3a02004 	mov	r2, #4
    bf90:	e5d4600b 	ldrb	r6, [r4, #11]
    bf94:	e1a01007 	mov	r1, r7
    bf98:	e58de040 	str	lr, [sp, #64]	; 0x40
    bf9c:	e2844010 	add	r4, r4, #16
    bfa0:	e554e006 	ldrb	lr, [r4, #-6]
    bfa4:	e58db03c 	str	fp, [sp, #60]	; 0x3c
    bfa8:	e554b007 	ldrb	fp, [r4, #-7]
    bfac:	e58da038 	str	sl, [sp, #56]	; 0x38
    bfb0:	e554a008 	ldrb	sl, [r4, #-8]
    bfb4:	e58d9034 	str	r9, [sp, #52]	; 0x34
    bfb8:	e5549009 	ldrb	r9, [r4, #-9]
    bfbc:	e58d6030 	str	r6, [sp, #48]	; 0x30
    bfc0:	e554600a 	ldrb	r6, [r4, #-10]
    bfc4:	e58de02c 	str	lr, [sp, #44]	; 0x2c
    bfc8:	e554e00b 	ldrb	lr, [r4, #-11]
    bfcc:	e58db028 	str	fp, [sp, #40]	; 0x28
    bfd0:	e554b00c 	ldrb	fp, [r4, #-12]
    bfd4:	e58da024 	str	sl, [sp, #36]	; 0x24
    bfd8:	e554a00d 	ldrb	sl, [r4, #-13]
    bfdc:	e58d9020 	str	r9, [sp, #32]
    bfe0:	e554900e 	ldrb	r9, [r4, #-14]
    bfe4:	e58d601c 	str	r6, [sp, #28]
    bfe8:	e554600f 	ldrb	r6, [r4, #-15]
    bfec:	e58de018 	str	lr, [sp, #24]
    bff0:	e554e010 	ldrb	lr, [r4, #-16]
    bff4:	e58db014 	str	fp, [sp, #20]
    bff8:	e58da010 	str	sl, [sp, #16]
    bffc:	e58d900c 	str	r9, [sp, #12]
    c000:	e58d6008 	str	r6, [sp, #8]
    c004:	e88d5000 	stm	sp, {ip, lr}
    c008:	eb0001d4 	bl	c760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c00c:	e355000f 	cmp	r5, #15
    c010:	8a000001 	bhi	c01c <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
    c014:	e28dd04c 	add	sp, sp, #76	; 0x4c
    c018:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c01c:	e2555010 	subs	r5, r5, #16
    c020:	1affffd2 	bne	bf70 <debug_hexdump(void const*, unsigned int, char const*)+0x50>
    c024:	e28dd04c 	add	sp, sp, #76	; 0x4c
    c028:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c02c <debug_stacktrace(unsigned int const*, char const*)>:
    c02c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c030:	e3510000 	cmp	r1, #0
    c034:	e3017258 	movw	r7, #4696	; 0x1258
    c038:	e3407005 	movt	r7, #5
    c03c:	11a07001 	movne	r7, r1
    c040:	e30f6d6c 	movw	r6, #64876	; 0xfd6c
    c044:	e3406000 	movt	r6, #0
    c048:	e30182dc 	movw	r8, #4828	; 0x12dc
    c04c:	e3408005 	movt	r8, #5
    c050:	e24dd008 	sub	sp, sp, #8
    c054:	e1a05000 	mov	r5, r0
    c058:	e3a04000 	mov	r4, #0
    c05c:	ea000003 	b	c070 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    c060:	e2844001 	add	r4, r4, #1
    c064:	e2855004 	add	r5, r5, #4
    c068:	e3540040 	cmp	r4, #64	; 0x40
    c06c:	0a000010 	beq	c0b4 <debug_stacktrace(unsigned int const*, char const*)+0x88>
    c070:	e5953000 	ldr	r3, [r5]
    c074:	e3530902 	cmp	r3, #32768	; 0x8000
    c078:	3afffff8 	bcc	c060 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    c07c:	e1530006 	cmp	r3, r6
    c080:	2afffff6 	bcs	c060 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    c084:	eb0000d8 	bl	c3ec <CLogger::Get()>
    c088:	e5952000 	ldr	r2, [r5]
    c08c:	e1a03008 	mov	r3, r8
    c090:	e58d4000 	str	r4, [sp]
    c094:	e58d2004 	str	r2, [sp, #4]
    c098:	e1a01007 	mov	r1, r7
    c09c:	e3a02004 	mov	r2, #4
    c0a0:	e2844001 	add	r4, r4, #1
    c0a4:	eb0001ad 	bl	c760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c0a8:	e3540040 	cmp	r4, #64	; 0x40
    c0ac:	e2855004 	add	r5, r5, #4
    c0b0:	1affffee 	bne	c070 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    c0b4:	e28dd008 	add	sp, sp, #8
    c0b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c0bc <CDeviceNameService::CDeviceNameService()>:
    c0bc:	e92d4070 	push	{r4, r5, r6, lr}
    c0c0:	e3015c30 	movw	r5, #7216	; 0x1c30
    c0c4:	e3405005 	movt	r5, #5
    c0c8:	e3a03000 	mov	r3, #0
    c0cc:	e1a04000 	mov	r4, r0
    c0d0:	e5803004 	str	r3, [r0, #4]
    c0d4:	e5952000 	ldr	r2, [r5]
    c0d8:	e5803000 	str	r3, [r0]
    c0dc:	e1520003 	cmp	r2, r3
    c0e0:	0a000005 	beq	c0fc <CDeviceNameService::CDeviceNameService()+0x40>
    c0e4:	e30112f0 	movw	r1, #4848	; 0x12f0
    c0e8:	e3401005 	movt	r1, #5
    c0ec:	e3010308 	movw	r0, #4872	; 0x1308
    c0f0:	e3400005 	movt	r0, #5
    c0f4:	e3a0201e 	mov	r2, #30
    c0f8:	ebffff3c 	bl	bdf0 <assertion_failed>
    c0fc:	e5854000 	str	r4, [r5]
    c100:	e1a00004 	mov	r0, r4
    c104:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c108 <CDeviceNameService::~CDeviceNameService()>:
    c108:	e5903000 	ldr	r3, [r0]
    c10c:	e92d4070 	push	{r4, r5, r6, lr}
    c110:	e1a05000 	mov	r5, r0
    c114:	e3530000 	cmp	r3, #0
    c118:	0a00000d 	beq	c154 <CDeviceNameService::~CDeviceNameService()+0x4c>
    c11c:	e3a06000 	mov	r6, #0
    c120:	e5930004 	ldr	r0, [r3, #4]
    c124:	e5934000 	ldr	r4, [r3]
    c128:	e3500000 	cmp	r0, #0
    c12c:	0a000000 	beq	c134 <CDeviceNameService::~CDeviceNameService()+0x2c>
    c130:	ebfff584 	bl	9748 <operator delete[](void*)>
    c134:	e5953000 	ldr	r3, [r5]
    c138:	e1a00003 	mov	r0, r3
    c13c:	e5836004 	str	r6, [r3, #4]
    c140:	e5836008 	str	r6, [r3, #8]
    c144:	ebfff57e 	bl	9744 <operator delete(void*)>
    c148:	e2543000 	subs	r3, r4, #0
    c14c:	e5854000 	str	r4, [r5]
    c150:	1afffff2 	bne	c120 <CDeviceNameService::~CDeviceNameService()+0x18>
    c154:	e3013c30 	movw	r3, #7216	; 0x1c30
    c158:	e3403005 	movt	r3, #5
    c15c:	e3a02000 	mov	r2, #0
    c160:	e1a00005 	mov	r0, r5
    c164:	e5832000 	str	r2, [r3]
    c168:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c16c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
    c16c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c170:	e1a08003 	mov	r8, r3
    c174:	e5903004 	ldr	r3, [r0, #4]
    c178:	e1a05000 	mov	r5, r0
    c17c:	e1a06001 	mov	r6, r1
    c180:	e3530000 	cmp	r3, #0
    c184:	e1a07002 	mov	r7, r2
    c188:	1a000017 	bne	c1ec <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x80>
    c18c:	e3a00010 	mov	r0, #16
    c190:	ebfff569 	bl	973c <operator new(unsigned int)>
    c194:	e3560000 	cmp	r6, #0
    c198:	e1a04000 	mov	r4, r0
    c19c:	0a00001b 	beq	c210 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xa4>
    c1a0:	e1a00006 	mov	r0, r6
    c1a4:	eb000cfa 	bl	f594 <strlen>
    c1a8:	e2800001 	add	r0, r0, #1
    c1ac:	ebfff563 	bl	9740 <operator new[](unsigned int)>
    c1b0:	e1a01006 	mov	r1, r6
    c1b4:	e5840004 	str	r0, [r4, #4]
    c1b8:	eb000d1a 	bl	f628 <strcpy>
    c1bc:	e3570000 	cmp	r7, #0
    c1c0:	0a00000b 	beq	c1f4 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x88>
    c1c4:	e5952004 	ldr	r2, [r5, #4]
    c1c8:	e5953000 	ldr	r3, [r5]
    c1cc:	e3520000 	cmp	r2, #0
    c1d0:	e5847008 	str	r7, [r4, #8]
    c1d4:	e584800c 	str	r8, [r4, #12]
    c1d8:	e5843000 	str	r3, [r4]
    c1dc:	e5854000 	str	r4, [r5]
    c1e0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    c1e4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    c1e8:	eafff564 	b	9780 <LeaveCritical>
    c1ec:	ebfff556 	bl	974c <EnterCritical>
    c1f0:	eaffffe5 	b	c18c <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x20>
    c1f4:	e30112f0 	movw	r1, #4848	; 0x12f0
    c1f8:	e3401005 	movt	r1, #5
    c1fc:	e3010320 	movw	r0, #4896	; 0x1320
    c200:	e3400005 	movt	r0, #5
    c204:	e3a0203f 	mov	r2, #63	; 0x3f
    c208:	ebfffef8 	bl	bdf0 <assertion_failed>
    c20c:	eaffffec 	b	c1c4 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x58>
    c210:	e30112f0 	movw	r1, #4848	; 0x12f0
    c214:	e3401005 	movt	r1, #5
    c218:	e3010314 	movw	r0, #4884	; 0x1314
    c21c:	e3400005 	movt	r0, #5
    c220:	e3a0203a 	mov	r2, #58	; 0x3a
    c224:	ebfffef1 	bl	bdf0 <assertion_failed>
    c228:	eaffffdc 	b	c1a0 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x34>

0000c22c <CDeviceNameService::GetDevice(char const*, int)>:
    c22c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c230:	e2515000 	subs	r5, r1, #0
    c234:	e1a07000 	mov	r7, r0
    c238:	e1a06002 	mov	r6, r2
    c23c:	0a000037 	beq	c320 <CDeviceNameService::GetDevice(char const*, int)+0xf4>
    c240:	e5973004 	ldr	r3, [r7, #4]
    c244:	e3530000 	cmp	r3, #0
    c248:	1a00001a 	bne	c2b8 <CDeviceNameService::GetDevice(char const*, int)+0x8c>
    c24c:	e5974000 	ldr	r4, [r7]
    c250:	e3540000 	cmp	r4, #0
    c254:	0a00001f 	beq	c2d8 <CDeviceNameService::GetDevice(char const*, int)+0xac>
    c258:	e30192f0 	movw	r9, #4848	; 0x12f0
    c25c:	e3409005 	movt	r9, #5
    c260:	e3018330 	movw	r8, #4912	; 0x1330
    c264:	e3408005 	movt	r8, #5
    c268:	ea000009 	b	c294 <CDeviceNameService::GetDevice(char const*, int)+0x68>
    c26c:	e1a00005 	mov	r0, r5
    c270:	eb000cd1 	bl	f5bc <strcmp>
    c274:	e3500000 	cmp	r0, #0
    c278:	1a000002 	bne	c288 <CDeviceNameService::GetDevice(char const*, int)+0x5c>
    c27c:	e594300c 	ldr	r3, [r4, #12]
    c280:	e1530006 	cmp	r3, r6
    c284:	0a000016 	beq	c2e4 <CDeviceNameService::GetDevice(char const*, int)+0xb8>
    c288:	e5944000 	ldr	r4, [r4]
    c28c:	e3540000 	cmp	r4, #0
    c290:	0a00000c 	beq	c2c8 <CDeviceNameService::GetDevice(char const*, int)+0x9c>
    c294:	e5941004 	ldr	r1, [r4, #4]
    c298:	e3510000 	cmp	r1, #0
    c29c:	1afffff2 	bne	c26c <CDeviceNameService::GetDevice(char const*, int)+0x40>
    c2a0:	e1a01009 	mov	r1, r9
    c2a4:	e3a02053 	mov	r2, #83	; 0x53
    c2a8:	e1a00008 	mov	r0, r8
    c2ac:	ebfffecf 	bl	bdf0 <assertion_failed>
    c2b0:	e5941004 	ldr	r1, [r4, #4]
    c2b4:	eaffffec 	b	c26c <CDeviceNameService::GetDevice(char const*, int)+0x40>
    c2b8:	ebfff523 	bl	974c <EnterCritical>
    c2bc:	e5974000 	ldr	r4, [r7]
    c2c0:	e3540000 	cmp	r4, #0
    c2c4:	1affffe3 	bne	c258 <CDeviceNameService::GetDevice(char const*, int)+0x2c>
    c2c8:	e5973004 	ldr	r3, [r7, #4]
    c2cc:	e3530000 	cmp	r3, #0
    c2d0:	0a000000 	beq	c2d8 <CDeviceNameService::GetDevice(char const*, int)+0xac>
    c2d4:	ebfff529 	bl	9780 <LeaveCritical>
    c2d8:	e3a04000 	mov	r4, #0
    c2dc:	e1a00004 	mov	r0, r4
    c2e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    c2e4:	e5973004 	ldr	r3, [r7, #4]
    c2e8:	e5944008 	ldr	r4, [r4, #8]
    c2ec:	e3530000 	cmp	r3, #0
    c2f0:	1a000008 	bne	c318 <CDeviceNameService::GetDevice(char const*, int)+0xec>
    c2f4:	e3540000 	cmp	r4, #0
    c2f8:	1afffff7 	bne	c2dc <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    c2fc:	e30112f0 	movw	r1, #4848	; 0x12f0
    c300:	e3401005 	movt	r1, #5
    c304:	e3010344 	movw	r0, #4932	; 0x1344
    c308:	e3400005 	movt	r0, #5
    c30c:	e3a0205b 	mov	r2, #91	; 0x5b
    c310:	ebfffeb6 	bl	bdf0 <assertion_failed>
    c314:	eafffff0 	b	c2dc <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    c318:	ebfff518 	bl	9780 <LeaveCritical>
    c31c:	eafffff4 	b	c2f4 <CDeviceNameService::GetDevice(char const*, int)+0xc8>
    c320:	e30112f0 	movw	r1, #4848	; 0x12f0
    c324:	e3401005 	movt	r1, #5
    c328:	e3010314 	movw	r0, #4884	; 0x1314
    c32c:	e3400005 	movt	r0, #5
    c330:	e3a0204c 	mov	r2, #76	; 0x4c
    c334:	ebfffead 	bl	bdf0 <assertion_failed>
    c338:	eaffffc0 	b	c240 <CDeviceNameService::GetDevice(char const*, int)+0x14>

0000c33c <CDeviceNameService::Get()>:
    c33c:	e92d4010 	push	{r4, lr}
    c340:	e3014c30 	movw	r4, #7216	; 0x1c30
    c344:	e3404005 	movt	r4, #5
    c348:	e5940000 	ldr	r0, [r4]
    c34c:	e3500000 	cmp	r0, #0
    c350:	18bd8010 	popne	{r4, pc}
    c354:	e3a02069 	mov	r2, #105	; 0x69
    c358:	e30112f0 	movw	r1, #4848	; 0x12f0
    c35c:	e3401005 	movt	r1, #5
    c360:	e3010354 	movw	r0, #4948	; 0x1354
    c364:	e3400005 	movt	r0, #5
    c368:	ebfffea0 	bl	bdf0 <assertion_failed>
    c36c:	e5940000 	ldr	r0, [r4]
    c370:	e8bd8010 	pop	{r4, pc}

0000c374 <CLogger::CLogger(unsigned int, CTimer*)>:
    c374:	e92d4010 	push	{r4, lr}
    c378:	e1a04000 	mov	r4, r0
    c37c:	e3a03000 	mov	r3, #0
    c380:	e3a0c001 	mov	ip, #1
    c384:	e3a00901 	mov	r0, #16384	; 0x4000
    c388:	e5843008 	str	r3, [r4, #8]
    c38c:	e584300c 	str	r3, [r4, #12]
    c390:	e5843010 	str	r3, [r4, #16]
    c394:	e5843014 	str	r3, [r4, #20]
    c398:	e8840006 	stm	r4, {r1, r2}
    c39c:	e584c018 	str	ip, [r4, #24]
    c3a0:	ebfff4e6 	bl	9740 <operator new[](unsigned int)>
    c3a4:	e3013c34 	movw	r3, #7220	; 0x1c34
    c3a8:	e3403005 	movt	r3, #5
    c3ac:	e584000c 	str	r0, [r4, #12]
    c3b0:	e1a00004 	mov	r0, r4
    c3b4:	e5834000 	str	r4, [r3]
    c3b8:	e8bd8010 	pop	{r4, pc}

0000c3bc <CLogger::~CLogger()>:
    c3bc:	e92d4010 	push	{r4, lr}
    c3c0:	e1a04000 	mov	r4, r0
    c3c4:	e590000c 	ldr	r0, [r0, #12]
    c3c8:	e3a02000 	mov	r2, #0
    c3cc:	e3013c34 	movw	r3, #7220	; 0x1c34
    c3d0:	e3403005 	movt	r3, #5
    c3d4:	e1500002 	cmp	r0, r2
    c3d8:	e5832000 	str	r2, [r3]
    c3dc:	0a000000 	beq	c3e4 <CLogger::~CLogger()+0x28>
    c3e0:	ebfff4d8 	bl	9748 <operator delete[](void*)>
    c3e4:	e1a00004 	mov	r0, r4
    c3e8:	e8bd8010 	pop	{r4, pc}

0000c3ec <CLogger::Get()>:
    c3ec:	e3013c34 	movw	r3, #7220	; 0x1c34
    c3f0:	e3403005 	movt	r3, #5
    c3f4:	e5930000 	ldr	r0, [r3]
    c3f8:	e12fff1e 	bx	lr

0000c3fc <CLogger::Write(char const*)>:
    c3fc:	e92d4070 	push	{r4, r5, r6, lr}
    c400:	e1a04000 	mov	r4, r0
    c404:	e1a00001 	mov	r0, r1
    c408:	e1a05001 	mov	r5, r1
    c40c:	eb000c60 	bl	f594 <strlen>
    c410:	e5943008 	ldr	r3, [r4, #8]
    c414:	e1a02000 	mov	r2, r0
    c418:	e1a06000 	mov	r6, r0
    c41c:	e1a01005 	mov	r1, r5
    c420:	e1a00003 	mov	r0, r3
    c424:	e5933000 	ldr	r3, [r3]
    c428:	e593300c 	ldr	r3, [r3, #12]
    c42c:	e12fff33 	blx	r3
    c430:	e5943018 	ldr	r3, [r4, #24]
    c434:	e3530000 	cmp	r3, #0
    c438:	1a000017 	bne	c49c <CLogger::Write(char const*)+0xa0>
    c43c:	e0850006 	add	r0, r5, r6
    c440:	e1550000 	cmp	r5, r0
    c444:	0a00000f 	beq	c488 <CLogger::Write(char const*)+0x8c>
    c448:	e0d530d1 	ldrsb	r3, [r5], #1
    c44c:	e353000d 	cmp	r3, #13
    c450:	0afffffa 	beq	c440 <CLogger::Write(char const*)+0x44>
    c454:	e5941010 	ldr	r1, [r4, #16]
    c458:	e594c00c 	ldr	ip, [r4, #12]
    c45c:	e7cc3001 	strb	r3, [ip, r1]
    c460:	e5943010 	ldr	r3, [r4, #16]
    c464:	e5941014 	ldr	r1, [r4, #20]
    c468:	e2833001 	add	r3, r3, #1
    c46c:	e7ed3053 	ubfx	r3, r3, #0, #14
    c470:	e1530001 	cmp	r3, r1
    c474:	e5843010 	str	r3, [r4, #16]
    c478:	1afffff0 	bne	c440 <CLogger::Write(char const*)+0x44>
    c47c:	e2433001 	sub	r3, r3, #1
    c480:	e7ed3053 	ubfx	r3, r3, #0, #14
    c484:	e5843010 	str	r3, [r4, #16]
    c488:	e5943018 	ldr	r3, [r4, #24]
    c48c:	e3530000 	cmp	r3, #0
    c490:	08bd8070 	popeq	{r4, r5, r6, pc}
    c494:	e8bd4070 	pop	{r4, r5, r6, lr}
    c498:	eafff4b8 	b	9780 <LeaveCritical>
    c49c:	ebfff4aa 	bl	974c <EnterCritical>
    c4a0:	eaffffe5 	b	c43c <CLogger::Write(char const*)+0x40>

0000c4a4 <CLogger::Read(void*, unsigned int)>:
    c4a4:	e5903018 	ldr	r3, [r0, #24]
    c4a8:	e92d4070 	push	{r4, r5, r6, lr}
    c4ac:	e1a04000 	mov	r4, r0
    c4b0:	e3530000 	cmp	r3, #0
    c4b4:	e1a05001 	mov	r5, r1
    c4b8:	e1a06002 	mov	r6, r2
    c4bc:	1a00001b 	bne	c530 <CLogger::Read(void*, unsigned int)+0x8c>
    c4c0:	e5902010 	ldr	r2, [r0, #16]
    c4c4:	e5903014 	ldr	r3, [r0, #20]
    c4c8:	e1520003 	cmp	r2, r3
    c4cc:	0a000020 	beq	c554 <CLogger::Read(void*, unsigned int)+0xb0>
    c4d0:	e1a01005 	mov	r1, r5
    c4d4:	e3a05000 	mov	r5, #0
    c4d8:	ea00000a 	b	c508 <CLogger::Read(void*, unsigned int)+0x64>
    c4dc:	e594000c 	ldr	r0, [r4, #12]
    c4e0:	e2855001 	add	r5, r5, #1
    c4e4:	e19030d3 	ldrsb	r3, [r0, r3]
    c4e8:	e4c13001 	strb	r3, [r1], #1
    c4ec:	e5943014 	ldr	r3, [r4, #20]
    c4f0:	e5940010 	ldr	r0, [r4, #16]
    c4f4:	e2833001 	add	r3, r3, #1
    c4f8:	e7ed3053 	ubfx	r3, r3, #0, #14
    c4fc:	e1530000 	cmp	r3, r0
    c500:	e5843014 	str	r3, [r4, #20]
    c504:	0a000001 	beq	c510 <CLogger::Read(void*, unsigned int)+0x6c>
    c508:	e1550006 	cmp	r5, r6
    c50c:	1afffff2 	bne	c4dc <CLogger::Read(void*, unsigned int)+0x38>
    c510:	e5943018 	ldr	r3, [r4, #24]
    c514:	e3530000 	cmp	r3, #0
    c518:	1a000001 	bne	c524 <CLogger::Read(void*, unsigned int)+0x80>
    c51c:	e1a00005 	mov	r0, r5
    c520:	e8bd8070 	pop	{r4, r5, r6, pc}
    c524:	ebfff495 	bl	9780 <LeaveCritical>
    c528:	e1a00005 	mov	r0, r5
    c52c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c530:	ebfff485 	bl	974c <EnterCritical>
    c534:	e5942010 	ldr	r2, [r4, #16]
    c538:	e5943014 	ldr	r3, [r4, #20]
    c53c:	e1520003 	cmp	r2, r3
    c540:	1affffe2 	bne	c4d0 <CLogger::Read(void*, unsigned int)+0x2c>
    c544:	e5943018 	ldr	r3, [r4, #24]
    c548:	e3530000 	cmp	r3, #0
    c54c:	0a000000 	beq	c554 <CLogger::Read(void*, unsigned int)+0xb0>
    c550:	ebfff48a 	bl	9780 <LeaveCritical>
    c554:	e3e05000 	mvn	r5, #0
    c558:	e1a00005 	mov	r0, r5
    c55c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c560 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    c560:	e590c000 	ldr	ip, [r0]
    c564:	e152000c 	cmp	r2, ip
    c568:	812fff1e 	bxhi	lr
    c56c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c570:	e1a05002 	mov	r5, r2
    c574:	e1a04000 	mov	r4, r0
    c578:	e24dd020 	sub	sp, sp, #32
    c57c:	e1a07003 	mov	r7, r3
    c580:	e1a0000d 	mov	r0, sp
    c584:	e1a06001 	mov	r6, r1
    c588:	eb00017c 	bl	cb80 <CString::CString()>
    c58c:	e3550000 	cmp	r5, #0
    c590:	0a000049 	beq	c6bc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
    c594:	e5940004 	ldr	r0, [r4, #4]
    c598:	e3500000 	cmp	r0, #0
    c59c:	0a000032 	beq	c66c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    c5a0:	ebfff563 	bl	9b34 <CTimer::GetTimeString()>
    c5a4:	e2508000 	subs	r8, r0, #0
    c5a8:	0a00000b 	beq	c5dc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
    c5ac:	eb000189 	bl	cbd8 <CString::operator char const*() const>
    c5b0:	e1a01000 	mov	r1, r0
    c5b4:	e1a0000d 	mov	r0, sp
    c5b8:	eb0001a1 	bl	cc44 <CString::Append(char const*)>
    c5bc:	e1a0000d 	mov	r0, sp
    c5c0:	e3011368 	movw	r1, #4968	; 0x1368
    c5c4:	e3401005 	movt	r1, #5
    c5c8:	eb00019d 	bl	cc44 <CString::Append(char const*)>
    c5cc:	e5983000 	ldr	r3, [r8]
    c5d0:	e1a00008 	mov	r0, r8
    c5d4:	e5933004 	ldr	r3, [r3, #4]
    c5d8:	e12fff33 	blx	r3
    c5dc:	e1a01006 	mov	r1, r6
    c5e0:	e1a0000d 	mov	r0, sp
    c5e4:	eb000196 	bl	cc44 <CString::Append(char const*)>
    c5e8:	e28d6010 	add	r6, sp, #16
    c5ec:	e1a0000d 	mov	r0, sp
    c5f0:	e301136c 	movw	r1, #4972	; 0x136c
    c5f4:	e3401005 	movt	r1, #5
    c5f8:	eb000191 	bl	cc44 <CString::Append(char const*)>
    c5fc:	e1a00006 	mov	r0, r6
    c600:	eb00015e 	bl	cb80 <CString::CString()>
    c604:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    c608:	e1a01007 	mov	r1, r7
    c60c:	e1a00006 	mov	r0, r6
    c610:	eb000292 	bl	d060 <CString::FormatV(char const*, std::__va_list)>
    c614:	e1a00006 	mov	r0, r6
    c618:	eb00016e 	bl	cbd8 <CString::operator char const*() const>
    c61c:	e1a01000 	mov	r1, r0
    c620:	e1a0000d 	mov	r0, sp
    c624:	eb000186 	bl	cc44 <CString::Append(char const*)>
    c628:	e3550000 	cmp	r5, #0
    c62c:	0a00003c 	beq	c724 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    c630:	e1a0000d 	mov	r0, sp
    c634:	e3011378 	movw	r1, #4984	; 0x1378
    c638:	e3401005 	movt	r1, #5
    c63c:	eb000180 	bl	cc44 <CString::Append(char const*)>
    c640:	e1a0000d 	mov	r0, sp
    c644:	eb000163 	bl	cbd8 <CString::operator char const*() const>
    c648:	e1a01000 	mov	r1, r0
    c64c:	e1a00004 	mov	r0, r4
    c650:	ebffff69 	bl	c3fc <CLogger::Write(char const*)>
    c654:	e1a00006 	mov	r0, r6
    c658:	eb000116 	bl	cab8 <CString::~CString()>
    c65c:	e1a0000d 	mov	r0, sp
    c660:	eb000114 	bl	cab8 <CString::~CString()>
    c664:	e28dd020 	add	sp, sp, #32
    c668:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c66c:	e1a01006 	mov	r1, r6
    c670:	e1a0000d 	mov	r0, sp
    c674:	eb000172 	bl	cc44 <CString::Append(char const*)>
    c678:	e28d6010 	add	r6, sp, #16
    c67c:	e1a0000d 	mov	r0, sp
    c680:	e301136c 	movw	r1, #4972	; 0x136c
    c684:	e3401005 	movt	r1, #5
    c688:	eb00016d 	bl	cc44 <CString::Append(char const*)>
    c68c:	e1a00006 	mov	r0, r6
    c690:	eb00013a 	bl	cb80 <CString::CString()>
    c694:	e1a01007 	mov	r1, r7
    c698:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    c69c:	e1a00006 	mov	r0, r6
    c6a0:	eb00026e 	bl	d060 <CString::FormatV(char const*, std::__va_list)>
    c6a4:	e1a00006 	mov	r0, r6
    c6a8:	eb00014a 	bl	cbd8 <CString::operator char const*() const>
    c6ac:	e1a01000 	mov	r1, r0
    c6b0:	e1a0000d 	mov	r0, sp
    c6b4:	eb000162 	bl	cc44 <CString::Append(char const*)>
    c6b8:	eaffffdc 	b	c630 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
    c6bc:	e3011360 	movw	r1, #4960	; 0x1360
    c6c0:	e3401005 	movt	r1, #5
    c6c4:	e1a0000d 	mov	r0, sp
    c6c8:	eb000148 	bl	cbf0 <CString::operator=(char const*)>
    c6cc:	e5940004 	ldr	r0, [r4, #4]
    c6d0:	e3500000 	cmp	r0, #0
    c6d4:	1affffb1 	bne	c5a0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    c6d8:	e1a01006 	mov	r1, r6
    c6dc:	e1a0000d 	mov	r0, sp
    c6e0:	eb000157 	bl	cc44 <CString::Append(char const*)>
    c6e4:	e28d6010 	add	r6, sp, #16
    c6e8:	e1a0000d 	mov	r0, sp
    c6ec:	e301136c 	movw	r1, #4972	; 0x136c
    c6f0:	e3401005 	movt	r1, #5
    c6f4:	eb000152 	bl	cc44 <CString::Append(char const*)>
    c6f8:	e1a00006 	mov	r0, r6
    c6fc:	eb00011f 	bl	cb80 <CString::CString()>
    c700:	e1a01007 	mov	r1, r7
    c704:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    c708:	e1a00006 	mov	r0, r6
    c70c:	eb000253 	bl	d060 <CString::FormatV(char const*, std::__va_list)>
    c710:	e1a00006 	mov	r0, r6
    c714:	eb00012f 	bl	cbd8 <CString::operator char const*() const>
    c718:	e1a01000 	mov	r1, r0
    c71c:	e1a0000d 	mov	r0, sp
    c720:	eb000147 	bl	cc44 <CString::Append(char const*)>
    c724:	e1a0000d 	mov	r0, sp
    c728:	e3011370 	movw	r1, #4976	; 0x1370
    c72c:	e3401005 	movt	r1, #5
    c730:	eb000143 	bl	cc44 <CString::Append(char const*)>
    c734:	e1a0000d 	mov	r0, sp
    c738:	e3011378 	movw	r1, #4984	; 0x1378
    c73c:	e3401005 	movt	r1, #5
    c740:	eb00013f 	bl	cc44 <CString::Append(char const*)>
    c744:	e1a0000d 	mov	r0, sp
    c748:	eb000122 	bl	cbd8 <CString::operator char const*() const>
    c74c:	e1a01000 	mov	r1, r0
    c750:	e1a00004 	mov	r0, r4
    c754:	ebffff28 	bl	c3fc <CLogger::Write(char const*)>
    c758:	ebfff429 	bl	9804 <halt>
    c75c:	eaffffbc 	b	c654 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

0000c760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    c760:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    c764:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    c768:	e24dd010 	sub	sp, sp, #16
    c76c:	e28dc018 	add	ip, sp, #24
    c770:	e59d3014 	ldr	r3, [sp, #20]
    c774:	e58dc000 	str	ip, [sp]
    c778:	e58dc00c 	str	ip, [sp, #12]
    c77c:	ebffff77 	bl	c560 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    c780:	e28dd010 	add	sp, sp, #16
    c784:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    c788:	e28dd004 	add	sp, sp, #4
    c78c:	e12fff1e 	bx	lr

0000c790 <CLogger::Initialize(CDevice*)>:
    c790:	e92d4010 	push	{r4, lr}
    c794:	e1a04000 	mov	r4, r0
    c798:	e24dd008 	sub	sp, sp, #8
    c79c:	e5801008 	str	r1, [r0, #8]
    c7a0:	eb00082f 	bl	e864 <CMachineInfo::Get()>
    c7a4:	eb0007bc 	bl	e69c <CMachineInfo::GetMachineName() const>
    c7a8:	e3a02003 	mov	r2, #3
    c7ac:	e58d0000 	str	r0, [sp]
    c7b0:	e301337c 	movw	r3, #4988	; 0x137c
    c7b4:	e3403005 	movt	r3, #5
    c7b8:	e1a00004 	mov	r0, r4
    c7bc:	e3011394 	movw	r1, #5012	; 0x1394
    c7c0:	e3401005 	movt	r1, #5
    c7c4:	ebffffe5 	bl	c760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c7c8:	e3a00001 	mov	r0, #1
    c7cc:	e28dd008 	add	sp, sp, #8
    c7d0:	e8bd8010 	pop	{r4, pc}

0000c7d4 <CSerialDevice::Write(void const*, unsigned int)>:
    c7d4:	e5903084 	ldr	r3, [r0, #132]	; 0x84
    c7d8:	e92d4070 	push	{r4, r5, r6, lr}
    c7dc:	e1a06000 	mov	r6, r0
    c7e0:	e3530000 	cmp	r3, #0
    c7e4:	e1a04001 	mov	r4, r1
    c7e8:	e1a05002 	mov	r5, r2
    c7ec:	1a00001d 	bne	c868 <CSerialDevice::Write(void const*, unsigned int)+0x94>
    c7f0:	e3540000 	cmp	r4, #0
    c7f4:	0a00001d 	beq	c870 <CSerialDevice::Write(void const*, unsigned int)+0x9c>
    c7f8:	e3550000 	cmp	r5, #0
    c7fc:	0a00000e 	beq	c83c <CSerialDevice::Write(void const*, unsigned int)+0x68>
    c800:	e3a02a01 	mov	r2, #4096	; 0x1000
    c804:	e3432f20 	movt	r2, #16160	; 0x3f20
    c808:	e084c005 	add	ip, r4, r5
    c80c:	e1a01004 	mov	r1, r4
    c810:	e3a0e00d 	mov	lr, #13
    c814:	e5d10000 	ldrb	r0, [r1]
    c818:	e5923018 	ldr	r3, [r2, #24]
    c81c:	e3130020 	tst	r3, #32
    c820:	1afffffc 	bne	c818 <CSerialDevice::Write(void const*, unsigned int)+0x44>
    c824:	e5820000 	str	r0, [r2]
    c828:	e4d13001 	ldrb	r3, [r1], #1
    c82c:	e353000a 	cmp	r3, #10
    c830:	0a000007 	beq	c854 <CSerialDevice::Write(void const*, unsigned int)+0x80>
    c834:	e15c0001 	cmp	ip, r1
    c838:	1afffff5 	bne	c814 <CSerialDevice::Write(void const*, unsigned int)+0x40>
    c83c:	e5963084 	ldr	r3, [r6, #132]	; 0x84
    c840:	e3530000 	cmp	r3, #0
    c844:	0a000000 	beq	c84c <CSerialDevice::Write(void const*, unsigned int)+0x78>
    c848:	ebfff3cc 	bl	9780 <LeaveCritical>
    c84c:	e1a00005 	mov	r0, r5
    c850:	e8bd8070 	pop	{r4, r5, r6, pc}
    c854:	e5923018 	ldr	r3, [r2, #24]
    c858:	e3130020 	tst	r3, #32
    c85c:	1afffffc 	bne	c854 <CSerialDevice::Write(void const*, unsigned int)+0x80>
    c860:	e582e000 	str	lr, [r2]
    c864:	eafffff2 	b	c834 <CSerialDevice::Write(void const*, unsigned int)+0x60>
    c868:	ebfff3b7 	bl	974c <EnterCritical>
    c86c:	eaffffdf 	b	c7f0 <CSerialDevice::Write(void const*, unsigned int)+0x1c>
    c870:	e30113b8 	movw	r1, #5048	; 0x13b8
    c874:	e3401005 	movt	r1, #5
    c878:	e30103c4 	movw	r0, #5060	; 0x13c4
    c87c:	e3400005 	movt	r0, #5
    c880:	e3a02090 	mov	r2, #144	; 0x90
    c884:	ebfffd59 	bl	bdf0 <assertion_failed>
    c888:	eaffffda 	b	c7f8 <CSerialDevice::Write(void const*, unsigned int)+0x24>

0000c88c <CSerialDevice::CSerialDevice()>:
    c88c:	e92d4010 	push	{r4, lr}
    c890:	e1a04000 	mov	r4, r0
    c894:	eb000d30 	bl	fd5c <CDevice::CDevice()>
    c898:	e1a00004 	mov	r0, r4
    c89c:	e59fc05c 	ldr	ip, [pc, #92]	; c900 <CSerialDevice::CSerialDevice()+0x74>
    c8a0:	e3a03000 	mov	r3, #0
    c8a4:	e3a01020 	mov	r1, #32
    c8a8:	e1a02003 	mov	r2, r3
    c8ac:	e480c004 	str	ip, [r0], #4
    c8b0:	ebfff281 	bl	92bc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    c8b4:	e3a03000 	mov	r3, #0
    c8b8:	e1a02003 	mov	r2, r3
    c8bc:	e2840024 	add	r0, r4, #36	; 0x24
    c8c0:	e3a01021 	mov	r1, #33	; 0x21
    c8c4:	ebfff27c 	bl	92bc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    c8c8:	e2840044 	add	r0, r4, #68	; 0x44
    c8cc:	e3a03000 	mov	r3, #0
    c8d0:	e3a02004 	mov	r2, #4
    c8d4:	e3a0100e 	mov	r1, #14
    c8d8:	ebfff277 	bl	92bc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    c8dc:	e2840064 	add	r0, r4, #100	; 0x64
    c8e0:	e3a03000 	mov	r3, #0
    c8e4:	e3a02004 	mov	r2, #4
    c8e8:	e3a0100f 	mov	r1, #15
    c8ec:	ebfff272 	bl	92bc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    c8f0:	e3a03001 	mov	r3, #1
    c8f4:	e5843084 	str	r3, [r4, #132]	; 0x84
    c8f8:	e1a00004 	mov	r0, r4
    c8fc:	e8bd8010 	pop	{r4, pc}
    c900:	000513a4 	.word	0x000513a4

0000c904 <CSerialDevice::Initialize(unsigned int)>:
    c904:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c908:	e1a07001 	mov	r7, r1
    c90c:	e1a05000 	mov	r5, r0
    c910:	eb0007d3 	bl	e864 <CMachineInfo::Get()>
    c914:	e3a01002 	mov	r1, #2
    c918:	eb000775 	bl	e6f4 <CMachineInfo::GetClockRate(unsigned int) const>
    c91c:	e2508000 	subs	r8, r0, #0
    c920:	0a00003a 	beq	ca10 <CSerialDevice::Initialize(unsigned int)+0x10c>
    c924:	e30c3594 	movw	r3, #50580	; 0xc594
    c928:	e340302d 	movt	r3, #45	; 0x2d
    c92c:	e2472f4b 	sub	r2, r7, #300	; 0x12c
    c930:	e1520003 	cmp	r2, r3
    c934:	8a00002e 	bhi	c9f4 <CSerialDevice::Initialize(unsigned int)+0xf0>
    c938:	e1a04207 	lsl	r4, r7, #4
    c93c:	e30f3ffe 	movw	r3, #65534	; 0xfffe
    c940:	e736f418 	udiv	r6, r8, r4
    c944:	e2462001 	sub	r2, r6, #1
    c948:	e1520003 	cmp	r2, r3
    c94c:	8a000021 	bhi	c9d8 <CSerialDevice::Initialize(unsigned int)+0xd4>
    c950:	e0618694 	mls	r1, r4, r6, r8
    c954:	e1a01181 	lsl	r1, r1, #3
    c958:	e731f711 	udiv	r1, r1, r7
    c95c:	e2014001 	and	r4, r1, #1
    c960:	e08440a1 	add	r4, r4, r1, lsr #1
    c964:	e354003f 	cmp	r4, #63	; 0x3f
    c968:	9a000005 	bls	c984 <CSerialDevice::Initialize(unsigned int)+0x80>
    c96c:	e30113b8 	movw	r1, #5048	; 0x13b8
    c970:	e3401005 	movt	r1, #5
    c974:	e3010430 	movw	r0, #5168	; 0x1430
    c978:	e3400005 	movt	r0, #5
    c97c:	e3a02076 	mov	r2, #118	; 0x76
    c980:	ebfffd1a 	bl	bdf0 <assertion_failed>
    c984:	e3a02a01 	mov	r2, #4096	; 0x1000
    c988:	e3432f20 	movt	r2, #16160	; 0x3f20
    c98c:	e3003301 	movw	r3, #769	; 0x301
    c990:	e30007ff 	movw	r0, #2047	; 0x7ff
    c994:	e3a07000 	mov	r7, #0
    c998:	e3a01060 	mov	r1, #96	; 0x60
    c99c:	e5827038 	str	r7, [r2, #56]	; 0x38
    c9a0:	e5820044 	str	r0, [r2, #68]	; 0x44
    c9a4:	e5826024 	str	r6, [r2, #36]	; 0x24
    c9a8:	e5824028 	str	r4, [r2, #40]	; 0x28
    c9ac:	e582102c 	str	r1, [r2, #44]	; 0x2c
    c9b0:	e5827034 	str	r7, [r2, #52]	; 0x34
    c9b4:	e5823030 	str	r3, [r2, #48]	; 0x30
    c9b8:	ebfffe5f 	bl	c33c <CDeviceNameService::Get()>
    c9bc:	e1a03007 	mov	r3, r7
    c9c0:	e1a02005 	mov	r2, r5
    c9c4:	e3011444 	movw	r1, #5188	; 0x1444
    c9c8:	e3401005 	movt	r1, #5
    c9cc:	ebfffde6 	bl	c16c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    c9d0:	e3a00001 	mov	r0, #1
    c9d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c9d8:	e30113b8 	movw	r1, #5048	; 0x13b8
    c9dc:	e3401005 	movt	r1, #5
    c9e0:	e301040c 	movw	r0, #5132	; 0x140c
    c9e4:	e3400005 	movt	r0, #5
    c9e8:	e3a02073 	mov	r2, #115	; 0x73
    c9ec:	ebfffcff 	bl	bdf0 <assertion_failed>
    c9f0:	eaffffd6 	b	c950 <CSerialDevice::Initialize(unsigned int)+0x4c>
    c9f4:	e30113b8 	movw	r1, #5048	; 0x13b8
    c9f8:	e3401005 	movt	r1, #5
    c9fc:	e30103e0 	movw	r0, #5088	; 0x13e0
    ca00:	e3400005 	movt	r0, #5
    ca04:	e3a02070 	mov	r2, #112	; 0x70
    ca08:	ebfffcf8 	bl	bdf0 <assertion_failed>
    ca0c:	eaffffc9 	b	c938 <CSerialDevice::Initialize(unsigned int)+0x34>
    ca10:	e30113b8 	movw	r1, #5048	; 0x13b8
    ca14:	e3401005 	movt	r1, #5
    ca18:	e30103d0 	movw	r0, #5072	; 0x13d0
    ca1c:	e3400005 	movt	r0, #5
    ca20:	e3a0206e 	mov	r2, #110	; 0x6e
    ca24:	ebfffcf1 	bl	bdf0 <assertion_failed>
    ca28:	eaffffbd 	b	c924 <CSerialDevice::Initialize(unsigned int)+0x20>

0000ca2c <CSerialDevice::Write(unsigned char)>:
    ca2c:	e3a02a01 	mov	r2, #4096	; 0x1000
    ca30:	e3432f20 	movt	r2, #16160	; 0x3f20
    ca34:	e5923018 	ldr	r3, [r2, #24]
    ca38:	e3130020 	tst	r3, #32
    ca3c:	1afffffc 	bne	ca34 <CSerialDevice::Write(unsigned char)+0x8>
    ca40:	e5821000 	str	r1, [r2]
    ca44:	e12fff1e 	bx	lr

0000ca48 <CSerialDevice::~CSerialDevice()>:
    ca48:	e3a03a01 	mov	r3, #4096	; 0x1000
    ca4c:	e3433f20 	movt	r3, #16160	; 0x3f20
    ca50:	e59f1040 	ldr	r1, [pc, #64]	; ca98 <CSerialDevice::~CSerialDevice()+0x50>
    ca54:	e3a02000 	mov	r2, #0
    ca58:	e92d4010 	push	{r4, lr}
    ca5c:	e1a04000 	mov	r4, r0
    ca60:	e4801064 	str	r1, [r0], #100	; 0x64
    ca64:	e5832038 	str	r2, [r3, #56]	; 0x38
    ca68:	e5832030 	str	r2, [r3, #48]	; 0x30
    ca6c:	ebffef13 	bl	86c0 <CGPIOPin::~CGPIOPin()>
    ca70:	e2840044 	add	r0, r4, #68	; 0x44
    ca74:	ebffef11 	bl	86c0 <CGPIOPin::~CGPIOPin()>
    ca78:	e2840024 	add	r0, r4, #36	; 0x24
    ca7c:	ebffef0f 	bl	86c0 <CGPIOPin::~CGPIOPin()>
    ca80:	e2840004 	add	r0, r4, #4
    ca84:	ebffef0d 	bl	86c0 <CGPIOPin::~CGPIOPin()>
    ca88:	e1a00004 	mov	r0, r4
    ca8c:	eb000ca7 	bl	fd30 <CDevice::~CDevice()>
    ca90:	e1a00004 	mov	r0, r4
    ca94:	e8bd8010 	pop	{r4, pc}
    ca98:	000513a4 	.word	0x000513a4

0000ca9c <CSerialDevice::~CSerialDevice()>:
    ca9c:	e92d4010 	push	{r4, lr}
    caa0:	e1a04000 	mov	r4, r0
    caa4:	ebffffe7 	bl	ca48 <CSerialDevice::~CSerialDevice()>
    caa8:	e1a00004 	mov	r0, r4
    caac:	ebfff324 	bl	9744 <operator delete(void*)>
    cab0:	e1a00004 	mov	r0, r4
    cab4:	e8bd8010 	pop	{r4, pc}

0000cab8 <CString::~CString()>:
    cab8:	e92d4010 	push	{r4, lr}
    cabc:	e1a04000 	mov	r4, r0
    cac0:	e5900004 	ldr	r0, [r0, #4]
    cac4:	e59f3014 	ldr	r3, [pc, #20]	; cae0 <CString::~CString()+0x28>
    cac8:	e3500000 	cmp	r0, #0
    cacc:	e5843000 	str	r3, [r4]
    cad0:	0a000000 	beq	cad8 <CString::~CString()+0x20>
    cad4:	ebfff31b 	bl	9748 <operator delete[](void*)>
    cad8:	e1a00004 	mov	r0, r4
    cadc:	e8bd8010 	pop	{r4, pc}
    cae0:	00051454 	.word	0x00051454

0000cae4 <CString::~CString()>:
    cae4:	e92d4010 	push	{r4, lr}
    cae8:	e1a04000 	mov	r4, r0
    caec:	e5900004 	ldr	r0, [r0, #4]
    caf0:	e59f301c 	ldr	r3, [pc, #28]	; cb14 <CString::~CString()+0x30>
    caf4:	e3500000 	cmp	r0, #0
    caf8:	e5843000 	str	r3, [r4]
    cafc:	0a000000 	beq	cb04 <CString::~CString()+0x20>
    cb00:	ebfff310 	bl	9748 <operator delete[](void*)>
    cb04:	e1a00004 	mov	r0, r4
    cb08:	ebfff30d 	bl	9744 <operator delete(void*)>
    cb0c:	e1a00004 	mov	r0, r4
    cb10:	e8bd8010 	pop	{r4, pc}
    cb14:	00051454 	.word	0x00051454

0000cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    cb18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cb1c:	e990002c 	ldmib	r0, {r2, r3, r5}
    cb20:	e0455002 	sub	r5, r5, r2
    cb24:	e0851001 	add	r1, r5, r1
    cb28:	e2812001 	add	r2, r1, #1
    cb2c:	e1520003 	cmp	r2, r3
    cb30:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    cb34:	e1a04000 	mov	r4, r0
    cb38:	e2816041 	add	r6, r1, #65	; 0x41
    cb3c:	e1a00006 	mov	r0, r6
    cb40:	ebfff2fe 	bl	9740 <operator new[](unsigned int)>
    cb44:	e3a02000 	mov	r2, #0
    cb48:	e594300c 	ldr	r3, [r4, #12]
    cb4c:	e1a07000 	mov	r7, r0
    cb50:	e5c32000 	strb	r2, [r3]
    cb54:	e5941004 	ldr	r1, [r4, #4]
    cb58:	eb000ab2 	bl	f628 <strcpy>
    cb5c:	e5940004 	ldr	r0, [r4, #4]
    cb60:	e3500000 	cmp	r0, #0
    cb64:	0a000000 	beq	cb6c <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    cb68:	ebfff2f6 	bl	9748 <operator delete[](void*)>
    cb6c:	e0875005 	add	r5, r7, r5
    cb70:	e5847004 	str	r7, [r4, #4]
    cb74:	e584500c 	str	r5, [r4, #12]
    cb78:	e5846008 	str	r6, [r4, #8]
    cb7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000cb80 <CString::CString()>:
    cb80:	e59f100c 	ldr	r1, [pc, #12]	; cb94 <CString::CString()+0x14>
    cb84:	e3a02000 	mov	r2, #0
    cb88:	e5802008 	str	r2, [r0, #8]
    cb8c:	e8800006 	stm	r0, {r1, r2}
    cb90:	e12fff1e 	bx	lr
    cb94:	00051454 	.word	0x00051454

0000cb98 <CString::CString(char const*)>:
    cb98:	e92d4070 	push	{r4, r5, r6, lr}
    cb9c:	e1a04000 	mov	r4, r0
    cba0:	e59f302c 	ldr	r3, [pc, #44]	; cbd4 <CString::CString(char const*)+0x3c>
    cba4:	e1a00001 	mov	r0, r1
    cba8:	e1a05001 	mov	r5, r1
    cbac:	e5843000 	str	r3, [r4]
    cbb0:	eb000a77 	bl	f594 <strlen>
    cbb4:	e2800001 	add	r0, r0, #1
    cbb8:	e5840008 	str	r0, [r4, #8]
    cbbc:	ebfff2df 	bl	9740 <operator new[](unsigned int)>
    cbc0:	e1a01005 	mov	r1, r5
    cbc4:	e5840004 	str	r0, [r4, #4]
    cbc8:	eb000a96 	bl	f628 <strcpy>
    cbcc:	e1a00004 	mov	r0, r4
    cbd0:	e8bd8070 	pop	{r4, r5, r6, pc}
    cbd4:	00051454 	.word	0x00051454

0000cbd8 <CString::operator char const*() const>:
    cbd8:	e5900004 	ldr	r0, [r0, #4]
    cbdc:	e300314c 	movw	r3, #332	; 0x14c
    cbe0:	e3403005 	movt	r3, #5
    cbe4:	e3500000 	cmp	r0, #0
    cbe8:	01a00003 	moveq	r0, r3
    cbec:	e12fff1e 	bx	lr

0000cbf0 <CString::operator=(char const*)>:
    cbf0:	e92d4070 	push	{r4, r5, r6, lr}
    cbf4:	e1a04000 	mov	r4, r0
    cbf8:	e5900004 	ldr	r0, [r0, #4]
    cbfc:	e1a05001 	mov	r5, r1
    cc00:	e3500000 	cmp	r0, #0
    cc04:	0a000000 	beq	cc0c <CString::operator=(char const*)+0x1c>
    cc08:	ebfff2ce 	bl	9748 <operator delete[](void*)>
    cc0c:	e1a00005 	mov	r0, r5
    cc10:	eb000a5f 	bl	f594 <strlen>
    cc14:	e2800001 	add	r0, r0, #1
    cc18:	e5840008 	str	r0, [r4, #8]
    cc1c:	ebfff2c7 	bl	9740 <operator new[](unsigned int)>
    cc20:	e1a01005 	mov	r1, r5
    cc24:	e5840004 	str	r0, [r4, #4]
    cc28:	eb000a7e 	bl	f628 <strcpy>
    cc2c:	e5940004 	ldr	r0, [r4, #4]
    cc30:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cc34 <CString::GetLength() const>:
    cc34:	e5900004 	ldr	r0, [r0, #4]
    cc38:	e3500000 	cmp	r0, #0
    cc3c:	012fff1e 	bxeq	lr
    cc40:	ea000a53 	b	f594 <strlen>

0000cc44 <CString::Append(char const*)>:
    cc44:	e92d4070 	push	{r4, r5, r6, lr}
    cc48:	e1a04000 	mov	r4, r0
    cc4c:	e5900004 	ldr	r0, [r0, #4]
    cc50:	e3a03001 	mov	r3, #1
    cc54:	e1a06001 	mov	r6, r1
    cc58:	e3500000 	cmp	r0, #0
    cc5c:	e5843008 	str	r3, [r4, #8]
    cc60:	0a000003 	beq	cc74 <CString::Append(char const*)+0x30>
    cc64:	eb000a4a 	bl	f594 <strlen>
    cc68:	e5943008 	ldr	r3, [r4, #8]
    cc6c:	e0830000 	add	r0, r3, r0
    cc70:	e5840008 	str	r0, [r4, #8]
    cc74:	e1a00006 	mov	r0, r6
    cc78:	eb000a45 	bl	f594 <strlen>
    cc7c:	e5943008 	ldr	r3, [r4, #8]
    cc80:	e0800003 	add	r0, r0, r3
    cc84:	e5840008 	str	r0, [r4, #8]
    cc88:	ebfff2ac 	bl	9740 <operator new[](unsigned int)>
    cc8c:	e5941004 	ldr	r1, [r4, #4]
    cc90:	e1a05000 	mov	r5, r0
    cc94:	e3510000 	cmp	r1, #0
    cc98:	05c01000 	strbeq	r1, [r0]
    cc9c:	0a000004 	beq	ccb4 <CString::Append(char const*)+0x70>
    cca0:	eb000a60 	bl	f628 <strcpy>
    cca4:	e5940004 	ldr	r0, [r4, #4]
    cca8:	e3500000 	cmp	r0, #0
    ccac:	0a000000 	beq	ccb4 <CString::Append(char const*)+0x70>
    ccb0:	ebfff2a4 	bl	9748 <operator delete[](void*)>
    ccb4:	e1a01006 	mov	r1, r6
    ccb8:	e1a00005 	mov	r0, r5
    ccbc:	eb000a77 	bl	f6a0 <strcat>
    ccc0:	e5845004 	str	r5, [r4, #4]
    ccc4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ccc8 <CString::Compare(char const*) const>:
    ccc8:	e5900004 	ldr	r0, [r0, #4]
    cccc:	ea000a3a 	b	f5bc <strcmp>

0000ccd0 <CString::Find(char) const>:
    ccd0:	e5902004 	ldr	r2, [r0, #4]
    ccd4:	e1d230d0 	ldrsb	r3, [r2]
    ccd8:	e3530000 	cmp	r3, #0
    ccdc:	0a000009 	beq	cd08 <CString::Find(char) const+0x38>
    cce0:	e1510003 	cmp	r1, r3
    cce4:	e3a00000 	mov	r0, #0
    cce8:	1a000002 	bne	ccf8 <CString::Find(char) const+0x28>
    ccec:	ea000007 	b	cd10 <CString::Find(char) const+0x40>
    ccf0:	e1530001 	cmp	r3, r1
    ccf4:	012fff1e 	bxeq	lr
    ccf8:	e1f230d1 	ldrsb	r3, [r2, #1]!
    ccfc:	e2800001 	add	r0, r0, #1
    cd00:	e3530000 	cmp	r3, #0
    cd04:	1afffff9 	bne	ccf0 <CString::Find(char) const+0x20>
    cd08:	e3e00000 	mvn	r0, #0
    cd0c:	e12fff1e 	bx	lr
    cd10:	e12fff1e 	bx	lr

0000cd14 <CString::PutChar(char, unsigned int)>:
    cd14:	e92d4070 	push	{r4, r5, r6, lr}
    cd18:	e2524000 	subs	r4, r2, #0
    cd1c:	08bd8070 	popeq	{r4, r5, r6, pc}
    cd20:	e1a06001 	mov	r6, r1
    cd24:	e1a01004 	mov	r1, r4
    cd28:	e1a05000 	mov	r5, r0
    cd2c:	ebffff79 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cd30:	e2443001 	sub	r3, r4, #1
    cd34:	e595200c 	ldr	r2, [r5, #12]
    cd38:	e2433001 	sub	r3, r3, #1
    cd3c:	e3730001 	cmn	r3, #1
    cd40:	e2820001 	add	r0, r2, #1
    cd44:	e585000c 	str	r0, [r5, #12]
    cd48:	e5c26000 	strb	r6, [r2]
    cd4c:	1afffff8 	bne	cd34 <CString::PutChar(char, unsigned int)+0x20>
    cd50:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cd54 <CString::PutString(char const*)>:
    cd54:	e92d4070 	push	{r4, r5, r6, lr}
    cd58:	e1a04000 	mov	r4, r0
    cd5c:	e1a00001 	mov	r0, r1
    cd60:	e1a05001 	mov	r5, r1
    cd64:	eb000a0a 	bl	f594 <strlen>
    cd68:	e2506000 	subs	r6, r0, #0
    cd6c:	0a000002 	beq	cd7c <CString::PutString(char const*)+0x28>
    cd70:	e1a01006 	mov	r1, r6
    cd74:	e1a00004 	mov	r0, r4
    cd78:	ebffff66 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cd7c:	e1a01005 	mov	r1, r5
    cd80:	e594000c 	ldr	r0, [r4, #12]
    cd84:	eb000a27 	bl	f628 <strcpy>
    cd88:	e594100c 	ldr	r1, [r4, #12]
    cd8c:	e0811006 	add	r1, r1, r6
    cd90:	e584100c 	str	r1, [r4, #12]
    cd94:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cd98 <CString::ReserveSpace(unsigned int)>:
    cd98:	e3510000 	cmp	r1, #0
    cd9c:	012fff1e 	bxeq	lr
    cda0:	eaffff5c 	b	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000cda4 <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    cda4:	e1510002 	cmp	r1, r2
    cda8:	e92d4070 	push	{r4, r5, r6, lr}
    cdac:	23a0c001 	movcs	ip, #1
    cdb0:	3a000018 	bcc	ce18 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x74>
    cdb4:	e00c0c92 	mul	ip, r2, ip
    cdb8:	e734fc11 	udiv	r4, r1, ip
    cdbc:	e1540002 	cmp	r4, r2
    cdc0:	e1a0e004 	mov	lr, r4
    cdc4:	2afffffa 	bcs	cdb4 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x10>
    cdc8:	e3530000 	cmp	r3, #0
    cdcc:	e1a05000 	mov	r5, r0
    cdd0:	13a06037 	movne	r6, #55	; 0x37
    cdd4:	03a06057 	moveq	r6, #87	; 0x57
    cdd8:	ea000001 	b	cde4 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x40>
    cddc:	e734fc11 	udiv	r4, r1, ip
    cde0:	e1a0e004 	mov	lr, r4
    cde4:	e061149c 	mls	r1, ip, r4, r1
    cde8:	e35e0009 	cmp	lr, #9
    cdec:	e73cf21c 	udiv	ip, ip, r2
    cdf0:	e086300e 	add	r3, r6, lr
    cdf4:	e28ee030 	add	lr, lr, #48	; 0x30
    cdf8:	e2855001 	add	r5, r5, #1
    cdfc:	e6af3073 	sxtb	r3, r3
    ce00:	96af307e 	sxtbls	r3, lr
    ce04:	e35c0000 	cmp	ip, #0
    ce08:	e5453001 	strb	r3, [r5, #-1]
    ce0c:	1afffff2 	bne	cddc <CString::ntoa(char*, unsigned long, unsigned int, int)+0x38>
    ce10:	e5c5c000 	strb	ip, [r5]
    ce14:	e8bd8070 	pop	{r4, r5, r6, pc}
    ce18:	e1a0e001 	mov	lr, r1
    ce1c:	e3a0c001 	mov	ip, #1
    ce20:	e1a04001 	mov	r4, r1
    ce24:	eaffffe7 	b	cdc8 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x24>

0000ce28 <CString::ftoa(char*, double, unsigned int)>:
    ce28:	eeb50bc0 	vcmpe.f64	d0, #0.0
    ce2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ce30:	eddf0b88 	vldr	d16, [pc, #544]	; d058 <CString::ftoa(char*, double, unsigned int)+0x230>
    ce34:	ed2d8b02 	vpush	{d8}
    ce38:	eeb08b40 	vmov.f64	d8, d0
    ce3c:	e24dd010 	sub	sp, sp, #16
    ce40:	e1a05000 	mov	r5, r0
    ce44:	e1a06001 	mov	r6, r1
    ce48:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    ce4c:	4eb18b40 	vnegmi.f64	d8, d0
    ce50:	43a0302d 	movmi	r3, #45	; 0x2d
    ce54:	45c03000 	strbmi	r3, [r0]
    ce58:	42807001 	addmi	r7, r0, #1
    ce5c:	51a07000 	movpl	r7, r0
    ce60:	eeb48be0 	vcmpe.f64	d8, d16
    ce64:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    ce68:	ca000068 	bgt	d010 <CString::ftoa(char*, double, unsigned int)+0x1e8>
    ce6c:	eefc7bc8 	vcvt.u32.f64	s15, d8
    ce70:	ee174a90 	vmov	r4, s15
    ce74:	e3540009 	cmp	r4, #9
    ce78:	83a03001 	movhi	r3, #1
    ce7c:	83a0100a 	movhi	r1, #10
    ce80:	9a00006a 	bls	d030 <CString::ftoa(char*, double, unsigned int)+0x208>
    ce84:	e0030391 	mul	r3, r1, r3
    ce88:	e732f314 	udiv	r2, r4, r3
    ce8c:	e3520009 	cmp	r2, #9
    ce90:	8afffffb 	bhi	ce84 <CString::ftoa(char*, double, unsigned int)+0x5c>
    ce94:	e30c8ccd 	movw	r8, #52429	; 0xcccd
    ce98:	e34c8ccc 	movt	r8, #52428	; 0xcccc
    ce9c:	e1a0c007 	mov	ip, r7
    cea0:	e1a01004 	mov	r1, r4
    cea4:	e73ef314 	udiv	lr, r4, r3
    cea8:	ea000001 	b	ceb4 <CString::ftoa(char*, double, unsigned int)+0x8c>
    ceac:	e73ef311 	udiv	lr, r1, r3
    ceb0:	e1a0200e 	mov	r2, lr
    ceb4:	e3520009 	cmp	r2, #9
    ceb8:	e2820057 	add	r0, r2, #87	; 0x57
    cebc:	e2822030 	add	r2, r2, #48	; 0x30
    cec0:	e0611e93 	mls	r1, r3, lr, r1
    cec4:	e6af0070 	sxtb	r0, r0
    cec8:	e28cc001 	add	ip, ip, #1
    cecc:	96af0072 	sxtbls	r0, r2
    ced0:	e0832398 	umull	r2, r3, r8, r3
    ced4:	e1b031a3 	lsrs	r3, r3, #3
    ced8:	e54c0001 	strb	r0, [ip, #-1]
    cedc:	1afffff2 	bne	ceac <CString::ftoa(char*, double, unsigned int)+0x84>
    cee0:	e3560000 	cmp	r6, #0
    cee4:	e5cc3000 	strb	r3, [ip]
    cee8:	1a000003 	bne	cefc <CString::ftoa(char*, double, unsigned int)+0xd4>
    ceec:	e1a00005 	mov	r0, r5
    cef0:	e28dd010 	add	sp, sp, #16
    cef4:	ecbd8b02 	vpop	{d8}
    cef8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cefc:	e1a00007 	mov	r0, r7
    cf00:	eb0009a3 	bl	f594 <strlen>
    cf04:	e3560009 	cmp	r6, #9
    cf08:	23a06009 	movcs	r6, #9
    cf0c:	e3a0302e 	mov	r3, #46	; 0x2e
    cf10:	e3560001 	cmp	r6, #1
    cf14:	e0878000 	add	r8, r7, r0
    cf18:	e7c73000 	strb	r3, [r7, r0]
    cf1c:	e2887001 	add	r7, r8, #1
    cf20:	0a000049 	beq	d04c <CString::ftoa(char*, double, unsigned int)+0x224>
    cf24:	e3a0200a 	mov	r2, #10
    cf28:	e3a03002 	mov	r3, #2
    cf2c:	e1a01002 	mov	r1, r2
    cf30:	e2833001 	add	r3, r3, #1
    cf34:	e0020291 	mul	r2, r1, r2
    cf38:	e1530006 	cmp	r3, r6
    cf3c:	9afffffb 	bls	cf30 <CString::ftoa(char*, double, unsigned int)+0x108>
    cf40:	ee072a90 	vmov	s15, r2
    cf44:	eef81b67 	vcvt.f64.u32	d17, s15
    cf48:	ee074a90 	vmov	s15, r4
    cf4c:	eef80b67 	vcvt.f64.u32	d16, s15
    cf50:	ee388b60 	vsub.f64	d8, d8, d16
    cf54:	ee288b21 	vmul.f64	d8, d8, d17
    cf58:	eefc7bc8 	vcvt.u32.f64	s15, d8
    cf5c:	ee17ca90 	vmov	ip, s15
    cf60:	e35c0009 	cmp	ip, #9
    cf64:	83a03001 	movhi	r3, #1
    cf68:	83a0000a 	movhi	r0, #10
    cf6c:	9a000032 	bls	d03c <CString::ftoa(char*, double, unsigned int)+0x214>
    cf70:	e0030390 	mul	r3, r0, r3
    cf74:	e731f31c 	udiv	r1, ip, r3
    cf78:	e3510009 	cmp	r1, #9
    cf7c:	e1a02001 	mov	r2, r1
    cf80:	8afffffa 	bhi	cf70 <CString::ftoa(char*, double, unsigned int)+0x148>
    cf84:	e30c4ccd 	movw	r4, #52429	; 0xcccd
    cf88:	e34c4ccc 	movt	r4, #52428	; 0xcccc
    cf8c:	e28de004 	add	lr, sp, #4
    cf90:	ea000001 	b	cf9c <CString::ftoa(char*, double, unsigned int)+0x174>
    cf94:	e731f31c 	udiv	r1, ip, r3
    cf98:	e1a02001 	mov	r2, r1
    cf9c:	e3520009 	cmp	r2, #9
    cfa0:	e2820057 	add	r0, r2, #87	; 0x57
    cfa4:	e2822030 	add	r2, r2, #48	; 0x30
    cfa8:	e06cc193 	mls	ip, r3, r1, ip
    cfac:	e6af1070 	sxtb	r1, r0
    cfb0:	e28ee001 	add	lr, lr, #1
    cfb4:	96af1072 	sxtbls	r1, r2
    cfb8:	e0832394 	umull	r2, r3, r4, r3
    cfbc:	e1b031a3 	lsrs	r3, r3, #3
    cfc0:	e54e1001 	strb	r1, [lr, #-1]
    cfc4:	1afffff2 	bne	cf94 <CString::ftoa(char*, double, unsigned int)+0x16c>
    cfc8:	e28d0004 	add	r0, sp, #4
    cfcc:	e5ce3000 	strb	r3, [lr]
    cfd0:	eb00096f 	bl	f594 <strlen>
    cfd4:	e0566000 	subs	r6, r6, r0
    cfd8:	0a000005 	beq	cff4 <CString::ftoa(char*, double, unsigned int)+0x1cc>
    cfdc:	e3a02030 	mov	r2, #48	; 0x30
    cfe0:	e0883006 	add	r3, r8, r6
    cfe4:	e5e82001 	strb	r2, [r8, #1]!
    cfe8:	e1580003 	cmp	r8, r3
    cfec:	1afffffc 	bne	cfe4 <CString::ftoa(char*, double, unsigned int)+0x1bc>
    cff0:	e0877006 	add	r7, r7, r6
    cff4:	e28d1004 	add	r1, sp, #4
    cff8:	e1a00007 	mov	r0, r7
    cffc:	eb000989 	bl	f628 <strcpy>
    d000:	e1a00005 	mov	r0, r5
    d004:	e28dd010 	add	sp, sp, #16
    d008:	ecbd8b02 	vpop	{d8}
    d00c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d010:	e1a00007 	mov	r0, r7
    d014:	e301145c 	movw	r1, #5212	; 0x145c
    d018:	e3401005 	movt	r1, #5
    d01c:	eb000981 	bl	f628 <strcpy>
    d020:	e1a00005 	mov	r0, r5
    d024:	e28dd010 	add	sp, sp, #16
    d028:	ecbd8b02 	vpop	{d8}
    d02c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d030:	ee172a90 	vmov	r2, s15
    d034:	e3a03001 	mov	r3, #1
    d038:	eaffff95 	b	ce94 <CString::ftoa(char*, double, unsigned int)+0x6c>
    d03c:	ee172a90 	vmov	r2, s15
    d040:	e3a03001 	mov	r3, #1
    d044:	ee171a90 	vmov	r1, s15
    d048:	eaffffcd 	b	cf84 <CString::ftoa(char*, double, unsigned int)+0x15c>
    d04c:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    d050:	eaffffbc 	b	cf48 <CString::ftoa(char*, double, unsigned int)+0x120>
    d054:	e320f000 	nop	{0}
    d058:	ffe00000 	.word	0xffe00000
    d05c:	41efffff 	.word	0x41efffff

0000d060 <CString::FormatV(char const*, std::__va_list)>:
    d060:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d064:	e1a06000 	mov	r6, r0
    d068:	e5900004 	ldr	r0, [r0, #4]
    d06c:	e24dd024 	sub	sp, sp, #36	; 0x24
    d070:	e1a05001 	mov	r5, r1
    d074:	e3500000 	cmp	r0, #0
    d078:	e1a09002 	mov	r9, r2
    d07c:	0a000000 	beq	d084 <CString::FormatV(char const*, std::__va_list)+0x24>
    d080:	ebfff1b0 	bl	9748 <operator delete[](void*)>
    d084:	e3a00040 	mov	r0, #64	; 0x40
    d088:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    d08c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    d090:	e5860008 	str	r0, [r6, #8]
    d094:	e58d3004 	str	r3, [sp, #4]
    d098:	ebfff1a8 	bl	9740 <operator new[](unsigned int)>
    d09c:	e5860004 	str	r0, [r6, #4]
    d0a0:	e586000c 	str	r0, [r6, #12]
    d0a4:	e1d540d0 	ldrsb	r4, [r5]
    d0a8:	e3540000 	cmp	r4, #0
    d0ac:	0a00008a 	beq	d2dc <CString::FormatV(char const*, std::__va_list)+0x27c>
    d0b0:	e3540025 	cmp	r4, #37	; 0x25
    d0b4:	13a01001 	movne	r1, #1
    d0b8:	11a00006 	movne	r0, r6
    d0bc:	1a000129 	bne	d568 <CString::FormatV(char const*, std::__va_list)+0x508>
    d0c0:	e1d570d1 	ldrsb	r7, [r5, #1]
    d0c4:	e3570025 	cmp	r7, #37	; 0x25
    d0c8:	0a00013c 	beq	d5c0 <CString::FormatV(char const*, std::__va_list)+0x560>
    d0cc:	e357002d 	cmp	r7, #45	; 0x2d
    d0d0:	e3a04000 	mov	r4, #0
    d0d4:	12855001 	addne	r5, r5, #1
    d0d8:	13a08000 	movne	r8, #0
    d0dc:	03a08001 	moveq	r8, #1
    d0e0:	01d570d2 	ldrsbeq	r7, [r5, #2]
    d0e4:	02855002 	addeq	r5, r5, #2
    d0e8:	e3570030 	cmp	r7, #48	; 0x30
    d0ec:	03a03001 	moveq	r3, #1
    d0f0:	13a03000 	movne	r3, #0
    d0f4:	058d3000 	streq	r3, [sp]
    d0f8:	01d570d1 	ldrsbeq	r7, [r5, #1]
    d0fc:	00855003 	addeq	r5, r5, r3
    d100:	158d3000 	strne	r3, [sp]
    d104:	e2473030 	sub	r3, r7, #48	; 0x30
    d108:	e6ef3073 	uxtb	r3, r3
    d10c:	e3530009 	cmp	r3, #9
    d110:	8a000007 	bhi	d134 <CString::FormatV(char const*, std::__va_list)+0xd4>
    d114:	e3a0200a 	mov	r2, #10
    d118:	e0247492 	mla	r4, r2, r4, r7
    d11c:	e1f570d1 	ldrsb	r7, [r5, #1]!
    d120:	e2473030 	sub	r3, r7, #48	; 0x30
    d124:	e2444030 	sub	r4, r4, #48	; 0x30
    d128:	e6ef3073 	uxtb	r3, r3
    d12c:	e3530009 	cmp	r3, #9
    d130:	9afffff8 	bls	d118 <CString::FormatV(char const*, std::__va_list)+0xb8>
    d134:	e357002e 	cmp	r7, #46	; 0x2e
    d138:	0a000110 	beq	d580 <CString::FormatV(char const*, std::__va_list)+0x520>
    d13c:	e1d500d0 	ldrsb	r0, [r5]
    d140:	e3a01006 	mov	r1, #6
    d144:	e350006c 	cmp	r0, #108	; 0x6c
    d148:	03a02001 	moveq	r2, #1
    d14c:	01d500d1 	ldrsbeq	r0, [r5, #1]
    d150:	00855002 	addeq	r5, r5, r2
    d154:	e2403058 	sub	r3, r0, #88	; 0x58
    d158:	e3530020 	cmp	r3, #32
    d15c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    d160:	ea0000f5 	b	d53c <CString::FormatV(char const*, std::__va_list)+0x4dc>
    d164:	0000d4c4 	.word	0x0000d4c4
    d168:	0000d53c 	.word	0x0000d53c
    d16c:	0000d53c 	.word	0x0000d53c
    d170:	0000d53c 	.word	0x0000d53c
    d174:	0000d53c 	.word	0x0000d53c
    d178:	0000d53c 	.word	0x0000d53c
    d17c:	0000d53c 	.word	0x0000d53c
    d180:	0000d53c 	.word	0x0000d53c
    d184:	0000d53c 	.word	0x0000d53c
    d188:	0000d53c 	.word	0x0000d53c
    d18c:	0000d53c 	.word	0x0000d53c
    d190:	0000d458 	.word	0x0000d458
    d194:	0000d35c 	.word	0x0000d35c
    d198:	0000d53c 	.word	0x0000d53c
    d19c:	0000d2ec 	.word	0x0000d2ec
    d1a0:	0000d53c 	.word	0x0000d53c
    d1a4:	0000d53c 	.word	0x0000d53c
    d1a8:	0000d53c 	.word	0x0000d53c
    d1ac:	0000d53c 	.word	0x0000d53c
    d1b0:	0000d53c 	.word	0x0000d53c
    d1b4:	0000d53c 	.word	0x0000d53c
    d1b8:	0000d53c 	.word	0x0000d53c
    d1bc:	0000d53c 	.word	0x0000d53c
    d1c0:	0000d1e8 	.word	0x0000d1e8
    d1c4:	0000d53c 	.word	0x0000d53c
    d1c8:	0000d53c 	.word	0x0000d53c
    d1cc:	0000d53c 	.word	0x0000d53c
    d1d0:	0000d4d4 	.word	0x0000d4d4
    d1d4:	0000d53c 	.word	0x0000d53c
    d1d8:	0000d4cc 	.word	0x0000d4cc
    d1dc:	0000d53c 	.word	0x0000d53c
    d1e0:	0000d53c 	.word	0x0000d53c
    d1e4:	0000d4c4 	.word	0x0000d4c4
    d1e8:	e3a0a008 	mov	sl, #8
    d1ec:	e599c000 	ldr	ip, [r9]
    d1f0:	e2899004 	add	r9, r9, #4
    d1f4:	e15c000a 	cmp	ip, sl
    d1f8:	23a03001 	movcs	r3, #1
    d1fc:	3a00016e 	bcc	d7bc <CString::FormatV(char const*, std::__va_list)+0x75c>
    d200:	e003039a 	mul	r3, sl, r3
    d204:	e731f31c 	udiv	r1, ip, r3
    d208:	e15a0001 	cmp	sl, r1
    d20c:	e1a02001 	mov	r2, r1
    d210:	9afffffa 	bls	d200 <CString::FormatV(char const*, std::__va_list)+0x1a0>
    d214:	e3500058 	cmp	r0, #88	; 0x58
    d218:	e28d7008 	add	r7, sp, #8
    d21c:	13a0b057 	movne	fp, #87	; 0x57
    d220:	03a0b037 	moveq	fp, #55	; 0x37
    d224:	e1a0e007 	mov	lr, r7
    d228:	ea000001 	b	d234 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    d22c:	e731f31c 	udiv	r1, ip, r3
    d230:	e1a02001 	mov	r2, r1
    d234:	e06cc193 	mls	ip, r3, r1, ip
    d238:	e3520009 	cmp	r2, #9
    d23c:	e733fa13 	udiv	r3, r3, sl
    d240:	e08b0002 	add	r0, fp, r2
    d244:	e2822030 	add	r2, r2, #48	; 0x30
    d248:	e28ee001 	add	lr, lr, #1
    d24c:	e6af0070 	sxtb	r0, r0
    d250:	96af0072 	sxtbls	r0, r2
    d254:	e3530000 	cmp	r3, #0
    d258:	e54e0001 	strb	r0, [lr, #-1]
    d25c:	1afffff2 	bne	d22c <CString::FormatV(char const*, std::__va_list)+0x1cc>
    d260:	e1a00007 	mov	r0, r7
    d264:	e5ce3000 	strb	r3, [lr]
    d268:	eb0008c9 	bl	f594 <strlen>
    d26c:	e3580000 	cmp	r8, #0
    d270:	e1a0a000 	mov	sl, r0
    d274:	1a0000f4 	bne	d64c <CString::FormatV(char const*, std::__va_list)+0x5ec>
    d278:	e1500004 	cmp	r0, r4
    d27c:	2a00000f 	bcs	d2c0 <CString::FormatV(char const*, std::__va_list)+0x260>
    d280:	e59d3000 	ldr	r3, [sp]
    d284:	e0444000 	sub	r4, r4, r0
    d288:	e1a01004 	mov	r1, r4
    d28c:	e1a00006 	mov	r0, r6
    d290:	e3530000 	cmp	r3, #0
    d294:	03a08020 	moveq	r8, #32
    d298:	13a08030 	movne	r8, #48	; 0x30
    d29c:	ebfffe1d 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d2a0:	e2443001 	sub	r3, r4, #1
    d2a4:	e596200c 	ldr	r2, [r6, #12]
    d2a8:	e2433001 	sub	r3, r3, #1
    d2ac:	e3730001 	cmn	r3, #1
    d2b0:	e2821001 	add	r1, r2, #1
    d2b4:	e586100c 	str	r1, [r6, #12]
    d2b8:	e5c28000 	strb	r8, [r2]
    d2bc:	1afffff8 	bne	d2a4 <CString::FormatV(char const*, std::__va_list)+0x244>
    d2c0:	e1a01007 	mov	r1, r7
    d2c4:	e1a00006 	mov	r0, r6
    d2c8:	ebfffea1 	bl	cd54 <CString::PutString(char const*)>
    d2cc:	e2855001 	add	r5, r5, #1
    d2d0:	e1d540d0 	ldrsb	r4, [r5]
    d2d4:	e3540000 	cmp	r4, #0
    d2d8:	1affff74 	bne	d0b0 <CString::FormatV(char const*, std::__va_list)+0x50>
    d2dc:	e596300c 	ldr	r3, [r6, #12]
    d2e0:	e5c34000 	strb	r4, [r3]
    d2e4:	e28dd024 	add	sp, sp, #36	; 0x24
    d2e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2ec:	e2893007 	add	r3, r9, #7
    d2f0:	e28d7008 	add	r7, sp, #8
    d2f4:	e3c33007 	bic	r3, r3, #7
    d2f8:	e1a00007 	mov	r0, r7
    d2fc:	e2839008 	add	r9, r3, #8
    d300:	ed930b00 	vldr	d0, [r3]
    d304:	ebfffec7 	bl	ce28 <CString::ftoa(char*, double, unsigned int)>
    d308:	e1a00007 	mov	r0, r7
    d30c:	eb0008a0 	bl	f594 <strlen>
    d310:	e3580000 	cmp	r8, #0
    d314:	e1a0a000 	mov	sl, r0
    d318:	1a000108 	bne	d740 <CString::FormatV(char const*, std::__va_list)+0x6e0>
    d31c:	e1500004 	cmp	r0, r4
    d320:	2affffe6 	bcs	d2c0 <CString::FormatV(char const*, std::__va_list)+0x260>
    d324:	e0444000 	sub	r4, r4, r0
    d328:	e1a00006 	mov	r0, r6
    d32c:	e1a01004 	mov	r1, r4
    d330:	ebfffdf8 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d334:	e2443001 	sub	r3, r4, #1
    d338:	e3a00020 	mov	r0, #32
    d33c:	e596200c 	ldr	r2, [r6, #12]
    d340:	e2433001 	sub	r3, r3, #1
    d344:	e3730001 	cmn	r3, #1
    d348:	e2821001 	add	r1, r2, #1
    d34c:	e586100c 	str	r1, [r6, #12]
    d350:	e5c20000 	strb	r0, [r2]
    d354:	1afffff8 	bne	d33c <CString::FormatV(char const*, std::__va_list)+0x2dc>
    d358:	eaffffd8 	b	d2c0 <CString::FormatV(char const*, std::__va_list)+0x260>
    d35c:	e5990000 	ldr	r0, [r9]
    d360:	e2899004 	add	r9, r9, #4
    d364:	e3500000 	cmp	r0, #0
    d368:	b2600000 	rsblt	r0, r0, #0
    d36c:	b3a0b001 	movlt	fp, #1
    d370:	a3a0b000 	movge	fp, #0
    d374:	e3500009 	cmp	r0, #9
    d378:	e1a0a00b 	mov	sl, fp
    d37c:	e1a0e000 	mov	lr, r0
    d380:	c3a03001 	movgt	r3, #1
    d384:	c3a0100a 	movgt	r1, #10
    d388:	da000108 	ble	d7b0 <CString::FormatV(char const*, std::__va_list)+0x750>
    d38c:	e0030391 	mul	r3, r1, r3
    d390:	e732f310 	udiv	r2, r0, r3
    d394:	e3520009 	cmp	r2, #9
    d398:	8afffffb 	bhi	d38c <CString::FormatV(char const*, std::__va_list)+0x32c>
    d39c:	e28d7008 	add	r7, sp, #8
    d3a0:	e58d8000 	str	r8, [sp]
    d3a4:	e730f310 	udiv	r0, r0, r3
    d3a8:	e1a0c007 	mov	ip, r7
    d3ac:	e59d8004 	ldr	r8, [sp, #4]
    d3b0:	ea000001 	b	d3bc <CString::FormatV(char const*, std::__va_list)+0x35c>
    d3b4:	e730f31e 	udiv	r0, lr, r3
    d3b8:	e1a02000 	mov	r2, r0
    d3bc:	e3520009 	cmp	r2, #9
    d3c0:	e2821057 	add	r1, r2, #87	; 0x57
    d3c4:	e2822030 	add	r2, r2, #48	; 0x30
    d3c8:	e06ee093 	mls	lr, r3, r0, lr
    d3cc:	e6af1071 	sxtb	r1, r1
    d3d0:	e28cc001 	add	ip, ip, #1
    d3d4:	96af1072 	sxtbls	r1, r2
    d3d8:	e0832398 	umull	r2, r3, r8, r3
    d3dc:	e1b031a3 	lsrs	r3, r3, #3
    d3e0:	e54c1001 	strb	r1, [ip, #-1]
    d3e4:	1afffff2 	bne	d3b4 <CString::FormatV(char const*, std::__va_list)+0x354>
    d3e8:	e59d8000 	ldr	r8, [sp]
    d3ec:	e1a00007 	mov	r0, r7
    d3f0:	e5cc3000 	strb	r3, [ip]
    d3f4:	eb000866 	bl	f594 <strlen>
    d3f8:	e3580000 	cmp	r8, #0
    d3fc:	e080b00b 	add	fp, r0, fp
    d400:	0a000077 	beq	d5e4 <CString::FormatV(char const*, std::__va_list)+0x584>
    d404:	e35a0000 	cmp	sl, #0
    d408:	1a0000df 	bne	d78c <CString::FormatV(char const*, std::__va_list)+0x72c>
    d40c:	e1a01007 	mov	r1, r7
    d410:	e1a00006 	mov	r0, r6
    d414:	ebfffe4e 	bl	cd54 <CString::PutString(char const*)>
    d418:	e15b0004 	cmp	fp, r4
    d41c:	2affffaa 	bcs	d2cc <CString::FormatV(char const*, std::__va_list)+0x26c>
    d420:	e044b00b 	sub	fp, r4, fp
    d424:	e1a00006 	mov	r0, r6
    d428:	e1a0100b 	mov	r1, fp
    d42c:	ebfffdb9 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d430:	e24b3001 	sub	r3, fp, #1
    d434:	e3a00020 	mov	r0, #32
    d438:	e596200c 	ldr	r2, [r6, #12]
    d43c:	e2433001 	sub	r3, r3, #1
    d440:	e3730001 	cmn	r3, #1
    d444:	e2821001 	add	r1, r2, #1
    d448:	e586100c 	str	r1, [r6, #12]
    d44c:	e5c20000 	strb	r0, [r2]
    d450:	1afffff8 	bne	d438 <CString::FormatV(char const*, std::__va_list)+0x3d8>
    d454:	eaffff9c 	b	d2cc <CString::FormatV(char const*, std::__va_list)+0x26c>
    d458:	e3580000 	cmp	r8, #0
    d45c:	e2897004 	add	r7, r9, #4
    d460:	e1d980d0 	ldrsb	r8, [r9]
    d464:	1a00008b 	bne	d698 <CString::FormatV(char const*, std::__va_list)+0x638>
    d468:	e3540001 	cmp	r4, #1
    d46c:	9a00000b 	bls	d4a0 <CString::FormatV(char const*, std::__va_list)+0x440>
    d470:	e2441001 	sub	r1, r4, #1
    d474:	e1a00006 	mov	r0, r6
    d478:	ebfffda6 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d47c:	e2444002 	sub	r4, r4, #2
    d480:	e3a01020 	mov	r1, #32
    d484:	e596300c 	ldr	r3, [r6, #12]
    d488:	e2444001 	sub	r4, r4, #1
    d48c:	e3740001 	cmn	r4, #1
    d490:	e2832001 	add	r2, r3, #1
    d494:	e586200c 	str	r2, [r6, #12]
    d498:	e5c31000 	strb	r1, [r3]
    d49c:	1afffff8 	bne	d484 <CString::FormatV(char const*, std::__va_list)+0x424>
    d4a0:	e3a01001 	mov	r1, #1
    d4a4:	e1a00006 	mov	r0, r6
    d4a8:	ebfffd9a 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d4ac:	e596300c 	ldr	r3, [r6, #12]
    d4b0:	e1a09007 	mov	r9, r7
    d4b4:	e2832001 	add	r2, r3, #1
    d4b8:	e586200c 	str	r2, [r6, #12]
    d4bc:	e5c38000 	strb	r8, [r3]
    d4c0:	eaffff81 	b	d2cc <CString::FormatV(char const*, std::__va_list)+0x26c>
    d4c4:	e3a0a010 	mov	sl, #16
    d4c8:	eaffff47 	b	d1ec <CString::FormatV(char const*, std::__va_list)+0x18c>
    d4cc:	e3a0a00a 	mov	sl, #10
    d4d0:	eaffff45 	b	d1ec <CString::FormatV(char const*, std::__va_list)+0x18c>
    d4d4:	e599a000 	ldr	sl, [r9]
    d4d8:	e2899004 	add	r9, r9, #4
    d4dc:	e1a0000a 	mov	r0, sl
    d4e0:	eb00082b 	bl	f594 <strlen>
    d4e4:	e3580000 	cmp	r8, #0
    d4e8:	e1a07000 	mov	r7, r0
    d4ec:	1a000080 	bne	d6f4 <CString::FormatV(char const*, std::__va_list)+0x694>
    d4f0:	e1500004 	cmp	r0, r4
    d4f4:	2a00000c 	bcs	d52c <CString::FormatV(char const*, std::__va_list)+0x4cc>
    d4f8:	e0444000 	sub	r4, r4, r0
    d4fc:	e1a00006 	mov	r0, r6
    d500:	e1a01004 	mov	r1, r4
    d504:	ebfffd83 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d508:	e2443001 	sub	r3, r4, #1
    d50c:	e3a00020 	mov	r0, #32
    d510:	e596200c 	ldr	r2, [r6, #12]
    d514:	e2433001 	sub	r3, r3, #1
    d518:	e3730001 	cmn	r3, #1
    d51c:	e2821001 	add	r1, r2, #1
    d520:	e586100c 	str	r1, [r6, #12]
    d524:	e5c20000 	strb	r0, [r2]
    d528:	1afffff8 	bne	d510 <CString::FormatV(char const*, std::__va_list)+0x4b0>
    d52c:	e1a0100a 	mov	r1, sl
    d530:	e1a00006 	mov	r0, r6
    d534:	ebfffe06 	bl	cd54 <CString::PutString(char const*)>
    d538:	eaffff63 	b	d2cc <CString::FormatV(char const*, std::__va_list)+0x26c>
    d53c:	e3a01001 	mov	r1, #1
    d540:	e1a00006 	mov	r0, r6
    d544:	ebfffd73 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d548:	e596300c 	ldr	r3, [r6, #12]
    d54c:	e3a01001 	mov	r1, #1
    d550:	e3a02025 	mov	r2, #37	; 0x25
    d554:	e0830001 	add	r0, r3, r1
    d558:	e586000c 	str	r0, [r6, #12]
    d55c:	e1a00006 	mov	r0, r6
    d560:	e5c32000 	strb	r2, [r3]
    d564:	e1d540d0 	ldrsb	r4, [r5]
    d568:	ebfffd6a 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d56c:	e596300c 	ldr	r3, [r6, #12]
    d570:	e2832001 	add	r2, r3, #1
    d574:	e586200c 	str	r2, [r6, #12]
    d578:	e5c34000 	strb	r4, [r3]
    d57c:	eaffff52 	b	d2cc <CString::FormatV(char const*, std::__va_list)+0x26c>
    d580:	e1d500d1 	ldrsb	r0, [r5, #1]
    d584:	e3a01000 	mov	r1, #0
    d588:	e2855001 	add	r5, r5, #1
    d58c:	e2403030 	sub	r3, r0, #48	; 0x30
    d590:	e6ef3073 	uxtb	r3, r3
    d594:	e3530009 	cmp	r3, #9
    d598:	8afffee9 	bhi	d144 <CString::FormatV(char const*, std::__va_list)+0xe4>
    d59c:	e3a0200a 	mov	r2, #10
    d5a0:	e0210192 	mla	r1, r2, r1, r0
    d5a4:	e1f500d1 	ldrsb	r0, [r5, #1]!
    d5a8:	e2403030 	sub	r3, r0, #48	; 0x30
    d5ac:	e2411030 	sub	r1, r1, #48	; 0x30
    d5b0:	e6ef3073 	uxtb	r3, r3
    d5b4:	e3530009 	cmp	r3, #9
    d5b8:	9afffff8 	bls	d5a0 <CString::FormatV(char const*, std::__va_list)+0x540>
    d5bc:	eafffee0 	b	d144 <CString::FormatV(char const*, std::__va_list)+0xe4>
    d5c0:	e3a01001 	mov	r1, #1
    d5c4:	e1a00006 	mov	r0, r6
    d5c8:	ebfffd52 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d5cc:	e596300c 	ldr	r3, [r6, #12]
    d5d0:	e2855002 	add	r5, r5, #2
    d5d4:	e2832001 	add	r2, r3, #1
    d5d8:	e586200c 	str	r2, [r6, #12]
    d5dc:	e5c37000 	strb	r7, [r3]
    d5e0:	eafffeaf 	b	d0a4 <CString::FormatV(char const*, std::__va_list)+0x44>
    d5e4:	e15b0004 	cmp	fp, r4
    d5e8:	2a00000c 	bcs	d620 <CString::FormatV(char const*, std::__va_list)+0x5c0>
    d5ec:	e044b00b 	sub	fp, r4, fp
    d5f0:	e1a00006 	mov	r0, r6
    d5f4:	e1a0100b 	mov	r1, fp
    d5f8:	ebfffd46 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d5fc:	e24b3001 	sub	r3, fp, #1
    d600:	e3a00020 	mov	r0, #32
    d604:	e596200c 	ldr	r2, [r6, #12]
    d608:	e2433001 	sub	r3, r3, #1
    d60c:	e3730001 	cmn	r3, #1
    d610:	e2821001 	add	r1, r2, #1
    d614:	e586100c 	str	r1, [r6, #12]
    d618:	e5c20000 	strb	r0, [r2]
    d61c:	1afffff8 	bne	d604 <CString::FormatV(char const*, std::__va_list)+0x5a4>
    d620:	e35a0000 	cmp	sl, #0
    d624:	0affff25 	beq	d2c0 <CString::FormatV(char const*, std::__va_list)+0x260>
    d628:	e3a01001 	mov	r1, #1
    d62c:	e1a00006 	mov	r0, r6
    d630:	ebfffd38 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d634:	e596300c 	ldr	r3, [r6, #12]
    d638:	e3a0202d 	mov	r2, #45	; 0x2d
    d63c:	e2831001 	add	r1, r3, #1
    d640:	e586100c 	str	r1, [r6, #12]
    d644:	e5c32000 	strb	r2, [r3]
    d648:	eaffff1c 	b	d2c0 <CString::FormatV(char const*, std::__va_list)+0x260>
    d64c:	e1a01007 	mov	r1, r7
    d650:	e1a00006 	mov	r0, r6
    d654:	ebfffdbe 	bl	cd54 <CString::PutString(char const*)>
    d658:	e15a0004 	cmp	sl, r4
    d65c:	2affff1a 	bcs	d2cc <CString::FormatV(char const*, std::__va_list)+0x26c>
    d660:	e044400a 	sub	r4, r4, sl
    d664:	e1a00006 	mov	r0, r6
    d668:	e1a01004 	mov	r1, r4
    d66c:	ebfffd29 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d670:	e2443001 	sub	r3, r4, #1
    d674:	e3a00020 	mov	r0, #32
    d678:	e596200c 	ldr	r2, [r6, #12]
    d67c:	e2433001 	sub	r3, r3, #1
    d680:	e3730001 	cmn	r3, #1
    d684:	e2821001 	add	r1, r2, #1
    d688:	e586100c 	str	r1, [r6, #12]
    d68c:	e5c20000 	strb	r0, [r2]
    d690:	1afffff8 	bne	d678 <CString::FormatV(char const*, std::__va_list)+0x618>
    d694:	eaffff0c 	b	d2cc <CString::FormatV(char const*, std::__va_list)+0x26c>
    d698:	e3a01001 	mov	r1, #1
    d69c:	e1a00006 	mov	r0, r6
    d6a0:	ebfffd1c 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d6a4:	e596300c 	ldr	r3, [r6, #12]
    d6a8:	e3540001 	cmp	r4, #1
    d6ac:	e2832001 	add	r2, r3, #1
    d6b0:	e586200c 	str	r2, [r6, #12]
    d6b4:	e5c38000 	strb	r8, [r3]
    d6b8:	9a00000b 	bls	d6ec <CString::FormatV(char const*, std::__va_list)+0x68c>
    d6bc:	e2441001 	sub	r1, r4, #1
    d6c0:	e1a00006 	mov	r0, r6
    d6c4:	ebfffd13 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d6c8:	e2444002 	sub	r4, r4, #2
    d6cc:	e3a01020 	mov	r1, #32
    d6d0:	e596300c 	ldr	r3, [r6, #12]
    d6d4:	e2444001 	sub	r4, r4, #1
    d6d8:	e3740001 	cmn	r4, #1
    d6dc:	e2832001 	add	r2, r3, #1
    d6e0:	e586200c 	str	r2, [r6, #12]
    d6e4:	e5c31000 	strb	r1, [r3]
    d6e8:	1afffff8 	bne	d6d0 <CString::FormatV(char const*, std::__va_list)+0x670>
    d6ec:	e1a09007 	mov	r9, r7
    d6f0:	eafffef5 	b	d2cc <CString::FormatV(char const*, std::__va_list)+0x26c>
    d6f4:	e1a0100a 	mov	r1, sl
    d6f8:	e1a00006 	mov	r0, r6
    d6fc:	ebfffd94 	bl	cd54 <CString::PutString(char const*)>
    d700:	e1570004 	cmp	r7, r4
    d704:	2afffef0 	bcs	d2cc <CString::FormatV(char const*, std::__va_list)+0x26c>
    d708:	e0444007 	sub	r4, r4, r7
    d70c:	e1a00006 	mov	r0, r6
    d710:	e1a01004 	mov	r1, r4
    d714:	ebfffcff 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d718:	e2443001 	sub	r3, r4, #1
    d71c:	e3a00020 	mov	r0, #32
    d720:	e596200c 	ldr	r2, [r6, #12]
    d724:	e2433001 	sub	r3, r3, #1
    d728:	e3730001 	cmn	r3, #1
    d72c:	e2821001 	add	r1, r2, #1
    d730:	e586100c 	str	r1, [r6, #12]
    d734:	e5c20000 	strb	r0, [r2]
    d738:	1afffff8 	bne	d720 <CString::FormatV(char const*, std::__va_list)+0x6c0>
    d73c:	eafffee2 	b	d2cc <CString::FormatV(char const*, std::__va_list)+0x26c>
    d740:	e1a01007 	mov	r1, r7
    d744:	e1a00006 	mov	r0, r6
    d748:	ebfffd81 	bl	cd54 <CString::PutString(char const*)>
    d74c:	e15a0004 	cmp	sl, r4
    d750:	2afffedd 	bcs	d2cc <CString::FormatV(char const*, std::__va_list)+0x26c>
    d754:	e044400a 	sub	r4, r4, sl
    d758:	e1a00006 	mov	r0, r6
    d75c:	e1a01004 	mov	r1, r4
    d760:	ebfffcec 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d764:	e2443001 	sub	r3, r4, #1
    d768:	e3a00020 	mov	r0, #32
    d76c:	e596200c 	ldr	r2, [r6, #12]
    d770:	e2433001 	sub	r3, r3, #1
    d774:	e3730001 	cmn	r3, #1
    d778:	e2821001 	add	r1, r2, #1
    d77c:	e586100c 	str	r1, [r6, #12]
    d780:	e5c20000 	strb	r0, [r2]
    d784:	1afffff8 	bne	d76c <CString::FormatV(char const*, std::__va_list)+0x70c>
    d788:	eafffecf 	b	d2cc <CString::FormatV(char const*, std::__va_list)+0x26c>
    d78c:	e3a01001 	mov	r1, #1
    d790:	e1a00006 	mov	r0, r6
    d794:	ebfffcdf 	bl	cb18 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d798:	e596300c 	ldr	r3, [r6, #12]
    d79c:	e3a0202d 	mov	r2, #45	; 0x2d
    d7a0:	e2831001 	add	r1, r3, #1
    d7a4:	e586100c 	str	r1, [r6, #12]
    d7a8:	e5c32000 	strb	r2, [r3]
    d7ac:	eaffff16 	b	d40c <CString::FormatV(char const*, std::__va_list)+0x3ac>
    d7b0:	e1a02000 	mov	r2, r0
    d7b4:	e3a03001 	mov	r3, #1
    d7b8:	eafffef7 	b	d39c <CString::FormatV(char const*, std::__va_list)+0x33c>
    d7bc:	e1a0200c 	mov	r2, ip
    d7c0:	e3a03001 	mov	r3, #1
    d7c4:	e1a0100c 	mov	r1, ip
    d7c8:	eafffe91 	b	d214 <CString::FormatV(char const*, std::__va_list)+0x1b4>

0000d7cc <CString::Format(char const*, ...)>:
    d7cc:	e92d000e 	push	{r1, r2, r3}
    d7d0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d7d4:	e24dd008 	sub	sp, sp, #8
    d7d8:	e28d3010 	add	r3, sp, #16
    d7dc:	e1a02003 	mov	r2, r3
    d7e0:	e59d100c 	ldr	r1, [sp, #12]
    d7e4:	e58d3004 	str	r3, [sp, #4]
    d7e8:	ebfffe1c 	bl	d060 <CString::FormatV(char const*, std::__va_list)>
    d7ec:	e28dd008 	add	sp, sp, #8
    d7f0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    d7f4:	e28dd00c 	add	sp, sp, #12
    d7f8:	e12fff1e 	bx	lr
    d7fc:	00000000 	andeq	r0, r0, r0

0000d800 <DelayLoop>:
    d800:	e2500001 	subs	r0, r0, #1
    d804:	8afffffd 	bhi	d800 <DelayLoop>
    d808:	e1a0f00e 	mov	pc, lr

0000d80c <CExceptionHandler::CExceptionHandler()>:
    d80c:	e92d4070 	push	{r4, r5, r6, lr}
    d810:	e3015c38 	movw	r5, #7224	; 0x1c38
    d814:	e3405005 	movt	r5, #5
    d818:	e1a04000 	mov	r4, r0
    d81c:	e5953000 	ldr	r3, [r5]
    d820:	e3530000 	cmp	r3, #0
    d824:	0a000005 	beq	d840 <CExceptionHandler::CExceptionHandler()+0x34>
    d828:	e3011470 	movw	r1, #5232	; 0x1470
    d82c:	e3401005 	movt	r1, #5
    d830:	e3000208 	movw	r0, #520	; 0x208
    d834:	e3400005 	movt	r0, #5
    d838:	e3a0202e 	mov	r2, #46	; 0x2e
    d83c:	ebfff96b 	bl	bdf0 <assertion_failed>
    d840:	e59f1048 	ldr	r1, [pc, #72]	; d890 <CExceptionHandler::CExceptionHandler()+0x84>
    d844:	e3a00000 	mov	r0, #0
    d848:	e59f2044 	ldr	r2, [pc, #68]	; d894 <CExceptionHandler::CExceptionHandler()+0x88>
    d84c:	e59f3044 	ldr	r3, [pc, #68]	; d898 <CExceptionHandler::CExceptionHandler()+0x8c>
    d850:	e1a01141 	asr	r1, r1, #2
    d854:	e5854000 	str	r4, [r5]
    d858:	e1a02142 	asr	r2, r2, #2
    d85c:	e2411002 	sub	r1, r1, #2
    d860:	e1a03143 	asr	r3, r3, #2
    d864:	e2422002 	sub	r2, r2, #2
    d868:	e2433002 	sub	r3, r3, #2
    d86c:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    d870:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    d874:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    d878:	e5801004 	str	r1, [r0, #4]
    d87c:	e580200c 	str	r2, [r0, #12]
    d880:	e5803010 	str	r3, [r0, #16]
    d884:	ebffefd5 	bl	97e0 <SyncDataAndInstructionCache>
    d888:	e1a00004 	mov	r0, r4
    d88c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d890:	0000da60 	.word	0x0000da60
    d894:	0000da98 	.word	0x0000da98
    d898:	0000dad4 	.word	0x0000dad4

0000d89c <CExceptionHandler::~CExceptionHandler()>:
    d89c:	e3013c38 	movw	r3, #7224	; 0x1c38
    d8a0:	e3403005 	movt	r3, #5
    d8a4:	e3a02000 	mov	r2, #0
    d8a8:	e5832000 	str	r2, [r3]
    d8ac:	e12fff1e 	bx	lr

0000d8b0 <CExceptionHandler::Throw(unsigned int)>:
    d8b0:	e92d4010 	push	{r4, lr}
    d8b4:	e1a04001 	mov	r4, r1
    d8b8:	e24dd008 	sub	sp, sp, #8
    d8bc:	ebfffaca 	bl	c3ec <CLogger::Get()>
    d8c0:	e3012b5c 	movw	r2, #7004	; 0x1b5c
    d8c4:	e3402005 	movt	r2, #5
    d8c8:	e3013488 	movw	r3, #5256	; 0x1488
    d8cc:	e3403005 	movt	r3, #5
    d8d0:	e3011468 	movw	r1, #5224	; 0x1468
    d8d4:	e3401005 	movt	r1, #5
    d8d8:	e792c104 	ldr	ip, [r2, r4, lsl #2]
    d8dc:	e3a02000 	mov	r2, #0
    d8e0:	e58dc000 	str	ip, [sp]
    d8e4:	ebfffb9d 	bl	c760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d8e8:	e28dd008 	add	sp, sp, #8
    d8ec:	e8bd8010 	pop	{r4, pc}

0000d8f0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    d8f0:	e3510002 	cmp	r1, #2
    d8f4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    d8f8:	e1a05001 	mov	r5, r1
    d8fc:	e24dd024 	sub	sp, sp, #36	; 0x24
    d900:	e1a04002 	mov	r4, r2
    d904:	0a000027 	beq	d9a8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb8>
    d908:	e3510003 	cmp	r1, #3
    d90c:	0a000022 	beq	d99c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
    d910:	e3a07000 	mov	r7, #0
    d914:	e1a08007 	mov	r8, r7
    d918:	e3540000 	cmp	r4, #0
    d91c:	0a000024 	beq	d9b4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
    d920:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    d924:	e3011468 	movw	r1, #5224	; 0x1468
    d928:	e3401005 	movt	r1, #5
    d92c:	e203301f 	and	r3, r3, #31
    d930:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    d934:	e3530012 	cmp	r3, #18
    d938:	e5949040 	ldr	r9, [r4, #64]	; 0x40
    d93c:	08940240 	ldmeq	r4, {r6, r9}
    d940:	e1a00006 	mov	r0, r6
    d944:	ebfff9b8 	bl	c02c <debug_stacktrace(unsigned int const*, char const*)>
    d948:	ebfffaa7 	bl	c3ec <CLogger::Get()>
    d94c:	e3013b5c 	movw	r3, #7004	; 0x1b5c
    d950:	e3403005 	movt	r3, #5
    d954:	e594e044 	ldr	lr, [r4, #68]	; 0x44
    d958:	e3a02000 	mov	r2, #0
    d95c:	e594c048 	ldr	ip, [r4, #72]	; 0x48
    d960:	e3011468 	movw	r1, #5224	; 0x1468
    d964:	e3401005 	movt	r1, #5
    d968:	e7934105 	ldr	r4, [r3, r5, lsl #2]
    d96c:	e30134a4 	movw	r3, #5284	; 0x14a4
    d970:	e3403005 	movt	r3, #5
    d974:	e58d9014 	str	r9, [sp, #20]
    d978:	e58d6010 	str	r6, [sp, #16]
    d97c:	e58d700c 	str	r7, [sp, #12]
    d980:	e58d8008 	str	r8, [sp, #8]
    d984:	e58d4000 	str	r4, [sp]
    d988:	e58de018 	str	lr, [sp, #24]
    d98c:	e58dc004 	str	ip, [sp, #4]
    d990:	ebfffb72 	bl	c760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d994:	e28dd024 	add	sp, sp, #36	; 0x24
    d998:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    d99c:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
    d9a0:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
    d9a4:	eaffffdb 	b	d918 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    d9a8:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
    d9ac:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
    d9b0:	eaffffd8 	b	d918 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    d9b4:	e3011470 	movw	r1, #5232	; 0x1470
    d9b8:	e3401005 	movt	r1, #5
    d9bc:	e3010498 	movw	r0, #5272	; 0x1498
    d9c0:	e3400005 	movt	r0, #5
    d9c4:	e3a02067 	mov	r2, #103	; 0x67
    d9c8:	ebfff908 	bl	bdf0 <assertion_failed>
    d9cc:	eaffffd3 	b	d920 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>

0000d9d0 <CExceptionHandler::Get()>:
    d9d0:	e92d4010 	push	{r4, lr}
    d9d4:	e3014c38 	movw	r4, #7224	; 0x1c38
    d9d8:	e3404005 	movt	r4, #5
    d9dc:	e5940000 	ldr	r0, [r4]
    d9e0:	e3500000 	cmp	r0, #0
    d9e4:	18bd8010 	popne	{r4, pc}
    d9e8:	e3a0207e 	mov	r2, #126	; 0x7e
    d9ec:	e3011470 	movw	r1, #5232	; 0x1470
    d9f0:	e3401005 	movt	r1, #5
    d9f4:	e3000314 	movw	r0, #788	; 0x314
    d9f8:	e3400005 	movt	r0, #5
    d9fc:	ebfff8fb 	bl	bdf0 <assertion_failed>
    da00:	e5940000 	ldr	r0, [r4]
    da04:	e8bd8010 	pop	{r4, pc}

0000da08 <ExceptionHandler>:
    da08:	e92d4070 	push	{r4, r5, r6, lr}
    da0c:	e3014c38 	movw	r4, #7224	; 0x1c38
    da10:	e3404005 	movt	r4, #5
    da14:	e1a05000 	mov	r5, r0
    da18:	e1a06001 	mov	r6, r1
    da1c:	e5940000 	ldr	r0, [r4]
    da20:	e3500000 	cmp	r0, #0
    da24:	0a000003 	beq	da38 <ExceptionHandler+0x30>
    da28:	e1a02006 	mov	r2, r6
    da2c:	e1a01005 	mov	r1, r5
    da30:	e8bd4070 	pop	{r4, r5, r6, lr}
    da34:	eaffffad 	b	d8f0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
    da38:	e3a0207e 	mov	r2, #126	; 0x7e
    da3c:	e3011470 	movw	r1, #5232	; 0x1470
    da40:	e3401005 	movt	r1, #5
    da44:	e3000314 	movw	r0, #788	; 0x314
    da48:	e3400005 	movt	r0, #5
    da4c:	ebfff8e7 	bl	bdf0 <assertion_failed>
    da50:	e5940000 	ldr	r0, [r4]
    da54:	e1a02006 	mov	r2, r6
    da58:	e1a01005 	mov	r1, r5
    da5c:	e8bd4070 	pop	{r4, r5, r6, lr}
    da60:	eaffffa2 	b	d8f0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

0000da64 <UndefinedInstructionStub>:
    da64:	e24ee004 	sub	lr, lr, #4
    da68:	e92d4000 	stmfd	sp!, {lr}
    da6c:	e14fe000 	mrs	lr, SPSR
    da70:	e92d4000 	stmfd	sp!, {lr}
    da74:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    da78:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    da7c:	e1a0100d 	mov	r1, sp
    da80:	f1020012 	cps	#18
    da84:	e1a0200d 	mov	r2, sp
    da88:	e1a0300e 	mov	r3, lr
    da8c:	f102001f 	cps	#31
    da90:	e1a0d001 	mov	sp, r1
    da94:	e92d000c 	push	{r2, r3}
    da98:	e1a0100d 	mov	r1, sp
    da9c:	e3a00001 	mov	r0, #1
    daa0:	eaffffd8 	b	da08 <ExceptionHandler>

0000daa4 <PrefetchAbortStub>:
    daa4:	e24ee004 	sub	lr, lr, #4
    daa8:	e92d4000 	stmfd	sp!, {lr}
    daac:	e14fe000 	mrs	lr, SPSR
    dab0:	e92d4000 	stmfd	sp!, {lr}
    dab4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    dab8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    dabc:	e1a0100d 	mov	r1, sp
    dac0:	f1020012 	cps	#18
    dac4:	e1a0200d 	mov	r2, sp
    dac8:	e1a0300e 	mov	r3, lr
    dacc:	f102001f 	cps	#31
    dad0:	e1a0d001 	mov	sp, r1
    dad4:	e92d000c 	push	{r2, r3}
    dad8:	e1a0100d 	mov	r1, sp
    dadc:	e3a00002 	mov	r0, #2
    dae0:	eaffffc8 	b	da08 <ExceptionHandler>

0000dae4 <DataAbortStub>:
    dae4:	e24ee008 	sub	lr, lr, #8
    dae8:	e92d4000 	stmfd	sp!, {lr}
    daec:	e14fe000 	mrs	lr, SPSR
    daf0:	e92d4000 	stmfd	sp!, {lr}
    daf4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    daf8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    dafc:	e1a0100d 	mov	r1, sp
    db00:	f1020012 	cps	#18
    db04:	e1a0200d 	mov	r2, sp
    db08:	e1a0300e 	mov	r3, lr
    db0c:	f102001f 	cps	#31
    db10:	e1a0d001 	mov	sp, r1
    db14:	e92d000c 	push	{r2, r3}
    db18:	e1a0100d 	mov	r1, sp
    db1c:	e3a00003 	mov	r0, #3
    db20:	eaffffb8 	b	da08 <ExceptionHandler>

0000db24 <IRQStub>:
    db24:	e24ee004 	sub	lr, lr, #4
    db28:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    db2c:	eb0000f2 	bl	defc <InterruptHandler>
    db30:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000db34 <CInterruptSystem::CInterruptSystem()>:
    db34:	e2802f47 	add	r2, r0, #284	; 0x11c
    db38:	e1a0c000 	mov	ip, r0
    db3c:	e2403004 	sub	r3, r0, #4
    db40:	e3a01000 	mov	r1, #0
    db44:	e1a00002 	mov	r0, r2
    db48:	e5a31004 	str	r1, [r3, #4]!
    db4c:	e5a21004 	str	r1, [r2, #4]!
    db50:	e1530000 	cmp	r3, r0
    db54:	1afffffb 	bne	db48 <CInterruptSystem::CInterruptSystem()+0x14>
    db58:	e3013c3c 	movw	r3, #7228	; 0x1c3c
    db5c:	e3403005 	movt	r3, #5
    db60:	e1a0000c 	mov	r0, ip
    db64:	e583c000 	str	ip, [r3]
    db68:	e12fff1e 	bx	lr

0000db6c <CInterruptSystem::~CInterruptSystem()>:
    db6c:	e3013c3c 	movw	r3, #7228	; 0x1c3c
    db70:	e3403005 	movt	r3, #5
    db74:	e3a02000 	mov	r2, #0
    db78:	e5832000 	str	r2, [r3]
    db7c:	e12fff1e 	bx	lr

0000db80 <CInterruptSystem::Initialize()>:
    db80:	e59f3040 	ldr	r3, [pc, #64]	; dbc8 <CInterruptSystem::Initialize()+0x48>
    db84:	e92d4010 	push	{r4, lr}
    db88:	e3a04000 	mov	r4, #0
    db8c:	e1a03143 	asr	r3, r3, #2
    db90:	e2433002 	sub	r3, r3, #2
    db94:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    db98:	e5843018 	str	r3, [r4, #24]
    db9c:	ebffef0f 	bl	97e0 <SyncDataAndInstructionCache>
    dba0:	e3a03a0b 	mov	r3, #45056	; 0xb000
    dba4:	e3433f00 	movt	r3, #16128	; 0x3f00
    dba8:	e3e02000 	mvn	r2, #0
    dbac:	e583420c 	str	r4, [r3, #524]	; 0x20c
    dbb0:	e583221c 	str	r2, [r3, #540]	; 0x21c
    dbb4:	e5832220 	str	r2, [r3, #544]	; 0x220
    dbb8:	e5832224 	str	r2, [r3, #548]	; 0x224
    dbbc:	f1080080 	cpsie	i
    dbc0:	e3a00001 	mov	r0, #1
    dbc4:	e8bd8010 	pop	{r4, pc}
    dbc8:	0000db0c 	.word	0x0000db0c

0000dbcc <CInterruptSystem::EnableIRQ(unsigned int)>:
    dbcc:	e3500047 	cmp	r0, #71	; 0x47
    dbd0:	e92d4010 	push	{r4, lr}
    dbd4:	e1a04000 	mov	r4, r0
    dbd8:	8a00000e 	bhi	dc18 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
    dbdc:	e350001f 	cmp	r0, #31
    dbe0:	930b2210 	movwls	r2, #45584	; 0xb210
    dbe4:	93432f00 	movtls	r2, #16128	; 0x3f00
    dbe8:	8a000004 	bhi	dc00 <CInterruptSystem::EnableIRQ(unsigned int)+0x34>
    dbec:	e204401f 	and	r4, r4, #31
    dbf0:	e3a03001 	mov	r3, #1
    dbf4:	e1a04413 	lsl	r4, r3, r4
    dbf8:	e5824000 	str	r4, [r2]
    dbfc:	e8bd8010 	pop	{r4, pc}
    dc00:	e350003f 	cmp	r0, #63	; 0x3f
    dc04:	930b2214 	movwls	r2, #45588	; 0xb214
    dc08:	93432f00 	movtls	r2, #16128	; 0x3f00
    dc0c:	830b2218 	movwhi	r2, #45592	; 0xb218
    dc10:	83432f00 	movthi	r2, #16128	; 0x3f00
    dc14:	eafffff4 	b	dbec <CInterruptSystem::EnableIRQ(unsigned int)+0x20>
    dc18:	e3a02074 	mov	r2, #116	; 0x74
    dc1c:	e301152c 	movw	r1, #5420	; 0x152c
    dc20:	e3401005 	movt	r1, #5
    dc24:	e301053c 	movw	r0, #5436	; 0x153c
    dc28:	e3400005 	movt	r0, #5
    dc2c:	ebfff86f 	bl	bdf0 <assertion_failed>
    dc30:	e30b2218 	movw	r2, #45592	; 0xb218
    dc34:	e3432f00 	movt	r2, #16128	; 0x3f00
    dc38:	eaffffeb 	b	dbec <CInterruptSystem::EnableIRQ(unsigned int)+0x20>

0000dc3c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    dc3c:	e3510047 	cmp	r1, #71	; 0x47
    dc40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dc44:	e1a04001 	mov	r4, r1
    dc48:	e1a05000 	mov	r5, r0
    dc4c:	e1a08002 	mov	r8, r2
    dc50:	e1a07003 	mov	r7, r3
    dc54:	8a00000e 	bhi	dc94 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
    dc58:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    dc5c:	e0856104 	add	r6, r5, r4, lsl #2
    dc60:	e3530000 	cmp	r3, #0
    dc64:	0a000005 	beq	dc80 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x44>
    dc68:	e301152c 	movw	r1, #5420	; 0x152c
    dc6c:	e3401005 	movt	r1, #5
    dc70:	e3010550 	movw	r0, #5456	; 0x1550
    dc74:	e3400005 	movt	r0, #5
    dc78:	e3a0205d 	mov	r2, #93	; 0x5d
    dc7c:	ebfff85b 	bl	bdf0 <assertion_failed>
    dc80:	e7858104 	str	r8, [r5, r4, lsl #2]
    dc84:	e1a00004 	mov	r0, r4
    dc88:	e5867120 	str	r7, [r6, #288]	; 0x120
    dc8c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    dc90:	eaffffcd 	b	dbcc <CInterruptSystem::EnableIRQ(unsigned int)>
    dc94:	e301152c 	movw	r1, #5420	; 0x152c
    dc98:	e3401005 	movt	r1, #5
    dc9c:	e301053c 	movw	r0, #5436	; 0x153c
    dca0:	e3400005 	movt	r0, #5
    dca4:	e3a0205c 	mov	r2, #92	; 0x5c
    dca8:	ebfff850 	bl	bdf0 <assertion_failed>
    dcac:	eaffffe9 	b	dc58 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>

0000dcb0 <CInterruptSystem::DisableIRQ(unsigned int)>:
    dcb0:	e3500047 	cmp	r0, #71	; 0x47
    dcb4:	e92d4010 	push	{r4, lr}
    dcb8:	e1a04000 	mov	r4, r0
    dcbc:	8a00000e 	bhi	dcfc <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
    dcc0:	e350001f 	cmp	r0, #31
    dcc4:	930b221c 	movwls	r2, #45596	; 0xb21c
    dcc8:	93432f00 	movtls	r2, #16128	; 0x3f00
    dccc:	8a000004 	bhi	dce4 <CInterruptSystem::DisableIRQ(unsigned int)+0x34>
    dcd0:	e204401f 	and	r4, r4, #31
    dcd4:	e3a03001 	mov	r3, #1
    dcd8:	e1a04413 	lsl	r4, r3, r4
    dcdc:	e5824000 	str	r4, [r2]
    dce0:	e8bd8010 	pop	{r4, pc}
    dce4:	e350003f 	cmp	r0, #63	; 0x3f
    dce8:	930b2220 	movwls	r2, #45600	; 0xb220
    dcec:	93432f00 	movtls	r2, #16128	; 0x3f00
    dcf0:	830b2224 	movwhi	r2, #45604	; 0xb224
    dcf4:	83432f00 	movthi	r2, #16128	; 0x3f00
    dcf8:	eafffff4 	b	dcd0 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>
    dcfc:	e3a0207f 	mov	r2, #127	; 0x7f
    dd00:	e301152c 	movw	r1, #5420	; 0x152c
    dd04:	e3401005 	movt	r1, #5
    dd08:	e301053c 	movw	r0, #5436	; 0x153c
    dd0c:	e3400005 	movt	r0, #5
    dd10:	ebfff836 	bl	bdf0 <assertion_failed>
    dd14:	e30b2224 	movw	r2, #45604	; 0xb224
    dd18:	e3432f00 	movt	r2, #16128	; 0x3f00
    dd1c:	eaffffeb 	b	dcd0 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>

0000dd20 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    dd20:	e3510047 	cmp	r1, #71	; 0x47
    dd24:	e92d4070 	push	{r4, r5, r6, lr}
    dd28:	e1a04001 	mov	r4, r1
    dd2c:	e1a05000 	mov	r5, r0
    dd30:	8a000009 	bhi	dd5c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    dd34:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    dd38:	e0856104 	add	r6, r5, r4, lsl #2
    dd3c:	e3530000 	cmp	r3, #0
    dd40:	0a00000f 	beq	dd84 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
    dd44:	e1a00004 	mov	r0, r4
    dd48:	ebffffd8 	bl	dcb0 <CInterruptSystem::DisableIRQ(unsigned int)>
    dd4c:	e3a03000 	mov	r3, #0
    dd50:	e7853104 	str	r3, [r5, r4, lsl #2]
    dd54:	e5863120 	str	r3, [r6, #288]	; 0x120
    dd58:	e8bd8070 	pop	{r4, r5, r6, pc}
    dd5c:	e301152c 	movw	r1, #5420	; 0x152c
    dd60:	e3401005 	movt	r1, #5
    dd64:	e301053c 	movw	r0, #5436	; 0x153c
    dd68:	e3400005 	movt	r0, #5
    dd6c:	e3a02067 	mov	r2, #103	; 0x67
    dd70:	e0856104 	add	r6, r5, r4, lsl #2
    dd74:	ebfff81d 	bl	bdf0 <assertion_failed>
    dd78:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    dd7c:	e3530000 	cmp	r3, #0
    dd80:	1affffef 	bne	dd44 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    dd84:	e301152c 	movw	r1, #5420	; 0x152c
    dd88:	e3401005 	movt	r1, #5
    dd8c:	e301056c 	movw	r0, #5484	; 0x156c
    dd90:	e3400005 	movt	r0, #5
    dd94:	e3a02068 	mov	r2, #104	; 0x68
    dd98:	ebfff814 	bl	bdf0 <assertion_failed>
    dd9c:	eaffffe8 	b	dd44 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>

0000dda0 <CInterruptSystem::Get()>:
    dda0:	e92d4010 	push	{r4, lr}
    dda4:	e3014c3c 	movw	r4, #7228	; 0x1c3c
    dda8:	e3404005 	movt	r4, #5
    ddac:	e5940000 	ldr	r0, [r4]
    ddb0:	e3500000 	cmp	r0, #0
    ddb4:	18bd8010 	popne	{r4, pc}
    ddb8:	e3a02088 	mov	r2, #136	; 0x88
    ddbc:	e301152c 	movw	r1, #5420	; 0x152c
    ddc0:	e3401005 	movt	r1, #5
    ddc4:	e3000314 	movw	r0, #788	; 0x314
    ddc8:	e3400005 	movt	r0, #5
    ddcc:	ebfff807 	bl	bdf0 <assertion_failed>
    ddd0:	e5940000 	ldr	r0, [r4]
    ddd4:	e8bd8010 	pop	{r4, pc}

0000ddd8 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    ddd8:	e3510047 	cmp	r1, #71	; 0x47
    dddc:	e92d4070 	push	{r4, r5, r6, lr}
    dde0:	e1a06001 	mov	r6, r1
    dde4:	e1a05000 	mov	r5, r0
    dde8:	8a000007 	bhi	de0c <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    ddec:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    ddf0:	e0855106 	add	r5, r5, r6, lsl #2
    ddf4:	e3540000 	cmp	r4, #0
    ddf8:	0a00000d 	beq	de34 <CInterruptSystem::CallIRQHandler(unsigned int)+0x5c>
    ddfc:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    de00:	e12fff34 	blx	r4
    de04:	e3a00001 	mov	r0, #1
    de08:	e8bd8070 	pop	{r4, r5, r6, pc}
    de0c:	e301152c 	movw	r1, #5420	; 0x152c
    de10:	e3401005 	movt	r1, #5
    de14:	e301053c 	movw	r0, #5436	; 0x153c
    de18:	e3400005 	movt	r0, #5
    de1c:	e3a0208e 	mov	r2, #142	; 0x8e
    de20:	ebfff7f2 	bl	bdf0 <assertion_failed>
    de24:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    de28:	e0855106 	add	r5, r5, r6, lsl #2
    de2c:	e3540000 	cmp	r4, #0
    de30:	1afffff1 	bne	ddfc <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    de34:	e1a00006 	mov	r0, r6
    de38:	ebffff9c 	bl	dcb0 <CInterruptSystem::DisableIRQ(unsigned int)>
    de3c:	e1a00004 	mov	r0, r4
    de40:	e8bd8070 	pop	{r4, r5, r6, pc}

0000de44 <CInterruptSystem::InterruptHandler()>:
    de44:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    de48:	e3016c3c 	movw	r6, #7228	; 0x1c3c
    de4c:	e3406005 	movt	r6, #5
    de50:	e24dd010 	sub	sp, sp, #16
    de54:	e5963000 	ldr	r3, [r6]
    de58:	e3530000 	cmp	r3, #0
    de5c:	0a00001f 	beq	dee0 <CInterruptSystem::InterruptHandler()+0x9c>
    de60:	e3a03a0b 	mov	r3, #45056	; 0xb000
    de64:	e3433f00 	movt	r3, #16128	; 0x3f00
    de68:	e28d8008 	add	r8, sp, #8
    de6c:	e3a07000 	mov	r7, #0
    de70:	e5934204 	ldr	r4, [r3, #516]	; 0x204
    de74:	e58d4004 	str	r4, [sp, #4]
    de78:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    de7c:	e58d2008 	str	r2, [sp, #8]
    de80:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    de84:	e6ef3073 	uxtb	r3, r3
    de88:	e58d300c 	str	r3, [sp, #12]
    de8c:	e3540000 	cmp	r4, #0
    de90:	0a00000d 	beq	decc <CInterruptSystem::InterruptHandler()+0x88>
    de94:	e1a05007 	mov	r5, r7
    de98:	ea000002 	b	dea8 <CInterruptSystem::InterruptHandler()+0x64>
    de9c:	e1b040a4 	lsrs	r4, r4, #1
    dea0:	e2855001 	add	r5, r5, #1
    dea4:	0a000008 	beq	decc <CInterruptSystem::InterruptHandler()+0x88>
    dea8:	e3140001 	tst	r4, #1
    deac:	0afffffa 	beq	de9c <CInterruptSystem::InterruptHandler()+0x58>
    deb0:	e1a01005 	mov	r1, r5
    deb4:	e5960000 	ldr	r0, [r6]
    deb8:	ebffffc6 	bl	ddd8 <CInterruptSystem::CallIRQHandler(unsigned int)>
    debc:	e3500000 	cmp	r0, #0
    dec0:	0afffff5 	beq	de9c <CInterruptSystem::InterruptHandler()+0x58>
    dec4:	e28dd010 	add	sp, sp, #16
    dec8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    decc:	e2877020 	add	r7, r7, #32
    ded0:	e3570060 	cmp	r7, #96	; 0x60
    ded4:	0afffffa 	beq	dec4 <CInterruptSystem::InterruptHandler()+0x80>
    ded8:	e4984004 	ldr	r4, [r8], #4
    dedc:	eaffffea 	b	de8c <CInterruptSystem::InterruptHandler()+0x48>
    dee0:	e301152c 	movw	r1, #5420	; 0x152c
    dee4:	e3401005 	movt	r1, #5
    dee8:	e3000314 	movw	r0, #788	; 0x314
    deec:	e3400005 	movt	r0, #5
    def0:	e3a020a1 	mov	r2, #161	; 0xa1
    def4:	ebfff7bd 	bl	bdf0 <assertion_failed>
    def8:	eaffffd8 	b	de60 <CInterruptSystem::InterruptHandler()+0x1c>

0000defc <InterruptHandler>:
    defc:	eaffffd0 	b	de44 <CInterruptSystem::InterruptHandler()>

0000df00 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    df00:	e1a03000 	mov	r3, r0
    df04:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    df08:	e3a0e000 	mov	lr, #0
    df0c:	e1a0c00e 	mov	ip, lr
    df10:	e28020dc 	add	r2, r0, #220	; 0xdc
    df14:	e5801000 	str	r1, [r0]
    df18:	e5a3e004 	str	lr, [r3, #4]!
    df1c:	e5a3c004 	str	ip, [r3, #4]!
    df20:	e1530002 	cmp	r3, r2
    df24:	1afffffc 	bne	df1c <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    df28:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000df2c <CGPIOManager::~CGPIOManager()>:
    df2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    df30:	e3016588 	movw	r6, #5512	; 0x1588
    df34:	e3406005 	movt	r6, #5
    df38:	e3015598 	movw	r5, #5528	; 0x1598
    df3c:	e3405005 	movt	r5, #5
    df40:	e1a08000 	mov	r8, r0
    df44:	e2804004 	add	r4, r0, #4
    df48:	e28070dc 	add	r7, r0, #220	; 0xdc
    df4c:	e5b43004 	ldr	r3, [r4, #4]!
    df50:	e3a0202c 	mov	r2, #44	; 0x2c
    df54:	e1a01006 	mov	r1, r6
    df58:	e1a00005 	mov	r0, r5
    df5c:	e3530000 	cmp	r3, #0
    df60:	0a000000 	beq	df68 <CGPIOManager::~CGPIOManager()+0x3c>
    df64:	ebfff7a1 	bl	bdf0 <assertion_failed>
    df68:	e1540007 	cmp	r4, r7
    df6c:	1afffff6 	bne	df4c <CGPIOManager::~CGPIOManager()+0x20>
    df70:	e5983004 	ldr	r3, [r8, #4]
    df74:	e3530000 	cmp	r3, #0
    df78:	0a000004 	beq	df90 <CGPIOManager::~CGPIOManager()+0x64>
    df7c:	e5980000 	ldr	r0, [r8]
    df80:	e3500000 	cmp	r0, #0
    df84:	0a000003 	beq	df98 <CGPIOManager::~CGPIOManager()+0x6c>
    df88:	e3a01034 	mov	r1, #52	; 0x34
    df8c:	ebffff63 	bl	dd20 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    df90:	e1a00008 	mov	r0, r8
    df94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    df98:	e3011588 	movw	r1, #5512	; 0x1588
    df9c:	e3401005 	movt	r1, #5
    dfa0:	e30105ac 	movw	r0, #5548	; 0x15ac
    dfa4:	e3400005 	movt	r0, #5
    dfa8:	e3a02032 	mov	r2, #50	; 0x32
    dfac:	ebfff78f 	bl	bdf0 <assertion_failed>
    dfb0:	e5980000 	ldr	r0, [r8]
    dfb4:	eafffff3 	b	df88 <CGPIOManager::~CGPIOManager()+0x5c>

0000dfb8 <CGPIOManager::Initialize()>:
    dfb8:	e5903004 	ldr	r3, [r0, #4]
    dfbc:	e92d4010 	push	{r4, lr}
    dfc0:	e1a04000 	mov	r4, r0
    dfc4:	e3530000 	cmp	r3, #0
    dfc8:	1a00000a 	bne	dff8 <CGPIOManager::Initialize()+0x40>
    dfcc:	e5940000 	ldr	r0, [r4]
    dfd0:	e3500000 	cmp	r0, #0
    dfd4:	0a000010 	beq	e01c <CGPIOManager::Initialize()+0x64>
    dfd8:	e1a03004 	mov	r3, r4
    dfdc:	e3a01034 	mov	r1, #52	; 0x34
    dfe0:	e30e225c 	movw	r2, #57948	; 0xe25c
    dfe4:	e3402000 	movt	r2, #0
    dfe8:	ebffff13 	bl	dc3c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    dfec:	e3a00001 	mov	r0, #1
    dff0:	e5840004 	str	r0, [r4, #4]
    dff4:	e8bd8010 	pop	{r4, pc}
    dff8:	e3011588 	movw	r1, #5512	; 0x1588
    dffc:	e3401005 	movt	r1, #5
    e000:	e30105c0 	movw	r0, #5568	; 0x15c0
    e004:	e3400005 	movt	r0, #5
    e008:	e3a0203b 	mov	r2, #59	; 0x3b
    e00c:	ebfff777 	bl	bdf0 <assertion_failed>
    e010:	e5940000 	ldr	r0, [r4]
    e014:	e3500000 	cmp	r0, #0
    e018:	1affffee 	bne	dfd8 <CGPIOManager::Initialize()+0x20>
    e01c:	e3011588 	movw	r1, #5512	; 0x1588
    e020:	e3401005 	movt	r1, #5
    e024:	e30105ac 	movw	r0, #5548	; 0x15ac
    e028:	e3400005 	movt	r0, #5
    e02c:	e3a0203c 	mov	r2, #60	; 0x3c
    e030:	ebfff76e 	bl	bdf0 <assertion_failed>
    e034:	e5940000 	ldr	r0, [r4]
    e038:	eaffffe6 	b	dfd8 <CGPIOManager::Initialize()+0x20>

0000e03c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    e03c:	e5903004 	ldr	r3, [r0, #4]
    e040:	e92d4070 	push	{r4, r5, r6, lr}
    e044:	e1a04000 	mov	r4, r0
    e048:	e3530000 	cmp	r3, #0
    e04c:	e1a05001 	mov	r5, r1
    e050:	0a000010 	beq	e098 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
    e054:	e3550000 	cmp	r5, #0
    e058:	0a00001c 	beq	e0d0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    e05c:	e5956004 	ldr	r6, [r5, #4]
    e060:	e3560035 	cmp	r6, #53	; 0x35
    e064:	8a000012 	bhi	e0b4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x78>
    e068:	e0844106 	add	r4, r4, r6, lsl #2
    e06c:	e5943008 	ldr	r3, [r4, #8]
    e070:	e3530000 	cmp	r3, #0
    e074:	0a000005 	beq	e090 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
    e078:	e3011588 	movw	r1, #5512	; 0x1588
    e07c:	e3401005 	movt	r1, #5
    e080:	e3010598 	movw	r0, #5528	; 0x1598
    e084:	e3400005 	movt	r0, #5
    e088:	e3a0204b 	mov	r2, #75	; 0x4b
    e08c:	ebfff757 	bl	bdf0 <assertion_failed>
    e090:	e5845008 	str	r5, [r4, #8]
    e094:	e8bd8070 	pop	{r4, r5, r6, pc}
    e098:	e3011588 	movw	r1, #5512	; 0x1588
    e09c:	e3401005 	movt	r1, #5
    e0a0:	e30105d4 	movw	r0, #5588	; 0x15d4
    e0a4:	e3400005 	movt	r0, #5
    e0a8:	e3a02045 	mov	r2, #69	; 0x45
    e0ac:	ebfff74f 	bl	bdf0 <assertion_failed>
    e0b0:	eaffffe7 	b	e054 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
    e0b4:	e3011588 	movw	r1, #5512	; 0x1588
    e0b8:	e3401005 	movt	r1, #5
    e0bc:	e30000f4 	movw	r0, #244	; 0xf4
    e0c0:	e3400005 	movt	r0, #5
    e0c4:	e3a02049 	mov	r2, #73	; 0x49
    e0c8:	ebfff748 	bl	bdf0 <assertion_failed>
    e0cc:	eaffffe5 	b	e068 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
    e0d0:	e3011588 	movw	r1, #5512	; 0x1588
    e0d4:	e3401005 	movt	r1, #5
    e0d8:	e30105e4 	movw	r0, #5604	; 0x15e4
    e0dc:	e3400005 	movt	r0, #5
    e0e0:	e3a02047 	mov	r2, #71	; 0x47
    e0e4:	ebfff741 	bl	bdf0 <assertion_failed>
    e0e8:	eaffffdb 	b	e05c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>

0000e0ec <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    e0ec:	e5903004 	ldr	r3, [r0, #4]
    e0f0:	e92d4070 	push	{r4, r5, r6, lr}
    e0f4:	e1a04000 	mov	r4, r0
    e0f8:	e3530000 	cmp	r3, #0
    e0fc:	e1a05001 	mov	r5, r1
    e100:	0a00000b 	beq	e134 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
    e104:	e3550000 	cmp	r5, #0
    e108:	0a000021 	beq	e194 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    e10c:	e5955004 	ldr	r5, [r5, #4]
    e110:	e3550035 	cmp	r5, #53	; 0x35
    e114:	8a00000d 	bhi	e150 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x64>
    e118:	e0844105 	add	r4, r4, r5, lsl #2
    e11c:	e5943008 	ldr	r3, [r4, #8]
    e120:	e3530000 	cmp	r3, #0
    e124:	0a000013 	beq	e178 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
    e128:	e3a03000 	mov	r3, #0
    e12c:	e5843008 	str	r3, [r4, #8]
    e130:	e8bd8070 	pop	{r4, r5, r6, pc}
    e134:	e3011588 	movw	r1, #5512	; 0x1588
    e138:	e3401005 	movt	r1, #5
    e13c:	e30105d4 	movw	r0, #5588	; 0x15d4
    e140:	e3400005 	movt	r0, #5
    e144:	e3a02052 	mov	r2, #82	; 0x52
    e148:	ebfff728 	bl	bdf0 <assertion_failed>
    e14c:	eaffffec 	b	e104 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
    e150:	e0844105 	add	r4, r4, r5, lsl #2
    e154:	e3011588 	movw	r1, #5512	; 0x1588
    e158:	e3401005 	movt	r1, #5
    e15c:	e30000f4 	movw	r0, #244	; 0xf4
    e160:	e3400005 	movt	r0, #5
    e164:	e3a02056 	mov	r2, #86	; 0x56
    e168:	ebfff720 	bl	bdf0 <assertion_failed>
    e16c:	e5943008 	ldr	r3, [r4, #8]
    e170:	e3530000 	cmp	r3, #0
    e174:	1affffeb 	bne	e128 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    e178:	e3011588 	movw	r1, #5512	; 0x1588
    e17c:	e3401005 	movt	r1, #5
    e180:	e30105f0 	movw	r0, #5616	; 0x15f0
    e184:	e3400005 	movt	r0, #5
    e188:	e3a02058 	mov	r2, #88	; 0x58
    e18c:	ebfff717 	bl	bdf0 <assertion_failed>
    e190:	eaffffe4 	b	e128 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    e194:	e3011588 	movw	r1, #5512	; 0x1588
    e198:	e3401005 	movt	r1, #5
    e19c:	e30105e4 	movw	r0, #5604	; 0x15e4
    e1a0:	e3400005 	movt	r0, #5
    e1a4:	e3a02054 	mov	r2, #84	; 0x54
    e1a8:	ebfff710 	bl	bdf0 <assertion_failed>
    e1ac:	eaffffd6 	b	e10c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>

0000e1b0 <CGPIOManager::InterruptHandler()>:
    e1b0:	e5903004 	ldr	r3, [r0, #4]
    e1b4:	e92d4070 	push	{r4, r5, r6, lr}
    e1b8:	e1a06000 	mov	r6, r0
    e1bc:	e3530000 	cmp	r3, #0
    e1c0:	0a00001b 	beq	e234 <CGPIOManager::InterruptHandler()+0x84>
    e1c4:	e3a03000 	mov	r3, #0
    e1c8:	e3433f20 	movt	r3, #16160	; 0x3f20
    e1cc:	e1a02003 	mov	r2, r3
    e1d0:	e3a04000 	mov	r4, #0
    e1d4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
    e1d8:	ea000004 	b	e1f0 <CGPIOManager::InterruptHandler()+0x40>
    e1dc:	e2844001 	add	r4, r4, #1
    e1e0:	e314001f 	tst	r4, #31
    e1e4:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    e1e8:	e3540036 	cmp	r4, #54	; 0x36
    e1ec:	08bd8070 	popeq	{r4, r5, r6, pc}
    e1f0:	e3130001 	tst	r3, #1
    e1f4:	e1a030a3 	lsr	r3, r3, #1
    e1f8:	0afffff7 	beq	e1dc <CGPIOManager::InterruptHandler()+0x2c>
    e1fc:	e2843002 	add	r3, r4, #2
    e200:	e204501f 	and	r5, r4, #31
    e204:	e3a02001 	mov	r2, #1
    e208:	e7960103 	ldr	r0, [r6, r3, lsl #2]
    e20c:	e1a05512 	lsl	r5, r2, r5
    e210:	e3500000 	cmp	r0, #0
    e214:	0a00000d 	beq	e250 <CGPIOManager::InterruptHandler()+0xa0>
    e218:	ebffec4c 	bl	9350 <CGPIOPin::InterruptHandler()>
    e21c:	e3a03010 	mov	r3, #16
    e220:	e3403fc8 	movt	r3, #4040	; 0xfc8
    e224:	e08332a4 	add	r3, r3, r4, lsr #5
    e228:	e1a03103 	lsl	r3, r3, #2
    e22c:	e5835000 	str	r5, [r3]
    e230:	e8bd8070 	pop	{r4, r5, r6, pc}
    e234:	e3011588 	movw	r1, #5512	; 0x1588
    e238:	e3401005 	movt	r1, #5
    e23c:	e30105d4 	movw	r0, #5588	; 0x15d4
    e240:	e3400005 	movt	r0, #5
    e244:	e3a0205e 	mov	r2, #94	; 0x5e
    e248:	ebfff6e8 	bl	bdf0 <assertion_failed>
    e24c:	eaffffdc 	b	e1c4 <CGPIOManager::InterruptHandler()+0x14>
    e250:	e1a00004 	mov	r0, r4
    e254:	ebffec69 	bl	9400 <CGPIOPin::DisableAllInterrupts(unsigned int)>
    e258:	eaffffef 	b	e21c <CGPIOManager::InterruptHandler()+0x6c>

0000e25c <CGPIOManager::InterruptStub(void*)>:
    e25c:	e92d4010 	push	{r4, lr}
    e260:	e2504000 	subs	r4, r0, #0
    e264:	0a000002 	beq	e274 <CGPIOManager::InterruptStub(void*)+0x18>
    e268:	e1a00004 	mov	r0, r4
    e26c:	e8bd4010 	pop	{r4, lr}
    e270:	eaffffce 	b	e1b0 <CGPIOManager::InterruptHandler()>
    e274:	e3011588 	movw	r1, #5512	; 0x1588
    e278:	e3401005 	movt	r1, #5
    e27c:	e3010604 	movw	r0, #5636	; 0x1604
    e280:	e3400005 	movt	r0, #5
    e284:	e3a0208a 	mov	r2, #138	; 0x8a
    e288:	ebfff6d8 	bl	bdf0 <assertion_failed>
    e28c:	e1a00004 	mov	r0, r4
    e290:	e8bd4010 	pop	{r4, lr}
    e294:	eaffffc5 	b	e1b0 <CGPIOManager::InterruptHandler()>

0000e298 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    e298:	e12fff1e 	bx	lr

0000e29c <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    e29c:	e92d4010 	push	{r4, lr}
    e2a0:	e1a04000 	mov	r4, r0
    e2a4:	ebffed26 	bl	9744 <operator delete(void*)>
    e2a8:	e1a00004 	mov	r0, r4
    e2ac:	e8bd8010 	pop	{r4, pc}

0000e2b0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
    e2b0:	e92d4070 	push	{r4, r5, r6, lr}
    e2b4:	e3014c40 	movw	r4, #7232	; 0x1c40
    e2b8:	e3404005 	movt	r4, #5
    e2bc:	e1a05000 	mov	r5, r0
    e2c0:	e1a06001 	mov	r6, r1
    e2c4:	e5943000 	ldr	r3, [r4]
    e2c8:	e3530000 	cmp	r3, #0
    e2cc:	1a00001a 	bne	e33c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x8c>
    e2d0:	e1d500bc 	ldrh	r0, [r5, #12]
    e2d4:	e1d530be 	ldrh	r3, [r5, #14]
    e2d8:	e5856008 	str	r6, [r5, #8]
    e2dc:	e0402003 	sub	r2, r0, r3
    e2e0:	e6bf2072 	sxth	r2, r2
    e2e4:	e3520000 	cmp	r2, #0
    e2e8:	da00000c 	ble	e320 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x70>
    e2ec:	e3560000 	cmp	r6, #0
    e2f0:	1a00000c 	bne	e328 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x78>
    e2f4:	e2833001 	add	r3, r3, #1
    e2f8:	e6ff3073 	uxth	r3, r3
    e2fc:	e1c530be 	strh	r3, [r5, #14]
    e300:	e5951004 	ldr	r1, [r5, #4]
    e304:	e1833800 	orr	r3, r3, r0, lsl #16
    e308:	e5942004 	ldr	r2, [r4, #4]
    e30c:	e7823101 	str	r3, [r2, r1, lsl #2]
    e310:	e5943000 	ldr	r3, [r4]
    e314:	e3530000 	cmp	r3, #0
    e318:	1a000005 	bne	e334 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x84>
    e31c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e320:	e3560000 	cmp	r6, #0
    e324:	1a000006 	bne	e344 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x94>
    e328:	e5943000 	ldr	r3, [r4]
    e32c:	e3530000 	cmp	r3, #0
    e330:	08bd8070 	popeq	{r4, r5, r6, pc}
    e334:	e8bd4070 	pop	{r4, r5, r6, lr}
    e338:	eaffed10 	b	9780 <LeaveCritical>
    e33c:	ebffed02 	bl	974c <EnterCritical>
    e340:	eaffffe2 	b	e2d0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x20>
    e344:	e2800001 	add	r0, r0, #1
    e348:	e6ff0070 	uxth	r0, r0
    e34c:	e1c500bc 	strh	r0, [r5, #12]
    e350:	eaffffea 	b	e300 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x50>

0000e354 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    e354:	e3510001 	cmp	r1, #1
    e358:	e92d4030 	push	{r4, r5, lr}
    e35c:	e59f20dc 	ldr	r2, [pc, #220]	; e440 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xec>
    e360:	e3a03000 	mov	r3, #0
    e364:	e24dd024 	sub	sp, sp, #36	; 0x24
    e368:	e1a04000 	mov	r4, r0
    e36c:	e5801004 	str	r1, [r0, #4]
    e370:	e5802000 	str	r2, [r0]
    e374:	e1c030bc 	strh	r3, [r0, #12]
    e378:	e1c030be 	strh	r3, [r0, #14]
    e37c:	9a000002 	bls	e38c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
    e380:	e1a00004 	mov	r0, r4
    e384:	e28dd024 	add	sp, sp, #36	; 0x24
    e388:	e8bd8030 	pop	{r4, r5, pc}
    e38c:	e3015c40 	movw	r5, #7232	; 0x1c40
    e390:	e3405005 	movt	r5, #5
    e394:	e5953000 	ldr	r3, [r5]
    e398:	e3530000 	cmp	r3, #0
    e39c:	1a000009 	bne	e3c8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x74>
    e3a0:	e5953004 	ldr	r3, [r5, #4]
    e3a4:	e3530000 	cmp	r3, #0
    e3a8:	0a00000a 	beq	e3d8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x84>
    e3ac:	e5953004 	ldr	r3, [r5, #4]
    e3b0:	e3530000 	cmp	r3, #0
    e3b4:	0afffff1 	beq	e380 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    e3b8:	e3a01000 	mov	r1, #0
    e3bc:	e1a00004 	mov	r0, r4
    e3c0:	ebffffba 	bl	e2b0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
    e3c4:	eaffffed 	b	e380 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    e3c8:	ebffecdf 	bl	974c <EnterCritical>
    e3cc:	e5953004 	ldr	r3, [r5, #4]
    e3d0:	e3530000 	cmp	r3, #0
    e3d4:	1a00000f 	bne	e418 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xc4>
    e3d8:	e28d0008 	add	r0, sp, #8
    e3dc:	ebffe843 	bl	84f0 <CBcmPropertyTags::CBcmPropertyTags()>
    e3e0:	e3a03000 	mov	r3, #0
    e3e4:	e58d3000 	str	r3, [sp]
    e3e8:	e3a03010 	mov	r3, #16
    e3ec:	e08d2003 	add	r2, sp, r3
    e3f0:	e28d0008 	add	r0, sp, #8
    e3f4:	e3a01010 	mov	r1, #16
    e3f8:	e3401004 	movt	r1, #4
    e3fc:	ebffe883 	bl	8610 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    e400:	e3500000 	cmp	r0, #0
    e404:	e28d0008 	add	r0, sp, #8
    e408:	159d301c 	ldrne	r3, [sp, #28]
    e40c:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    e410:	15853004 	strne	r3, [r5, #4]
    e414:	ebffe83b 	bl	8508 <CBcmPropertyTags::~CBcmPropertyTags()>
    e418:	e5953000 	ldr	r3, [r5]
    e41c:	e3530000 	cmp	r3, #0
    e420:	0a000000 	beq	e428 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xd4>
    e424:	ebffecd5 	bl	9780 <LeaveCritical>
    e428:	e5943004 	ldr	r3, [r4, #4]
    e42c:	e3530001 	cmp	r3, #1
    e430:	9affffdd 	bls	e3ac <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x58>
    e434:	e1a00004 	mov	r0, r4
    e438:	e28dd024 	add	sp, sp, #36	; 0x24
    e43c:	e8bd8030 	pop	{r4, r5, pc}
    e440:	00051618 	.word	0x00051618

0000e444 <CVirtualGPIOPin::Write(unsigned int)>:
    e444:	e5902004 	ldr	r2, [r0, #4]
    e448:	e1a03001 	mov	r3, r1
    e44c:	e3520001 	cmp	r2, #1
    e450:	812fff1e 	bxhi	lr
    e454:	e3012c40 	movw	r2, #7232	; 0x1c40
    e458:	e3402005 	movt	r2, #5
    e45c:	e3510001 	cmp	r1, #1
    e460:	93a03000 	movls	r3, #0
    e464:	83a03001 	movhi	r3, #1
    e468:	e5922004 	ldr	r2, [r2, #4]
    e46c:	e3520000 	cmp	r2, #0
    e470:	03833001 	orreq	r3, r3, #1
    e474:	e3530000 	cmp	r3, #0
    e478:	112fff1e 	bxne	lr
    e47c:	eaffff8b 	b	e2b0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>

0000e480 <CVirtualGPIOPin::Invert()>:
    e480:	e5901008 	ldr	r1, [r0, #8]
    e484:	e2211001 	eor	r1, r1, #1
    e488:	eaffffed 	b	e444 <CVirtualGPIOPin::Write(unsigned int)>

0000e48c <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    e48c:	e3013c40 	movw	r3, #7232	; 0x1c40
    e490:	e3403005 	movt	r3, #5
    e494:	e3a02000 	mov	r2, #0
    e498:	e5832000 	str	r2, [r3]
    e49c:	e12fff1e 	bx	lr

0000e4a0 <CMachineInfo::CMachineInfo()>:
    e4a0:	e3012c48 	movw	r2, #7240	; 0x1c48
    e4a4:	e3402005 	movt	r2, #5
    e4a8:	e92d4030 	push	{r4, r5, lr}
    e4ac:	e3a03000 	mov	r3, #0
    e4b0:	e1a04000 	mov	r4, r0
    e4b4:	e5925000 	ldr	r5, [r2]
    e4b8:	e3a0000a 	mov	r0, #10
    e4bc:	e3a01003 	mov	r1, #3
    e4c0:	e24dd024 	sub	sp, sp, #36	; 0x24
    e4c4:	e1550003 	cmp	r5, r3
    e4c8:	e5c40004 	strb	r0, [r4, #4]
    e4cc:	e5c41010 	strb	r1, [r4, #16]
    e4d0:	e5843000 	str	r3, [r4]
    e4d4:	e5843008 	str	r3, [r4, #8]
    e4d8:	e584300c 	str	r3, [r4, #12]
    e4dc:	e5843014 	str	r3, [r4, #20]
    e4e0:	0a00000e 	beq	e520 <CMachineInfo::CMachineInfo()+0x80>
    e4e4:	e595e000 	ldr	lr, [r5]
    e4e8:	e5d5c004 	ldrb	ip, [r5, #4]
    e4ec:	e5950008 	ldr	r0, [r5, #8]
    e4f0:	e595100c 	ldr	r1, [r5, #12]
    e4f4:	e5d52010 	ldrb	r2, [r5, #16]
    e4f8:	e5953014 	ldr	r3, [r5, #20]
    e4fc:	e584e000 	str	lr, [r4]
    e500:	e5c4c004 	strb	ip, [r4, #4]
    e504:	e5840008 	str	r0, [r4, #8]
    e508:	e584100c 	str	r1, [r4, #12]
    e50c:	e5c42010 	strb	r2, [r4, #16]
    e510:	e5843014 	str	r3, [r4, #20]
    e514:	e1a00004 	mov	r0, r4
    e518:	e28dd024 	add	sp, sp, #36	; 0x24
    e51c:	e8bd8030 	pop	{r4, r5, pc}
    e520:	e28d0008 	add	r0, sp, #8
    e524:	e5824000 	str	r4, [r2]
    e528:	ebffe7f0 	bl	84f0 <CBcmPropertyTags::CBcmPropertyTags()>
    e52c:	e3a03010 	mov	r3, #16
    e530:	e58d5000 	str	r5, [sp]
    e534:	e28d0008 	add	r0, sp, #8
    e538:	e3a01002 	mov	r1, #2
    e53c:	e3401001 	movt	r1, #1
    e540:	e08d2003 	add	r2, sp, r3
    e544:	ebffe831 	bl	8610 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    e548:	e3500000 	cmp	r0, #0
    e54c:	0a00000c 	beq	e584 <CMachineInfo::CMachineInfo()+0xe4>
    e550:	e59d201c 	ldr	r2, [sp, #28]
    e554:	e2123502 	ands	r3, r2, #8388608	; 0x800000
    e558:	e5842000 	str	r2, [r4]
    e55c:	1a00000b 	bne	e590 <CMachineInfo::CMachineInfo()+0xf0>
    e560:	e3a01002 	mov	r1, #2
    e564:	e59f00fc 	ldr	r0, [pc, #252]	; e668 <CMachineInfo::CMachineInfo()+0x1c8>
    e568:	ea000000 	b	e570 <CMachineInfo::CMachineInfo()+0xd0>
    e56c:	e7901203 	ldr	r1, [r0, r3, lsl #4]
    e570:	e1520001 	cmp	r2, r1
    e574:	0a000011 	beq	e5c0 <CMachineInfo::CMachineInfo()+0x120>
    e578:	e2833001 	add	r3, r3, #1
    e57c:	e3530011 	cmp	r3, #17
    e580:	1afffff9 	bne	e56c <CMachineInfo::CMachineInfo()+0xcc>
    e584:	e28d0008 	add	r0, sp, #8
    e588:	ebffe7de 	bl	8508 <CBcmPropertyTags::~CBcmPropertyTags()>
    e58c:	eaffffe0 	b	e514 <CMachineInfo::CMachineInfo()+0x74>
    e590:	e59f10d4 	ldr	r1, [pc, #212]	; e66c <CMachineInfo::CMachineInfo()+0x1cc>
    e594:	e1a03005 	mov	r3, r5
    e598:	e7e70252 	ubfx	r0, r2, #4, #8
    e59c:	ea000000 	b	e5a4 <CMachineInfo::CMachineInfo()+0x104>
    e5a0:	e511500c 	ldr	r5, [r1, #-12]
    e5a4:	e1550000 	cmp	r5, r0
    e5a8:	e281100c 	add	r1, r1, #12
    e5ac:	0a000011 	beq	e5f8 <CMachineInfo::CMachineInfo()+0x158>
    e5b0:	e2833001 	add	r3, r3, #1
    e5b4:	e3530008 	cmp	r3, #8
    e5b8:	1afffff8 	bne	e5a0 <CMachineInfo::CMachineInfo()+0x100>
    e5bc:	eafffff0 	b	e584 <CMachineInfo::CMachineInfo()+0xe4>
    e5c0:	e3012620 	movw	r2, #5664	; 0x1620
    e5c4:	e3402005 	movt	r2, #5
    e5c8:	e3a01000 	mov	r1, #0
    e5cc:	e3a00001 	mov	r0, #1
    e5d0:	e0823203 	add	r3, r2, r3, lsl #4
    e5d4:	e5c41010 	strb	r1, [r4, #16]
    e5d8:	e5840008 	str	r0, [r4, #8]
    e5dc:	e5d31064 	ldrb	r1, [r3, #100]	; 0x64
    e5e0:	e5932068 	ldr	r2, [r3, #104]	; 0x68
    e5e4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    e5e8:	e5c41004 	strb	r1, [r4, #4]
    e5ec:	e584200c 	str	r2, [r4, #12]
    e5f0:	e5843014 	str	r3, [r4, #20]
    e5f4:	eaffffe2 	b	e584 <CMachineInfo::CMachineInfo()+0xe4>
    e5f8:	e3a0c00c 	mov	ip, #12
    e5fc:	e7e2ea52 	ubfx	lr, r2, #20, #3
    e600:	e3011620 	movw	r1, #5664	; 0x1620
    e604:	e3401005 	movt	r1, #5
    e608:	e3a00c01 	mov	r0, #256	; 0x100
    e60c:	e7e35652 	ubfx	r5, r2, #12, #4
    e610:	e021139c 	mla	r1, ip, r3, r1
    e614:	e3550002 	cmp	r5, #2
    e618:	e202300f 	and	r3, r2, #15
    e61c:	e5c45010 	strb	r5, [r4, #16]
    e620:	e5d1c004 	ldrb	ip, [r1, #4]
    e624:	e1a02e10 	lsl	r2, r0, lr
    e628:	e5842014 	str	r2, [r4, #20]
    e62c:	83a02003 	movhi	r2, #3
    e630:	85c42010 	strbhi	r2, [r4, #16]
    e634:	e35e0000 	cmp	lr, #0
    e638:	035c0003 	cmpeq	ip, #3
    e63c:	e5911008 	ldr	r1, [r1, #8]
    e640:	e2833001 	add	r3, r3, #1
    e644:	e5c4c004 	strb	ip, [r4, #4]
    e648:	e5841008 	str	r1, [r4, #8]
    e64c:	e584300c 	str	r3, [r4, #12]
    e650:	1affffcb 	bne	e584 <CMachineInfo::CMachineInfo()+0xe4>
    e654:	e3530001 	cmp	r3, #1
    e658:	13a03002 	movne	r3, #2
    e65c:	03a03001 	moveq	r3, #1
    e660:	e5c43004 	strb	r3, [r4, #4]
    e664:	eaffffc6 	b	e584 <CMachineInfo::CMachineInfo()+0xe4>
    e668:	00051680 	.word	0x00051680
    e66c:	0005162c 	.word	0x0005162c

0000e670 <CMachineInfo::~CMachineInfo()>:
    e670:	e3013c48 	movw	r3, #7240	; 0x1c48
    e674:	e3403005 	movt	r3, #5
    e678:	e3a0100a 	mov	r1, #10
    e67c:	e5c01004 	strb	r1, [r0, #4]
    e680:	e5932000 	ldr	r2, [r3]
    e684:	e1500002 	cmp	r0, r2
    e688:	03a02000 	moveq	r2, #0
    e68c:	05832000 	streq	r2, [r3]
    e690:	e12fff1e 	bx	lr

0000e694 <CMachineInfo::GetMachineModel() const>:
    e694:	e5d00004 	ldrb	r0, [r0, #4]
    e698:	e12fff1e 	bx	lr

0000e69c <CMachineInfo::GetMachineName() const>:
    e69c:	e5d02004 	ldrb	r2, [r0, #4]
    e6a0:	e3013620 	movw	r3, #5664	; 0x1620
    e6a4:	e3403005 	movt	r3, #5
    e6a8:	e0833102 	add	r3, r3, r2, lsl #2
    e6ac:	e5930170 	ldr	r0, [r3, #368]	; 0x170
    e6b0:	e12fff1e 	bx	lr

0000e6b4 <CMachineInfo::GetModelMajor() const>:
    e6b4:	e5900008 	ldr	r0, [r0, #8]
    e6b8:	e12fff1e 	bx	lr

0000e6bc <CMachineInfo::GetModelRevision() const>:
    e6bc:	e590000c 	ldr	r0, [r0, #12]
    e6c0:	e12fff1e 	bx	lr

0000e6c4 <CMachineInfo::GetSoCType() const>:
    e6c4:	e5d00010 	ldrb	r0, [r0, #16]
    e6c8:	e12fff1e 	bx	lr

0000e6cc <CMachineInfo::GetRAMSize() const>:
    e6cc:	e5900014 	ldr	r0, [r0, #20]
    e6d0:	e12fff1e 	bx	lr

0000e6d4 <CMachineInfo::GetSoCName() const>:
    e6d4:	e5d02010 	ldrb	r2, [r0, #16]
    e6d8:	e3013620 	movw	r3, #5664	; 0x1620
    e6dc:	e3403005 	movt	r3, #5
    e6e0:	e0833102 	add	r3, r3, r2, lsl #2
    e6e4:	e593019c 	ldr	r0, [r3, #412]	; 0x19c
    e6e8:	e12fff1e 	bx	lr

0000e6ec <CMachineInfo::GetRevisionRaw() const>:
    e6ec:	e5900000 	ldr	r0, [r0]
    e6f0:	e12fff1e 	bx	lr

0000e6f4 <CMachineInfo::GetClockRate(unsigned int) const>:
    e6f4:	e92d4070 	push	{r4, r5, r6, lr}
    e6f8:	e1a06000 	mov	r6, r0
    e6fc:	e1a05001 	mov	r5, r1
    e700:	e24dd028 	sub	sp, sp, #40	; 0x28
    e704:	e28d000c 	add	r0, sp, #12
    e708:	ebffe778 	bl	84f0 <CBcmPropertyTags::CBcmPropertyTags()>
    e70c:	e3a03004 	mov	r3, #4
    e710:	e58d3000 	str	r3, [sp]
    e714:	e3a03014 	mov	r3, #20
    e718:	e28d000c 	add	r0, sp, #12
    e71c:	e3a01002 	mov	r1, #2
    e720:	e3401003 	movt	r1, #3
    e724:	e08d2003 	add	r2, sp, r3
    e728:	e58d5020 	str	r5, [sp, #32]
    e72c:	ebffe7b7 	bl	8610 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    e730:	e2504000 	subs	r4, r0, #0
    e734:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
    e738:	1a00000b 	bne	e76c <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    e73c:	e3550002 	cmp	r5, #2
    e740:	0a00000e 	beq	e780 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    e744:	e3550004 	cmp	r5, #4
    e748:	0a000012 	beq	e798 <CMachineInfo::GetClockRate(unsigned int) const+0xa4>
    e74c:	e3550001 	cmp	r5, #1
    e750:	0a00000d 	beq	e78c <CMachineInfo::GetClockRate(unsigned int) const+0x98>
    e754:	e30117cc 	movw	r1, #6092	; 0x17cc
    e758:	e3401005 	movt	r1, #5
    e75c:	e3010584 	movw	r0, #5508	; 0x1584
    e760:	e3400005 	movt	r0, #5
    e764:	e3a02f43 	mov	r2, #268	; 0x10c
    e768:	ebfff5a0 	bl	bdf0 <assertion_failed>
    e76c:	e28d000c 	add	r0, sp, #12
    e770:	ebffe764 	bl	8508 <CBcmPropertyTags::~CBcmPropertyTags()>
    e774:	e1a00004 	mov	r0, r4
    e778:	e28dd028 	add	sp, sp, #40	; 0x28
    e77c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e780:	e3a04b1b 	mov	r4, #27648	; 0x6c00
    e784:	e34042dc 	movt	r4, #732	; 0x2dc
    e788:	eafffff7 	b	e76c <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    e78c:	e3a04ce1 	mov	r4, #57600	; 0xe100
    e790:	e34045f5 	movt	r4, #1525	; 0x5f5
    e794:	eafffff4 	b	e76c <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    e798:	e5962008 	ldr	r2, [r6, #8]
    e79c:	e3a03ca3 	mov	r3, #41728	; 0xa300
    e7a0:	e34131e1 	movt	r3, #4577	; 0x11e1
    e7a4:	e3520002 	cmp	r2, #2
    e7a8:	e30b4280 	movw	r4, #45696	; 0xb280
    e7ac:	e3404ee6 	movt	r4, #3814	; 0xee6
    e7b0:	81a04003 	movhi	r4, r3
    e7b4:	eaffffec 	b	e76c <CMachineInfo::GetClockRate(unsigned int) const+0x78>

0000e7b8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    e7b8:	e3510036 	cmp	r1, #54	; 0x36
    e7bc:	0a00000f 	beq	e800 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x48>
    e7c0:	e3510037 	cmp	r1, #55	; 0x37
    e7c4:	1a000004 	bne	e7dc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    e7c8:	e5d03004 	ldrb	r3, [r0, #4]
    e7cc:	e3530003 	cmp	r3, #3
    e7d0:	c3a00028 	movgt	r0, #40	; 0x28
    e7d4:	d3a0002d 	movle	r0, #45	; 0x2d
    e7d8:	e12fff1e 	bx	lr
    e7dc:	e92d4010 	push	{r4, lr}
    e7e0:	e3002137 	movw	r2, #311	; 0x137
    e7e4:	e30117cc 	movw	r1, #6092	; 0x17cc
    e7e8:	e3401005 	movt	r1, #5
    e7ec:	e3010584 	movw	r0, #5508	; 0x1584
    e7f0:	e3400005 	movt	r0, #5
    e7f4:	ebfff57d 	bl	bdf0 <assertion_failed>
    e7f8:	e3a00000 	mov	r0, #0
    e7fc:	e8bd8010 	pop	{r4, pc}
    e800:	e5d03004 	ldrb	r3, [r0, #4]
    e804:	e3530003 	cmp	r3, #3
    e808:	ca000001 	bgt	e814 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
    e80c:	e3a00028 	mov	r0, #40	; 0x28
    e810:	e12fff1e 	bx	lr
    e814:	e5903008 	ldr	r3, [r0, #8]
    e818:	e3530003 	cmp	r3, #3
    e81c:	33a0002d 	movcc	r0, #45	; 0x2d
    e820:	23a00029 	movcs	r0, #41	; 0x29
    e824:	e12fff1e 	bx	lr

0000e828 <CMachineInfo::GetDevice(TDeviceId) const>:
    e828:	e3510000 	cmp	r1, #0
    e82c:	1a000003 	bne	e840 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    e830:	e5d00004 	ldrb	r0, [r0, #4]
    e834:	e2500001 	subs	r0, r0, #1
    e838:	13a00001 	movne	r0, #1
    e83c:	e12fff1e 	bx	lr
    e840:	e92d4010 	push	{r4, lr}
    e844:	e3a02e15 	mov	r2, #336	; 0x150
    e848:	e30117cc 	movw	r1, #6092	; 0x17cc
    e84c:	e3401005 	movt	r1, #5
    e850:	e3010584 	movw	r0, #5508	; 0x1584
    e854:	e3400005 	movt	r0, #5
    e858:	ebfff564 	bl	bdf0 <assertion_failed>
    e85c:	e3a00000 	mov	r0, #0
    e860:	e8bd8010 	pop	{r4, pc}

0000e864 <CMachineInfo::Get()>:
    e864:	e92d4010 	push	{r4, lr}
    e868:	e3014c48 	movw	r4, #7240	; 0x1c48
    e86c:	e3404005 	movt	r4, #5
    e870:	e5940000 	ldr	r0, [r4]
    e874:	e3500000 	cmp	r0, #0
    e878:	18bd8010 	popne	{r4, pc}
    e87c:	e3002159 	movw	r2, #345	; 0x159
    e880:	e30117cc 	movw	r1, #6092	; 0x17cc
    e884:	e3401005 	movt	r1, #5
    e888:	e3000314 	movw	r0, #788	; 0x314
    e88c:	e3400005 	movt	r0, #5
    e890:	ebfff556 	bl	bdf0 <assertion_failed>
    e894:	e5940000 	ldr	r0, [r4]
    e898:	e8bd8010 	pop	{r4, pc}

0000e89c <InvalidateDataCacheL1Only>:
    e89c:	e92d0070 	push	{r4, r5, r6}
    e8a0:	e3a00000 	mov	r0, #0
    e8a4:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
    e8a8:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
    e8ac:	e3071fff 	movw	r1, #32767	; 0x7fff
    e8b0:	e00126a0 	and	r2, r1, r0, lsr #13
    e8b4:	e30013ff 	movw	r1, #1023	; 0x3ff
    e8b8:	e00131a0 	and	r3, r1, r0, lsr #3
    e8bc:	e2822001 	add	r2, r2, #1
    e8c0:	e2000007 	and	r0, r0, #7
    e8c4:	e2800004 	add	r0, r0, #4
    e8c8:	e16f1f13 	clz	r1, r3
    e8cc:	e2834001 	add	r4, r3, #1
    e8d0:	e2422001 	sub	r2, r2, #1
    e8d4:	e1a03004 	mov	r3, r4
    e8d8:	e2533001 	subs	r3, r3, #1
    e8dc:	e1a05113 	lsl	r5, r3, r1
    e8e0:	e1a06012 	lsl	r6, r2, r0
    e8e4:	e1855006 	orr	r5, r5, r6
    e8e8:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
    e8ec:	cafffff9 	bgt	e8d8 <InvalidateDataCacheL1Only+0x3c>
    e8f0:	e3520000 	cmp	r2, #0
    e8f4:	cafffff5 	bgt	e8d0 <InvalidateDataCacheL1Only+0x34>
    e8f8:	f57ff04e 	dsb	st
    e8fc:	f57ff06f 	isb	sy
    e900:	e8bd0070 	pop	{r4, r5, r6}
    e904:	e12fff1e 	bx	lr

0000e908 <InvalidateDataCache>:
    e908:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    e90c:	f57ff05f 	dmb	sy
    e910:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    e914:	e1a03ba0 	lsr	r3, r0, #23
    e918:	e213300e 	ands	r3, r3, #14
    e91c:	0a00001d 	beq	e998 <InvalidateDataCache+0x90>
    e920:	e3a0a000 	mov	sl, #0
    e924:	e08a20aa 	add	r2, sl, sl, lsr #1
    e928:	e1a01230 	lsr	r1, r0, r2
    e92c:	e2011007 	and	r1, r1, #7
    e930:	e3510002 	cmp	r1, #2
    e934:	ba000014 	blt	e98c <InvalidateDataCache+0x84>
    e938:	e10f9000 	mrs	r9, CPSR
    e93c:	f10c0080 	cpsid	i
    e940:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    e944:	f57ff06f 	isb	sy
    e948:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    e94c:	e121f009 	msr	CPSR_c, r9
    e950:	e2012007 	and	r2, r1, #7
    e954:	e2822004 	add	r2, r2, #4
    e958:	e30043ff 	movw	r4, #1023	; 0x3ff
    e95c:	e01441a1 	ands	r4, r4, r1, lsr #3
    e960:	e16f5f14 	clz	r5, r4
    e964:	e3077fff 	movw	r7, #32767	; 0x7fff
    e968:	e01776a1 	ands	r7, r7, r1, lsr #13
    e96c:	e1a09007 	mov	r9, r7
    e970:	e18ab514 	orr	fp, sl, r4, lsl r5
    e974:	e18bb219 	orr	fp, fp, r9, lsl r2
    e978:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
    e97c:	e2599001 	subs	r9, r9, #1
    e980:	aafffffa 	bge	e970 <InvalidateDataCache+0x68>
    e984:	e2544001 	subs	r4, r4, #1
    e988:	aafffff7 	bge	e96c <InvalidateDataCache+0x64>
    e98c:	e28aa002 	add	sl, sl, #2
    e990:	e153000a 	cmp	r3, sl
    e994:	caffffe2 	bgt	e924 <InvalidateDataCache+0x1c>
    e998:	e3a0a000 	mov	sl, #0
    e99c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    e9a0:	f57ff04e 	dsb	st
    e9a4:	f57ff06f 	isb	sy
    e9a8:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    e9ac:	e12fff1e 	bx	lr

0000e9b0 <CleanDataCache>:
    e9b0:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    e9b4:	f57ff05f 	dmb	sy
    e9b8:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    e9bc:	e1a03ba0 	lsr	r3, r0, #23
    e9c0:	e213300e 	ands	r3, r3, #14
    e9c4:	0a00001d 	beq	ea40 <CleanDataCache+0x90>
    e9c8:	e3a0a000 	mov	sl, #0
    e9cc:	e08a20aa 	add	r2, sl, sl, lsr #1
    e9d0:	e1a01230 	lsr	r1, r0, r2
    e9d4:	e2011007 	and	r1, r1, #7
    e9d8:	e3510002 	cmp	r1, #2
    e9dc:	ba000014 	blt	ea34 <CleanDataCache+0x84>
    e9e0:	e10f9000 	mrs	r9, CPSR
    e9e4:	f10c0080 	cpsid	i
    e9e8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    e9ec:	f57ff06f 	isb	sy
    e9f0:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    e9f4:	e121f009 	msr	CPSR_c, r9
    e9f8:	e2012007 	and	r2, r1, #7
    e9fc:	e2822004 	add	r2, r2, #4
    ea00:	e30043ff 	movw	r4, #1023	; 0x3ff
    ea04:	e01441a1 	ands	r4, r4, r1, lsr #3
    ea08:	e16f5f14 	clz	r5, r4
    ea0c:	e3077fff 	movw	r7, #32767	; 0x7fff
    ea10:	e01776a1 	ands	r7, r7, r1, lsr #13
    ea14:	e1a09007 	mov	r9, r7
    ea18:	e18ab514 	orr	fp, sl, r4, lsl r5
    ea1c:	e18bb219 	orr	fp, fp, r9, lsl r2
    ea20:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
    ea24:	e2599001 	subs	r9, r9, #1
    ea28:	aafffffa 	bge	ea18 <CleanDataCache+0x68>
    ea2c:	e2544001 	subs	r4, r4, #1
    ea30:	aafffff7 	bge	ea14 <CleanDataCache+0x64>
    ea34:	e28aa002 	add	sl, sl, #2
    ea38:	e153000a 	cmp	r3, sl
    ea3c:	caffffe2 	bgt	e9cc <CleanDataCache+0x1c>
    ea40:	e3a0a000 	mov	sl, #0
    ea44:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    ea48:	f57ff04e 	dsb	st
    ea4c:	f57ff06f 	isb	sy
    ea50:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    ea54:	e12fff1e 	bx	lr

0000ea58 <CleanAndInvalidateDataCacheRange>:
    ea58:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
    ea5c:	e1a03823 	lsr	r3, r3, #16
    ea60:	e203300f 	and	r3, r3, #15
    ea64:	e3a02004 	mov	r2, #4
    ea68:	e1a02312 	lsl	r2, r2, r3
    ea6c:	e0801001 	add	r1, r0, r1
    ea70:	e2423001 	sub	r3, r2, #1
    ea74:	e1c00003 	bic	r0, r0, r3
    ea78:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    ea7c:	e0800002 	add	r0, r0, r2
    ea80:	e1500001 	cmp	r0, r1
    ea84:	3afffffb 	bcc	ea78 <CleanAndInvalidateDataCacheRange+0x20>
    ea88:	f57ff04e 	dsb	st
    ea8c:	e12fff1e 	bx	lr

0000ea90 <CPtrList::CPtrList()>:
    ea90:	e3a02000 	mov	r2, #0
    ea94:	e5802000 	str	r2, [r0]
    ea98:	e12fff1e 	bx	lr

0000ea9c <CPtrList::~CPtrList()>:
    ea9c:	e5903000 	ldr	r3, [r0]
    eaa0:	e92d4010 	push	{r4, lr}
    eaa4:	e1a04000 	mov	r4, r0
    eaa8:	e3530000 	cmp	r3, #0
    eaac:	0a000005 	beq	eac8 <CPtrList::~CPtrList()+0x2c>
    eab0:	e30118c0 	movw	r1, #6336	; 0x18c0
    eab4:	e3401005 	movt	r1, #5
    eab8:	e30108cc 	movw	r0, #6348	; 0x18cc
    eabc:	e3400005 	movt	r0, #5
    eac0:	e3a0202a 	mov	r2, #42	; 0x2a
    eac4:	ebfff4c9 	bl	bdf0 <assertion_failed>
    eac8:	e1a00004 	mov	r0, r4
    eacc:	e8bd8010 	pop	{r4, pc}

0000ead0 <CPtrList::GetFirst()>:
    ead0:	e5900000 	ldr	r0, [r0]
    ead4:	e12fff1e 	bx	lr

0000ead8 <CPtrList::GetNext(TPtrListElement*)>:
    ead8:	e92d4010 	push	{r4, lr}
    eadc:	e2514000 	subs	r4, r1, #0
    eae0:	0a00000c 	beq	eb18 <CPtrList::GetNext(TPtrListElement*)+0x40>
    eae4:	e5942000 	ldr	r2, [r4]
    eae8:	e3043d43 	movw	r3, #19779	; 0x4d43
    eaec:	e345304c 	movt	r3, #20556	; 0x504c
    eaf0:	e1520003 	cmp	r2, r3
    eaf4:	0a000005 	beq	eb10 <CPtrList::GetNext(TPtrListElement*)+0x38>
    eaf8:	e30118c0 	movw	r1, #6336	; 0x18c0
    eafc:	e3401005 	movt	r1, #5
    eb00:	e30108ec 	movw	r0, #6380	; 0x18ec
    eb04:	e3400005 	movt	r0, #5
    eb08:	e3a02035 	mov	r2, #53	; 0x35
    eb0c:	ebfff4b7 	bl	bdf0 <assertion_failed>
    eb10:	e5940008 	ldr	r0, [r4, #8]
    eb14:	e8bd8010 	pop	{r4, pc}
    eb18:	e30118c0 	movw	r1, #6336	; 0x18c0
    eb1c:	e3401005 	movt	r1, #5
    eb20:	e30108dc 	movw	r0, #6364	; 0x18dc
    eb24:	e3400005 	movt	r0, #5
    eb28:	e3a02034 	mov	r2, #52	; 0x34
    eb2c:	ebfff4af 	bl	bdf0 <assertion_failed>
    eb30:	eaffffeb 	b	eae4 <CPtrList::GetNext(TPtrListElement*)+0xc>

0000eb34 <CPtrList::GetPtr(TPtrListElement*)>:
    eb34:	e92d4010 	push	{r4, lr}
    eb38:	e2514000 	subs	r4, r1, #0
    eb3c:	0a00000c 	beq	eb74 <CPtrList::GetPtr(TPtrListElement*)+0x40>
    eb40:	e5942000 	ldr	r2, [r4]
    eb44:	e3043d43 	movw	r3, #19779	; 0x4d43
    eb48:	e345304c 	movt	r3, #20556	; 0x504c
    eb4c:	e1520003 	cmp	r2, r3
    eb50:	0a000005 	beq	eb6c <CPtrList::GetPtr(TPtrListElement*)+0x38>
    eb54:	e30118c0 	movw	r1, #6336	; 0x18c0
    eb58:	e3401005 	movt	r1, #5
    eb5c:	e30108ec 	movw	r0, #6380	; 0x18ec
    eb60:	e3400005 	movt	r0, #5
    eb64:	e3a0203d 	mov	r2, #61	; 0x3d
    eb68:	ebfff4a0 	bl	bdf0 <assertion_failed>
    eb6c:	e594000c 	ldr	r0, [r4, #12]
    eb70:	e8bd8010 	pop	{r4, pc}
    eb74:	e30118c0 	movw	r1, #6336	; 0x18c0
    eb78:	e3401005 	movt	r1, #5
    eb7c:	e30108dc 	movw	r0, #6364	; 0x18dc
    eb80:	e3400005 	movt	r0, #5
    eb84:	e3a0203c 	mov	r2, #60	; 0x3c
    eb88:	ebfff498 	bl	bdf0 <assertion_failed>
    eb8c:	eaffffeb 	b	eb40 <CPtrList::GetPtr(TPtrListElement*)+0xc>

0000eb90 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
    eb90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    eb94:	e1a06000 	mov	r6, r0
    eb98:	e3a00010 	mov	r0, #16
    eb9c:	e1a07002 	mov	r7, r2
    eba0:	e1a04001 	mov	r4, r1
    eba4:	ebffeae4 	bl	973c <operator new(unsigned int)>
    eba8:	e5962000 	ldr	r2, [r6]
    ebac:	e3043d43 	movw	r3, #19779	; 0x4d43
    ebb0:	e345304c 	movt	r3, #20556	; 0x504c
    ebb4:	e3520000 	cmp	r2, #0
    ebb8:	e1a05000 	mov	r5, r0
    ebbc:	e580700c 	str	r7, [r0, #12]
    ebc0:	e5803000 	str	r3, [r0]
    ebc4:	0a000029 	beq	ec70 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
    ebc8:	e3540000 	cmp	r4, #0
    ebcc:	0a00002e 	beq	ec8c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
    ebd0:	e5942000 	ldr	r2, [r4]
    ebd4:	e3043d43 	movw	r3, #19779	; 0x4d43
    ebd8:	e345304c 	movt	r3, #20556	; 0x504c
    ebdc:	e1520003 	cmp	r2, r3
    ebe0:	0a000005 	beq	ebfc <CPtrList::InsertBefore(TPtrListElement*, void*)+0x6c>
    ebe4:	e30118c0 	movw	r1, #6336	; 0x18c0
    ebe8:	e3401005 	movt	r1, #5
    ebec:	e301092c 	movw	r0, #6444	; 0x192c
    ebf0:	e3400005 	movt	r0, #5
    ebf4:	e3a0204e 	mov	r2, #78	; 0x4e
    ebf8:	ebfff47c 	bl	bdf0 <assertion_failed>
    ebfc:	e5963000 	ldr	r3, [r6]
    ec00:	e1540003 	cmp	r4, r3
    ec04:	0a000013 	beq	ec58 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
    ec08:	e5943004 	ldr	r3, [r4, #4]
    ec0c:	e5854008 	str	r4, [r5, #8]
    ec10:	e3530000 	cmp	r3, #0
    ec14:	e5853004 	str	r3, [r5, #4]
    ec18:	0a00000c 	beq	ec50 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
    ec1c:	e5931000 	ldr	r1, [r3]
    ec20:	e3042d43 	movw	r2, #19779	; 0x4d43
    ec24:	e345204c 	movt	r2, #20556	; 0x504c
    ec28:	e1510002 	cmp	r1, r2
    ec2c:	0a000006 	beq	ec4c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xbc>
    ec30:	e30118c0 	movw	r1, #6336	; 0x18c0
    ec34:	e3401005 	movt	r1, #5
    ec38:	e3010950 	movw	r0, #6480	; 0x1950
    ec3c:	e3400005 	movt	r0, #5
    ec40:	e3a02060 	mov	r2, #96	; 0x60
    ec44:	ebfff469 	bl	bdf0 <assertion_failed>
    ec48:	e5943004 	ldr	r3, [r4, #4]
    ec4c:	e5835008 	str	r5, [r3, #8]
    ec50:	e5845004 	str	r5, [r4, #4]
    ec54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ec58:	e3a03000 	mov	r3, #0
    ec5c:	e5845004 	str	r5, [r4, #4]
    ec60:	e5854008 	str	r4, [r5, #8]
    ec64:	e5865000 	str	r5, [r6]
    ec68:	e5853004 	str	r3, [r5, #4]
    ec6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ec70:	e30118c0 	movw	r1, #6336	; 0x18c0
    ec74:	e3401005 	movt	r1, #5
    ec78:	e3010910 	movw	r0, #6416	; 0x1910
    ec7c:	e3400005 	movt	r0, #5
    ec80:	e3a0204c 	mov	r2, #76	; 0x4c
    ec84:	ebfff459 	bl	bdf0 <assertion_failed>
    ec88:	eaffffce 	b	ebc8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x38>
    ec8c:	e30118c0 	movw	r1, #6336	; 0x18c0
    ec90:	e3401005 	movt	r1, #5
    ec94:	e3010920 	movw	r0, #6432	; 0x1920
    ec98:	e3400005 	movt	r0, #5
    ec9c:	e3a0204d 	mov	r2, #77	; 0x4d
    eca0:	ebfff452 	bl	bdf0 <assertion_failed>
    eca4:	eaffffc9 	b	ebd0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x40>

0000eca8 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
    eca8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ecac:	e1a06000 	mov	r6, r0
    ecb0:	e1a05001 	mov	r5, r1
    ecb4:	e3a00010 	mov	r0, #16
    ecb8:	e1a07002 	mov	r7, r2
    ecbc:	ebffea9e 	bl	973c <operator new(unsigned int)>
    ecc0:	e3550000 	cmp	r5, #0
    ecc4:	e3043d43 	movw	r3, #19779	; 0x4d43
    ecc8:	e345304c 	movt	r3, #20556	; 0x504c
    eccc:	e5803000 	str	r3, [r0]
    ecd0:	e1a04000 	mov	r4, r0
    ecd4:	e580700c 	str	r7, [r0, #12]
    ecd8:	e5963000 	ldr	r3, [r6]
    ecdc:	0a000020 	beq	ed64 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
    ece0:	e3530000 	cmp	r3, #0
    ece4:	0a00002b 	beq	ed98 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
    ece8:	e5952000 	ldr	r2, [r5]
    ecec:	e3043d43 	movw	r3, #19779	; 0x4d43
    ecf0:	e345304c 	movt	r3, #20556	; 0x504c
    ecf4:	e1520003 	cmp	r2, r3
    ecf8:	0a000005 	beq	ed14 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
    ecfc:	e30118c0 	movw	r1, #6336	; 0x18c0
    ed00:	e3401005 	movt	r1, #5
    ed04:	e3010978 	movw	r0, #6520	; 0x1978
    ed08:	e3400005 	movt	r0, #5
    ed0c:	e3a0207e 	mov	r2, #126	; 0x7e
    ed10:	ebfff436 	bl	bdf0 <assertion_failed>
    ed14:	e5953008 	ldr	r3, [r5, #8]
    ed18:	e5845004 	str	r5, [r4, #4]
    ed1c:	e3530000 	cmp	r3, #0
    ed20:	e5843008 	str	r3, [r4, #8]
    ed24:	0a00000c 	beq	ed5c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>
    ed28:	e5931000 	ldr	r1, [r3]
    ed2c:	e3042d43 	movw	r2, #19779	; 0x4d43
    ed30:	e345204c 	movt	r2, #20556	; 0x504c
    ed34:	e1510002 	cmp	r1, r2
    ed38:	0a000006 	beq	ed58 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb0>
    ed3c:	e30118c0 	movw	r1, #6336	; 0x18c0
    ed40:	e3401005 	movt	r1, #5
    ed44:	e301099c 	movw	r0, #6556	; 0x199c
    ed48:	e3400005 	movt	r0, #5
    ed4c:	e3a02085 	mov	r2, #133	; 0x85
    ed50:	ebfff426 	bl	bdf0 <assertion_failed>
    ed54:	e5953008 	ldr	r3, [r5, #8]
    ed58:	e5834004 	str	r4, [r3, #4]
    ed5c:	e5854008 	str	r4, [r5, #8]
    ed60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ed64:	e3530000 	cmp	r3, #0
    ed68:	0a000005 	beq	ed84 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
    ed6c:	e30118c0 	movw	r1, #6336	; 0x18c0
    ed70:	e3401005 	movt	r1, #5
    ed74:	e30108cc 	movw	r0, #6348	; 0x18cc
    ed78:	e3400005 	movt	r0, #5
    ed7c:	e3a02074 	mov	r2, #116	; 0x74
    ed80:	ebfff41a 	bl	bdf0 <assertion_failed>
    ed84:	e3a03000 	mov	r3, #0
    ed88:	e5864000 	str	r4, [r6]
    ed8c:	e5843004 	str	r3, [r4, #4]
    ed90:	e5843008 	str	r3, [r4, #8]
    ed94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ed98:	e30118c0 	movw	r1, #6336	; 0x18c0
    ed9c:	e3401005 	movt	r1, #5
    eda0:	e3010910 	movw	r0, #6416	; 0x1910
    eda4:	e3400005 	movt	r0, #5
    eda8:	e3a0207d 	mov	r2, #125	; 0x7d
    edac:	ebfff40f 	bl	bdf0 <assertion_failed>
    edb0:	eaffffcc 	b	ece8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x40>

0000edb4 <CPtrList::Remove(TPtrListElement*)>:
    edb4:	e92d4070 	push	{r4, r5, r6, lr}
    edb8:	e2514000 	subs	r4, r1, #0
    edbc:	e1a05000 	mov	r5, r0
    edc0:	0a000047 	beq	eee4 <CPtrList::Remove(TPtrListElement*)+0x130>
    edc4:	e5942000 	ldr	r2, [r4]
    edc8:	e3043d43 	movw	r3, #19779	; 0x4d43
    edcc:	e345304c 	movt	r3, #20556	; 0x504c
    edd0:	e1520003 	cmp	r2, r3
    edd4:	0a000005 	beq	edf0 <CPtrList::Remove(TPtrListElement*)+0x3c>
    edd8:	e30118c0 	movw	r1, #6336	; 0x18c0
    eddc:	e3401005 	movt	r1, #5
    ede0:	e30108ec 	movw	r0, #6380	; 0x18ec
    ede4:	e3400005 	movt	r0, #5
    ede8:	e3a02090 	mov	r2, #144	; 0x90
    edec:	ebfff3ff 	bl	bdf0 <assertion_failed>
    edf0:	e5953000 	ldr	r3, [r5]
    edf4:	e1540003 	cmp	r4, r3
    edf8:	0a000026 	beq	ee98 <CPtrList::Remove(TPtrListElement*)+0xe4>
    edfc:	e5943004 	ldr	r3, [r4, #4]
    ee00:	e3530000 	cmp	r3, #0
    ee04:	0a00003d 	beq	ef00 <CPtrList::Remove(TPtrListElement*)+0x14c>
    ee08:	e5931000 	ldr	r1, [r3]
    ee0c:	e3042d43 	movw	r2, #19779	; 0x4d43
    ee10:	e345204c 	movt	r2, #20556	; 0x504c
    ee14:	e1510002 	cmp	r1, r2
    ee18:	0a000006 	beq	ee38 <CPtrList::Remove(TPtrListElement*)+0x84>
    ee1c:	e30118c0 	movw	r1, #6336	; 0x18c0
    ee20:	e3401005 	movt	r1, #5
    ee24:	e3010a0c 	movw	r0, #6668	; 0x1a0c
    ee28:	e3400005 	movt	r0, #5
    ee2c:	e3a0209f 	mov	r2, #159	; 0x9f
    ee30:	ebfff3ee 	bl	bdf0 <assertion_failed>
    ee34:	e5943004 	ldr	r3, [r4, #4]
    ee38:	e5942008 	ldr	r2, [r4, #8]
    ee3c:	e5832008 	str	r2, [r3, #8]
    ee40:	e5942008 	ldr	r2, [r4, #8]
    ee44:	e3520000 	cmp	r2, #0
    ee48:	0a00000d 	beq	ee84 <CPtrList::Remove(TPtrListElement*)+0xd0>
    ee4c:	e5920000 	ldr	r0, [r2]
    ee50:	e3041d43 	movw	r1, #19779	; 0x4d43
    ee54:	e345104c 	movt	r1, #20556	; 0x504c
    ee58:	e1500001 	cmp	r0, r1
    ee5c:	0a000007 	beq	ee80 <CPtrList::Remove(TPtrListElement*)+0xcc>
    ee60:	e3a020a4 	mov	r2, #164	; 0xa4
    ee64:	e30118c0 	movw	r1, #6336	; 0x18c0
    ee68:	e3401005 	movt	r1, #5
    ee6c:	e30109c8 	movw	r0, #6600	; 0x19c8
    ee70:	e3400005 	movt	r0, #5
    ee74:	ebfff3dd 	bl	bdf0 <assertion_failed>
    ee78:	e5942008 	ldr	r2, [r4, #8]
    ee7c:	e5943004 	ldr	r3, [r4, #4]
    ee80:	e5823004 	str	r3, [r2, #4]
    ee84:	e3a03000 	mov	r3, #0
    ee88:	e1a00004 	mov	r0, r4
    ee8c:	e5843000 	str	r3, [r4]
    ee90:	e8bd4070 	pop	{r4, r5, r6, lr}
    ee94:	eaffea2a 	b	9744 <operator delete(void*)>
    ee98:	e5943008 	ldr	r3, [r4, #8]
    ee9c:	e3530000 	cmp	r3, #0
    eea0:	e5853000 	str	r3, [r5]
    eea4:	0afffff6 	beq	ee84 <CPtrList::Remove(TPtrListElement*)+0xd0>
    eea8:	e5931000 	ldr	r1, [r3]
    eeac:	e3042d43 	movw	r2, #19779	; 0x4d43
    eeb0:	e345204c 	movt	r2, #20556	; 0x504c
    eeb4:	e1510002 	cmp	r1, r2
    eeb8:	0a000006 	beq	eed8 <CPtrList::Remove(TPtrListElement*)+0x124>
    eebc:	e30118c0 	movw	r1, #6336	; 0x18c0
    eec0:	e3401005 	movt	r1, #5
    eec4:	e30109c8 	movw	r0, #6600	; 0x19c8
    eec8:	e3400005 	movt	r0, #5
    eecc:	e3a02098 	mov	r2, #152	; 0x98
    eed0:	ebfff3c6 	bl	bdf0 <assertion_failed>
    eed4:	e5943008 	ldr	r3, [r4, #8]
    eed8:	e3a02000 	mov	r2, #0
    eedc:	e5832004 	str	r2, [r3, #4]
    eee0:	eaffffe7 	b	ee84 <CPtrList::Remove(TPtrListElement*)+0xd0>
    eee4:	e30118c0 	movw	r1, #6336	; 0x18c0
    eee8:	e3401005 	movt	r1, #5
    eeec:	e30108dc 	movw	r0, #6364	; 0x18dc
    eef0:	e3400005 	movt	r0, #5
    eef4:	e3a0208f 	mov	r2, #143	; 0x8f
    eef8:	ebfff3bc 	bl	bdf0 <assertion_failed>
    eefc:	eaffffb0 	b	edc4 <CPtrList::Remove(TPtrListElement*)+0x10>
    ef00:	e30118c0 	movw	r1, #6336	; 0x18c0
    ef04:	e3401005 	movt	r1, #5
    ef08:	e30109f4 	movw	r0, #6644	; 0x19f4
    ef0c:	e3400005 	movt	r0, #5
    ef10:	e3a0209e 	mov	r2, #158	; 0x9e
    ef14:	ebfff3b5 	bl	bdf0 <assertion_failed>
    ef18:	e5943004 	ldr	r3, [r4, #4]
    ef1c:	eaffffb9 	b	ee08 <CPtrList::Remove(TPtrListElement*)+0x54>

0000ef20 <CPtrList::Find(void*)>:
    ef20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ef24:	e5904000 	ldr	r4, [r0]
    ef28:	e3540000 	cmp	r4, #0
    ef2c:	0a000016 	beq	ef8c <CPtrList::Find(void*)+0x6c>
    ef30:	e3048d43 	movw	r8, #19779	; 0x4d43
    ef34:	e345804c 	movt	r8, #20556	; 0x504c
    ef38:	e30178c0 	movw	r7, #6336	; 0x18c0
    ef3c:	e3407005 	movt	r7, #5
    ef40:	e30168ec 	movw	r6, #6380	; 0x18ec
    ef44:	e3406005 	movt	r6, #5
    ef48:	e1a05001 	mov	r5, r1
    ef4c:	ea000002 	b	ef5c <CPtrList::Find(void*)+0x3c>
    ef50:	e5944008 	ldr	r4, [r4, #8]
    ef54:	e3540000 	cmp	r4, #0
    ef58:	0a00000b 	beq	ef8c <CPtrList::Find(void*)+0x6c>
    ef5c:	e5943000 	ldr	r3, [r4]
    ef60:	e3a020b3 	mov	r2, #179	; 0xb3
    ef64:	e1a01007 	mov	r1, r7
    ef68:	e1a00006 	mov	r0, r6
    ef6c:	e1530008 	cmp	r3, r8
    ef70:	0a000000 	beq	ef78 <CPtrList::Find(void*)+0x58>
    ef74:	ebfff39d 	bl	bdf0 <assertion_failed>
    ef78:	e594300c 	ldr	r3, [r4, #12]
    ef7c:	e1530005 	cmp	r3, r5
    ef80:	1afffff2 	bne	ef50 <CPtrList::Find(void*)+0x30>
    ef84:	e1a00004 	mov	r0, r4
    ef88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ef8c:	e3a04000 	mov	r4, #0
    ef90:	e1a00004 	mov	r0, r4
    ef94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000ef98 <mem_init>:
    ef98:	e0801001 	add	r1, r0, r1
    ef9c:	e3012c4c 	movw	r2, #7244	; 0x1c4c
    efa0:	e3402005 	movt	r2, #5
    efa4:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
    efa8:	e3500605 	cmp	r0, #5242880	; 0x500000
    efac:	e2433a03 	sub	r3, r3, #12288	; 0x3000
    efb0:	33a00605 	movcc	r0, #5242880	; 0x500000
    efb4:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
    efb8:	e241c501 	sub	ip, r1, #4194304	; 0x400000
    efbc:	e3c3300f 	bic	r3, r3, #15
    efc0:	e5820000 	str	r0, [r2]
    efc4:	e582100c 	str	r1, [r2, #12]
    efc8:	e582c004 	str	ip, [r2, #4]
    efcc:	e5823008 	str	r3, [r2, #8]
    efd0:	e12fff1e 	bx	lr

0000efd4 <mem_get_size>:
    efd4:	e3013c4c 	movw	r3, #7244	; 0x1c4c
    efd8:	e3403005 	movt	r3, #5
    efdc:	e5930004 	ldr	r0, [r3, #4]
    efe0:	e5931000 	ldr	r1, [r3]
    efe4:	e593200c 	ldr	r2, [r3, #12]
    efe8:	e5933008 	ldr	r3, [r3, #8]
    efec:	e0400001 	sub	r0, r0, r1
    eff0:	e0423003 	sub	r3, r2, r3
    eff4:	e0800003 	add	r0, r0, r3
    eff8:	e12fff1e 	bx	lr

0000effc <malloc>:
    effc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f000:	e3017c4c 	movw	r7, #7244	; 0x1c4c
    f004:	e3407005 	movt	r7, #5
    f008:	e1a05000 	mov	r5, r0
    f00c:	e5973000 	ldr	r3, [r7]
    f010:	e3530000 	cmp	r3, #0
    f014:	0a000053 	beq	f168 <malloc+0x16c>
    f018:	e5973010 	ldr	r3, [r7, #16]
    f01c:	e3530000 	cmp	r3, #0
    f020:	1a00004b 	bne	f154 <malloc+0x158>
    f024:	e3014b6c 	movw	r4, #7020	; 0x1b6c
    f028:	e3404005 	movt	r4, #5
    f02c:	e5943000 	ldr	r3, [r4]
    f030:	e3530000 	cmp	r3, #0
    f034:	0a000007 	beq	f058 <malloc+0x5c>
    f038:	e1550003 	cmp	r5, r3
    f03c:	8a000002 	bhi	f04c <malloc+0x50>
    f040:	ea000011 	b	f08c <malloc+0x90>
    f044:	e1530005 	cmp	r3, r5
    f048:	2a00000f 	bcs	f08c <malloc+0x90>
    f04c:	e5b43008 	ldr	r3, [r4, #8]!
    f050:	e3530000 	cmp	r3, #0
    f054:	1afffffa 	bne	f044 <malloc+0x48>
    f058:	e5976000 	ldr	r6, [r7]
    f05c:	e285301f 	add	r3, r5, #31
    f060:	e3c3300f 	bic	r3, r3, #15
    f064:	e5972004 	ldr	r2, [r7, #4]
    f068:	e0863003 	add	r3, r6, r3
    f06c:	e1530002 	cmp	r3, r2
    f070:	e5873000 	str	r3, [r7]
    f074:	9a000028 	bls	f11c <malloc+0x120>
    f078:	e5974010 	ldr	r4, [r7, #16]
    f07c:	e3540000 	cmp	r4, #0
    f080:	1a000035 	bne	f15c <malloc+0x160>
    f084:	e1a00004 	mov	r0, r4
    f088:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f08c:	e5946004 	ldr	r6, [r4, #4]
    f090:	e3560000 	cmp	r6, #0
    f094:	01a05003 	moveq	r5, r3
    f098:	0affffee 	beq	f058 <malloc+0x5c>
    f09c:	e5962000 	ldr	r2, [r6]
    f0a0:	e3043d43 	movw	r3, #19779	; 0x4d43
    f0a4:	e344324c 	movt	r3, #16972	; 0x424c
    f0a8:	e1520003 	cmp	r2, r3
    f0ac:	0a000005 	beq	f0c8 <malloc+0xcc>
    f0b0:	e3011a38 	movw	r1, #6712	; 0x1a38
    f0b4:	e3401005 	movt	r1, #5
    f0b8:	e3010a58 	movw	r0, #6744	; 0x1a58
    f0bc:	e3400005 	movt	r0, #5
    f0c0:	e3a02089 	mov	r2, #137	; 0x89
    f0c4:	ebfff349 	bl	bdf0 <assertion_failed>
    f0c8:	e5963008 	ldr	r3, [r6, #8]
    f0cc:	e5843004 	str	r3, [r4, #4]
    f0d0:	e5973010 	ldr	r3, [r7, #16]
    f0d4:	e3530000 	cmp	r3, #0
    f0d8:	1a00001b 	bne	f14c <malloc+0x150>
    f0dc:	e2864010 	add	r4, r6, #16
    f0e0:	e3a03000 	mov	r3, #0
    f0e4:	e314000f 	tst	r4, #15
    f0e8:	e5c63008 	strb	r3, [r6, #8]
    f0ec:	e5c63009 	strb	r3, [r6, #9]
    f0f0:	e5c6300a 	strb	r3, [r6, #10]
    f0f4:	e5c6300b 	strb	r3, [r6, #11]
    f0f8:	0affffe1 	beq	f084 <malloc+0x88>
    f0fc:	e3a020a1 	mov	r2, #161	; 0xa1
    f100:	e3011a38 	movw	r1, #6712	; 0x1a38
    f104:	e3401005 	movt	r1, #5
    f108:	e3010a7c 	movw	r0, #6780	; 0x1a7c
    f10c:	e3400005 	movt	r0, #5
    f110:	ebfff336 	bl	bdf0 <assertion_failed>
    f114:	e1a00004 	mov	r0, r4
    f118:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f11c:	e3a03042 	mov	r3, #66	; 0x42
    f120:	e3a00043 	mov	r0, #67	; 0x43
    f124:	e5c63003 	strb	r3, [r6, #3]
    f128:	e3a0104d 	mov	r1, #77	; 0x4d
    f12c:	e5973010 	ldr	r3, [r7, #16]
    f130:	e3a0204c 	mov	r2, #76	; 0x4c
    f134:	e5865004 	str	r5, [r6, #4]
    f138:	e3530000 	cmp	r3, #0
    f13c:	e5c60000 	strb	r0, [r6]
    f140:	e5c61001 	strb	r1, [r6, #1]
    f144:	e5c62002 	strb	r2, [r6, #2]
    f148:	0affffe3 	beq	f0dc <malloc+0xe0>
    f14c:	ebffe98b 	bl	9780 <LeaveCritical>
    f150:	eaffffe1 	b	f0dc <malloc+0xe0>
    f154:	ebffe97c 	bl	974c <EnterCritical>
    f158:	eaffffb1 	b	f024 <malloc+0x28>
    f15c:	ebffe987 	bl	9780 <LeaveCritical>
    f160:	e3a04000 	mov	r4, #0
    f164:	eaffffc6 	b	f084 <malloc+0x88>
    f168:	e3011a38 	movw	r1, #6712	; 0x1a38
    f16c:	e3401005 	movt	r1, #5
    f170:	e3010a44 	movw	r0, #6724	; 0x1a44
    f174:	e3400005 	movt	r0, #5
    f178:	e3a0206f 	mov	r2, #111	; 0x6f
    f17c:	ebfff31b 	bl	bdf0 <assertion_failed>
    f180:	eaffffa4 	b	f018 <malloc+0x1c>

0000f184 <free>:
    f184:	e92d4070 	push	{r4, r5, r6, lr}
    f188:	e2505000 	subs	r5, r0, #0
    f18c:	08bd8070 	popeq	{r4, r5, r6, pc}
    f190:	e5352010 	ldr	r2, [r5, #-16]!
    f194:	e3043d43 	movw	r3, #19779	; 0x4d43
    f198:	e344324c 	movt	r3, #16972	; 0x424c
    f19c:	e1520003 	cmp	r2, r3
    f1a0:	0a000005 	beq	f1bc <free+0x38>
    f1a4:	e3011a38 	movw	r1, #6712	; 0x1a38
    f1a8:	e3401005 	movt	r1, #5
    f1ac:	e3010a58 	movw	r0, #6744	; 0x1a58
    f1b0:	e3400005 	movt	r0, #5
    f1b4:	e3a020ae 	mov	r2, #174	; 0xae
    f1b8:	ebfff30c 	bl	bdf0 <assertion_failed>
    f1bc:	e3014b6c 	movw	r4, #7020	; 0x1b6c
    f1c0:	e3404005 	movt	r4, #5
    f1c4:	e5943000 	ldr	r3, [r4]
    f1c8:	e3530000 	cmp	r3, #0
    f1cc:	08bd8070 	popeq	{r4, r5, r6, pc}
    f1d0:	e5952004 	ldr	r2, [r5, #4]
    f1d4:	e1520003 	cmp	r2, r3
    f1d8:	1a000002 	bne	f1e8 <free+0x64>
    f1dc:	ea000005 	b	f1f8 <free+0x74>
    f1e0:	e1530002 	cmp	r3, r2
    f1e4:	0a000003 	beq	f1f8 <free+0x74>
    f1e8:	e5b43008 	ldr	r3, [r4, #8]!
    f1ec:	e3530000 	cmp	r3, #0
    f1f0:	1afffffa 	bne	f1e0 <free+0x5c>
    f1f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    f1f8:	e3016c4c 	movw	r6, #7244	; 0x1c4c
    f1fc:	e3406005 	movt	r6, #5
    f200:	e5963010 	ldr	r3, [r6, #16]
    f204:	e3530000 	cmp	r3, #0
    f208:	1a000003 	bne	f21c <free+0x98>
    f20c:	e5943004 	ldr	r3, [r4, #4]
    f210:	e5853008 	str	r3, [r5, #8]
    f214:	e5845004 	str	r5, [r4, #4]
    f218:	e8bd8070 	pop	{r4, r5, r6, pc}
    f21c:	ebffe94a 	bl	974c <EnterCritical>
    f220:	e5962010 	ldr	r2, [r6, #16]
    f224:	e5943004 	ldr	r3, [r4, #4]
    f228:	e3520000 	cmp	r2, #0
    f22c:	e5853008 	str	r3, [r5, #8]
    f230:	e5845004 	str	r5, [r4, #4]
    f234:	08bd8070 	popeq	{r4, r5, r6, pc}
    f238:	e8bd4070 	pop	{r4, r5, r6, lr}
    f23c:	eaffe94f 	b	9780 <LeaveCritical>

0000f240 <palloc>:
    f240:	e92d4070 	push	{r4, r5, r6, lr}
    f244:	e3014c4c 	movw	r4, #7244	; 0x1c4c
    f248:	e3404005 	movt	r4, #5
    f24c:	e5943008 	ldr	r3, [r4, #8]
    f250:	e3530000 	cmp	r3, #0
    f254:	0a00002c 	beq	f30c <palloc+0xcc>
    f258:	e5943014 	ldr	r3, [r4, #20]
    f25c:	e3530000 	cmp	r3, #0
    f260:	1a000019 	bne	f2cc <palloc+0x8c>
    f264:	e5945018 	ldr	r5, [r4, #24]
    f268:	e3550000 	cmp	r5, #0
    f26c:	0a00001a 	beq	f2dc <palloc+0x9c>
    f270:	e5952000 	ldr	r2, [r5]
    f274:	e3043d43 	movw	r3, #19779	; 0x4d43
    f278:	e3453047 	movt	r3, #20551	; 0x5047
    f27c:	e1520003 	cmp	r2, r3
    f280:	0a000005 	beq	f29c <palloc+0x5c>
    f284:	e3011a38 	movw	r1, #6712	; 0x1a38
    f288:	e3401005 	movt	r1, #5
    f28c:	e3010abc 	movw	r0, #6844	; 0x1abc
    f290:	e3400005 	movt	r0, #5
    f294:	e3a020d4 	mov	r2, #212	; 0xd4
    f298:	ebfff2d4 	bl	bdf0 <assertion_failed>
    f29c:	e5953004 	ldr	r3, [r5, #4]
    f2a0:	e3a02000 	mov	r2, #0
    f2a4:	e5852000 	str	r2, [r5]
    f2a8:	e5843018 	str	r3, [r4, #24]
    f2ac:	e5943014 	ldr	r3, [r4, #20]
    f2b0:	e3530000 	cmp	r3, #0
    f2b4:	1a000001 	bne	f2c0 <palloc+0x80>
    f2b8:	e1a00005 	mov	r0, r5
    f2bc:	e8bd8070 	pop	{r4, r5, r6, pc}
    f2c0:	ebffe92e 	bl	9780 <LeaveCritical>
    f2c4:	e1a00005 	mov	r0, r5
    f2c8:	e8bd8070 	pop	{r4, r5, r6, pc}
    f2cc:	ebffe91e 	bl	974c <EnterCritical>
    f2d0:	e5945018 	ldr	r5, [r4, #24]
    f2d4:	e3550000 	cmp	r5, #0
    f2d8:	1affffe4 	bne	f270 <palloc+0x30>
    f2dc:	e5945008 	ldr	r5, [r4, #8]
    f2e0:	e594200c 	ldr	r2, [r4, #12]
    f2e4:	e2853a01 	add	r3, r5, #4096	; 0x1000
    f2e8:	e1530002 	cmp	r3, r2
    f2ec:	e5843008 	str	r3, [r4, #8]
    f2f0:	9affffed 	bls	f2ac <palloc+0x6c>
    f2f4:	e5945014 	ldr	r5, [r4, #20]
    f2f8:	e3550000 	cmp	r5, #0
    f2fc:	0affffed 	beq	f2b8 <palloc+0x78>
    f300:	ebffe91e 	bl	9780 <LeaveCritical>
    f304:	e3a00000 	mov	r0, #0
    f308:	e8bd8070 	pop	{r4, r5, r6, pc}
    f30c:	e3011a38 	movw	r1, #6712	; 0x1a38
    f310:	e3401005 	movt	r1, #5
    f314:	e3010aa8 	movw	r0, #6824	; 0x1aa8
    f318:	e3400005 	movt	r0, #5
    f31c:	e3a020c6 	mov	r2, #198	; 0xc6
    f320:	ebfff2b2 	bl	bdf0 <assertion_failed>
    f324:	eaffffcb 	b	f258 <palloc+0x18>

0000f328 <pfree>:
    f328:	e92d4070 	push	{r4, r5, r6, lr}
    f32c:	e2505000 	subs	r5, r0, #0
    f330:	08bd8070 	popeq	{r4, r5, r6, pc}
    f334:	e3014c4c 	movw	r4, #7244	; 0x1c4c
    f338:	e3404005 	movt	r4, #5
    f33c:	e5943014 	ldr	r3, [r4, #20]
    f340:	e3530000 	cmp	r3, #0
    f344:	1a000006 	bne	f364 <pfree+0x3c>
    f348:	e5942018 	ldr	r2, [r4, #24]
    f34c:	e3043d43 	movw	r3, #19779	; 0x4d43
    f350:	e3453047 	movt	r3, #20551	; 0x5047
    f354:	e5853000 	str	r3, [r5]
    f358:	e5852004 	str	r2, [r5, #4]
    f35c:	e5845018 	str	r5, [r4, #24]
    f360:	e8bd8070 	pop	{r4, r5, r6, pc}
    f364:	ebffe8f8 	bl	974c <EnterCritical>
    f368:	e5941014 	ldr	r1, [r4, #20]
    f36c:	e5942018 	ldr	r2, [r4, #24]
    f370:	e3043d43 	movw	r3, #19779	; 0x4d43
    f374:	e3453047 	movt	r3, #20551	; 0x5047
    f378:	e3510000 	cmp	r1, #0
    f37c:	e5853000 	str	r3, [r5]
    f380:	e5852004 	str	r2, [r5, #4]
    f384:	e5845018 	str	r5, [r4, #24]
    f388:	08bd8070 	popeq	{r4, r5, r6, pc}
    f38c:	e8bd4070 	pop	{r4, r5, r6, lr}
    f390:	eaffe8fa 	b	9780 <LeaveCritical>

0000f394 <_GLOBAL__sub_I_mem_init>:
    f394:	e3013c4c 	movw	r3, #7244	; 0x1c4c
    f398:	e3403005 	movt	r3, #5
    f39c:	e3a02001 	mov	r2, #1
    f3a0:	e5832010 	str	r2, [r3, #16]
    f3a4:	e5832014 	str	r2, [r3, #20]
    f3a8:	e12fff1e 	bx	lr

0000f3ac <CBcmMailBox::CBcmMailBox(unsigned int)>:
    f3ac:	e3a02000 	mov	r2, #0
    f3b0:	e8800006 	stm	r0, {r1, r2}
    f3b4:	e12fff1e 	bx	lr

0000f3b8 <CBcmMailBox::~CBcmMailBox()>:
    f3b8:	e12fff1e 	bx	lr

0000f3bc <CBcmMailBox::Flush()>:
    f3bc:	e92d4010 	push	{r4, lr}
    f3c0:	e3a04a0b 	mov	r4, #45056	; 0xb000
    f3c4:	e3434f00 	movt	r4, #16128	; 0x3f00
    f3c8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    f3cc:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f3d0:	18bd8010 	popne	{r4, pc}
    f3d4:	e3a00014 	mov	r0, #20
    f3d8:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    f3dc:	ebffebc7 	bl	a300 <CTimer::SimpleMsDelay(unsigned int)>
    f3e0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    f3e4:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f3e8:	0afffff9 	beq	f3d4 <CBcmMailBox::Flush()+0x18>
    f3ec:	e8bd8010 	pop	{r4, pc}

0000f3f0 <CBcmMailBox::Read()>:
    f3f0:	e5901000 	ldr	r1, [r0]
    f3f4:	e3a02a0b 	mov	r2, #45056	; 0xb000
    f3f8:	e3432f00 	movt	r2, #16128	; 0x3f00
    f3fc:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    f400:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f404:	1afffffc 	bne	f3fc <CBcmMailBox::Read()+0xc>
    f408:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
    f40c:	e200300f 	and	r3, r0, #15
    f410:	e1510003 	cmp	r1, r3
    f414:	1afffff8 	bne	f3fc <CBcmMailBox::Read()+0xc>
    f418:	e3c0000f 	bic	r0, r0, #15
    f41c:	e12fff1e 	bx	lr

0000f420 <CBcmMailBox::Write(unsigned int)>:
    f420:	e92d4070 	push	{r4, r5, r6, lr}
    f424:	e3a02a0b 	mov	r2, #45056	; 0xb000
    f428:	e3432f00 	movt	r2, #16128	; 0x3f00
    f42c:	e1a05000 	mov	r5, r0
    f430:	e1a04001 	mov	r4, r1
    f434:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
    f438:	e3530000 	cmp	r3, #0
    f43c:	bafffffc 	blt	f434 <CBcmMailBox::Write(unsigned int)+0x14>
    f440:	e314000f 	tst	r4, #15
    f444:	0a000005 	beq	f460 <CBcmMailBox::Write(unsigned int)+0x40>
    f448:	e3011ae0 	movw	r1, #6880	; 0x1ae0
    f44c:	e3401005 	movt	r1, #5
    f450:	e3010af0 	movw	r0, #6896	; 0x1af0
    f454:	e3400005 	movt	r0, #5
    f458:	e3a0205a 	mov	r2, #90	; 0x5a
    f45c:	ebfff263 	bl	bdf0 <assertion_failed>
    f460:	e5952000 	ldr	r2, [r5]
    f464:	e3a03a0b 	mov	r3, #45056	; 0xb000
    f468:	e3433f00 	movt	r3, #16128	; 0x3f00
    f46c:	e1844002 	orr	r4, r4, r2
    f470:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
    f474:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f478 <CBcmMailBox::WriteRead(unsigned int)>:
    f478:	e5903004 	ldr	r3, [r0, #4]
    f47c:	e92d4070 	push	{r4, r5, r6, lr}
    f480:	e1a05000 	mov	r5, r0
    f484:	e3530000 	cmp	r3, #0
    f488:	e1a06001 	mov	r6, r1
    f48c:	1a00001e 	bne	f50c <CBcmMailBox::WriteRead(unsigned int)+0x94>
    f490:	e3a04a0b 	mov	r4, #45056	; 0xb000
    f494:	e3434f00 	movt	r4, #16128	; 0x3f00
    f498:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    f49c:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f4a0:	1a000005 	bne	f4bc <CBcmMailBox::WriteRead(unsigned int)+0x44>
    f4a4:	e3a00014 	mov	r0, #20
    f4a8:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    f4ac:	ebffeb93 	bl	a300 <CTimer::SimpleMsDelay(unsigned int)>
    f4b0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    f4b4:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f4b8:	0afffff9 	beq	f4a4 <CBcmMailBox::WriteRead(unsigned int)+0x2c>
    f4bc:	e1a00005 	mov	r0, r5
    f4c0:	e1a01006 	mov	r1, r6
    f4c4:	ebffffd5 	bl	f420 <CBcmMailBox::Write(unsigned int)>
    f4c8:	e5950000 	ldr	r0, [r5]
    f4cc:	e3a02a0b 	mov	r2, #45056	; 0xb000
    f4d0:	e3432f00 	movt	r2, #16128	; 0x3f00
    f4d4:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    f4d8:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f4dc:	1afffffc 	bne	f4d4 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
    f4e0:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
    f4e4:	e203100f 	and	r1, r3, #15
    f4e8:	e1510000 	cmp	r1, r0
    f4ec:	1afffff8 	bne	f4d4 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
    f4f0:	e5952004 	ldr	r2, [r5, #4]
    f4f4:	e3c3400f 	bic	r4, r3, #15
    f4f8:	e3520000 	cmp	r2, #0
    f4fc:	0a000000 	beq	f504 <CBcmMailBox::WriteRead(unsigned int)+0x8c>
    f500:	ebffe89e 	bl	9780 <LeaveCritical>
    f504:	e1a00004 	mov	r0, r4
    f508:	e8bd8070 	pop	{r4, r5, r6, pc}
    f50c:	ebffe88e 	bl	974c <EnterCritical>
    f510:	eaffffde 	b	f490 <CBcmMailBox::WriteRead(unsigned int)+0x18>

0000f514 <memset>:
    f514:	e3520000 	cmp	r2, #0
    f518:	012fff1e 	bxeq	lr
    f51c:	e6af1071 	sxtb	r1, r1
    f520:	e0802002 	add	r2, r0, r2
    f524:	e1a03000 	mov	r3, r0
    f528:	e4c31001 	strb	r1, [r3], #1
    f52c:	e1530002 	cmp	r3, r2
    f530:	1afffffc 	bne	f528 <memset+0x14>
    f534:	e12fff1e 	bx	lr

0000f538 <memcmp>:
    f538:	e3520000 	cmp	r2, #0
    f53c:	0a00000e 	beq	f57c <memcmp+0x44>
    f540:	e5d0c000 	ldrb	ip, [r0]
    f544:	e5d13000 	ldrb	r3, [r1]
    f548:	e15c0003 	cmp	ip, r3
    f54c:	ca00000c 	bgt	f584 <memcmp+0x4c>
    f550:	ba00000d 	blt	f58c <memcmp+0x54>
    f554:	e0812002 	add	r2, r1, r2
    f558:	e2811001 	add	r1, r1, #1
    f55c:	ea000004 	b	f574 <memcmp+0x3c>
    f560:	e5f0c001 	ldrb	ip, [r0, #1]!
    f564:	e4d13001 	ldrb	r3, [r1], #1
    f568:	e15c0003 	cmp	ip, r3
    f56c:	ca000004 	bgt	f584 <memcmp+0x4c>
    f570:	ba000005 	blt	f58c <memcmp+0x54>
    f574:	e1510002 	cmp	r1, r2
    f578:	1afffff8 	bne	f560 <memcmp+0x28>
    f57c:	e3a00000 	mov	r0, #0
    f580:	e12fff1e 	bx	lr
    f584:	e3a00001 	mov	r0, #1
    f588:	e12fff1e 	bx	lr
    f58c:	e3e00000 	mvn	r0, #0
    f590:	e12fff1e 	bx	lr

0000f594 <strlen>:
    f594:	e1d010d0 	ldrsb	r1, [r0]
    f598:	e2803001 	add	r3, r0, #1
    f59c:	e3510000 	cmp	r1, #0
    f5a0:	0a000003 	beq	f5b4 <strlen+0x20>
    f5a4:	e0431000 	sub	r1, r3, r0
    f5a8:	e0d320d1 	ldrsb	r2, [r3], #1
    f5ac:	e3520000 	cmp	r2, #0
    f5b0:	1afffffb 	bne	f5a4 <strlen+0x10>
    f5b4:	e1a00001 	mov	r0, r1
    f5b8:	e12fff1e 	bx	lr

0000f5bc <strcmp>:
    f5bc:	e1d030d0 	ldrsb	r3, [r0]
    f5c0:	e1d120d0 	ldrsb	r2, [r1]
    f5c4:	e3530000 	cmp	r3, #0
    f5c8:	1a000007 	bne	f5ec <strcmp+0x30>
    f5cc:	ea000008 	b	f5f4 <strcmp+0x38>
    f5d0:	e1530002 	cmp	r3, r2
    f5d4:	ca00000b 	bgt	f608 <strcmp+0x4c>
    f5d8:	ba00000c 	blt	f610 <strcmp+0x54>
    f5dc:	e1f030d1 	ldrsb	r3, [r0, #1]!
    f5e0:	e3530000 	cmp	r3, #0
    f5e4:	0a00000b 	beq	f618 <strcmp+0x5c>
    f5e8:	e1f120d1 	ldrsb	r2, [r1, #1]!
    f5ec:	e3520000 	cmp	r2, #0
    f5f0:	1afffff6 	bne	f5d0 <strcmp+0x14>
    f5f4:	e1530002 	cmp	r3, r2
    f5f8:	ca000002 	bgt	f608 <strcmp+0x4c>
    f5fc:	b3e00000 	mvnlt	r0, #0
    f600:	a3a00000 	movge	r0, #0
    f604:	e12fff1e 	bx	lr
    f608:	e3a00001 	mov	r0, #1
    f60c:	e12fff1e 	bx	lr
    f610:	e3e00000 	mvn	r0, #0
    f614:	e12fff1e 	bx	lr
    f618:	e1d120d1 	ldrsb	r2, [r1, #1]
    f61c:	e1530002 	cmp	r3, r2
    f620:	dafffff5 	ble	f5fc <strcmp+0x40>
    f624:	eafffff7 	b	f608 <strcmp+0x4c>

0000f628 <strcpy>:
    f628:	e1d130d0 	ldrsb	r3, [r1]
    f62c:	e1a02000 	mov	r2, r0
    f630:	e3530000 	cmp	r3, #0
    f634:	0a000003 	beq	f648 <strcpy+0x20>
    f638:	e4c23001 	strb	r3, [r2], #1
    f63c:	e1f130d1 	ldrsb	r3, [r1, #1]!
    f640:	e3530000 	cmp	r3, #0
    f644:	1afffffb 	bne	f638 <strcpy+0x10>
    f648:	e3a03000 	mov	r3, #0
    f64c:	e5c23000 	strb	r3, [r2]
    f650:	e12fff1e 	bx	lr

0000f654 <strncpy>:
    f654:	e3520000 	cmp	r2, #0
    f658:	012fff1e 	bxeq	lr
    f65c:	e1d1c0d0 	ldrsb	ip, [r1]
    f660:	e35c0000 	cmp	ip, #0
    f664:	0a000009 	beq	f690 <strncpy+0x3c>
    f668:	e0802002 	add	r2, r0, r2
    f66c:	e1a03000 	mov	r3, r0
    f670:	ea000002 	b	f680 <strncpy+0x2c>
    f674:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    f678:	e35c0000 	cmp	ip, #0
    f67c:	0a000004 	beq	f694 <strncpy+0x40>
    f680:	e4c3c001 	strb	ip, [r3], #1
    f684:	e1530002 	cmp	r3, r2
    f688:	1afffff9 	bne	f674 <strncpy+0x20>
    f68c:	e12fff1e 	bx	lr
    f690:	e1a03000 	mov	r3, r0
    f694:	e3a02000 	mov	r2, #0
    f698:	e5c32000 	strb	r2, [r3]
    f69c:	e12fff1e 	bx	lr

0000f6a0 <strcat>:
    f6a0:	e1d030d0 	ldrsb	r3, [r0]
    f6a4:	e3530000 	cmp	r3, #0
    f6a8:	e1a03000 	mov	r3, r0
    f6ac:	0a000002 	beq	f6bc <strcat+0x1c>
    f6b0:	e1f320d1 	ldrsb	r2, [r3, #1]!
    f6b4:	e3520000 	cmp	r2, #0
    f6b8:	1afffffc 	bne	f6b0 <strcat+0x10>
    f6bc:	e1d120d0 	ldrsb	r2, [r1]
    f6c0:	e3520000 	cmp	r2, #0
    f6c4:	0a000003 	beq	f6d8 <strcat+0x38>
    f6c8:	e4c32001 	strb	r2, [r3], #1
    f6cc:	e1f120d1 	ldrsb	r2, [r1, #1]!
    f6d0:	e3520000 	cmp	r2, #0
    f6d4:	1afffffb 	bne	f6c8 <strcat+0x28>
    f6d8:	e3a02000 	mov	r2, #0
    f6dc:	e5c32000 	strb	r2, [r3]
    f6e0:	e12fff1e 	bx	lr

0000f6e4 <strchr>:
    f6e4:	e1d020d0 	ldrsb	r2, [r0]
    f6e8:	e3520000 	cmp	r2, #0
    f6ec:	0a000009 	beq	f718 <strchr+0x34>
    f6f0:	e1510002 	cmp	r1, r2
    f6f4:	1a000002 	bne	f704 <strchr+0x20>
    f6f8:	ea000008 	b	f720 <strchr+0x3c>
    f6fc:	e1530001 	cmp	r3, r1
    f700:	012fff1e 	bxeq	lr
    f704:	e1f030d1 	ldrsb	r3, [r0, #1]!
    f708:	e3530000 	cmp	r3, #0
    f70c:	1afffffa 	bne	f6fc <strchr+0x18>
    f710:	e1a00003 	mov	r0, r3
    f714:	e12fff1e 	bx	lr
    f718:	e1a00002 	mov	r0, r2
    f71c:	e12fff1e 	bx	lr
    f720:	e12fff1e 	bx	lr

0000f724 <strtok_r>:
    f724:	e3500000 	cmp	r0, #0
    f728:	0a00002c 	beq	f7e0 <strtok_r+0xbc>
    f72c:	e92d4030 	push	{r4, r5, lr}
    f730:	e1d0e0d0 	ldrsb	lr, [r0]
    f734:	e35e0000 	cmp	lr, #0
    f738:	11d140d0 	ldrsbne	r4, [r1]
    f73c:	0a000024 	beq	f7d4 <strtok_r+0xb0>
    f740:	e3540000 	cmp	r4, #0
    f744:	0a000008 	beq	f76c <strtok_r+0x48>
    f748:	e15e0004 	cmp	lr, r4
    f74c:	0a000019 	beq	f7b8 <strtok_r+0x94>
    f750:	e1a0c001 	mov	ip, r1
    f754:	ea000001 	b	f760 <strtok_r+0x3c>
    f758:	e15e0003 	cmp	lr, r3
    f75c:	0a000015 	beq	f7b8 <strtok_r+0x94>
    f760:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    f764:	e3530000 	cmp	r3, #0
    f768:	1afffffa 	bne	f758 <strtok_r+0x34>
    f76c:	e35e0000 	cmp	lr, #0
    f770:	0a000017 	beq	f7d4 <strtok_r+0xb0>
    f774:	e1a05000 	mov	r5, r0
    f778:	e3540000 	cmp	r4, #0
    f77c:	0a000008 	beq	f7a4 <strtok_r+0x80>
    f780:	e15e0004 	cmp	lr, r4
    f784:	0a00000d 	beq	f7c0 <strtok_r+0x9c>
    f788:	e1a0c001 	mov	ip, r1
    f78c:	ea000001 	b	f798 <strtok_r+0x74>
    f790:	e15e0003 	cmp	lr, r3
    f794:	0a000009 	beq	f7c0 <strtok_r+0x9c>
    f798:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    f79c:	e3530000 	cmp	r3, #0
    f7a0:	1afffffa 	bne	f790 <strtok_r+0x6c>
    f7a4:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
    f7a8:	e35e0000 	cmp	lr, #0
    f7ac:	1afffff1 	bne	f778 <strtok_r+0x54>
    f7b0:	e5825000 	str	r5, [r2]
    f7b4:	e8bd8030 	pop	{r4, r5, pc}
    f7b8:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
    f7bc:	eaffffdf 	b	f740 <strtok_r+0x1c>
    f7c0:	e3a03000 	mov	r3, #0
    f7c4:	e2855001 	add	r5, r5, #1
    f7c8:	e5453001 	strb	r3, [r5, #-1]
    f7cc:	e5825000 	str	r5, [r2]
    f7d0:	e8bd8030 	pop	{r4, r5, pc}
    f7d4:	e3a00000 	mov	r0, #0
    f7d8:	e5820000 	str	r0, [r2]
    f7dc:	e8bd8030 	pop	{r4, r5, pc}
    f7e0:	e5920000 	ldr	r0, [r2]
    f7e4:	e3500000 	cmp	r0, #0
    f7e8:	1affffcf 	bne	f72c <strtok_r+0x8>
    f7ec:	e12fff1e 	bx	lr

0000f7f0 <strtoul>:
    f7f0:	e3510000 	cmp	r1, #0
    f7f4:	e92d4070 	push	{r4, r5, r6, lr}
    f7f8:	e2425002 	sub	r5, r2, #2
    f7fc:	e3c2e010 	bic	lr, r2, #16
    f800:	15810000 	strne	r0, [r1]
    f804:	e3520000 	cmp	r2, #0
    f808:	13550022 	cmpne	r5, #34	; 0x22
    f80c:	83a05001 	movhi	r5, #1
    f810:	93a05000 	movls	r5, #0
    f814:	8a000036 	bhi	f8f4 <strtoul+0x104>
    f818:	e1d0c0d0 	ldrsb	ip, [r0]
    f81c:	e1a04000 	mov	r4, r0
    f820:	e2800001 	add	r0, r0, #1
    f824:	e35c0020 	cmp	ip, #32
    f828:	e24c3009 	sub	r3, ip, #9
    f82c:	e6ef3073 	uxtb	r3, r3
    f830:	0afffff8 	beq	f818 <strtoul+0x28>
    f834:	e3530004 	cmp	r3, #4
    f838:	9afffff6 	bls	f818 <strtoul+0x28>
    f83c:	e35c002b 	cmp	ip, #43	; 0x2b
    f840:	0a00002d 	beq	f8fc <strtoul+0x10c>
    f844:	e35c002d 	cmp	ip, #45	; 0x2d
    f848:	03a06001 	moveq	r6, #1
    f84c:	13a06000 	movne	r6, #0
    f850:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
    f854:	01a04000 	moveq	r4, r0
    f858:	e35c0030 	cmp	ip, #48	; 0x30
    f85c:	0a00002b 	beq	f910 <strtoul+0x120>
    f860:	e3520000 	cmp	r2, #0
    f864:	03a0200a 	moveq	r2, #10
    f868:	e35c002f 	cmp	ip, #47	; 0x2f
    f86c:	e1a0300c 	mov	r3, ip
    f870:	da00001c 	ble	f8e8 <strtoul+0xf8>
    f874:	e3a05001 	mov	r5, #1
    f878:	e3a0e000 	mov	lr, #0
    f87c:	ea000007 	b	f8a0 <strtoul+0xb0>
    f880:	e150000e 	cmp	r0, lr
    f884:	e3a05000 	mov	r5, #0
    f888:	e1a0e000 	mov	lr, r0
    f88c:	3a000028 	bcc	f934 <strtoul+0x144>
    f890:	e1f430d1 	ldrsb	r3, [r4, #1]!
    f894:	e353002f 	cmp	r3, #47	; 0x2f
    f898:	e1a0c003 	mov	ip, r3
    f89c:	da000029 	ble	f948 <strtoul+0x158>
    f8a0:	e24cc061 	sub	ip, ip, #97	; 0x61
    f8a4:	e35c0019 	cmp	ip, #25
    f8a8:	92433020 	subls	r3, r3, #32
    f8ac:	e3530040 	cmp	r3, #64	; 0x40
    f8b0:	c2433007 	subgt	r3, r3, #7
    f8b4:	e2433030 	sub	r3, r3, #48	; 0x30
    f8b8:	e1520003 	cmp	r2, r3
    f8bc:	e020329e 	mla	r0, lr, r2, r3
    f8c0:	caffffee 	bgt	f880 <strtoul+0x90>
    f8c4:	e2255001 	eor	r5, r5, #1
    f8c8:	e1a0000e 	mov	r0, lr
    f8cc:	e3510000 	cmp	r1, #0
    f8d0:	e0055006 	and	r5, r5, r6
    f8d4:	0a000000 	beq	f8dc <strtoul+0xec>
    f8d8:	e5814000 	str	r4, [r1]
    f8dc:	e3550000 	cmp	r5, #0
    f8e0:	12600000 	rsbne	r0, r0, #0
    f8e4:	e8bd8070 	pop	{r4, r5, r6, pc}
    f8e8:	e3510000 	cmp	r1, #0
    f8ec:	13a00000 	movne	r0, #0
    f8f0:	1afffff8 	bne	f8d8 <strtoul+0xe8>
    f8f4:	e3a00000 	mov	r0, #0
    f8f8:	e8bd8070 	pop	{r4, r5, r6, pc}
    f8fc:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    f900:	e3a06000 	mov	r6, #0
    f904:	e1a04000 	mov	r4, r0
    f908:	e35c0030 	cmp	ip, #48	; 0x30
    f90c:	1affffd3 	bne	f860 <strtoul+0x70>
    f910:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    f914:	e2840001 	add	r0, r4, #1
    f918:	e3cc3020 	bic	r3, ip, #32
    f91c:	e3530058 	cmp	r3, #88	; 0x58
    f920:	0a00000a 	beq	f950 <strtoul+0x160>
    f924:	e3520000 	cmp	r2, #0
    f928:	e1a04000 	mov	r4, r0
    f92c:	03a02008 	moveq	r2, #8
    f930:	eaffffcc 	b	f868 <strtoul+0x78>
    f934:	e1510005 	cmp	r1, r5
    f938:	0a00000a 	beq	f968 <strtoul+0x178>
    f93c:	e5814000 	str	r4, [r1]
    f940:	e3e00000 	mvn	r0, #0
    f944:	e8bd8070 	pop	{r4, r5, r6, pc}
    f948:	e3a05001 	mov	r5, #1
    f94c:	eaffffde 	b	f8cc <strtoul+0xdc>
    f950:	e35e0000 	cmp	lr, #0
    f954:	1affffe6 	bne	f8f4 <strtoul+0x104>
    f958:	e1d4c0d2 	ldrsb	ip, [r4, #2]
    f95c:	e3a02010 	mov	r2, #16
    f960:	e2844002 	add	r4, r4, #2
    f964:	eaffffbf 	b	f868 <strtoul+0x78>
    f968:	e3e00000 	mvn	r0, #0
    f96c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f970 <char2int>:
    f970:	e12fff1e 	bx	lr

0000f974 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
    f974:	e92d4010 	push	{r4, lr}
    f978:	e1a04000 	mov	r4, r0
    f97c:	e3a01000 	mov	r1, #0
    f980:	e24dd010 	sub	sp, sp, #16
    f984:	e3a02c01 	mov	r2, #256	; 0x100
    f988:	e5943020 	ldr	r3, [r4, #32]
    f98c:	e28d0008 	add	r0, sp, #8
    f990:	e583100c 	str	r1, [r3, #12]
    f994:	e5832010 	str	r2, [r3, #16]
    f998:	ebffe2d4 	bl	84f0 <CBcmPropertyTags::CBcmPropertyTags()>
    f99c:	e3003408 	movw	r3, #1032	; 0x408
    f9a0:	e5942020 	ldr	r2, [r4, #32]
    f9a4:	e28d0008 	add	r0, sp, #8
    f9a8:	e58d3000 	str	r3, [sp]
    f9ac:	e308100b 	movw	r1, #32779	; 0x800b
    f9b0:	e3401004 	movt	r1, #4
    f9b4:	e3003414 	movw	r3, #1044	; 0x414
    f9b8:	ebffe314 	bl	8610 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f9bc:	e3500000 	cmp	r0, #0
    f9c0:	e28d0008 	add	r0, sp, #8
    f9c4:	0a000003 	beq	f9d8 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x64>
    f9c8:	e5943020 	ldr	r3, [r4, #32]
    f9cc:	e593300c 	ldr	r3, [r3, #12]
    f9d0:	e3530000 	cmp	r3, #0
    f9d4:	0a000003 	beq	f9e8 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
    f9d8:	ebffe2ca 	bl	8508 <CBcmPropertyTags::~CBcmPropertyTags()>
    f9dc:	e3a00000 	mov	r0, #0
    f9e0:	e28dd010 	add	sp, sp, #16
    f9e4:	e8bd8010 	pop	{r4, pc}
    f9e8:	ebffe2c6 	bl	8508 <CBcmPropertyTags::~CBcmPropertyTags()>
    f9ec:	e3a00001 	mov	r0, #1
    f9f0:	e28dd010 	add	sp, sp, #16
    f9f4:	e8bd8010 	pop	{r4, pc}

0000f9f8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
    f9f8:	e92d4030 	push	{r4, r5, lr}
    f9fc:	e3510000 	cmp	r1, #0
    fa00:	13520000 	cmpne	r2, #0
    fa04:	e1a04000 	mov	r4, r0
    fa08:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    fa0c:	e3a05000 	mov	r5, #0
    fa10:	e8840006 	stm	r4, {r1, r2}
    fa14:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
    fa18:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
    fa1c:	e5843010 	str	r3, [r4, #16]
    fa20:	e584c00c 	str	ip, [r4, #12]
    fa24:	e5840008 	str	r0, [r4, #8]
    fa28:	e5845014 	str	r5, [r4, #20]
    fa2c:	e5845018 	str	r5, [r4, #24]
    fa30:	e584501c 	str	r5, [r4, #28]
    fa34:	e5845020 	str	r5, [r4, #32]
    fa38:	1a000011 	bne	fa84 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
    fa3c:	e28d000c 	add	r0, sp, #12
    fa40:	ebffe2aa 	bl	84f0 <CBcmPropertyTags::CBcmPropertyTags()>
    fa44:	e3a03014 	mov	r3, #20
    fa48:	e58d5000 	str	r5, [sp]
    fa4c:	e28d000c 	add	r0, sp, #12
    fa50:	e3a01003 	mov	r1, #3
    fa54:	e3401004 	movt	r1, #4
    fa58:	e08d2003 	add	r2, sp, r3
    fa5c:	ebffe2eb 	bl	8610 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    fa60:	e1500005 	cmp	r0, r5
    fa64:	1a000027 	bne	fb08 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
    fa68:	e3a02d0a 	mov	r2, #640	; 0x280
    fa6c:	e3a03e1e 	mov	r3, #480	; 0x1e0
    fa70:	e884000c 	stm	r4, {r2, r3}
    fa74:	e28d000c 	add	r0, sp, #12
    fa78:	ebffe2a2 	bl	8508 <CBcmPropertyTags::~CBcmPropertyTags()>
    fa7c:	e5940008 	ldr	r0, [r4, #8]
    fa80:	e5943010 	ldr	r3, [r4, #16]
    fa84:	e3500000 	cmp	r0, #0
    fa88:	0a00001a 	beq	faf8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
    fa8c:	e594200c 	ldr	r2, [r4, #12]
    fa90:	e3520000 	cmp	r2, #0
    fa94:	0a000017 	beq	faf8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
    fa98:	e3530008 	cmp	r3, #8
    fa9c:	8a000007 	bhi	fac0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
    faa0:	e3000414 	movw	r0, #1044	; 0x414
    faa4:	ebffe725 	bl	9740 <operator new[](unsigned int)>
    faa8:	e3a02b01 	mov	r2, #1024	; 0x400
    faac:	e5840020 	str	r0, [r4, #32]
    fab0:	e3a01000 	mov	r1, #0
    fab4:	e2800014 	add	r0, r0, #20
    fab8:	ebfffe95 	bl	f514 <memset>
    fabc:	e5943010 	ldr	r3, [r4, #16]
    fac0:	e3012ba4 	movw	r2, #7076	; 0x1ba4
    fac4:	e3402005 	movt	r2, #5
    fac8:	e5945000 	ldr	r5, [r4]
    facc:	e1a00004 	mov	r0, r4
    fad0:	e594e004 	ldr	lr, [r4, #4]
    fad4:	e594c008 	ldr	ip, [r4, #8]
    fad8:	e594100c 	ldr	r1, [r4, #12]
    fadc:	e582500c 	str	r5, [r2, #12]
    fae0:	e582e010 	str	lr, [r2, #16]
    fae4:	e582c020 	str	ip, [r2, #32]
    fae8:	e5821024 	str	r1, [r2, #36]	; 0x24
    faec:	e5823034 	str	r3, [r2, #52]	; 0x34
    faf0:	e28dd02c 	add	sp, sp, #44	; 0x2c
    faf4:	e8bd8030 	pop	{r4, r5, pc}
    faf8:	e8940006 	ldm	r4, {r1, r2}
    fafc:	e5841008 	str	r1, [r4, #8]
    fb00:	e584200c 	str	r2, [r4, #12]
    fb04:	eaffffe3 	b	fa98 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
    fb08:	e59d2020 	ldr	r2, [sp, #32]
    fb0c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    fb10:	e2421d0a 	sub	r1, r2, #640	; 0x280
    fb14:	e5842000 	str	r2, [r4]
    fb18:	e2432e1e 	sub	r2, r3, #480	; 0x1e0
    fb1c:	e5843004 	str	r3, [r4, #4]
    fb20:	e3520f96 	cmp	r2, #600	; 0x258
    fb24:	93510c05 	cmpls	r1, #1280	; 0x500
    fb28:	9affffd1 	bls	fa74 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
    fb2c:	eaffffcd 	b	fa68 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>

0000fb30 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
    fb30:	e92d4010 	push	{r4, lr}
    fb34:	e1a04000 	mov	r4, r0
    fb38:	e5900020 	ldr	r0, [r0, #32]
    fb3c:	ebffe700 	bl	9744 <operator delete(void*)>
    fb40:	e1a00004 	mov	r0, r4
    fb44:	e8bd8010 	pop	{r4, pc}

0000fb48 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
    fb48:	e5903010 	ldr	r3, [r0, #16]
    fb4c:	e3530008 	cmp	r3, #8
    fb50:	812fff1e 	bxhi	lr
    fb54:	e5900020 	ldr	r0, [r0, #32]
    fb58:	e1a03982 	lsl	r3, r2, #19
    fb5c:	e1a0c5a2 	lsr	ip, r2, #11
    fb60:	e203373e 	and	r3, r3, #16252928	; 0xf80000
    fb64:	e1a02282 	lsl	r2, r2, #5
    fb68:	e0801101 	add	r1, r0, r1, lsl #2
    fb6c:	e183318c 	orr	r3, r3, ip, lsl #3
    fb70:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
    fb74:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
    fb78:	e1822003 	orr	r2, r2, r3
    fb7c:	e5812014 	str	r2, [r1, #20]
    fb80:	e12fff1e 	bx	lr

0000fb84 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
    fb84:	e5903010 	ldr	r3, [r0, #16]
    fb88:	e3530008 	cmp	r3, #8
    fb8c:	95903020 	ldrls	r3, [r0, #32]
    fb90:	90831101 	addls	r1, r3, r1, lsl #2
    fb94:	95812014 	strls	r2, [r1, #20]
    fb98:	e12fff1e 	bx	lr

0000fb9c <CBcmFrameBuffer::Initialize()>:
    fb9c:	e92d4070 	push	{r4, r5, r6, lr}
    fba0:	e1a05000 	mov	r5, r0
    fba4:	e3016ba4 	movw	r6, #7076	; 0x1ba4
    fba8:	e3406005 	movt	r6, #5
    fbac:	e24dd008 	sub	sp, sp, #8
    fbb0:	e1a0000d 	mov	r0, sp
    fbb4:	ebffe24d 	bl	84f0 <CBcmPropertyTags::CBcmPropertyTags()>
    fbb8:	e1a01006 	mov	r1, r6
    fbbc:	e1a0000d 	mov	r0, sp
    fbc0:	e3a02070 	mov	r2, #112	; 0x70
    fbc4:	ebffe254 	bl	851c <CBcmPropertyTags::GetTags(void*, unsigned int)>
    fbc8:	e2504000 	subs	r4, r0, #0
    fbcc:	0a00001e 	beq	fc4c <CBcmFrameBuffer::Initialize()+0xb0>
    fbd0:	e596400c 	ldr	r4, [r6, #12]
    fbd4:	e3540000 	cmp	r4, #0
    fbd8:	0a00001b 	beq	fc4c <CBcmFrameBuffer::Initialize()+0xb0>
    fbdc:	e5964010 	ldr	r4, [r6, #16]
    fbe0:	e3540000 	cmp	r4, #0
    fbe4:	0a000018 	beq	fc4c <CBcmFrameBuffer::Initialize()+0xb0>
    fbe8:	e5964020 	ldr	r4, [r6, #32]
    fbec:	e3540000 	cmp	r4, #0
    fbf0:	0a000015 	beq	fc4c <CBcmFrameBuffer::Initialize()+0xb0>
    fbf4:	e5964024 	ldr	r4, [r6, #36]	; 0x24
    fbf8:	e3540000 	cmp	r4, #0
    fbfc:	0a000012 	beq	fc4c <CBcmFrameBuffer::Initialize()+0xb0>
    fc00:	e5964034 	ldr	r4, [r6, #52]	; 0x34
    fc04:	e3540000 	cmp	r4, #0
    fc08:	0a00000f 	beq	fc4c <CBcmFrameBuffer::Initialize()+0xb0>
    fc0c:	e5964058 	ldr	r4, [r6, #88]	; 0x58
    fc10:	e3540000 	cmp	r4, #0
    fc14:	0a00000c 	beq	fc4c <CBcmFrameBuffer::Initialize()+0xb0>
    fc18:	e5953010 	ldr	r3, [r5, #16]
    fc1c:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
    fc20:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
    fc24:	e3530008 	cmp	r3, #8
    fc28:	e596306c 	ldr	r3, [r6, #108]	; 0x6c
    fc2c:	e5854014 	str	r4, [r5, #20]
    fc30:	83a04001 	movhi	r4, #1
    fc34:	e5852018 	str	r2, [r5, #24]
    fc38:	e585301c 	str	r3, [r5, #28]
    fc3c:	8a000002 	bhi	fc4c <CBcmFrameBuffer::Initialize()+0xb0>
    fc40:	e1a00005 	mov	r0, r5
    fc44:	ebffff4a 	bl	f974 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
    fc48:	e1a04000 	mov	r4, r0
    fc4c:	e1a0000d 	mov	r0, sp
    fc50:	ebffe22c 	bl	8508 <CBcmPropertyTags::~CBcmPropertyTags()>
    fc54:	e1a00004 	mov	r0, r4
    fc58:	e28dd008 	add	sp, sp, #8
    fc5c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000fc60 <CBcmFrameBuffer::GetWidth() const>:
    fc60:	e5900000 	ldr	r0, [r0]
    fc64:	e12fff1e 	bx	lr

0000fc68 <CBcmFrameBuffer::GetHeight() const>:
    fc68:	e5900004 	ldr	r0, [r0, #4]
    fc6c:	e12fff1e 	bx	lr

0000fc70 <CBcmFrameBuffer::GetVirtWidth() const>:
    fc70:	e5900008 	ldr	r0, [r0, #8]
    fc74:	e12fff1e 	bx	lr

0000fc78 <CBcmFrameBuffer::GetVirtHeight() const>:
    fc78:	e590000c 	ldr	r0, [r0, #12]
    fc7c:	e12fff1e 	bx	lr

0000fc80 <CBcmFrameBuffer::GetPitch() const>:
    fc80:	e590001c 	ldr	r0, [r0, #28]
    fc84:	e12fff1e 	bx	lr

0000fc88 <CBcmFrameBuffer::GetDepth() const>:
    fc88:	e5900010 	ldr	r0, [r0, #16]
    fc8c:	e12fff1e 	bx	lr

0000fc90 <CBcmFrameBuffer::GetBuffer() const>:
    fc90:	e5900014 	ldr	r0, [r0, #20]
    fc94:	e12fff1e 	bx	lr

0000fc98 <CBcmFrameBuffer::GetSize() const>:
    fc98:	e5900018 	ldr	r0, [r0, #24]
    fc9c:	e12fff1e 	bx	lr

0000fca0 <CBcmFrameBuffer::UpdatePalette()>:
    fca0:	e5903010 	ldr	r3, [r0, #16]
    fca4:	e3530008 	cmp	r3, #8
    fca8:	9a000001 	bls	fcb4 <CBcmFrameBuffer::UpdatePalette()+0x14>
    fcac:	e3a00001 	mov	r0, #1
    fcb0:	e12fff1e 	bx	lr
    fcb4:	eaffff2e 	b	f974 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

0000fcb8 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
    fcb8:	e92d4070 	push	{r4, r5, r6, lr}
    fcbc:	e1a05001 	mov	r5, r1
    fcc0:	e1a06002 	mov	r6, r2
    fcc4:	e24dd028 	sub	sp, sp, #40	; 0x28
    fcc8:	e28d000c 	add	r0, sp, #12
    fccc:	ebffe207 	bl	84f0 <CBcmPropertyTags::CBcmPropertyTags()>
    fcd0:	e3a03008 	mov	r3, #8
    fcd4:	e58d3000 	str	r3, [sp]
    fcd8:	e3a03014 	mov	r3, #20
    fcdc:	e28d000c 	add	r0, sp, #12
    fce0:	e3081009 	movw	r1, #32777	; 0x8009
    fce4:	e3401004 	movt	r1, #4
    fce8:	e08d2003 	add	r2, sp, r3
    fcec:	e58d5020 	str	r5, [sp, #32]
    fcf0:	e58d6024 	str	r6, [sp, #36]	; 0x24
    fcf4:	ebffe245 	bl	8610 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    fcf8:	e2504000 	subs	r4, r0, #0
    fcfc:	0a000006 	beq	fd1c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
    fd00:	e59d3020 	ldr	r3, [sp, #32]
    fd04:	e1550003 	cmp	r5, r3
    fd08:	13a04000 	movne	r4, #0
    fd0c:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
    fd10:	00444006 	subeq	r4, r4, r6
    fd14:	016f4f14 	clzeq	r4, r4
    fd18:	01a042a4 	lsreq	r4, r4, #5
    fd1c:	e28d000c 	add	r0, sp, #12
    fd20:	ebffe1f8 	bl	8508 <CBcmPropertyTags::~CBcmPropertyTags()>
    fd24:	e1a00004 	mov	r0, r4
    fd28:	e28dd028 	add	sp, sp, #40	; 0x28
    fd2c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000fd30 <CDevice::~CDevice()>:
    fd30:	e12fff1e 	bx	lr

0000fd34 <CDevice::Read(void*, unsigned int)>:
    fd34:	e3e00000 	mvn	r0, #0
    fd38:	e12fff1e 	bx	lr

0000fd3c <CDevice::Seek(unsigned long long)>:
    fd3c:	e3e00000 	mvn	r0, #0
    fd40:	e3e01000 	mvn	r1, #0
    fd44:	e12fff1e 	bx	lr

0000fd48 <CDevice::~CDevice()>:
    fd48:	e92d4010 	push	{r4, lr}
    fd4c:	e1a04000 	mov	r4, r0
    fd50:	ebffe67b 	bl	9744 <operator delete(void*)>
    fd54:	e1a00004 	mov	r0, r4
    fd58:	e8bd8010 	pop	{r4, pc}

0000fd5c <CDevice::CDevice()>:
    fd5c:	e59f3004 	ldr	r3, [pc, #4]	; fd68 <CDevice::CDevice()+0xc>
    fd60:	e5803000 	str	r3, [r0]
    fd64:	e12fff1e 	bx	lr
    fd68:	00051b0c 	.word	0x00051b0c
