
kernel7.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020012 	cps	#18
    803c:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8040:	f1020017 	cps	#23
    8044:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8048:	f102001b 	cps	#27
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001f 	cps	#31
    8054:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8058:	ea00076b 	b	9e0c <sysinit>

0000805c <_start_secondary>:
    805c:	f57ff04f 	dsb	sy
    8060:	e320f003 	wfi
    8064:	eafffffd 	b	8060 <_start_secondary+0x4>

00008068 <main>:
    8068:	e92d4010 	push	{r4, lr}
    806c:	e24ddec3 	sub	sp, sp, #3120	; 0xc30
    8070:	e24dd008 	sub	sp, sp, #8
    8074:	e28d0004 	add	r0, sp, #4
    8078:	eb000012 	bl	80c8 <CKernel::CKernel()>
    807c:	e28d0004 	add	r0, sp, #4
    8080:	eb000044 	bl	8198 <CKernel::Initialize()>
    8084:	e2504000 	subs	r4, r0, #0
    8088:	0a000004 	beq	80a0 <main+0x38>
    808c:	e28d0004 	add	r0, sp, #4
    8090:	eb00006c 	bl	8248 <CKernel::Run()>
    8094:	e3500002 	cmp	r0, #2
    8098:	13a04000 	movne	r4, #0
    809c:	0a000006 	beq	80bc <main+0x54>
    80a0:	eb00074c 	bl	9dd8 <halt>
    80a4:	e28d0004 	add	r0, sp, #4
    80a8:	eb000099 	bl	8314 <CKernel::~CKernel()>
    80ac:	e1a00004 	mov	r0, r4
    80b0:	e28ddec3 	add	sp, sp, #3120	; 0xc30
    80b4:	e28dd008 	add	sp, sp, #8
    80b8:	e8bd8010 	pop	{r4, pc}
    80bc:	eb000749 	bl	9de8 <reboot>
    80c0:	e3a04001 	mov	r4, #1
    80c4:	eafffff6 	b	80a4 <main+0x3c>

000080c8 <CKernel::CKernel()>:
    80c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80cc:	e3a01001 	mov	r1, #1
    80d0:	e1a04000 	mov	r4, r0
    80d4:	e2805010 	add	r5, r0, #16
    80d8:	e284701c 	add	r7, r4, #28
    80dc:	eb0006d2 	bl	9c2c <CMemorySystem::CMemorySystem(int)>
    80e0:	e1a00005 	mov	r0, r5
    80e4:	eb000219 	bl	8950 <CActLED::CActLED()>
    80e8:	e1a00007 	mov	r0, r7
    80ec:	eb000aca 	bl	ac1c <CKernelOptions::CKernelOptions()>
    80f0:	e2840e85 	add	r0, r4, #2128	; 0x850
    80f4:	e280000c 	add	r0, r0, #12
    80f8:	e2848e95 	add	r8, r4, #2384	; 0x950
    80fc:	eb001172 	bl	c6cc <CDeviceNameService::CDeviceNameService()>
    8100:	e2840e86 	add	r0, r4, #2144	; 0x860
    8104:	e3a03000 	mov	r3, #0
    8108:	e3a02e1e 	mov	r2, #480	; 0x1e0
    810c:	e3a01e32 	mov	r1, #800	; 0x320
    8110:	e2800004 	add	r0, r0, #4
    8114:	eb000c92 	bl	b364 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    8118:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    811c:	e2800004 	add	r0, r0, #4
    8120:	e2846eb9 	add	r6, r4, #2960	; 0xb90
    8124:	eb00135c 	bl	ce9c <CSerialDevice::CSerialDevice()>
    8128:	e2840d25 	add	r0, r4, #2368	; 0x940
    812c:	e280000c 	add	r0, r0, #12
    8130:	eb001739 	bl	de1c <CExceptionHandler::CExceptionHandler()>
    8134:	e1a00008 	mov	r0, r8
    8138:	eb001801 	bl	e144 <CInterruptSystem::CInterruptSystem()>
    813c:	e1a01008 	mov	r1, r8
    8140:	e1a00006 	mov	r0, r6
    8144:	eb00075a 	bl	9eb4 <CTimer::CTimer(CInterruptSystem*)>
    8148:	e1a00007 	mov	r0, r7
    814c:	eb000a85 	bl	ab68 <CKernelOptions::GetLogLevel() const>
    8150:	e1a01000 	mov	r1, r0
    8154:	e2840ebb 	add	r0, r4, #2992	; 0xbb0
    8158:	e1a02006 	mov	r2, r6
    815c:	e2800008 	add	r0, r0, #8
    8160:	eb001207 	bl	c984 <CLogger::CLogger(unsigned int, CTimer*)>
    8164:	e2840ebd 	add	r0, r4, #3024	; 0xbd0
    8168:	e2800004 	add	r0, r0, #4
    816c:	eb0000e6 	bl	850c <CTouchScreenDevice::CTouchScreenDevice()>
    8170:	e302c380 	movw	ip, #9088	; 0x2380
    8174:	e340c001 	movt	ip, #1
    8178:	e1a00005 	mov	r0, r5
    817c:	e3a03f7d 	mov	r3, #500	; 0x1f4
    8180:	e3a020c8 	mov	r2, #200	; 0xc8
    8184:	e3a01005 	mov	r1, #5
    8188:	e58c4000 	str	r4, [ip]
    818c:	eb000235 	bl	8a68 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    8190:	e1a00004 	mov	r0, r4
    8194:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008198 <CKernel::Initialize()>:
    8198:	e92d4070 	push	{r4, r5, r6, lr}
    819c:	e2804e86 	add	r4, r0, #2144	; 0x860
    81a0:	e2844004 	add	r4, r4, #4
    81a4:	e1a05000 	mov	r5, r0
    81a8:	e1a00004 	mov	r0, r4
    81ac:	eb001003 	bl	c1c0 <CScreenDevice::Initialize()>
    81b0:	e3500000 	cmp	r0, #0
    81b4:	1a000001 	bne	81c0 <CKernel::Initialize()+0x28>
    81b8:	e3a00000 	mov	r0, #0
    81bc:	e8bd8070 	pop	{r4, r5, r6, pc}
    81c0:	e2850d23 	add	r0, r5, #2240	; 0x8c0
    81c4:	e3a01cc2 	mov	r1, #49664	; 0xc200
    81c8:	e3401001 	movt	r1, #1
    81cc:	e2800004 	add	r0, r0, #4
    81d0:	eb00134f 	bl	cf14 <CSerialDevice::Initialize(unsigned int)>
    81d4:	e3500000 	cmp	r0, #0
    81d8:	0afffff6 	beq	81b8 <CKernel::Initialize()+0x20>
    81dc:	e285001c 	add	r0, r5, #28
    81e0:	eb000a5d 	bl	ab5c <CKernelOptions::GetLogDevice() const>
    81e4:	e1a01000 	mov	r1, r0
    81e8:	e2850e85 	add	r0, r5, #2128	; 0x850
    81ec:	e3a02000 	mov	r2, #0
    81f0:	e280000c 	add	r0, r0, #12
    81f4:	eb001190 	bl	c83c <CDeviceNameService::GetDevice(char const*, int)>
    81f8:	e3500000 	cmp	r0, #0
    81fc:	11a01000 	movne	r1, r0
    8200:	e2850ebb 	add	r0, r5, #2992	; 0xbb0
    8204:	01a01004 	moveq	r1, r4
    8208:	e2800008 	add	r0, r0, #8
    820c:	eb0012e3 	bl	cda0 <CLogger::Initialize(CDevice*)>
    8210:	e3500000 	cmp	r0, #0
    8214:	0affffe7 	beq	81b8 <CKernel::Initialize()+0x20>
    8218:	e2850e95 	add	r0, r5, #2384	; 0x950
    821c:	eb0017db 	bl	e190 <CInterruptSystem::Initialize()>
    8220:	e3500000 	cmp	r0, #0
    8224:	0affffe3 	beq	81b8 <CKernel::Initialize()+0x20>
    8228:	e2850eb9 	add	r0, r5, #2960	; 0xb90
    822c:	eb000989 	bl	a858 <CTimer::Initialize()>
    8230:	e3500000 	cmp	r0, #0
    8234:	0affffdf 	beq	81b8 <CKernel::Initialize()+0x20>
    8238:	e2850ebd 	add	r0, r5, #3024	; 0xbd0
    823c:	e2800004 	add	r0, r0, #4
    8240:	e8bd4070 	pop	{r4, r5, r6, lr}
    8244:	ea0000bb 	b	8538 <CTouchScreenDevice::Initialize()>

00008248 <CKernel::Run()>:
    8248:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    824c:	e2807ebb 	add	r7, r0, #2992	; 0xbb0
    8250:	e2877008 	add	r7, r7, #8
    8254:	e1a05000 	mov	r5, r0
    8258:	e3a02003 	mov	r2, #3
    825c:	e1a00007 	mov	r0, r7
    8260:	e3003348 	movw	r3, #840	; 0x348
    8264:	e3403001 	movt	r3, #1
    8268:	e3001340 	movw	r1, #832	; 0x340
    826c:	e3401001 	movt	r1, #1
    8270:	eb0012be 	bl	cd70 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8274:	e2850e85 	add	r0, r5, #2128	; 0x850
    8278:	e280000c 	add	r0, r0, #12
    827c:	e300136c 	movw	r1, #876	; 0x36c
    8280:	e3401001 	movt	r1, #1
    8284:	e3a02000 	mov	r2, #0
    8288:	eb00116b 	bl	c83c <CDeviceNameService::GetDevice(char const*, int)>
    828c:	e2506000 	subs	r6, r0, #0
    8290:	0a000017 	beq	82f4 <CKernel::Run()+0xac>
    8294:	e1a00006 	mov	r0, r6
    8298:	e30813a4 	movw	r1, #33700	; 0x83a4
    829c:	e3401000 	movt	r1, #0
    82a0:	eb00016f 	bl	8864 <CTouchScreenDevice::RegisterEventHandler(void (*)(TTouchScreenEvent, unsigned int, unsigned int, unsigned int))>
    82a4:	e2855e86 	add	r5, r5, #2144	; 0x860
    82a8:	e300338c 	movw	r3, #908	; 0x38c
    82ac:	e3403001 	movt	r3, #1
    82b0:	e3001340 	movw	r1, #832	; 0x340
    82b4:	e3401001 	movt	r1, #1
    82b8:	e1a00007 	mov	r0, r7
    82bc:	e3a02003 	mov	r2, #3
    82c0:	e3a04000 	mov	r4, #0
    82c4:	e2855004 	add	r5, r5, #4
    82c8:	eb0012a8 	bl	cd70 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    82cc:	e1a00006 	mov	r0, r6
    82d0:	eb0000de 	bl	8650 <CTouchScreenDevice::Update()>
    82d4:	e1a02004 	mov	r2, r4
    82d8:	e1a00005 	mov	r0, r5
    82dc:	e3a01000 	mov	r1, #0
    82e0:	eb00102f 	bl	c3a4 <CScreenDevice::Rotor(unsigned int, unsigned int)>
    82e4:	e3a00010 	mov	r0, #16
    82e8:	e2844001 	add	r4, r4, #1
    82ec:	eb000978 	bl	a8d4 <CTimer::SimpleMsDelay(unsigned int)>
    82f0:	eafffff5 	b	82cc <CKernel::Run()+0x84>
    82f4:	e3003374 	movw	r3, #884	; 0x374
    82f8:	e3403001 	movt	r3, #1
    82fc:	e3001340 	movw	r1, #832	; 0x340
    8300:	e3401001 	movt	r1, #1
    8304:	e1a02006 	mov	r2, r6
    8308:	e1a00007 	mov	r0, r7
    830c:	eb001297 	bl	cd70 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8310:	eaffffdf 	b	8294 <CKernel::Run()+0x4c>

00008314 <CKernel::~CKernel()>:
    8314:	e3023380 	movw	r3, #9088	; 0x2380
    8318:	e3403001 	movt	r3, #1
    831c:	e92d4010 	push	{r4, lr}
    8320:	e1a04000 	mov	r4, r0
    8324:	e2800ebd 	add	r0, r0, #3024	; 0xbd0
    8328:	e3a02000 	mov	r2, #0
    832c:	e2800004 	add	r0, r0, #4
    8330:	e5832000 	str	r2, [r3]
    8334:	eb00005e 	bl	84b4 <CTouchScreenDevice::~CTouchScreenDevice()>
    8338:	e2840ebb 	add	r0, r4, #2992	; 0xbb0
    833c:	e2800008 	add	r0, r0, #8
    8340:	eb0011a1 	bl	c9cc <CLogger::~CLogger()>
    8344:	e2840eb9 	add	r0, r4, #2960	; 0xb90
    8348:	eb0006f9 	bl	9f34 <CTimer::~CTimer()>
    834c:	e2840e95 	add	r0, r4, #2384	; 0x950
    8350:	eb001789 	bl	e17c <CInterruptSystem::~CInterruptSystem()>
    8354:	e2840d25 	add	r0, r4, #2368	; 0x940
    8358:	e280000c 	add	r0, r0, #12
    835c:	eb0016d2 	bl	deac <CExceptionHandler::~CExceptionHandler()>
    8360:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    8364:	e2800004 	add	r0, r0, #4
    8368:	eb00133a 	bl	d058 <CSerialDevice::~CSerialDevice()>
    836c:	e2840e86 	add	r0, r4, #2144	; 0x860
    8370:	e2800004 	add	r0, r0, #4
    8374:	eb000ba4 	bl	b20c <CScreenDevice::~CScreenDevice()>
    8378:	e2840e85 	add	r0, r4, #2128	; 0x850
    837c:	e280000c 	add	r0, r0, #12
    8380:	eb0010e4 	bl	c718 <CDeviceNameService::~CDeviceNameService()>
    8384:	e284001c 	add	r0, r4, #28
    8388:	eb0009ea 	bl	ab38 <CKernelOptions::~CKernelOptions()>
    838c:	e2840010 	add	r0, r4, #16
    8390:	eb000149 	bl	88bc <CActLED::~CActLED()>
    8394:	e1a00004 	mov	r0, r4
    8398:	eb0005c1 	bl	9aa4 <CMemorySystem::~CMemorySystem()>
    839c:	e1a00004 	mov	r0, r4
    83a0:	e8bd8010 	pop	{r4, pc}

000083a4 <CKernel::TouchScreenEventHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>:
    83a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    83a8:	e3024380 	movw	r4, #9088	; 0x2380
    83ac:	e3404001 	movt	r4, #1
    83b0:	e1a08003 	mov	r8, r3
    83b4:	e24dd018 	sub	sp, sp, #24
    83b8:	e1a05000 	mov	r5, r0
    83bc:	e1a06001 	mov	r6, r1
    83c0:	e5943000 	ldr	r3, [r4]
    83c4:	e1a07002 	mov	r7, r2
    83c8:	e3530000 	cmp	r3, #0
    83cc:	0a000031 	beq	8498 <CKernel::TouchScreenEventHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0xf4>
    83d0:	e28d0008 	add	r0, sp, #8
    83d4:	eb00136d 	bl	d190 <CString::CString()>
    83d8:	e3550001 	cmp	r5, #1
    83dc:	0a000027 	beq	8480 <CKernel::TouchScreenEventHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0xdc>
    83e0:	3a00001e 	bcc	8460 <CKernel::TouchScreenEventHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0xbc>
    83e4:	e3550002 	cmp	r5, #2
    83e8:	0a000014 	beq	8440 <CKernel::TouchScreenEventHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0x9c>
    83ec:	e30013a8 	movw	r1, #936	; 0x3a8
    83f0:	e3401001 	movt	r1, #1
    83f4:	e3010d0c 	movw	r0, #7436	; 0x1d0c
    83f8:	e3400001 	movt	r0, #1
    83fc:	e3a02086 	mov	r2, #134	; 0x86
    8400:	eb000ffe 	bl	c400 <assertion_failed>
    8404:	e5944000 	ldr	r4, [r4]
    8408:	e28d0008 	add	r0, sp, #8
    840c:	eb001375 	bl	d1e8 <CString::operator char const*() const>
    8410:	e3a02003 	mov	r2, #3
    8414:	e2844ebb 	add	r4, r4, #2992	; 0xbb0
    8418:	e1a03000 	mov	r3, r0
    841c:	e2844008 	add	r4, r4, #8
    8420:	e3001340 	movw	r1, #832	; 0x340
    8424:	e3401001 	movt	r1, #1
    8428:	e1a00004 	mov	r0, r4
    842c:	eb00124f 	bl	cd70 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8430:	e28d0008 	add	r0, sp, #8
    8434:	eb001323 	bl	d0c8 <CString::~CString()>
    8438:	e28dd018 	add	sp, sp, #24
    843c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8440:	e58d8000 	str	r8, [sp]
    8444:	e1a03007 	mov	r3, r7
    8448:	e2862001 	add	r2, r6, #1
    844c:	e30013f0 	movw	r1, #1008	; 0x3f0
    8450:	e3401001 	movt	r1, #1
    8454:	e28d0008 	add	r0, sp, #8
    8458:	eb00165f 	bl	dddc <CString::Format(char const*, ...)>
    845c:	eaffffe8 	b	8404 <CKernel::TouchScreenEventHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0x60>
    8460:	e58d8000 	str	r8, [sp]
    8464:	e1a03007 	mov	r3, r7
    8468:	e2862001 	add	r2, r6, #1
    846c:	e30013c4 	movw	r1, #964	; 0x3c4
    8470:	e3401001 	movt	r1, #1
    8474:	e28d0008 	add	r0, sp, #8
    8478:	eb001657 	bl	dddc <CString::Format(char const*, ...)>
    847c:	eaffffe0 	b	8404 <CKernel::TouchScreenEventHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0x60>
    8480:	e2862001 	add	r2, r6, #1
    8484:	e30013e0 	movw	r1, #992	; 0x3e0
    8488:	e3401001 	movt	r1, #1
    848c:	e28d0008 	add	r0, sp, #8
    8490:	eb001651 	bl	dddc <CString::Format(char const*, ...)>
    8494:	eaffffda 	b	8404 <CKernel::TouchScreenEventHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0x60>
    8498:	e30013a8 	movw	r1, #936	; 0x3a8
    849c:	e3401001 	movt	r1, #1
    84a0:	e30003b4 	movw	r0, #948	; 0x3b4
    84a4:	e3400001 	movt	r0, #1
    84a8:	e3a02073 	mov	r2, #115	; 0x73
    84ac:	eb000fd3 	bl	c400 <assertion_failed>
    84b0:	eaffffc6 	b	83d0 <CKernel::TouchScreenEventHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0x2c>

000084b4 <CTouchScreenDevice::~CTouchScreenDevice()>:
    84b4:	e59f201c 	ldr	r2, [pc, #28]	; 84d8 <CTouchScreenDevice::~CTouchScreenDevice()+0x24>
    84b8:	e3a03000 	mov	r3, #0
    84bc:	e92d4010 	push	{r4, lr}
    84c0:	e1a04000 	mov	r4, r0
    84c4:	e880000c 	stm	r0, {r2, r3}
    84c8:	e5803008 	str	r3, [r0, #8]
    84cc:	eb000972 	bl	aa9c <CDevice::~CDevice()>
    84d0:	e1a00004 	mov	r0, r4
    84d4:	e8bd8010 	pop	{r4, pc}
    84d8:	00010414 	.word	0x00010414

000084dc <CTouchScreenDevice::~CTouchScreenDevice()>:
    84dc:	e59f2024 	ldr	r2, [pc, #36]	; 8508 <CTouchScreenDevice::~CTouchScreenDevice()+0x2c>
    84e0:	e3a03000 	mov	r3, #0
    84e4:	e92d4010 	push	{r4, lr}
    84e8:	e1a04000 	mov	r4, r0
    84ec:	e880000c 	stm	r0, {r2, r3}
    84f0:	e5803008 	str	r3, [r0, #8]
    84f4:	eb000968 	bl	aa9c <CDevice::~CDevice()>
    84f8:	e1a00004 	mov	r0, r4
    84fc:	eb000605 	bl	9d18 <operator delete(void*)>
    8500:	e1a00004 	mov	r0, r4
    8504:	e8bd8010 	pop	{r4, pc}
    8508:	00010414 	.word	0x00010414

0000850c <CTouchScreenDevice::CTouchScreenDevice()>:
    850c:	e92d4010 	push	{r4, lr}
    8510:	e1a04000 	mov	r4, r0
    8514:	eb00096b 	bl	aac8 <CDevice::CDevice()>
    8518:	e59f2014 	ldr	r2, [pc, #20]	; 8534 <CTouchScreenDevice::CTouchScreenDevice()+0x28>
    851c:	e3a03000 	mov	r3, #0
    8520:	e1a00004 	mov	r0, r4
    8524:	e5843008 	str	r3, [r4, #8]
    8528:	e884000c 	stm	r4, {r2, r3}
    852c:	e584300c 	str	r3, [r4, #12]
    8530:	e8bd8010 	pop	{r4, pc}
    8534:	00010414 	.word	0x00010414

00008538 <CTouchScreenDevice::Initialize()>:
    8538:	e5903004 	ldr	r3, [r0, #4]
    853c:	e92d4030 	push	{r4, r5, lr}
    8540:	e1a05000 	mov	r5, r0
    8544:	e3530000 	cmp	r3, #0
    8548:	e24dd024 	sub	sp, sp, #36	; 0x24
    854c:	0a000005 	beq	8568 <CTouchScreenDevice::Initialize()+0x30>
    8550:	e3001430 	movw	r1, #1072	; 0x430
    8554:	e3401001 	movt	r1, #1
    8558:	e3000440 	movw	r0, #1088	; 0x440
    855c:	e3400001 	movt	r0, #1
    8560:	e3a02039 	mov	r2, #57	; 0x39
    8564:	eb000fa5 	bl	c400 <assertion_failed>
    8568:	e28d0008 	add	r0, sp, #8
    856c:	eb000154 	bl	8ac4 <CBcmPropertyTags::CBcmPropertyTags()>
    8570:	e3a03000 	mov	r3, #0
    8574:	e58d3000 	str	r3, [sp]
    8578:	e3a03010 	mov	r3, #16
    857c:	e28d0008 	add	r0, sp, #8
    8580:	e3a0100f 	mov	r1, #15
    8584:	e3401004 	movt	r1, #4
    8588:	e08d2003 	add	r2, sp, r3
    858c:	eb000194 	bl	8be4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8590:	e2504000 	subs	r4, r0, #0
    8594:	0a000016 	beq	85f4 <CTouchScreenDevice::Initialize()+0xbc>
    8598:	e59d401c 	ldr	r4, [sp, #28]
    859c:	e3540000 	cmp	r4, #0
    85a0:	0a00001a 	beq	8610 <CTouchScreenDevice::Initialize()+0xd8>
    85a4:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
    85a8:	e3540000 	cmp	r4, #0
    85ac:	e1a03004 	mov	r3, r4
    85b0:	e58d401c 	str	r4, [sp, #28]
    85b4:	e5854004 	str	r4, [r5, #4]
    85b8:	0a00001b 	beq	862c <CTouchScreenDevice::Initialize()+0xf4>
    85bc:	e3a02063 	mov	r2, #99	; 0x63
    85c0:	e3a04001 	mov	r4, #1
    85c4:	e5c32002 	strb	r2, [r3, #2]
    85c8:	eb0010df 	bl	c94c <CDeviceNameService::Get()>
    85cc:	e300136c 	movw	r1, #876	; 0x36c
    85d0:	e3401001 	movt	r1, #1
    85d4:	e1a02005 	mov	r2, r5
    85d8:	e3a03000 	mov	r3, #0
    85dc:	eb001066 	bl	c77c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    85e0:	e28d0008 	add	r0, sp, #8
    85e4:	eb00013c 	bl	8adc <CBcmPropertyTags::~CBcmPropertyTags()>
    85e8:	e1a00004 	mov	r0, r4
    85ec:	e28dd024 	add	sp, sp, #36	; 0x24
    85f0:	e8bd8030 	pop	{r4, r5, pc}
    85f4:	eb001100 	bl	c9fc <CLogger::Get()>
    85f8:	e3003458 	movw	r3, #1112	; 0x458
    85fc:	e3403001 	movt	r3, #1
    8600:	e3a02001 	mov	r2, #1
    8604:	e59f1040 	ldr	r1, [pc, #64]	; 864c <CTouchScreenDevice::Initialize()+0x114>
    8608:	eb0011d8 	bl	cd70 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    860c:	eafffff3 	b	85e0 <CTouchScreenDevice::Initialize()+0xa8>
    8610:	eb0010f9 	bl	c9fc <CLogger::Get()>
    8614:	e3003470 	movw	r3, #1136	; 0x470
    8618:	e3403001 	movt	r3, #1
    861c:	e3a02001 	mov	r2, #1
    8620:	e59f1024 	ldr	r1, [pc, #36]	; 864c <CTouchScreenDevice::Initialize()+0x114>
    8624:	eb0011d1 	bl	cd70 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8628:	eaffffec 	b	85e0 <CTouchScreenDevice::Initialize()+0xa8>
    862c:	e3001430 	movw	r1, #1072	; 0x430
    8630:	e3401001 	movt	r1, #1
    8634:	e300048c 	movw	r0, #1164	; 0x48c
    8638:	e3400001 	movt	r0, #1
    863c:	e3a0204d 	mov	r2, #77	; 0x4d
    8640:	eb000f6e 	bl	c400 <assertion_failed>
    8644:	e5953004 	ldr	r3, [r5, #4]
    8648:	eaffffdb 	b	85bc <CTouchScreenDevice::Initialize()+0x84>
    864c:	00010428 	.word	0x00010428

00008650 <CTouchScreenDevice::Update()>:
    8650:	e5901004 	ldr	r1, [r0, #4]
    8654:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8658:	e1a08000 	mov	r8, r0
    865c:	e3510000 	cmp	r1, #0
    8660:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    8664:	0a000076 	beq	8844 <CTouchScreenDevice::Update()+0x1f4>
    8668:	e3a0203f 	mov	r2, #63	; 0x3f
    866c:	e28d0008 	add	r0, sp, #8
    8670:	eb0008f2 	bl	aa40 <memcpy>
    8674:	e5983004 	ldr	r3, [r8, #4]
    8678:	e3a02063 	mov	r2, #99	; 0x63
    867c:	e5c32002 	strb	r2, [r3, #2]
    8680:	e5dd900a 	ldrb	r9, [sp, #10]
    8684:	e1590002 	cmp	r9, r2
    8688:	0a000052 	beq	87d8 <CTouchScreenDevice::Update()+0x188>
    868c:	e3590000 	cmp	r9, #0
    8690:	0a000052 	beq	87e0 <CTouchScreenDevice::Update()+0x190>
    8694:	e359000a 	cmp	r9, #10
    8698:	ca00005e 	bgt	8818 <CTouchScreenDevice::Update()+0x1c8>
    869c:	e3a0a000 	mov	sl, #0
    86a0:	e30034d0 	movw	r3, #1232	; 0x4d0
    86a4:	e3403001 	movt	r3, #1
    86a8:	e300b430 	movw	fp, #1072	; 0x430
    86ac:	e340b001 	movt	fp, #1
    86b0:	e28d6008 	add	r6, sp, #8
    86b4:	e1a0900a 	mov	r9, sl
    86b8:	e58d3004 	str	r3, [sp, #4]
    86bc:	ea00000d 	b	86f8 <CTouchScreenDevice::Update()+0xa8>
    86c0:	e5825010 	str	r5, [r2, #16]
    86c4:	e1a03004 	mov	r3, r4
    86c8:	e5824038 	str	r4, [r2, #56]	; 0x38
    86cc:	e1a01007 	mov	r1, r7
    86d0:	e1a02005 	mov	r2, r5
    86d4:	e5984008 	ldr	r4, [r8, #8]
    86d8:	e3540000 	cmp	r4, #0
    86dc:	0a000000 	beq	86e4 <CTouchScreenDevice::Update()+0x94>
    86e0:	e12fff34 	blx	r4
    86e4:	e5dd300a 	ldrb	r3, [sp, #10]
    86e8:	e28aa001 	add	sl, sl, #1
    86ec:	e2866006 	add	r6, r6, #6
    86f0:	e153000a 	cmp	r3, sl
    86f4:	9a000021 	bls	8780 <CTouchScreenDevice::Update()+0x130>
    86f8:	e5d63005 	ldrb	r3, [r6, #5]
    86fc:	e5d65003 	ldrb	r5, [r6, #3]
    8700:	e5d62006 	ldrb	r2, [r6, #6]
    8704:	e1a07223 	lsr	r7, r3, #4
    8708:	e1a04403 	lsl	r4, r3, #8
    870c:	e3570009 	cmp	r7, #9
    8710:	e1a05405 	lsl	r5, r5, #8
    8714:	e5d63004 	ldrb	r3, [r6, #4]
    8718:	e2044c0f 	and	r4, r4, #3840	; 0xf00
    871c:	e2055c0f 	and	r5, r5, #3840	; 0xf00
    8720:	e1844002 	orr	r4, r4, r2
    8724:	e1855003 	orr	r5, r5, r3
    8728:	8a000031 	bhi	87f4 <CTouchScreenDevice::Update()+0x1a4>
    872c:	e3a03001 	mov	r3, #1
    8730:	e598000c 	ldr	r0, [r8, #12]
    8734:	e0882107 	add	r2, r8, r7, lsl #2
    8738:	e1a0c002 	mov	ip, r2
    873c:	e1a03713 	lsl	r3, r3, r7
    8740:	e0130000 	ands	r0, r3, r0
    8744:	e1899003 	orr	r9, r9, r3
    8748:	0affffdc 	beq	86c0 <CTouchScreenDevice::Update()+0x70>
    874c:	e5920010 	ldr	r0, [r2, #16]
    8750:	e1a03004 	mov	r3, r4
    8754:	e1a02005 	mov	r2, r5
    8758:	e1a01007 	mov	r1, r7
    875c:	e1550000 	cmp	r5, r0
    8760:	e3a00002 	mov	r0, #2
    8764:	0a000027 	beq	8808 <CTouchScreenDevice::Update()+0x1b8>
    8768:	e58c5010 	str	r5, [ip, #16]
    876c:	e58c4038 	str	r4, [ip, #56]	; 0x38
    8770:	e5984008 	ldr	r4, [r8, #8]
    8774:	e3540000 	cmp	r4, #0
    8778:	1affffd8 	bne	86e0 <CTouchScreenDevice::Update()+0x90>
    877c:	eaffffd8 	b	86e4 <CTouchScreenDevice::Update()+0x94>
    8780:	e598000c 	ldr	r0, [r8, #12]
    8784:	e1e05009 	mvn	r5, r9
    8788:	e0155000 	ands	r5, r5, r0
    878c:	0a000010 	beq	87d4 <CTouchScreenDevice::Update()+0x184>
    8790:	e3a04000 	mov	r4, #0
    8794:	e3a07001 	mov	r7, #1
    8798:	e1a03417 	lsl	r3, r7, r4
    879c:	e1130005 	tst	r3, r5
    87a0:	0a000008 	beq	87c8 <CTouchScreenDevice::Update()+0x178>
    87a4:	e5986008 	ldr	r6, [r8, #8]
    87a8:	e1c99003 	bic	r9, r9, r3
    87ac:	e3a03000 	mov	r3, #0
    87b0:	e1a01004 	mov	r1, r4
    87b4:	e1560003 	cmp	r6, r3
    87b8:	e1a02003 	mov	r2, r3
    87bc:	e3a00001 	mov	r0, #1
    87c0:	0a000000 	beq	87c8 <CTouchScreenDevice::Update()+0x178>
    87c4:	e12fff36 	blx	r6
    87c8:	e2844001 	add	r4, r4, #1
    87cc:	e354000a 	cmp	r4, #10
    87d0:	1afffff0 	bne	8798 <CTouchScreenDevice::Update()+0x148>
    87d4:	e588900c 	str	r9, [r8, #12]
    87d8:	e28dd04c 	add	sp, sp, #76	; 0x4c
    87dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87e0:	e598000c 	ldr	r0, [r8, #12]
    87e4:	e3500000 	cmp	r0, #0
    87e8:	0afffffa 	beq	87d8 <CTouchScreenDevice::Update()+0x188>
    87ec:	e3e05000 	mvn	r5, #0
    87f0:	eaffffe4 	b	8788 <CTouchScreenDevice::Update()+0x138>
    87f4:	e3a0206d 	mov	r2, #109	; 0x6d
    87f8:	e1a0100b 	mov	r1, fp
    87fc:	e59d0004 	ldr	r0, [sp, #4]
    8800:	eb000efe 	bl	c400 <assertion_failed>
    8804:	eaffffc8 	b	872c <CTouchScreenDevice::Update()+0xdc>
    8808:	e59ce038 	ldr	lr, [ip, #56]	; 0x38
    880c:	e154000e 	cmp	r4, lr
    8810:	1affffd4 	bne	8768 <CTouchScreenDevice::Update()+0x118>
    8814:	eaffffb2 	b	86e4 <CTouchScreenDevice::Update()+0x94>
    8818:	e3001430 	movw	r1, #1072	; 0x430
    881c:	e3401001 	movt	r1, #1
    8820:	e30004a4 	movw	r0, #1188	; 0x4a4
    8824:	e3400001 	movt	r0, #1
    8828:	e3a02066 	mov	r2, #102	; 0x66
    882c:	eb000ef3 	bl	c400 <assertion_failed>
    8830:	e5dd900a 	ldrb	r9, [sp, #10]
    8834:	e3590000 	cmp	r9, #0
    8838:	1affff97 	bne	869c <CTouchScreenDevice::Update()+0x4c>
    883c:	e598000c 	ldr	r0, [r8, #12]
    8840:	eaffffe9 	b	87ec <CTouchScreenDevice::Update()+0x19c>
    8844:	e3001430 	movw	r1, #1072	; 0x430
    8848:	e3401001 	movt	r1, #1
    884c:	e300048c 	movw	r0, #1164	; 0x48c
    8850:	e3400001 	movt	r0, #1
    8854:	e3a02058 	mov	r2, #88	; 0x58
    8858:	eb000ee8 	bl	c400 <assertion_failed>
    885c:	e5981004 	ldr	r1, [r8, #4]
    8860:	eaffff80 	b	8668 <CTouchScreenDevice::Update()+0x18>

00008864 <CTouchScreenDevice::RegisterEventHandler(void (*)(TTouchScreenEvent, unsigned int, unsigned int, unsigned int))>:
    8864:	e5903008 	ldr	r3, [r0, #8]
    8868:	e92d4070 	push	{r4, r5, r6, lr}
    886c:	e1a04000 	mov	r4, r0
    8870:	e3530000 	cmp	r3, #0
    8874:	e1a05001 	mov	r5, r1
    8878:	0a000005 	beq	8894 <CTouchScreenDevice::RegisterEventHandler(void (*)(TTouchScreenEvent, unsigned int, unsigned int, unsigned int))+0x30>
    887c:	e3001430 	movw	r1, #1072	; 0x430
    8880:	e3401001 	movt	r1, #1
    8884:	e30004f4 	movw	r0, #1268	; 0x4f4
    8888:	e3400001 	movt	r0, #1
    888c:	e3a0209e 	mov	r2, #158	; 0x9e
    8890:	eb000eda 	bl	c400 <assertion_failed>
    8894:	e3550000 	cmp	r5, #0
    8898:	e5845008 	str	r5, [r4, #8]
    889c:	18bd8070 	popne	{r4, r5, r6, pc}
    88a0:	e3001430 	movw	r1, #1072	; 0x430
    88a4:	e3401001 	movt	r1, #1
    88a8:	e300050c 	movw	r0, #1292	; 0x50c
    88ac:	e3400001 	movt	r0, #1
    88b0:	e3a020a0 	mov	r2, #160	; 0xa0
    88b4:	e8bd4070 	pop	{r4, r5, r6, lr}
    88b8:	ea000ed0 	b	c400 <assertion_failed>

000088bc <CActLED::~CActLED()>:
    88bc:	e3023384 	movw	r3, #9092	; 0x2384
    88c0:	e3403001 	movt	r3, #1
    88c4:	e3a02000 	mov	r2, #0
    88c8:	e5832000 	str	r2, [r3]
    88cc:	e12fff1e 	bx	lr

000088d0 <CActLED::On()>:
    88d0:	e5903000 	ldr	r3, [r0]
    88d4:	e3530000 	cmp	r3, #0
    88d8:	0a000004 	beq	88f0 <CActLED::On()+0x20>
    88dc:	e5901008 	ldr	r1, [r0, #8]
    88e0:	e1a00003 	mov	r0, r3
    88e4:	e2911000 	adds	r1, r1, #0
    88e8:	13a01001 	movne	r1, #1
    88ec:	ea0000ee 	b	8cac <CGPIOPin::Write(unsigned int)>
    88f0:	e5903004 	ldr	r3, [r0, #4]
    88f4:	e3530000 	cmp	r3, #0
    88f8:	012fff1e 	bxeq	lr
    88fc:	e5901008 	ldr	r1, [r0, #8]
    8900:	e1a00003 	mov	r0, r3
    8904:	e2911000 	adds	r1, r1, #0
    8908:	13a01001 	movne	r1, #1
    890c:	ea001850 	b	ea54 <CVirtualGPIOPin::Write(unsigned int)>

00008910 <CActLED::Off()>:
    8910:	e5903000 	ldr	r3, [r0]
    8914:	e3530000 	cmp	r3, #0
    8918:	0a000004 	beq	8930 <CActLED::Off()+0x20>
    891c:	e5901008 	ldr	r1, [r0, #8]
    8920:	e1a00003 	mov	r0, r3
    8924:	e16f1f11 	clz	r1, r1
    8928:	e1a012a1 	lsr	r1, r1, #5
    892c:	ea0000de 	b	8cac <CGPIOPin::Write(unsigned int)>
    8930:	e5903004 	ldr	r3, [r0, #4]
    8934:	e3530000 	cmp	r3, #0
    8938:	012fff1e 	bxeq	lr
    893c:	e5901008 	ldr	r1, [r0, #8]
    8940:	e1a00003 	mov	r0, r3
    8944:	e16f1f11 	clz	r1, r1
    8948:	e1a012a1 	lsr	r1, r1, #5
    894c:	ea001840 	b	ea54 <CVirtualGPIOPin::Write(unsigned int)>

00008950 <CActLED::CActLED()>:
    8950:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8954:	e1a04000 	mov	r4, r0
    8958:	e3023384 	movw	r3, #9092	; 0x2384
    895c:	e3403001 	movt	r3, #1
    8960:	e24dd024 	sub	sp, sp, #36	; 0x24
    8964:	e3a05000 	mov	r5, #0
    8968:	e5805000 	str	r5, [r0]
    896c:	e28d0008 	add	r0, sp, #8
    8970:	e5845004 	str	r5, [r4, #4]
    8974:	e5834000 	str	r4, [r3]
    8978:	eb000051 	bl	8ac4 <CBcmPropertyTags::CBcmPropertyTags()>
    897c:	e3a03010 	mov	r3, #16
    8980:	e58d5000 	str	r5, [sp]
    8984:	e28d0008 	add	r0, sp, #8
    8988:	e3a01002 	mov	r1, #2
    898c:	e3401001 	movt	r1, #1
    8990:	e08d2003 	add	r2, sp, r3
    8994:	eb000092 	bl	8be4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8998:	e1500005 	cmp	r0, r5
    899c:	0a000011 	beq	89e8 <CActLED::CActLED()+0x98>
    89a0:	e59d301c 	ldr	r3, [sp, #28]
    89a4:	e3130502 	tst	r3, #8388608	; 0x800000
    89a8:	1a000013 	bne	89fc <CActLED::CActLED()+0xac>
    89ac:	e6ff3073 	uxth	r3, r3
    89b0:	e353000f 	cmp	r3, #15
    89b4:	83a06001 	movhi	r6, #1
    89b8:	9a00001c 	bls	8a30 <CActLED::CActLED()+0xe0>
    89bc:	e3a00020 	mov	r0, #32
    89c0:	eb0004d2 	bl	9d10 <operator new(unsigned int)>
    89c4:	e3a03000 	mov	r3, #0
    89c8:	e1a05000 	mov	r5, r0
    89cc:	e3a02001 	mov	r2, #1
    89d0:	e3a0102f 	mov	r1, #47	; 0x2f
    89d4:	eb0003ad 	bl	9890 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    89d8:	e5845000 	str	r5, [r4]
    89dc:	e5846008 	str	r6, [r4, #8]
    89e0:	e1a00004 	mov	r0, r4
    89e4:	ebffffc9 	bl	8910 <CActLED::Off()>
    89e8:	e28d0008 	add	r0, sp, #8
    89ec:	eb00003a 	bl	8adc <CBcmPropertyTags::~CBcmPropertyTags()>
    89f0:	e1a00004 	mov	r0, r4
    89f4:	e28dd024 	add	sp, sp, #36	; 0x24
    89f8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    89fc:	e7e73253 	ubfx	r3, r3, #4, #8
    8a00:	e3530001 	cmp	r3, #1
    8a04:	9a000009 	bls	8a30 <CActLED::CActLED()+0xe0>
    8a08:	e3530008 	cmp	r3, #8
    8a0c:	1a000012 	bne	8a5c <CActLED::CActLED()+0x10c>
    8a10:	e3a00010 	mov	r0, #16
    8a14:	e3a06001 	mov	r6, #1
    8a18:	eb0004bc 	bl	9d10 <operator new(unsigned int)>
    8a1c:	e1a01005 	mov	r1, r5
    8a20:	e1a07000 	mov	r7, r0
    8a24:	eb0017ce 	bl	e964 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    8a28:	e5847004 	str	r7, [r4, #4]
    8a2c:	eaffffea 	b	89dc <CActLED::CActLED()+0x8c>
    8a30:	e3a00020 	mov	r0, #32
    8a34:	eb0004b5 	bl	9d10 <operator new(unsigned int)>
    8a38:	e3a03000 	mov	r3, #0
    8a3c:	e3a02001 	mov	r2, #1
    8a40:	e3a01010 	mov	r1, #16
    8a44:	e1a05000 	mov	r5, r0
    8a48:	eb000390 	bl	9890 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8a4c:	e3a03000 	mov	r3, #0
    8a50:	e5845000 	str	r5, [r4]
    8a54:	e5843008 	str	r3, [r4, #8]
    8a58:	eaffffe0 	b	89e0 <CActLED::CActLED()+0x90>
    8a5c:	e2536009 	subs	r6, r3, #9
    8a60:	13a06001 	movne	r6, #1
    8a64:	eaffffd4 	b	89bc <CActLED::CActLED()+0x6c>

00008a68 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    8a68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8a6c:	e2516000 	subs	r6, r1, #0
    8a70:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8a74:	e1a08003 	mov	r8, r3
    8a78:	e1a07002 	mov	r7, r2
    8a7c:	e1a05000 	mov	r5, r0
    8a80:	e3a04001 	mov	r4, #1
    8a84:	e1a00005 	mov	r0, r5
    8a88:	e2844001 	add	r4, r4, #1
    8a8c:	ebffff8f 	bl	88d0 <CActLED::On()>
    8a90:	e1a00007 	mov	r0, r7
    8a94:	eb00078e 	bl	a8d4 <CTimer::SimpleMsDelay(unsigned int)>
    8a98:	e1a00005 	mov	r0, r5
    8a9c:	ebffff9b 	bl	8910 <CActLED::Off()>
    8aa0:	e1a00008 	mov	r0, r8
    8aa4:	eb00078a 	bl	a8d4 <CTimer::SimpleMsDelay(unsigned int)>
    8aa8:	e1560004 	cmp	r6, r4
    8aac:	2afffff4 	bcs	8a84 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    8ab0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008ab4 <CActLED::Get()>:
    8ab4:	e3023384 	movw	r3, #9092	; 0x2384
    8ab8:	e3403001 	movt	r3, #1
    8abc:	e5930000 	ldr	r0, [r3]
    8ac0:	e12fff1e 	bx	lr

00008ac4 <CBcmPropertyTags::CBcmPropertyTags()>:
    8ac4:	e92d4010 	push	{r4, lr}
    8ac8:	e3a01008 	mov	r1, #8
    8acc:	e1a04000 	mov	r4, r0
    8ad0:	eb001bb9 	bl	f9bc <CBcmMailBox::CBcmMailBox(unsigned int)>
    8ad4:	e1a00004 	mov	r0, r4
    8ad8:	e8bd8010 	pop	{r4, pc}

00008adc <CBcmPropertyTags::~CBcmPropertyTags()>:
    8adc:	e92d4010 	push	{r4, lr}
    8ae0:	e1a04000 	mov	r4, r0
    8ae4:	eb001bb7 	bl	f9c8 <CBcmMailBox::~CBcmMailBox()>
    8ae8:	e1a00004 	mov	r0, r4
    8aec:	e8bd8010 	pop	{r4, pc}

00008af0 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    8af0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8af4:	e2519000 	subs	r9, r1, #0
    8af8:	e1a0a000 	mov	sl, r0
    8afc:	e1a04002 	mov	r4, r2
    8b00:	0a000030 	beq	8bc8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd8>
    8b04:	e354000f 	cmp	r4, #15
    8b08:	9a000027 	bls	8bac <CBcmPropertyTags::GetTags(void*, unsigned int)+0xbc>
    8b0c:	e284800c 	add	r8, r4, #12
    8b10:	e3180003 	tst	r8, #3
    8b14:	1a00001d 	bne	8b90 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
    8b18:	e3a06501 	mov	r6, #4194304	; 0x400000
    8b1c:	e3a05008 	mov	r5, #8
    8b20:	e3405040 	movt	r5, #64	; 0x40
    8b24:	e3a07000 	mov	r7, #0
    8b28:	e1a00005 	mov	r0, r5
    8b2c:	e5868000 	str	r8, [r6]
    8b30:	e1a02004 	mov	r2, r4
    8b34:	e5867004 	str	r7, [r6, #4]
    8b38:	e1a01009 	mov	r1, r9
    8b3c:	eb0007bf 	bl	aa40 <memcpy>
    8b40:	e7857004 	str	r7, [r5, r4]
    8b44:	f57ff04f 	dsb	sy
    8b48:	e1a01007 	mov	r1, r7
    8b4c:	e1a0000a 	mov	r0, sl
    8b50:	e34c1040 	movt	r1, #49216	; 0xc040
    8b54:	eb001bcb 	bl	fa88 <CBcmMailBox::WriteRead(unsigned int)>
    8b58:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
    8b5c:	0a000001 	beq	8b68 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x78>
    8b60:	e3a00000 	mov	r0, #0
    8b64:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8b68:	f57ff05f 	dmb	sy
    8b6c:	e5963004 	ldr	r3, [r6, #4]
    8b70:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    8b74:	1afffff9 	bne	8b60 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x70>
    8b78:	e1a02004 	mov	r2, r4
    8b7c:	e1a01005 	mov	r1, r5
    8b80:	e1a00009 	mov	r0, r9
    8b84:	eb0007ad 	bl	aa40 <memcpy>
    8b88:	e3a00001 	mov	r0, #1
    8b8c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8b90:	e3001524 	movw	r1, #1316	; 0x524
    8b94:	e3401001 	movt	r1, #1
    8b98:	e3000570 	movw	r0, #1392	; 0x570
    8b9c:	e3400001 	movt	r0, #1
    8ba0:	e3a02051 	mov	r2, #81	; 0x51
    8ba4:	eb000e15 	bl	c400 <assertion_failed>
    8ba8:	eaffffda 	b	8b18 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    8bac:	e3001524 	movw	r1, #1316	; 0x524
    8bb0:	e3401001 	movt	r1, #1
    8bb4:	e3000544 	movw	r0, #1348	; 0x544
    8bb8:	e3400001 	movt	r0, #1
    8bbc:	e3a0204f 	mov	r2, #79	; 0x4f
    8bc0:	eb000e0e 	bl	c400 <assertion_failed>
    8bc4:	eaffffd0 	b	8b0c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    8bc8:	e3001524 	movw	r1, #1316	; 0x524
    8bcc:	e3401001 	movt	r1, #1
    8bd0:	e3000538 	movw	r0, #1336	; 0x538
    8bd4:	e3400001 	movt	r0, #1
    8bd8:	e3a0204e 	mov	r2, #78	; 0x4e
    8bdc:	eb000e07 	bl	c400 <assertion_failed>
    8be0:	eaffffc7 	b	8b04 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>

00008be4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    8be4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8be8:	e2524000 	subs	r4, r2, #0
    8bec:	e1a08000 	mov	r8, r0
    8bf0:	e1a07001 	mov	r7, r1
    8bf4:	e1a05003 	mov	r5, r3
    8bf8:	e59d6018 	ldr	r6, [sp, #24]
    8bfc:	0a00001d 	beq	8c78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x94>
    8c00:	e355000f 	cmp	r5, #15
    8c04:	9a000014 	bls	8c5c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
    8c08:	e245300c 	sub	r3, r5, #12
    8c0c:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
    8c10:	e5846008 	str	r6, [r4, #8]
    8c14:	e1a00008 	mov	r0, r8
    8c18:	e5847000 	str	r7, [r4]
    8c1c:	e1a02005 	mov	r2, r5
    8c20:	e5843004 	str	r3, [r4, #4]
    8c24:	e1a01004 	mov	r1, r4
    8c28:	ebffffb0 	bl	8af0 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    8c2c:	e3500000 	cmp	r0, #0
    8c30:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8c34:	e5940008 	ldr	r0, [r4, #8]
    8c38:	e3500000 	cmp	r0, #0
    8c3c:	ba000001 	blt	8c48 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
    8c40:	e3a00000 	mov	r0, #0
    8c44:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8c48:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    8c4c:	e5840008 	str	r0, [r4, #8]
    8c50:	e2900000 	adds	r0, r0, #0
    8c54:	13a00001 	movne	r0, #1
    8c58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8c5c:	e3001524 	movw	r1, #1316	; 0x524
    8c60:	e3401001 	movt	r1, #1
    8c64:	e3000594 	movw	r0, #1428	; 0x594
    8c68:	e3400001 	movt	r0, #1
    8c6c:	e3a02032 	mov	r2, #50	; 0x32
    8c70:	eb000de2 	bl	c400 <assertion_failed>
    8c74:	eaffffe3 	b	8c08 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    8c78:	e3001524 	movw	r1, #1316	; 0x524
    8c7c:	e3401001 	movt	r1, #1
    8c80:	e3000588 	movw	r0, #1416	; 0x588
    8c84:	e3400001 	movt	r0, #1
    8c88:	e3a02031 	mov	r2, #49	; 0x31
    8c8c:	eb000ddb 	bl	c400 <assertion_failed>
    8c90:	eaffffda 	b	8c00 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>

00008c94 <CGPIOPin::~CGPIOPin()>:
    8c94:	e12fff1e 	bx	lr

00008c98 <CGPIOPin::~CGPIOPin()>:
    8c98:	e92d4010 	push	{r4, lr}
    8c9c:	e1a04000 	mov	r4, r0
    8ca0:	eb00041c 	bl	9d18 <operator delete(void*)>
    8ca4:	e1a00004 	mov	r0, r4
    8ca8:	e8bd8010 	pop	{r4, pc}

00008cac <CGPIOPin::Write(unsigned int)>:
    8cac:	e5d03008 	ldrb	r3, [r0, #8]
    8cb0:	e92d4070 	push	{r4, r5, r6, lr}
    8cb4:	e1a04000 	mov	r4, r0
    8cb8:	e3530003 	cmp	r3, #3
    8cbc:	e1a05001 	mov	r5, r1
    8cc0:	ca000017 	bgt	8d24 <CGPIOPin::Write(unsigned int)+0x78>
    8cc4:	e3550001 	cmp	r5, #1
    8cc8:	9a000005 	bls	8ce4 <CGPIOPin::Write(unsigned int)+0x38>
    8ccc:	e30015e4 	movw	r1, #1508	; 0x5e4
    8cd0:	e3401001 	movt	r1, #1
    8cd4:	e3000614 	movw	r0, #1556	; 0x614
    8cd8:	e3400001 	movt	r0, #1
    8cdc:	e3a02081 	mov	r2, #129	; 0x81
    8ce0:	eb000dc6 	bl	c400 <assertion_failed>
    8ce4:	e5943004 	ldr	r3, [r4, #4]
    8ce8:	e584500c 	str	r5, [r4, #12]
    8cec:	e3530035 	cmp	r3, #53	; 0x35
    8cf0:	8a000012 	bhi	8d40 <CGPIOPin::Write(unsigned int)+0x94>
    8cf4:	e203c01f 	and	ip, r3, #31
    8cf8:	e3a0001c 	mov	r0, #28
    8cfc:	e3430f20 	movt	r0, #16160	; 0x3f20
    8d00:	e3a01001 	mov	r1, #1
    8d04:	e3550000 	cmp	r5, #0
    8d08:	e3a02028 	mov	r2, #40	; 0x28
    8d0c:	e3432f20 	movt	r2, #16160	; 0x3f20
    8d10:	e1a032a3 	lsr	r3, r3, #5
    8d14:	11a02000 	movne	r2, r0
    8d18:	e1a01c11 	lsl	r1, r1, ip
    8d1c:	e7821103 	str	r1, [r2, r3, lsl #2]
    8d20:	e8bd8070 	pop	{r4, r5, r6, pc}
    8d24:	e30015e4 	movw	r1, #1508	; 0x5e4
    8d28:	e3401001 	movt	r1, #1
    8d2c:	e30005f0 	movw	r0, #1520	; 0x5f0
    8d30:	e3400001 	movt	r0, #1
    8d34:	e3a0207d 	mov	r2, #125	; 0x7d
    8d38:	eb000db0 	bl	c400 <assertion_failed>
    8d3c:	eaffffe0 	b	8cc4 <CGPIOPin::Write(unsigned int)+0x18>
    8d40:	e30015e4 	movw	r1, #1508	; 0x5e4
    8d44:	e3401001 	movt	r1, #1
    8d48:	e3000634 	movw	r0, #1588	; 0x634
    8d4c:	e3400001 	movt	r0, #1
    8d50:	e3a02084 	mov	r2, #132	; 0x84
    8d54:	eb000da9 	bl	c400 <assertion_failed>
    8d58:	e594500c 	ldr	r5, [r4, #12]
    8d5c:	e5943004 	ldr	r3, [r4, #4]
    8d60:	eaffffe3 	b	8cf4 <CGPIOPin::Write(unsigned int)+0x48>

00008d64 <CGPIOPin::Read() const>:
    8d64:	e5d03008 	ldrb	r3, [r0, #8]
    8d68:	e92d4010 	push	{r4, lr}
    8d6c:	e1a04000 	mov	r4, r0
    8d70:	e2432002 	sub	r2, r3, #2
    8d74:	e3530000 	cmp	r3, #0
    8d78:	13520001 	cmpne	r2, #1
    8d7c:	9a000005 	bls	8d98 <CGPIOPin::Read() const+0x34>
    8d80:	e30015e4 	movw	r1, #1508	; 0x5e4
    8d84:	e3401001 	movt	r1, #1
    8d88:	e3000648 	movw	r0, #1608	; 0x648
    8d8c:	e3400001 	movt	r0, #1
    8d90:	e3a02091 	mov	r2, #145	; 0x91
    8d94:	eb000d99 	bl	c400 <assertion_failed>
    8d98:	e5942004 	ldr	r2, [r4, #4]
    8d9c:	e3520035 	cmp	r2, #53	; 0x35
    8da0:	8a000009 	bhi	8dcc <CGPIOPin::Read() const+0x68>
    8da4:	e3a0300d 	mov	r3, #13
    8da8:	e3403fc8 	movt	r3, #4040	; 0xfc8
    8dac:	e3a00001 	mov	r0, #1
    8db0:	e202101f 	and	r1, r2, #31
    8db4:	e08332a2 	add	r3, r3, r2, lsr #5
    8db8:	e1a03103 	lsl	r3, r3, #2
    8dbc:	e5933000 	ldr	r3, [r3]
    8dc0:	e0133110 	ands	r3, r3, r0, lsl r1
    8dc4:	03a00000 	moveq	r0, #0
    8dc8:	e8bd8010 	pop	{r4, pc}
    8dcc:	e3a02095 	mov	r2, #149	; 0x95
    8dd0:	e30015e4 	movw	r1, #1508	; 0x5e4
    8dd4:	e3401001 	movt	r1, #1
    8dd8:	e3000634 	movw	r0, #1588	; 0x634
    8ddc:	e3400001 	movt	r0, #1
    8de0:	eb000d86 	bl	c400 <assertion_failed>
    8de4:	e5942004 	ldr	r2, [r4, #4]
    8de8:	eaffffed 	b	8da4 <CGPIOPin::Read() const+0x40>

00008dec <CGPIOPin::Invert()>:
    8dec:	e5d03008 	ldrb	r3, [r0, #8]
    8df0:	e92d4010 	push	{r4, lr}
    8df4:	e1a04000 	mov	r4, r0
    8df8:	e3530001 	cmp	r3, #1
    8dfc:	0a000005 	beq	8e18 <CGPIOPin::Invert()+0x2c>
    8e00:	e30015e4 	movw	r1, #1508	; 0x5e4
    8e04:	e3401001 	movt	r1, #1
    8e08:	e30006a4 	movw	r0, #1700	; 0x6a4
    8e0c:	e3400001 	movt	r0, #1
    8e10:	e3a020a2 	mov	r2, #162	; 0xa2
    8e14:	eb000d79 	bl	c400 <assertion_failed>
    8e18:	e594100c 	ldr	r1, [r4, #12]
    8e1c:	e1a00004 	mov	r0, r4
    8e20:	e8bd4010 	pop	{r4, lr}
    8e24:	e2211001 	eor	r1, r1, #1
    8e28:	eaffff9f 	b	8cac <CGPIOPin::Write(unsigned int)>

00008e2c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    8e2c:	e5d03008 	ldrb	r3, [r0, #8]
    8e30:	e92d4070 	push	{r4, r5, r6, lr}
    8e34:	e1a06002 	mov	r6, r2
    8e38:	e2432002 	sub	r2, r3, #2
    8e3c:	e3530000 	cmp	r3, #0
    8e40:	13520001 	cmpne	r2, #1
    8e44:	e1a04000 	mov	r4, r0
    8e48:	e1a05001 	mov	r5, r1
    8e4c:	9a000005 	bls	8e68 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x3c>
    8e50:	e30015e4 	movw	r1, #1508	; 0x5e4
    8e54:	e3401001 	movt	r1, #1
    8e58:	e3000648 	movw	r0, #1608	; 0x648
    8e5c:	e3400001 	movt	r0, #1
    8e60:	e3a020ab 	mov	r2, #171	; 0xab
    8e64:	eb000d65 	bl	c400 <assertion_failed>
    8e68:	e5d4301c 	ldrb	r3, [r4, #28]
    8e6c:	e3530006 	cmp	r3, #6
    8e70:	0a000005 	beq	8e8c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x60>
    8e74:	e30015e4 	movw	r1, #1508	; 0x5e4
    8e78:	e3401001 	movt	r1, #1
    8e7c:	e30006c0 	movw	r0, #1728	; 0x6c0
    8e80:	e3400001 	movt	r0, #1
    8e84:	e3a020ad 	mov	r2, #173	; 0xad
    8e88:	eb000d5c 	bl	c400 <assertion_failed>
    8e8c:	e5d4301d 	ldrb	r3, [r4, #29]
    8e90:	e3530006 	cmp	r3, #6
    8e94:	0a000005 	beq	8eb0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x84>
    8e98:	e30015e4 	movw	r1, #1508	; 0x5e4
    8e9c:	e3401001 	movt	r1, #1
    8ea0:	e30006e4 	movw	r0, #1764	; 0x6e4
    8ea4:	e3400001 	movt	r0, #1
    8ea8:	e3a020ae 	mov	r2, #174	; 0xae
    8eac:	eb000d53 	bl	c400 <assertion_failed>
    8eb0:	e3550000 	cmp	r5, #0
    8eb4:	0a00001a 	beq	8f24 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    8eb8:	e5943014 	ldr	r3, [r4, #20]
    8ebc:	e3530000 	cmp	r3, #0
    8ec0:	0a000005 	beq	8edc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    8ec4:	e30015e4 	movw	r1, #1508	; 0x5e4
    8ec8:	e3401001 	movt	r1, #1
    8ecc:	e300071c 	movw	r0, #1820	; 0x71c
    8ed0:	e3400001 	movt	r0, #1
    8ed4:	e3a020b1 	mov	r2, #177	; 0xb1
    8ed8:	eb000d48 	bl	c400 <assertion_failed>
    8edc:	e5940010 	ldr	r0, [r4, #16]
    8ee0:	e5845014 	str	r5, [r4, #20]
    8ee4:	e3500000 	cmp	r0, #0
    8ee8:	e5846018 	str	r6, [r4, #24]
    8eec:	0a000002 	beq	8efc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    8ef0:	e1a01004 	mov	r1, r4
    8ef4:	e8bd4070 	pop	{r4, r5, r6, lr}
    8ef8:	ea0015d3 	b	e64c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8efc:	e30015e4 	movw	r1, #1508	; 0x5e4
    8f00:	e3401001 	movt	r1, #1
    8f04:	e300072c 	movw	r0, #1836	; 0x72c
    8f08:	e3400001 	movt	r0, #1
    8f0c:	e3a020b6 	mov	r2, #182	; 0xb6
    8f10:	eb000d3a 	bl	c400 <assertion_failed>
    8f14:	e5940010 	ldr	r0, [r4, #16]
    8f18:	e1a01004 	mov	r1, r4
    8f1c:	e8bd4070 	pop	{r4, r5, r6, lr}
    8f20:	ea0015c9 	b	e64c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8f24:	e30015e4 	movw	r1, #1508	; 0x5e4
    8f28:	e3401001 	movt	r1, #1
    8f2c:	e300070c 	movw	r0, #1804	; 0x70c
    8f30:	e3400001 	movt	r0, #1
    8f34:	e3a020b0 	mov	r2, #176	; 0xb0
    8f38:	eb000d30 	bl	c400 <assertion_failed>
    8f3c:	eaffffdd 	b	8eb8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x8c>

00008f40 <CGPIOPin::DisconnectInterrupt()>:
    8f40:	e5d03008 	ldrb	r3, [r0, #8]
    8f44:	e92d4010 	push	{r4, lr}
    8f48:	e1a04000 	mov	r4, r0
    8f4c:	e2432002 	sub	r2, r3, #2
    8f50:	e3530000 	cmp	r3, #0
    8f54:	13520001 	cmpne	r2, #1
    8f58:	9a000005 	bls	8f74 <CGPIOPin::DisconnectInterrupt()+0x34>
    8f5c:	e30015e4 	movw	r1, #1508	; 0x5e4
    8f60:	e3401001 	movt	r1, #1
    8f64:	e3000648 	movw	r0, #1608	; 0x648
    8f68:	e3400001 	movt	r0, #1
    8f6c:	e3a020be 	mov	r2, #190	; 0xbe
    8f70:	eb000d22 	bl	c400 <assertion_failed>
    8f74:	e5d4301c 	ldrb	r3, [r4, #28]
    8f78:	e3530006 	cmp	r3, #6
    8f7c:	0a000005 	beq	8f98 <CGPIOPin::DisconnectInterrupt()+0x58>
    8f80:	e30015e4 	movw	r1, #1508	; 0x5e4
    8f84:	e3401001 	movt	r1, #1
    8f88:	e30006c0 	movw	r0, #1728	; 0x6c0
    8f8c:	e3400001 	movt	r0, #1
    8f90:	e3a020c0 	mov	r2, #192	; 0xc0
    8f94:	eb000d19 	bl	c400 <assertion_failed>
    8f98:	e5d4301d 	ldrb	r3, [r4, #29]
    8f9c:	e3530006 	cmp	r3, #6
    8fa0:	0a000005 	beq	8fbc <CGPIOPin::DisconnectInterrupt()+0x7c>
    8fa4:	e30015e4 	movw	r1, #1508	; 0x5e4
    8fa8:	e3401001 	movt	r1, #1
    8fac:	e30006e4 	movw	r0, #1764	; 0x6e4
    8fb0:	e3400001 	movt	r0, #1
    8fb4:	e3a020c1 	mov	r2, #193	; 0xc1
    8fb8:	eb000d10 	bl	c400 <assertion_failed>
    8fbc:	e5943014 	ldr	r3, [r4, #20]
    8fc0:	e3530000 	cmp	r3, #0
    8fc4:	0a000011 	beq	9010 <CGPIOPin::DisconnectInterrupt()+0xd0>
    8fc8:	e5940010 	ldr	r0, [r4, #16]
    8fcc:	e3a03000 	mov	r3, #0
    8fd0:	e5843014 	str	r3, [r4, #20]
    8fd4:	e1500003 	cmp	r0, r3
    8fd8:	0a000002 	beq	8fe8 <CGPIOPin::DisconnectInterrupt()+0xa8>
    8fdc:	e1a01004 	mov	r1, r4
    8fe0:	e8bd4010 	pop	{r4, lr}
    8fe4:	ea0015c4 	b	e6fc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    8fe8:	e30015e4 	movw	r1, #1508	; 0x5e4
    8fec:	e3401001 	movt	r1, #1
    8ff0:	e300072c 	movw	r0, #1836	; 0x72c
    8ff4:	e3400001 	movt	r0, #1
    8ff8:	e3a020c6 	mov	r2, #198	; 0xc6
    8ffc:	eb000cff 	bl	c400 <assertion_failed>
    9000:	e5940010 	ldr	r0, [r4, #16]
    9004:	e1a01004 	mov	r1, r4
    9008:	e8bd4010 	pop	{r4, lr}
    900c:	ea0015ba 	b	e6fc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    9010:	e30015e4 	movw	r1, #1508	; 0x5e4
    9014:	e3401001 	movt	r1, #1
    9018:	e300073c 	movw	r0, #1852	; 0x73c
    901c:	e3400001 	movt	r0, #1
    9020:	e3a020c3 	mov	r2, #195	; 0xc3
    9024:	eb000cf5 	bl	c400 <assertion_failed>
    9028:	eaffffe6 	b	8fc8 <CGPIOPin::DisconnectInterrupt()+0x88>

0000902c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    902c:	e5d03008 	ldrb	r3, [r0, #8]
    9030:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9034:	e1a04000 	mov	r4, r0
    9038:	e2432002 	sub	r2, r3, #2
    903c:	e3530000 	cmp	r3, #0
    9040:	13520001 	cmpne	r2, #1
    9044:	e1a08001 	mov	r8, r1
    9048:	9a000005 	bls	9064 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x38>
    904c:	e30015e4 	movw	r1, #1508	; 0x5e4
    9050:	e3401001 	movt	r1, #1
    9054:	e3000648 	movw	r0, #1608	; 0x648
    9058:	e3400001 	movt	r0, #1
    905c:	e3a020ce 	mov	r2, #206	; 0xce
    9060:	eb000ce6 	bl	c400 <assertion_failed>
    9064:	e5943010 	ldr	r3, [r4, #16]
    9068:	e3530000 	cmp	r3, #0
    906c:	0a000043 	beq	9180 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    9070:	e5943014 	ldr	r3, [r4, #20]
    9074:	e3530000 	cmp	r3, #0
    9078:	0a000047 	beq	919c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x170>
    907c:	e5d4301c 	ldrb	r3, [r4, #28]
    9080:	e3530006 	cmp	r3, #6
    9084:	0a000005 	beq	90a0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x74>
    9088:	e30015e4 	movw	r1, #1508	; 0x5e4
    908c:	e3401001 	movt	r1, #1
    9090:	e30006c0 	movw	r0, #1728	; 0x6c0
    9094:	e3400001 	movt	r0, #1
    9098:	e3a020d2 	mov	r2, #210	; 0xd2
    909c:	eb000cd7 	bl	c400 <assertion_failed>
    90a0:	e3580005 	cmp	r8, #5
    90a4:	ca000025 	bgt	9140 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
    90a8:	e5d4301d 	ldrb	r3, [r4, #29]
    90ac:	e1530008 	cmp	r3, r8
    90b0:	0a00002b 	beq	9164 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x138>
    90b4:	e5943004 	ldr	r3, [r4, #4]
    90b8:	e5c4801c 	strb	r8, [r4, #28]
    90bc:	e3530035 	cmp	r3, #53	; 0x35
    90c0:	8a000016 	bhi	9120 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    90c4:	e3026388 	movw	r6, #9096	; 0x2388
    90c8:	e3406001 	movt	r6, #1
    90cc:	e203101f 	and	r1, r3, #31
    90d0:	e3a05001 	mov	r5, #1
    90d4:	e3a0700c 	mov	r7, #12
    90d8:	e3a04013 	mov	r4, #19
    90dc:	e3404fc8 	movt	r4, #4040	; 0xfc8
    90e0:	e5962000 	ldr	r2, [r6]
    90e4:	e1a05115 	lsl	r5, r5, r1
    90e8:	e08442a3 	add	r4, r4, r3, lsr #5
    90ec:	e0070897 	mul	r7, r7, r8
    90f0:	e3520000 	cmp	r2, #0
    90f4:	1a000007 	bne	9118 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xec>
    90f8:	e7973104 	ldr	r3, [r7, r4, lsl #2]
    90fc:	e1855003 	orr	r5, r5, r3
    9100:	e7875104 	str	r5, [r7, r4, lsl #2]
    9104:	e5963000 	ldr	r3, [r6]
    9108:	e3530000 	cmp	r3, #0
    910c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9110:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9114:	ea00030e 	b	9d54 <LeaveCritical>
    9118:	eb000300 	bl	9d20 <EnterCritical>
    911c:	eafffff5 	b	90f8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
    9120:	e30015e4 	movw	r1, #1508	; 0x5e4
    9124:	e3401001 	movt	r1, #1
    9128:	e3000634 	movw	r0, #1588	; 0x634
    912c:	e3400001 	movt	r0, #1
    9130:	e3a020d7 	mov	r2, #215	; 0xd7
    9134:	eb000cb1 	bl	c400 <assertion_failed>
    9138:	e5943004 	ldr	r3, [r4, #4]
    913c:	eaffffe0 	b	90c4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x98>
    9140:	e30015e4 	movw	r1, #1508	; 0x5e4
    9144:	e3401001 	movt	r1, #1
    9148:	e300074c 	movw	r0, #1868	; 0x74c
    914c:	e3400001 	movt	r0, #1
    9150:	e3a020d3 	mov	r2, #211	; 0xd3
    9154:	eb000ca9 	bl	c400 <assertion_failed>
    9158:	e5d4301d 	ldrb	r3, [r4, #29]
    915c:	e1530008 	cmp	r3, r8
    9160:	1affffd3 	bne	90b4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x88>
    9164:	e30015e4 	movw	r1, #1508	; 0x5e4
    9168:	e3401001 	movt	r1, #1
    916c:	e3000770 	movw	r0, #1904	; 0x770
    9170:	e3400001 	movt	r0, #1
    9174:	e3a020d4 	mov	r2, #212	; 0xd4
    9178:	eb000ca0 	bl	c400 <assertion_failed>
    917c:	eaffffcc 	b	90b4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x88>
    9180:	e30015e4 	movw	r1, #1508	; 0x5e4
    9184:	e3401001 	movt	r1, #1
    9188:	e300072c 	movw	r0, #1836	; 0x72c
    918c:	e3400001 	movt	r0, #1
    9190:	e3a020cf 	mov	r2, #207	; 0xcf
    9194:	eb000c99 	bl	c400 <assertion_failed>
    9198:	eaffffb4 	b	9070 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x44>
    919c:	e30015e4 	movw	r1, #1508	; 0x5e4
    91a0:	e3401001 	movt	r1, #1
    91a4:	e300073c 	movw	r0, #1852	; 0x73c
    91a8:	e3400001 	movt	r0, #1
    91ac:	e3a020d0 	mov	r2, #208	; 0xd0
    91b0:	eb000c92 	bl	c400 <assertion_failed>
    91b4:	eaffffb0 	b	907c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x50>

000091b8 <CGPIOPin::DisableInterrupt()>:
    91b8:	e5d03008 	ldrb	r3, [r0, #8]
    91bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    91c0:	e1a04000 	mov	r4, r0
    91c4:	e2432002 	sub	r2, r3, #2
    91c8:	e3530000 	cmp	r3, #0
    91cc:	13520001 	cmpne	r2, #1
    91d0:	9a000005 	bls	91ec <CGPIOPin::DisableInterrupt()+0x34>
    91d4:	e30015e4 	movw	r1, #1508	; 0x5e4
    91d8:	e3401001 	movt	r1, #1
    91dc:	e3000648 	movw	r0, #1608	; 0x648
    91e0:	e3400001 	movt	r0, #1
    91e4:	e3a020e8 	mov	r2, #232	; 0xe8
    91e8:	eb000c84 	bl	c400 <assertion_failed>
    91ec:	e5d4301c 	ldrb	r3, [r4, #28]
    91f0:	e3530005 	cmp	r3, #5
    91f4:	ca000024 	bgt	928c <CGPIOPin::DisableInterrupt()+0xd4>
    91f8:	e5943004 	ldr	r3, [r4, #4]
    91fc:	e3530035 	cmp	r3, #53	; 0x35
    9200:	8a000019 	bhi	926c <CGPIOPin::DisableInterrupt()+0xb4>
    9204:	e3026388 	movw	r6, #9096	; 0x2388
    9208:	e3406001 	movt	r6, #1
    920c:	e5d4201c 	ldrb	r2, [r4, #28]
    9210:	e203101f 	and	r1, r3, #31
    9214:	e3a08001 	mov	r8, #1
    9218:	e3a0700c 	mov	r7, #12
    921c:	e5960000 	ldr	r0, [r6]
    9220:	e3a05013 	mov	r5, #19
    9224:	e3405fc8 	movt	r5, #4040	; 0xfc8
    9228:	e3500000 	cmp	r0, #0
    922c:	e1a08118 	lsl	r8, r8, r1
    9230:	e08552a3 	add	r5, r5, r3, lsr #5
    9234:	e0070297 	mul	r7, r7, r2
    9238:	1a000009 	bne	9264 <CGPIOPin::DisableInterrupt()+0xac>
    923c:	e7973105 	ldr	r3, [r7, r5, lsl #2]
    9240:	e1c33008 	bic	r3, r3, r8
    9244:	e7873105 	str	r3, [r7, r5, lsl #2]
    9248:	e5963000 	ldr	r3, [r6]
    924c:	e3530000 	cmp	r3, #0
    9250:	0a000000 	beq	9258 <CGPIOPin::DisableInterrupt()+0xa0>
    9254:	eb0002be 	bl	9d54 <LeaveCritical>
    9258:	e3a03006 	mov	r3, #6
    925c:	e5c4301c 	strb	r3, [r4, #28]
    9260:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9264:	eb0002ad 	bl	9d20 <EnterCritical>
    9268:	eafffff3 	b	923c <CGPIOPin::DisableInterrupt()+0x84>
    926c:	e30015e4 	movw	r1, #1508	; 0x5e4
    9270:	e3401001 	movt	r1, #1
    9274:	e3000634 	movw	r0, #1588	; 0x634
    9278:	e3400001 	movt	r0, #1
    927c:	e3a020ec 	mov	r2, #236	; 0xec
    9280:	eb000c5e 	bl	c400 <assertion_failed>
    9284:	e5943004 	ldr	r3, [r4, #4]
    9288:	eaffffdd 	b	9204 <CGPIOPin::DisableInterrupt()+0x4c>
    928c:	e30015e4 	movw	r1, #1508	; 0x5e4
    9290:	e3401001 	movt	r1, #1
    9294:	e300078c 	movw	r0, #1932	; 0x78c
    9298:	e3400001 	movt	r0, #1
    929c:	e3a020ea 	mov	r2, #234	; 0xea
    92a0:	eb000c56 	bl	c400 <assertion_failed>
    92a4:	eaffffd3 	b	91f8 <CGPIOPin::DisableInterrupt()+0x40>

000092a8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    92a8:	e5d03008 	ldrb	r3, [r0, #8]
    92ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    92b0:	e1a04000 	mov	r4, r0
    92b4:	e2432002 	sub	r2, r3, #2
    92b8:	e3530000 	cmp	r3, #0
    92bc:	13520001 	cmpne	r2, #1
    92c0:	e1a08001 	mov	r8, r1
    92c4:	9a000005 	bls	92e0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x38>
    92c8:	e30015e4 	movw	r1, #1508	; 0x5e4
    92cc:	e3401001 	movt	r1, #1
    92d0:	e3000648 	movw	r0, #1608	; 0x648
    92d4:	e3400001 	movt	r0, #1
    92d8:	e3a020fe 	mov	r2, #254	; 0xfe
    92dc:	eb000c47 	bl	c400 <assertion_failed>
    92e0:	e5943010 	ldr	r3, [r4, #16]
    92e4:	e3530000 	cmp	r3, #0
    92e8:	0a000043 	beq	93fc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    92ec:	e5943014 	ldr	r3, [r4, #20]
    92f0:	e3530000 	cmp	r3, #0
    92f4:	0a000047 	beq	9418 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x170>
    92f8:	e5d4301d 	ldrb	r3, [r4, #29]
    92fc:	e3530006 	cmp	r3, #6
    9300:	0a000005 	beq	931c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x74>
    9304:	e30015e4 	movw	r1, #1508	; 0x5e4
    9308:	e3401001 	movt	r1, #1
    930c:	e30006e4 	movw	r0, #1764	; 0x6e4
    9310:	e3400001 	movt	r0, #1
    9314:	e3002102 	movw	r2, #258	; 0x102
    9318:	eb000c38 	bl	c400 <assertion_failed>
    931c:	e3580005 	cmp	r8, #5
    9320:	ca000025 	bgt	93bc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
    9324:	e5d4301c 	ldrb	r3, [r4, #28]
    9328:	e1530008 	cmp	r3, r8
    932c:	0a00002b 	beq	93e0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x138>
    9330:	e5943004 	ldr	r3, [r4, #4]
    9334:	e5c4801d 	strb	r8, [r4, #29]
    9338:	e3530035 	cmp	r3, #53	; 0x35
    933c:	8a000016 	bhi	939c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    9340:	e3026388 	movw	r6, #9096	; 0x2388
    9344:	e3406001 	movt	r6, #1
    9348:	e203101f 	and	r1, r3, #31
    934c:	e3a05001 	mov	r5, #1
    9350:	e3a0700c 	mov	r7, #12
    9354:	e3a04013 	mov	r4, #19
    9358:	e3404fc8 	movt	r4, #4040	; 0xfc8
    935c:	e5962000 	ldr	r2, [r6]
    9360:	e1a05115 	lsl	r5, r5, r1
    9364:	e08442a3 	add	r4, r4, r3, lsr #5
    9368:	e0070897 	mul	r7, r7, r8
    936c:	e3520000 	cmp	r2, #0
    9370:	1a000007 	bne	9394 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xec>
    9374:	e7973104 	ldr	r3, [r7, r4, lsl #2]
    9378:	e1855003 	orr	r5, r5, r3
    937c:	e7875104 	str	r5, [r7, r4, lsl #2]
    9380:	e5963000 	ldr	r3, [r6]
    9384:	e3530000 	cmp	r3, #0
    9388:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    938c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9390:	ea00026f 	b	9d54 <LeaveCritical>
    9394:	eb000261 	bl	9d20 <EnterCritical>
    9398:	eafffff5 	b	9374 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
    939c:	e30015e4 	movw	r1, #1508	; 0x5e4
    93a0:	e3401001 	movt	r1, #1
    93a4:	e3000634 	movw	r0, #1588	; 0x634
    93a8:	e3400001 	movt	r0, #1
    93ac:	e3002107 	movw	r2, #263	; 0x107
    93b0:	eb000c12 	bl	c400 <assertion_failed>
    93b4:	e5943004 	ldr	r3, [r4, #4]
    93b8:	eaffffe0 	b	9340 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x98>
    93bc:	e30015e4 	movw	r1, #1508	; 0x5e4
    93c0:	e3401001 	movt	r1, #1
    93c4:	e300074c 	movw	r0, #1868	; 0x74c
    93c8:	e3400001 	movt	r0, #1
    93cc:	e3002103 	movw	r2, #259	; 0x103
    93d0:	eb000c0a 	bl	c400 <assertion_failed>
    93d4:	e5d4301c 	ldrb	r3, [r4, #28]
    93d8:	e1530008 	cmp	r3, r8
    93dc:	1affffd3 	bne	9330 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x88>
    93e0:	e30015e4 	movw	r1, #1508	; 0x5e4
    93e4:	e3401001 	movt	r1, #1
    93e8:	e30007b0 	movw	r0, #1968	; 0x7b0
    93ec:	e3400001 	movt	r0, #1
    93f0:	e3a02f41 	mov	r2, #260	; 0x104
    93f4:	eb000c01 	bl	c400 <assertion_failed>
    93f8:	eaffffcc 	b	9330 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x88>
    93fc:	e30015e4 	movw	r1, #1508	; 0x5e4
    9400:	e3401001 	movt	r1, #1
    9404:	e300072c 	movw	r0, #1836	; 0x72c
    9408:	e3400001 	movt	r0, #1
    940c:	e3a020ff 	mov	r2, #255	; 0xff
    9410:	eb000bfa 	bl	c400 <assertion_failed>
    9414:	eaffffb4 	b	92ec <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x44>
    9418:	e30015e4 	movw	r1, #1508	; 0x5e4
    941c:	e3401001 	movt	r1, #1
    9420:	e300073c 	movw	r0, #1852	; 0x73c
    9424:	e3400001 	movt	r0, #1
    9428:	e3a02c01 	mov	r2, #256	; 0x100
    942c:	eb000bf3 	bl	c400 <assertion_failed>
    9430:	eaffffb0 	b	92f8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x50>

00009434 <CGPIOPin::DisableInterrupt2()>:
    9434:	e5d03008 	ldrb	r3, [r0, #8]
    9438:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    943c:	e1a04000 	mov	r4, r0
    9440:	e2432002 	sub	r2, r3, #2
    9444:	e3530000 	cmp	r3, #0
    9448:	13520001 	cmpne	r2, #1
    944c:	9a000005 	bls	9468 <CGPIOPin::DisableInterrupt2()+0x34>
    9450:	e30015e4 	movw	r1, #1508	; 0x5e4
    9454:	e3401001 	movt	r1, #1
    9458:	e3000648 	movw	r0, #1608	; 0x648
    945c:	e3400001 	movt	r0, #1
    9460:	e3a02f46 	mov	r2, #280	; 0x118
    9464:	eb000be5 	bl	c400 <assertion_failed>
    9468:	e5d4301d 	ldrb	r3, [r4, #29]
    946c:	e3530005 	cmp	r3, #5
    9470:	ca000024 	bgt	9508 <CGPIOPin::DisableInterrupt2()+0xd4>
    9474:	e5943004 	ldr	r3, [r4, #4]
    9478:	e3530035 	cmp	r3, #53	; 0x35
    947c:	8a000019 	bhi	94e8 <CGPIOPin::DisableInterrupt2()+0xb4>
    9480:	e3026388 	movw	r6, #9096	; 0x2388
    9484:	e3406001 	movt	r6, #1
    9488:	e5d4201d 	ldrb	r2, [r4, #29]
    948c:	e203101f 	and	r1, r3, #31
    9490:	e3a08001 	mov	r8, #1
    9494:	e3a0700c 	mov	r7, #12
    9498:	e5960000 	ldr	r0, [r6]
    949c:	e3a05013 	mov	r5, #19
    94a0:	e3405fc8 	movt	r5, #4040	; 0xfc8
    94a4:	e3500000 	cmp	r0, #0
    94a8:	e1a08118 	lsl	r8, r8, r1
    94ac:	e08552a3 	add	r5, r5, r3, lsr #5
    94b0:	e0070297 	mul	r7, r7, r2
    94b4:	1a000009 	bne	94e0 <CGPIOPin::DisableInterrupt2()+0xac>
    94b8:	e7973105 	ldr	r3, [r7, r5, lsl #2]
    94bc:	e1c33008 	bic	r3, r3, r8
    94c0:	e7873105 	str	r3, [r7, r5, lsl #2]
    94c4:	e5963000 	ldr	r3, [r6]
    94c8:	e3530000 	cmp	r3, #0
    94cc:	0a000000 	beq	94d4 <CGPIOPin::DisableInterrupt2()+0xa0>
    94d0:	eb00021f 	bl	9d54 <LeaveCritical>
    94d4:	e3a03006 	mov	r3, #6
    94d8:	e5c4301d 	strb	r3, [r4, #29]
    94dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    94e0:	eb00020e 	bl	9d20 <EnterCritical>
    94e4:	eafffff3 	b	94b8 <CGPIOPin::DisableInterrupt2()+0x84>
    94e8:	e30015e4 	movw	r1, #1508	; 0x5e4
    94ec:	e3401001 	movt	r1, #1
    94f0:	e3000634 	movw	r0, #1588	; 0x634
    94f4:	e3400001 	movt	r0, #1
    94f8:	e3a02f47 	mov	r2, #284	; 0x11c
    94fc:	eb000bbf 	bl	c400 <assertion_failed>
    9500:	e5943004 	ldr	r3, [r4, #4]
    9504:	eaffffdd 	b	9480 <CGPIOPin::DisableInterrupt2()+0x4c>
    9508:	e30015e4 	movw	r1, #1508	; 0x5e4
    950c:	e3401001 	movt	r1, #1
    9510:	e30007cc 	movw	r0, #1996	; 0x7cc
    9514:	e3400001 	movt	r0, #1
    9518:	e300211a 	movw	r2, #282	; 0x11a
    951c:	eb000bb7 	bl	c400 <assertion_failed>
    9520:	eaffffd3 	b	9474 <CGPIOPin::DisableInterrupt2()+0x40>

00009524 <CGPIOPin::SetPullUpMode(unsigned int)>:
    9524:	e5903004 	ldr	r3, [r0, #4]
    9528:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    952c:	e1a08001 	mov	r8, r1
    9530:	e3530035 	cmp	r3, #53	; 0x35
    9534:	8a000026 	bhi	95d4 <CGPIOPin::SetPullUpMode(unsigned int)+0xb0>
    9538:	e3025388 	movw	r5, #9096	; 0x2388
    953c:	e3405001 	movt	r5, #1
    9540:	e3a04026 	mov	r4, #38	; 0x26
    9544:	e3404fc8 	movt	r4, #4040	; 0xfc8
    9548:	e203701f 	and	r7, r3, #31
    954c:	e5952000 	ldr	r2, [r5]
    9550:	e08442a3 	add	r4, r4, r3, lsr #5
    9554:	e3520000 	cmp	r2, #0
    9558:	e1a04104 	lsl	r4, r4, #2
    955c:	1a00001a 	bne	95cc <CGPIOPin::SetPullUpMode(unsigned int)+0xa8>
    9560:	e3580002 	cmp	r8, #2
    9564:	8a000011 	bhi	95b0 <CGPIOPin::SetPullUpMode(unsigned int)+0x8c>
    9568:	e3a06000 	mov	r6, #0
    956c:	e3436f20 	movt	r6, #16160	; 0x3f20
    9570:	e3a00005 	mov	r0, #5
    9574:	e5868094 	str	r8, [r6, #148]	; 0x94
    9578:	eb0004e5 	bl	a914 <CTimer::SimpleusDelay(unsigned int)>
    957c:	e3a03001 	mov	r3, #1
    9580:	e3a00005 	mov	r0, #5
    9584:	e1a03713 	lsl	r3, r3, r7
    9588:	e5843000 	str	r3, [r4]
    958c:	eb0004e0 	bl	a914 <CTimer::SimpleusDelay(unsigned int)>
    9590:	e3a03000 	mov	r3, #0
    9594:	e5863094 	str	r3, [r6, #148]	; 0x94
    9598:	e5843000 	str	r3, [r4]
    959c:	e5953000 	ldr	r3, [r5]
    95a0:	e3530000 	cmp	r3, #0
    95a4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    95a8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    95ac:	ea0001e8 	b	9d54 <LeaveCritical>
    95b0:	e30015e4 	movw	r1, #1508	; 0x5e4
    95b4:	e3401001 	movt	r1, #1
    95b8:	e30007f0 	movw	r0, #2032	; 0x7f0
    95bc:	e3400001 	movt	r0, #1
    95c0:	e3002133 	movw	r2, #307	; 0x133
    95c4:	eb000b8d 	bl	c400 <assertion_failed>
    95c8:	eaffffe6 	b	9568 <CGPIOPin::SetPullUpMode(unsigned int)+0x44>
    95cc:	eb0001d3 	bl	9d20 <EnterCritical>
    95d0:	eaffffe2 	b	9560 <CGPIOPin::SetPullUpMode(unsigned int)+0x3c>
    95d4:	e1a04000 	mov	r4, r0
    95d8:	e30015e4 	movw	r1, #1508	; 0x5e4
    95dc:	e3401001 	movt	r1, #1
    95e0:	e3000634 	movw	r0, #1588	; 0x634
    95e4:	e3400001 	movt	r0, #1
    95e8:	e300212d 	movw	r2, #301	; 0x12d
    95ec:	eb000b83 	bl	c400 <assertion_failed>
    95f0:	e5943004 	ldr	r3, [r4, #4]
    95f4:	eaffffcf 	b	9538 <CGPIOPin::SetPullUpMode(unsigned int)+0x14>

000095f8 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    95f8:	e5902004 	ldr	r2, [r0, #4]
    95fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9600:	e1a06001 	mov	r6, r1
    9604:	e3520035 	cmp	r2, #53	; 0x35
    9608:	8a000026 	bhi	96a8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
    960c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    9610:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    9614:	e3a0100a 	mov	r1, #10
    9618:	e3560005 	cmp	r6, #5
    961c:	e0843293 	umull	r3, r4, r3, r2
    9620:	e1a041a4 	lsr	r4, r4, #3
    9624:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    9628:	e2833702 	add	r3, r3, #524288	; 0x80000
    962c:	e0642491 	mls	r4, r1, r4, r2
    9630:	e1a07103 	lsl	r7, r3, #2
    9634:	e0844084 	add	r4, r4, r4, lsl #1
    9638:	8a000013 	bhi	968c <CGPIOPin::SetAlternateFunction(unsigned int)+0x94>
    963c:	e3025388 	movw	r5, #9096	; 0x2388
    9640:	e3405001 	movt	r5, #1
    9644:	e5953000 	ldr	r3, [r5]
    9648:	e3530000 	cmp	r3, #0
    964c:	1a00000c 	bne	9684 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    9650:	e5973000 	ldr	r3, [r7]
    9654:	e30025bc 	movw	r2, #1468	; 0x5bc
    9658:	e3402001 	movt	r2, #1
    965c:	e3a01007 	mov	r1, #7
    9660:	e7922106 	ldr	r2, [r2, r6, lsl #2]
    9664:	e1c33411 	bic	r3, r3, r1, lsl r4
    9668:	e1834412 	orr	r4, r3, r2, lsl r4
    966c:	e5874000 	str	r4, [r7]
    9670:	e5953000 	ldr	r3, [r5]
    9674:	e3530000 	cmp	r3, #0
    9678:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    967c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9680:	ea0001b3 	b	9d54 <LeaveCritical>
    9684:	eb0001a5 	bl	9d20 <EnterCritical>
    9688:	eafffff0 	b	9650 <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
    968c:	e30015e4 	movw	r1, #1508	; 0x5e4
    9690:	e3401001 	movt	r1, #1
    9694:	e30007fc 	movw	r0, #2044	; 0x7fc
    9698:	e3400001 	movt	r0, #1
    969c:	e3a02f51 	mov	r2, #324	; 0x144
    96a0:	eb000b56 	bl	c400 <assertion_failed>
    96a4:	eaffffe4 	b	963c <CGPIOPin::SetAlternateFunction(unsigned int)+0x44>
    96a8:	e1a04000 	mov	r4, r0
    96ac:	e3a02d05 	mov	r2, #320	; 0x140
    96b0:	e30015e4 	movw	r1, #1508	; 0x5e4
    96b4:	e3401001 	movt	r1, #1
    96b8:	e3000634 	movw	r0, #1588	; 0x634
    96bc:	e3400001 	movt	r0, #1
    96c0:	eb000b4e 	bl	c400 <assertion_failed>
    96c4:	e5942004 	ldr	r2, [r4, #4]
    96c8:	eaffffcf 	b	960c <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>

000096cc <CGPIOPin::SetMode(TGPIOMode, int)>:
    96cc:	e3510009 	cmp	r1, #9
    96d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    96d4:	e1a04001 	mov	r4, r1
    96d8:	e1a05000 	mov	r5, r0
    96dc:	e1a06002 	mov	r6, r2
    96e0:	e1a07001 	mov	r7, r1
    96e4:	ca000037 	bgt	97c8 <CGPIOPin::SetMode(TGPIOMode, int)+0xfc>
    96e8:	e2443004 	sub	r3, r4, #4
    96ec:	e5c54008 	strb	r4, [r5, #8]
    96f0:	e3530005 	cmp	r3, #5
    96f4:	9a00002d 	bls	97b0 <CGPIOPin::SetMode(TGPIOMode, int)+0xe4>
    96f8:	e2963000 	adds	r3, r6, #0
    96fc:	13a03001 	movne	r3, #1
    9700:	e3540001 	cmp	r4, #1
    9704:	13a03000 	movne	r3, #0
    9708:	e3530000 	cmp	r3, #0
    970c:	1a00005b 	bne	9880 <CGPIOPin::SetMode(TGPIOMode, int)+0x1b4>
    9710:	e5952004 	ldr	r2, [r5, #4]
    9714:	e3520035 	cmp	r2, #53	; 0x35
    9718:	8a00003a 	bhi	9808 <CGPIOPin::SetMode(TGPIOMode, int)+0x13c>
    971c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    9720:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    9724:	e3028388 	movw	r8, #9096	; 0x2388
    9728:	e3408001 	movt	r8, #1
    972c:	e3a0100a 	mov	r1, #10
    9730:	e0843293 	umull	r3, r4, r3, r2
    9734:	e5983000 	ldr	r3, [r8]
    9738:	e1a041a4 	lsr	r4, r4, #3
    973c:	e3530000 	cmp	r3, #0
    9740:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    9744:	e2833702 	add	r3, r3, #524288	; 0x80000
    9748:	e0642491 	mls	r4, r1, r4, r2
    974c:	e1a07103 	lsl	r7, r3, #2
    9750:	e0844084 	add	r4, r4, r4, lsl #1
    9754:	1a000033 	bne	9828 <CGPIOPin::SetMode(TGPIOMode, int)+0x15c>
    9758:	e5d52008 	ldrb	r2, [r5, #8]
    975c:	e3a01007 	mov	r1, #7
    9760:	e5973000 	ldr	r3, [r7]
    9764:	e2422001 	sub	r2, r2, #1
    9768:	e16f2f12 	clz	r2, r2
    976c:	e1c33411 	bic	r3, r3, r1, lsl r4
    9770:	e1a022a2 	lsr	r2, r2, #5
    9774:	e1834412 	orr	r4, r3, r2, lsl r4
    9778:	e5874000 	str	r4, [r7]
    977c:	e5983000 	ldr	r3, [r8]
    9780:	e3530000 	cmp	r3, #0
    9784:	1a000029 	bne	9830 <CGPIOPin::SetMode(TGPIOMode, int)+0x164>
    9788:	e3560000 	cmp	r6, #0
    978c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9790:	e5d53008 	ldrb	r3, [r5, #8]
    9794:	e3530003 	cmp	r3, #3
    9798:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    979c:	ea000010 	b	97e4 <CGPIOPin::SetMode(TGPIOMode, int)+0x118>
    97a0:	00009870 	.word	0x00009870
    97a4:	00009860 	.word	0x00009860
    97a8:	00009850 	.word	0x00009850
    97ac:	00009840 	.word	0x00009840
    97b0:	e3560000 	cmp	r6, #0
    97b4:	1a00000b 	bne	97e8 <CGPIOPin::SetMode(TGPIOMode, int)+0x11c>
    97b8:	e2471004 	sub	r1, r7, #4
    97bc:	e1a00005 	mov	r0, r5
    97c0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    97c4:	eaffff8b 	b	95f8 <CGPIOPin::SetAlternateFunction(unsigned int)>
    97c8:	e30015e4 	movw	r1, #1508	; 0x5e4
    97cc:	e3401001 	movt	r1, #1
    97d0:	e300080c 	movw	r0, #2060	; 0x80c
    97d4:	e3400001 	movt	r0, #1
    97d8:	e3a0203a 	mov	r2, #58	; 0x3a
    97dc:	eb000b07 	bl	c400 <assertion_failed>
    97e0:	eaffffc0 	b	96e8 <CGPIOPin::SetMode(TGPIOMode, int)+0x1c>
    97e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    97e8:	e1a00005 	mov	r0, r5
    97ec:	e3a01000 	mov	r1, #0
    97f0:	ebffff4b 	bl	9524 <CGPIOPin::SetPullUpMode(unsigned int)>
    97f4:	e5d57008 	ldrb	r7, [r5, #8]
    97f8:	e1a00005 	mov	r0, r5
    97fc:	e2471004 	sub	r1, r7, #4
    9800:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9804:	eaffff7b 	b	95f8 <CGPIOPin::SetAlternateFunction(unsigned int)>
    9808:	e3a02053 	mov	r2, #83	; 0x53
    980c:	e30015e4 	movw	r1, #1508	; 0x5e4
    9810:	e3401001 	movt	r1, #1
    9814:	e3000634 	movw	r0, #1588	; 0x634
    9818:	e3400001 	movt	r0, #1
    981c:	eb000af7 	bl	c400 <assertion_failed>
    9820:	e5952004 	ldr	r2, [r5, #4]
    9824:	eaffffbc 	b	971c <CGPIOPin::SetMode(TGPIOMode, int)+0x50>
    9828:	eb00013c 	bl	9d20 <EnterCritical>
    982c:	eaffffc9 	b	9758 <CGPIOPin::SetMode(TGPIOMode, int)+0x8c>
    9830:	eb000147 	bl	9d54 <LeaveCritical>
    9834:	e3560000 	cmp	r6, #0
    9838:	1affffd4 	bne	9790 <CGPIOPin::SetMode(TGPIOMode, int)+0xc4>
    983c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9840:	e1a00005 	mov	r0, r5
    9844:	e3a01001 	mov	r1, #1
    9848:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    984c:	eaffff34 	b	9524 <CGPIOPin::SetPullUpMode(unsigned int)>
    9850:	e1a00005 	mov	r0, r5
    9854:	e3a01002 	mov	r1, #2
    9858:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    985c:	eaffff30 	b	9524 <CGPIOPin::SetPullUpMode(unsigned int)>
    9860:	e1a00005 	mov	r0, r5
    9864:	e3a01000 	mov	r1, #0
    9868:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    986c:	eafffd0e 	b	8cac <CGPIOPin::Write(unsigned int)>
    9870:	e1a00005 	mov	r0, r5
    9874:	e3a01000 	mov	r1, #0
    9878:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    987c:	eaffff28 	b	9524 <CGPIOPin::SetPullUpMode(unsigned int)>
    9880:	e3a01000 	mov	r1, #0
    9884:	e1a00005 	mov	r0, r5
    9888:	ebffff25 	bl	9524 <CGPIOPin::SetPullUpMode(unsigned int)>
    988c:	eaffff9f 	b	9710 <CGPIOPin::SetMode(TGPIOMode, int)+0x44>

00009890 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    9890:	e92d4070 	push	{r4, r5, r6, lr}
    9894:	e3510035 	cmp	r1, #53	; 0x35
    9898:	e1a04000 	mov	r4, r0
    989c:	e59fe07c 	ldr	lr, [pc, #124]	; 9920 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x90>
    98a0:	e1a05001 	mov	r5, r1
    98a4:	e3a0c00a 	mov	ip, #10
    98a8:	e3a01006 	mov	r1, #6
    98ac:	e3a00000 	mov	r0, #0
    98b0:	e5845004 	str	r5, [r4, #4]
    98b4:	e5843010 	str	r3, [r4, #16]
    98b8:	e1a06002 	mov	r6, r2
    98bc:	e584e000 	str	lr, [r4]
    98c0:	e5c4c008 	strb	ip, [r4, #8]
    98c4:	e5840014 	str	r0, [r4, #20]
    98c8:	e5c4101c 	strb	r1, [r4, #28]
    98cc:	e5c4101d 	strb	r1, [r4, #29]
    98d0:	8a000005 	bhi	98ec <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x5c>
    98d4:	e1a00004 	mov	r0, r4
    98d8:	e1a01006 	mov	r1, r6
    98dc:	e3a02001 	mov	r2, #1
    98e0:	ebffff79 	bl	96cc <CGPIOPin::SetMode(TGPIOMode, int)>
    98e4:	e1a00004 	mov	r0, r4
    98e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    98ec:	eb001560 	bl	ee74 <CMachineInfo::Get()>
    98f0:	e6ef1075 	uxtb	r1, r5
    98f4:	eb001533 	bl	edc8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    98f8:	e3500035 	cmp	r0, #53	; 0x35
    98fc:	e5840004 	str	r0, [r4, #4]
    9900:	9afffff3 	bls	98d4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    9904:	e30015e4 	movw	r1, #1508	; 0x5e4
    9908:	e3401001 	movt	r1, #1
    990c:	e3000634 	movw	r0, #1588	; 0x634
    9910:	e3400001 	movt	r0, #1
    9914:	e3a0202b 	mov	r2, #43	; 0x2b
    9918:	eb000ab8 	bl	c400 <assertion_failed>
    991c:	eaffffec 	b	98d4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    9920:	000105dc 	.word	0x000105dc

00009924 <CGPIOPin::InterruptHandler()>:
    9924:	e5d03008 	ldrb	r3, [r0, #8]
    9928:	e92d4010 	push	{r4, lr}
    992c:	e1a04000 	mov	r4, r0
    9930:	e2432002 	sub	r2, r3, #2
    9934:	e3530000 	cmp	r3, #0
    9938:	13520001 	cmpne	r2, #1
    993c:	9a000005 	bls	9958 <CGPIOPin::InterruptHandler()+0x34>
    9940:	e30015e4 	movw	r1, #1508	; 0x5e4
    9944:	e3401001 	movt	r1, #1
    9948:	e3000648 	movw	r0, #1608	; 0x648
    994c:	e3400001 	movt	r0, #1
    9950:	e3002153 	movw	r2, #339	; 0x153
    9954:	eb000aa9 	bl	c400 <assertion_failed>
    9958:	e5d4301c 	ldrb	r3, [r4, #28]
    995c:	e3530005 	cmp	r3, #5
    9960:	da000002 	ble	9970 <CGPIOPin::InterruptHandler()+0x4c>
    9964:	e5d4301d 	ldrb	r3, [r4, #29]
    9968:	e3530005 	cmp	r3, #5
    996c:	ca000005 	bgt	9988 <CGPIOPin::InterruptHandler()+0x64>
    9970:	e5943014 	ldr	r3, [r4, #20]
    9974:	e3530000 	cmp	r3, #0
    9978:	0a00000b 	beq	99ac <CGPIOPin::InterruptHandler()+0x88>
    997c:	e5940018 	ldr	r0, [r4, #24]
    9980:	e8bd4010 	pop	{r4, lr}
    9984:	e12fff13 	bx	r3
    9988:	e30015e4 	movw	r1, #1508	; 0x5e4
    998c:	e3401001 	movt	r1, #1
    9990:	e3000824 	movw	r0, #2084	; 0x824
    9994:	e3400001 	movt	r0, #1
    9998:	e3002155 	movw	r2, #341	; 0x155
    999c:	eb000a97 	bl	c400 <assertion_failed>
    99a0:	e5943014 	ldr	r3, [r4, #20]
    99a4:	e3530000 	cmp	r3, #0
    99a8:	1afffff3 	bne	997c <CGPIOPin::InterruptHandler()+0x58>
    99ac:	e30015e4 	movw	r1, #1508	; 0x5e4
    99b0:	e3401001 	movt	r1, #1
    99b4:	e300073c 	movw	r0, #1852	; 0x73c
    99b8:	e3400001 	movt	r0, #1
    99bc:	e3002157 	movw	r2, #343	; 0x157
    99c0:	eb000a8e 	bl	c400 <assertion_failed>
    99c4:	e5943014 	ldr	r3, [r4, #20]
    99c8:	e5940018 	ldr	r0, [r4, #24]
    99cc:	e8bd4010 	pop	{r4, lr}
    99d0:	e12fff13 	bx	r3

000099d4 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    99d4:	e3500035 	cmp	r0, #53	; 0x35
    99d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    99dc:	e1a07000 	mov	r7, r0
    99e0:	8a000023 	bhi	9a74 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    99e4:	e3026388 	movw	r6, #9096	; 0x2388
    99e8:	e3406001 	movt	r6, #1
    99ec:	e3a04013 	mov	r4, #19
    99f0:	e3404fc8 	movt	r4, #4040	; 0xfc8
    99f4:	e207501f 	and	r5, r7, #31
    99f8:	e3a02001 	mov	r2, #1
    99fc:	e5963000 	ldr	r3, [r6]
    9a00:	e08442a7 	add	r4, r4, r7, lsr #5
    9a04:	e3530000 	cmp	r3, #0
    9a08:	e1a04104 	lsl	r4, r4, #2
    9a0c:	e1a05512 	lsl	r5, r2, r5
    9a10:	1a000011 	bne	9a5c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
    9a14:	e3a0308b 	mov	r3, #139	; 0x8b
    9a18:	e3433f20 	movt	r3, #16160	; 0x3f20
    9a1c:	e1540003 	cmp	r4, r3
    9a20:	8a00000c 	bhi	9a58 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
    9a24:	e3a0108b 	mov	r1, #139	; 0x8b
    9a28:	e3431f20 	movt	r1, #16160	; 0x3f20
    9a2c:	e1e02005 	mvn	r2, r5
    9a30:	e5943000 	ldr	r3, [r4]
    9a34:	e0033002 	and	r3, r3, r2
    9a38:	e484300c 	str	r3, [r4], #12
    9a3c:	e1540001 	cmp	r4, r1
    9a40:	9afffffa 	bls	9a30 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x5c>
    9a44:	e5963000 	ldr	r3, [r6]
    9a48:	e3530000 	cmp	r3, #0
    9a4c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9a50:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9a54:	ea0000be 	b	9d54 <LeaveCritical>
    9a58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9a5c:	eb0000af 	bl	9d20 <EnterCritical>
    9a60:	e3a0308b 	mov	r3, #139	; 0x8b
    9a64:	e3433f20 	movt	r3, #16160	; 0x3f20
    9a68:	e1540003 	cmp	r4, r3
    9a6c:	9affffec 	bls	9a24 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    9a70:	eafffff3 	b	9a44 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
    9a74:	e30015e4 	movw	r1, #1508	; 0x5e4
    9a78:	e3401001 	movt	r1, #1
    9a7c:	e3000870 	movw	r0, #2160	; 0x870
    9a80:	e3400001 	movt	r0, #1
    9a84:	e300215d 	movw	r2, #349	; 0x15d
    9a88:	eb000a5c 	bl	c400 <assertion_failed>
    9a8c:	eaffffd4 	b	99e4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>

00009a90 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    9a90:	e3023388 	movw	r3, #9096	; 0x2388
    9a94:	e3403001 	movt	r3, #1
    9a98:	e3a02001 	mov	r2, #1
    9a9c:	e5832000 	str	r2, [r3]
    9aa0:	e12fff1e 	bx	lr

00009aa4 <CMemorySystem::~CMemorySystem()>:
    9aa4:	e5903000 	ldr	r3, [r0]
    9aa8:	e92d4070 	push	{r4, r5, r6, lr}
    9aac:	e1a04000 	mov	r4, r0
    9ab0:	e3530000 	cmp	r3, #0
    9ab4:	0a000005 	beq	9ad0 <CMemorySystem::~CMemorySystem()+0x2c>
    9ab8:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    9abc:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    9ac0:	e3c33005 	bic	r3, r3, #5
    9ac4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    9ac8:	e3a03000 	mov	r3, #0
    9acc:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    9ad0:	e594500c 	ldr	r5, [r4, #12]
    9ad4:	e3550000 	cmp	r5, #0
    9ad8:	0a000003 	beq	9aec <CMemorySystem::~CMemorySystem()+0x48>
    9adc:	e1a00005 	mov	r0, r5
    9ae0:	eb0005bd 	bl	b1dc <CPageTable::~CPageTable()>
    9ae4:	e1a00005 	mov	r0, r5
    9ae8:	eb00008a 	bl	9d18 <operator delete(void*)>
    9aec:	e5945008 	ldr	r5, [r4, #8]
    9af0:	e3a03000 	mov	r3, #0
    9af4:	e584300c 	str	r3, [r4, #12]
    9af8:	e1550003 	cmp	r5, r3
    9afc:	0a000003 	beq	9b10 <CMemorySystem::~CMemorySystem()+0x6c>
    9b00:	e1a00005 	mov	r0, r5
    9b04:	eb0005b4 	bl	b1dc <CPageTable::~CPageTable()>
    9b08:	e1a00005 	mov	r0, r5
    9b0c:	eb000081 	bl	9d18 <operator delete(void*)>
    9b10:	e1a00004 	mov	r0, r4
    9b14:	e8bd8070 	pop	{r4, r5, r6, pc}

00009b18 <CMemorySystem::GetMemSize() const>:
    9b18:	e5900004 	ldr	r0, [r0, #4]
    9b1c:	e12fff1e 	bx	lr

00009b20 <CMemorySystem::EnableMMU()>:
    9b20:	e5903000 	ldr	r3, [r0]
    9b24:	e92d4010 	push	{r4, lr}
    9b28:	e1a04000 	mov	r4, r0
    9b2c:	e3530000 	cmp	r3, #0
    9b30:	0a00001f 	beq	9bb4 <CMemorySystem::EnableMMU()+0x94>
    9b34:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    9b38:	e3833040 	orr	r3, r3, #64	; 0x40
    9b3c:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    9b40:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    9b44:	e3130001 	tst	r3, #1
    9b48:	1a000020 	bne	9bd0 <CMemorySystem::EnableMMU()+0xb0>
    9b4c:	e3a03002 	mov	r3, #2
    9b50:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    9b54:	e5940008 	ldr	r0, [r4, #8]
    9b58:	e3500000 	cmp	r0, #0
    9b5c:	0a00002a 	beq	9c0c <CMemorySystem::EnableMMU()+0xec>
    9b60:	eb0005a6 	bl	b200 <CPageTable::GetBaseAddress() const>
    9b64:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    9b68:	e594000c 	ldr	r0, [r4, #12]
    9b6c:	e3500000 	cmp	r0, #0
    9b70:	0a00001d 	beq	9bec <CMemorySystem::EnableMMU()+0xcc>
    9b74:	eb0005a1 	bl	b200 <CPageTable::GetBaseAddress() const>
    9b78:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    9b7c:	e3a03005 	mov	r3, #5
    9b80:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    9b84:	eb0014e3 	bl	ef18 <InvalidateDataCache>
    9b88:	e3a03000 	mov	r3, #0
    9b8c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    9b90:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    9b94:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    9b98:	f57ff04f 	dsb	sy
    9b9c:	f57ff06f 	isb	sy
    9ba0:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    9ba4:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    9ba8:	e3833005 	orr	r3, r3, #5
    9bac:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    9bb0:	e8bd8010 	pop	{r4, pc}
    9bb4:	e3001884 	movw	r1, #2180	; 0x884
    9bb8:	e3401001 	movt	r1, #1
    9bbc:	e3000890 	movw	r0, #2192	; 0x890
    9bc0:	e3400001 	movt	r0, #1
    9bc4:	e3a020c0 	mov	r2, #192	; 0xc0
    9bc8:	eb000a0c 	bl	c400 <assertion_failed>
    9bcc:	eaffffd8 	b	9b34 <CMemorySystem::EnableMMU()+0x14>
    9bd0:	e3001884 	movw	r1, #2180	; 0x884
    9bd4:	e3401001 	movt	r1, #1
    9bd8:	e30008a0 	movw	r0, #2208	; 0x8a0
    9bdc:	e3400001 	movt	r0, #1
    9be0:	e3a020cd 	mov	r2, #205	; 0xcd
    9be4:	eb000a05 	bl	c400 <assertion_failed>
    9be8:	eaffffd7 	b	9b4c <CMemorySystem::EnableMMU()+0x2c>
    9bec:	e3001884 	movw	r1, #2180	; 0x884
    9bf0:	e3401001 	movt	r1, #1
    9bf4:	e30008e8 	movw	r0, #2280	; 0x8e8
    9bf8:	e3400001 	movt	r0, #1
    9bfc:	e3a020d7 	mov	r2, #215	; 0xd7
    9c00:	eb0009fe 	bl	c400 <assertion_failed>
    9c04:	e594000c 	ldr	r0, [r4, #12]
    9c08:	eaffffd9 	b	9b74 <CMemorySystem::EnableMMU()+0x54>
    9c0c:	e3001884 	movw	r1, #2180	; 0x884
    9c10:	e3401001 	movt	r1, #1
    9c14:	e30008cc 	movw	r0, #2252	; 0x8cc
    9c18:	e3400001 	movt	r0, #1
    9c1c:	e3a020d3 	mov	r2, #211	; 0xd3
    9c20:	eb0009f6 	bl	c400 <assertion_failed>
    9c24:	e5940008 	ldr	r0, [r4, #8]
    9c28:	eaffffcc 	b	9b60 <CMemorySystem::EnableMMU()+0x40>

00009c2c <CMemorySystem::CMemorySystem(int)>:
    9c2c:	e92d4030 	push	{r4, r5, lr}
    9c30:	e1a04000 	mov	r4, r0
    9c34:	e3a05000 	mov	r5, #0
    9c38:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    9c3c:	e8840022 	stm	r4, {r1, r5}
    9c40:	e28d000c 	add	r0, sp, #12
    9c44:	e5845008 	str	r5, [r4, #8]
    9c48:	e584500c 	str	r5, [r4, #12]
    9c4c:	ebfffb9c 	bl	8ac4 <CBcmPropertyTags::CBcmPropertyTags()>
    9c50:	e3a03014 	mov	r3, #20
    9c54:	e58d5000 	str	r5, [sp]
    9c58:	e28d000c 	add	r0, sp, #12
    9c5c:	e3a01005 	mov	r1, #5
    9c60:	e3401001 	movt	r1, #1
    9c64:	e08d2003 	add	r2, sp, r3
    9c68:	ebfffbdd 	bl	8be4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9c6c:	e3500000 	cmp	r0, #0
    9c70:	1a000019 	bne	9cdc <CMemorySystem::CMemorySystem(int)+0xb0>
    9c74:	e3a01303 	mov	r1, #201326592	; 0xc000000
    9c78:	e58d0020 	str	r0, [sp, #32]
    9c7c:	e58d1024 	str	r1, [sp, #36]	; 0x24
    9c80:	e5841004 	str	r1, [r4, #4]
    9c84:	eb001647 	bl	f5a8 <mem_init>
    9c88:	e5943000 	ldr	r3, [r4]
    9c8c:	e3530000 	cmp	r3, #0
    9c90:	0a00000c 	beq	9cc8 <CMemorySystem::CMemorySystem(int)+0x9c>
    9c94:	e3a00008 	mov	r0, #8
    9c98:	eb00001c 	bl	9d10 <operator new(unsigned int)>
    9c9c:	e5941004 	ldr	r1, [r4, #4]
    9ca0:	e1a05000 	mov	r5, r0
    9ca4:	eb0004fc 	bl	b09c <CPageTable::CPageTable(unsigned int)>
    9ca8:	e5845008 	str	r5, [r4, #8]
    9cac:	e3a00008 	mov	r0, #8
    9cb0:	eb000016 	bl	9d10 <operator new(unsigned int)>
    9cb4:	e1a05000 	mov	r5, r0
    9cb8:	eb0004cb 	bl	afec <CPageTable::CPageTable()>
    9cbc:	e584500c 	str	r5, [r4, #12]
    9cc0:	e1a00004 	mov	r0, r4
    9cc4:	ebffff95 	bl	9b20 <CMemorySystem::EnableMMU()>
    9cc8:	e28d000c 	add	r0, sp, #12
    9ccc:	ebfffb82 	bl	8adc <CBcmPropertyTags::~CBcmPropertyTags()>
    9cd0:	e1a00004 	mov	r0, r4
    9cd4:	e28dd02c 	add	sp, sp, #44	; 0x2c
    9cd8:	e8bd8030 	pop	{r4, r5, pc}
    9cdc:	e59d0020 	ldr	r0, [sp, #32]
    9ce0:	e3500000 	cmp	r0, #0
    9ce4:	059d1024 	ldreq	r1, [sp, #36]	; 0x24
    9ce8:	0affffe4 	beq	9c80 <CMemorySystem::CMemorySystem(int)+0x54>
    9cec:	e3001884 	movw	r1, #2180	; 0x884
    9cf0:	e3401001 	movt	r1, #1
    9cf4:	e30008fc 	movw	r0, #2300	; 0x8fc
    9cf8:	e3400001 	movt	r0, #1
    9cfc:	e3a02042 	mov	r2, #66	; 0x42
    9d00:	eb0009be 	bl	c400 <assertion_failed>
    9d04:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    9d08:	e59d0020 	ldr	r0, [sp, #32]
    9d0c:	eaffffdb 	b	9c80 <CMemorySystem::CMemorySystem(int)+0x54>

00009d10 <operator new(unsigned int)>:
    9d10:	ea00163d 	b	f60c <malloc>

00009d14 <operator new[](unsigned int)>:
    9d14:	ea00163c 	b	f60c <malloc>

00009d18 <operator delete(void*)>:
    9d18:	ea00169d 	b	f794 <free>

00009d1c <operator delete[](void*)>:
    9d1c:	ea00169c 	b	f794 <free>

00009d20 <EnterCritical>:
    9d20:	e10f1000 	mrs	r1, CPSR
    9d24:	f10c0080 	cpsid	i
    9d28:	e302338c 	movw	r3, #9100	; 0x238c
    9d2c:	e3403001 	movt	r3, #1
    9d30:	e5932000 	ldr	r2, [r3]
    9d34:	e3520000 	cmp	r2, #0
    9d38:	e2822001 	add	r2, r2, #1
    9d3c:	02211080 	eoreq	r1, r1, #128	; 0x80
    9d40:	e5832000 	str	r2, [r3]
    9d44:	07e013d1 	ubfxeq	r1, r1, #7, #1
    9d48:	05831004 	streq	r1, [r3, #4]
    9d4c:	f57ff05f 	dmb	sy
    9d50:	e12fff1e 	bx	lr

00009d54 <LeaveCritical>:
    9d54:	e92d4010 	push	{r4, lr}
    9d58:	f57ff05f 	dmb	sy
    9d5c:	e302438c 	movw	r4, #9100	; 0x238c
    9d60:	e3404001 	movt	r4, #1
    9d64:	e5943000 	ldr	r3, [r4]
    9d68:	e3530000 	cmp	r3, #0
    9d6c:	0a000009 	beq	9d98 <LeaveCritical+0x44>
    9d70:	e5943000 	ldr	r3, [r4]
    9d74:	e2433001 	sub	r3, r3, #1
    9d78:	e3530000 	cmp	r3, #0
    9d7c:	e5843000 	str	r3, [r4]
    9d80:	18bd8010 	popne	{r4, pc}
    9d84:	e5943004 	ldr	r3, [r4, #4]
    9d88:	e3530000 	cmp	r3, #0
    9d8c:	08bd8010 	popeq	{r4, pc}
    9d90:	f1080080 	cpsie	i
    9d94:	e8bd8010 	pop	{r4, pc}
    9d98:	e3001918 	movw	r1, #2328	; 0x918
    9d9c:	e3401001 	movt	r1, #1
    9da0:	e3000928 	movw	r0, #2344	; 0x928
    9da4:	e3400001 	movt	r0, #1
    9da8:	e3a0205b 	mov	r2, #91	; 0x5b
    9dac:	eb000993 	bl	c400 <assertion_failed>
    9db0:	eaffffee 	b	9d70 <LeaveCritical+0x1c>

00009db4 <SyncDataAndInstructionCache>:
    9db4:	e92d4010 	push	{r4, lr}
    9db8:	eb001480 	bl	efc0 <CleanDataCache>
    9dbc:	e3a03000 	mov	r3, #0
    9dc0:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    9dc4:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    9dc8:	f57ff04f 	dsb	sy
    9dcc:	f57ff06f 	isb	sy
    9dd0:	e8bd8010 	pop	{r4, pc}

00009dd4 <__aeabi_atexit>:
    9dd4:	e12fff1e 	bx	lr

00009dd8 <halt>:
    9dd8:	f10c0080 	cpsid	i
    9ddc:	f57ff04f 	dsb	sy
    9de0:	e320f003 	wfi
    9de4:	eafffffc 	b	9ddc <halt+0x4>

00009de8 <reboot>:
    9de8:	e3a03000 	mov	r3, #0
    9dec:	e3433f10 	movt	r3, #16144	; 0x3f10
    9df0:	e3a01001 	mov	r1, #1
    9df4:	e3451a00 	movt	r1, #23040	; 0x5a00
    9df8:	e3a02020 	mov	r2, #32
    9dfc:	e3452a00 	movt	r2, #23040	; 0x5a00
    9e00:	e5831024 	str	r1, [r3, #36]	; 0x24
    9e04:	e583201c 	str	r2, [r3, #28]
    9e08:	eafffffe 	b	9e08 <reboot+0x20>

00009e0c <sysinit>:
    9e0c:	e92d4030 	push	{r4, r5, lr}
    9e10:	e24dd01c 	sub	sp, sp, #28
    9e14:	eb001424 	bl	eeac <InvalidateDataCacheL1Only>
    9e18:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    9e1c:	e308305c 	movw	r3, #32860	; 0x805c
    9e20:	e3403000 	movt	r3, #0
    9e24:	e582309c 	str	r3, [r2, #156]	; 0x9c
    9e28:	e58230ac 	str	r3, [r2, #172]	; 0xac
    9e2c:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    9e30:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    9e34:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    9e38:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    9e3c:	f57ff06f 	isb	sy
    9e40:	eee82a10 	vmsr	fpexc, r2
    9e44:	e3a01000 	mov	r1, #0
    9e48:	eee11a10 	vmsr	fpscr, r1
    9e4c:	e3023380 	movw	r3, #9088	; 0x2380
    9e50:	e3403001 	movt	r3, #1
    9e54:	e30223d8 	movw	r2, #9176	; 0x23d8
    9e58:	e3402001 	movt	r2, #1
    9e5c:	e1530002 	cmp	r3, r2
    9e60:	2a000002 	bcs	9e70 <sysinit+0x64>
    9e64:	e4c31001 	strb	r1, [r3], #1
    9e68:	e1530002 	cmp	r3, r2
    9e6c:	1afffffc 	bne	9e64 <sysinit+0x58>
    9e70:	e1a0000d 	mov	r0, sp
    9e74:	e3025298 	movw	r5, #8856	; 0x2298
    9e78:	e3405001 	movt	r5, #1
    9e7c:	e302428c 	movw	r4, #8844	; 0x228c
    9e80:	e3404001 	movt	r4, #1
    9e84:	eb001309 	bl	eab0 <CMachineInfo::CMachineInfo()>
    9e88:	e1540005 	cmp	r4, r5
    9e8c:	2a000003 	bcs	9ea0 <sysinit+0x94>
    9e90:	e4943004 	ldr	r3, [r4], #4
    9e94:	e12fff33 	blx	r3
    9e98:	e1540005 	cmp	r4, r5
    9e9c:	3afffffb 	bcc	9e90 <sysinit+0x84>
    9ea0:	ebfff870 	bl	8068 <main>
    9ea4:	e3500001 	cmp	r0, #1
    9ea8:	0a000000 	beq	9eb0 <sysinit+0xa4>
    9eac:	ebffffc9 	bl	9dd8 <halt>
    9eb0:	ebffffcc 	bl	9de8 <reboot>

00009eb4 <CTimer::CTimer(CInterruptSystem*)>:
    9eb4:	e92d4070 	push	{r4, r5, r6, lr}
    9eb8:	e1a04000 	mov	r4, r0
    9ebc:	e3025398 	movw	r5, #9112	; 0x2398
    9ec0:	e3405001 	movt	r5, #1
    9ec4:	e3a03000 	mov	r3, #0
    9ec8:	e3a06001 	mov	r6, #1
    9ecc:	e5801000 	str	r1, [r0]
    9ed0:	e2800018 	add	r0, r0, #24
    9ed4:	e5843004 	str	r3, [r4, #4]
    9ed8:	e5843014 	str	r3, [r4, #20]
    9edc:	e5843008 	str	r3, [r4, #8]
    9ee0:	e5846010 	str	r6, [r4, #16]
    9ee4:	e584300c 	str	r3, [r4, #12]
    9ee8:	eb00146c 	bl	f0a0 <CPtrList::CPtrList()>
    9eec:	e5951000 	ldr	r1, [r5]
    9ef0:	e300215e 	movw	r2, #350	; 0x15e
    9ef4:	e3053730 	movw	r3, #22320	; 0x5730
    9ef8:	e3403005 	movt	r3, #5
    9efc:	e3510000 	cmp	r1, #0
    9f00:	e584601c 	str	r6, [r4, #28]
    9f04:	e5843020 	str	r3, [r4, #32]
    9f08:	e5842024 	str	r2, [r4, #36]	; 0x24
    9f0c:	0a000005 	beq	9f28 <CTimer::CTimer(CInterruptSystem*)+0x74>
    9f10:	e3001978 	movw	r1, #2424	; 0x978
    9f14:	e3401001 	movt	r1, #1
    9f18:	e3000984 	movw	r0, #2436	; 0x984
    9f1c:	e3400001 	movt	r0, #1
    9f20:	e3a0203b 	mov	r2, #59	; 0x3b
    9f24:	eb000935 	bl	c400 <assertion_failed>
    9f28:	e5854000 	str	r4, [r5]
    9f2c:	e1a00004 	mov	r0, r4
    9f30:	e8bd8070 	pop	{r4, r5, r6, pc}

00009f34 <CTimer::~CTimer()>:
    9f34:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9f38:	e1a09000 	mov	r9, r0
    9f3c:	e5900000 	ldr	r0, [r0]
    9f40:	e3500000 	cmp	r0, #0
    9f44:	0a00002b 	beq	9ff8 <CTimer::~CTimer()+0xc4>
    9f48:	e3a01003 	mov	r1, #3
    9f4c:	e3007978 	movw	r7, #2424	; 0x978
    9f50:	e3407001 	movt	r7, #1
    9f54:	e300a9ac 	movw	sl, #2476	; 0x9ac
    9f58:	e340a001 	movt	sl, #1
    9f5c:	e3048d43 	movw	r8, #19779	; 0x4d43
    9f60:	e3448b54 	movt	r8, #19284	; 0x4b54
    9f64:	e2894018 	add	r4, r9, #24
    9f68:	eb0010f0 	bl	e330 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    9f6c:	ea00000f 	b	9fb0 <CTimer::~CTimer()+0x7c>
    9f70:	eb001473 	bl	f144 <CPtrList::GetPtr(TPtrListElement*)>
    9f74:	e2506000 	subs	r6, r0, #0
    9f78:	0a000019 	beq	9fe4 <CTimer::~CTimer()+0xb0>
    9f7c:	e5963000 	ldr	r3, [r6]
    9f80:	e30009b8 	movw	r0, #2488	; 0x9b8
    9f84:	e3400001 	movt	r0, #1
    9f88:	e1530008 	cmp	r3, r8
    9f8c:	e3a02049 	mov	r2, #73	; 0x49
    9f90:	e1a01007 	mov	r1, r7
    9f94:	0a000000 	beq	9f9c <CTimer::~CTimer()+0x68>
    9f98:	eb000918 	bl	c400 <assertion_failed>
    9f9c:	e1a00004 	mov	r0, r4
    9fa0:	e1a01005 	mov	r1, r5
    9fa4:	eb001506 	bl	f3c4 <CPtrList::Remove(TPtrListElement*)>
    9fa8:	e1a00006 	mov	r0, r6
    9fac:	ebffff59 	bl	9d18 <operator delete(void*)>
    9fb0:	e1a00004 	mov	r0, r4
    9fb4:	eb001449 	bl	f0e0 <CPtrList::GetFirst()>
    9fb8:	e2505000 	subs	r5, r0, #0
    9fbc:	e1a01005 	mov	r1, r5
    9fc0:	e1a00004 	mov	r0, r4
    9fc4:	1affffe9 	bne	9f70 <CTimer::~CTimer()+0x3c>
    9fc8:	e3023398 	movw	r3, #9112	; 0x2398
    9fcc:	e3403001 	movt	r3, #1
    9fd0:	e1a00004 	mov	r0, r4
    9fd4:	e5835000 	str	r5, [r3]
    9fd8:	eb001433 	bl	f0ac <CPtrList::~CPtrList()>
    9fdc:	e1a00009 	mov	r0, r9
    9fe0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9fe4:	e3a02048 	mov	r2, #72	; 0x48
    9fe8:	e1a01007 	mov	r1, r7
    9fec:	e1a0000a 	mov	r0, sl
    9ff0:	eb000902 	bl	c400 <assertion_failed>
    9ff4:	eaffffe0 	b	9f7c <CTimer::~CTimer()+0x48>
    9ff8:	e3001978 	movw	r1, #2424	; 0x978
    9ffc:	e3401001 	movt	r1, #1
    a000:	e3000994 	movw	r0, #2452	; 0x994
    a004:	e3400001 	movt	r0, #1
    a008:	e3a02041 	mov	r2, #65	; 0x41
    a00c:	eb0008fb 	bl	c400 <assertion_failed>
    a010:	e5990000 	ldr	r0, [r9]
    a014:	eaffffcb 	b	9f48 <CTimer::~CTimer()+0x14>

0000a018 <CTimer::SetTimeZone(int)>:
    a018:	e2813e59 	add	r3, r1, #1424	; 0x590
    a01c:	e3002b3e 	movw	r2, #2878	; 0xb3e
    a020:	e283300f 	add	r3, r3, #15
    a024:	e1530002 	cmp	r3, r2
    a028:	95801014 	strls	r1, [r0, #20]
    a02c:	93a00001 	movls	r0, #1
    a030:	83a00000 	movhi	r0, #0
    a034:	e12fff1e 	bx	lr

0000a038 <CTimer::GetTimeZone() const>:
    a038:	e5900014 	ldr	r0, [r0, #20]
    a03c:	e12fff1e 	bx	lr

0000a040 <CTimer::SetTime(unsigned int, int)>:
    a040:	e3520000 	cmp	r2, #0
    a044:	e92d4070 	push	{r4, r5, r6, lr}
    a048:	e1a04000 	mov	r4, r0
    a04c:	e1a05001 	mov	r5, r1
    a050:	1a000005 	bne	a06c <CTimer::SetTime(unsigned int, int)+0x2c>
    a054:	e5901014 	ldr	r1, [r0, #20]
    a058:	e3a0303c 	mov	r3, #60	; 0x3c
    a05c:	e0030193 	mul	r3, r3, r1
    a060:	e3530000 	cmp	r3, #0
    a064:	ba00000e 	blt	a0a4 <CTimer::SetTime(unsigned int, int)+0x64>
    a068:	e0855003 	add	r5, r5, r3
    a06c:	e5943010 	ldr	r3, [r4, #16]
    a070:	e3530000 	cmp	r3, #0
    a074:	1a000002 	bne	a084 <CTimer::SetTime(unsigned int, int)+0x44>
    a078:	e3a00001 	mov	r0, #1
    a07c:	e584500c 	str	r5, [r4, #12]
    a080:	e8bd8070 	pop	{r4, r5, r6, pc}
    a084:	ebffff25 	bl	9d20 <EnterCritical>
    a088:	e5943010 	ldr	r3, [r4, #16]
    a08c:	e584500c 	str	r5, [r4, #12]
    a090:	e3530000 	cmp	r3, #0
    a094:	0a000007 	beq	a0b8 <CTimer::SetTime(unsigned int, int)+0x78>
    a098:	ebffff2d 	bl	9d54 <LeaveCritical>
    a09c:	e3a00001 	mov	r0, #1
    a0a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    a0a4:	e2631000 	rsb	r1, r3, #0
    a0a8:	e1510005 	cmp	r1, r5
    a0ac:	daffffed 	ble	a068 <CTimer::SetTime(unsigned int, int)+0x28>
    a0b0:	e1a00002 	mov	r0, r2
    a0b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    a0b8:	e3a00001 	mov	r0, #1
    a0bc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a0c0 <CTimer::GetClockTicks()>:
    a0c0:	e3a03a03 	mov	r3, #12288	; 0x3000
    a0c4:	e3433f00 	movt	r3, #16128	; 0x3f00
    a0c8:	e5930004 	ldr	r0, [r3, #4]
    a0cc:	e12fff1e 	bx	lr

0000a0d0 <CTimer::GetTicks() const>:
    a0d0:	e5900004 	ldr	r0, [r0, #4]
    a0d4:	e12fff1e 	bx	lr

0000a0d8 <CTimer::GetUptime() const>:
    a0d8:	e5900008 	ldr	r0, [r0, #8]
    a0dc:	e12fff1e 	bx	lr

0000a0e0 <CTimer::GetTime() const>:
    a0e0:	e590000c 	ldr	r0, [r0, #12]
    a0e4:	e12fff1e 	bx	lr

0000a0e8 <CTimer::GetUniversalTime() const>:
    a0e8:	e5902014 	ldr	r2, [r0, #20]
    a0ec:	e3a0303c 	mov	r3, #60	; 0x3c
    a0f0:	e590000c 	ldr	r0, [r0, #12]
    a0f4:	e0030293 	mul	r3, r3, r2
    a0f8:	e1530000 	cmp	r3, r0
    a0fc:	d0400003 	suble	r0, r0, r3
    a100:	c3a00000 	movgt	r0, #0
    a104:	e12fff1e 	bx	lr

0000a108 <CTimer::GetTimeString()>:
    a108:	e5903010 	ldr	r3, [r0, #16]
    a10c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a110:	e1a04000 	mov	r4, r0
    a114:	e3530000 	cmp	r3, #0
    a118:	e24dd014 	sub	sp, sp, #20
    a11c:	1a00006c 	bne	a2d4 <CTimer::GetTimeString()+0x1cc>
    a120:	e590500c 	ldr	r5, [r0, #12]
    a124:	e5909004 	ldr	r9, [r0, #4]
    a128:	e1950009 	orrs	r0, r5, r9
    a12c:	0a000051 	beq	a278 <CTimer::GetTimeString()+0x170>
    a130:	e3086889 	movw	r6, #34953	; 0x8889
    a134:	e3486888 	movt	r6, #34952	; 0x8888
    a138:	e30b73c5 	movw	r7, #46021	; 0xb3c5
    a13c:	e34971a2 	movt	r7, #37282	; 0x91a2
    a140:	e3044507 	movw	r4, #17671	; 0x4507
    a144:	e34c422e 	movt	r4, #49710	; 0xc22e
    a148:	e0813596 	umull	r3, r1, r6, r5
    a14c:	e3a0003c 	mov	r0, #60	; 0x3c
    a150:	e0832695 	umull	r2, r3, r5, r6
    a154:	e308c51f 	movw	ip, #34079	; 0x851f
    a158:	e345c1eb 	movt	ip, #20971	; 0x51eb
    a15c:	e1a012a1 	lsr	r1, r1, #5
    a160:	e1a082a3 	lsr	r8, r3, #5
    a164:	e0873597 	umull	r3, r7, r7, r5
    a168:	e3a0a064 	mov	sl, #100	; 0x64
    a16c:	e0843594 	umull	r3, r4, r4, r5
    a170:	e3a0ee19 	mov	lr, #400	; 0x190
    a174:	e0863196 	umull	r3, r6, r6, r1
    a178:	e1a075a7 	lsr	r7, r7, #11
    a17c:	e0685890 	mls	r8, r0, r8, r5
    a180:	e1a04824 	lsr	r4, r4, #16
    a184:	e1a062a6 	lsr	r6, r6, #5
    a188:	e30057b2 	movw	r5, #1970	; 0x7b2
    a18c:	e300216d 	movw	r2, #365	; 0x16d
    a190:	e300316e 	movw	r3, #366	; 0x16e
    a194:	e0661690 	mls	r6, r0, r6, r1
    a198:	ea000001 	b	a1a4 <CTimer::GetTimeString()+0x9c>
    a19c:	e0444000 	sub	r4, r4, r0
    a1a0:	e2855001 	add	r5, r5, #1
    a1a4:	e0810c95 	umull	r0, r1, r5, ip
    a1a8:	e1a002a1 	lsr	r0, r1, #5
    a1ac:	e1a013a1 	lsr	r1, r1, #7
    a1b0:	e060509a 	mls	r0, sl, r0, r5
    a1b4:	e061519e 	mls	r1, lr, r1, r5
    a1b8:	e3500000 	cmp	r0, #0
    a1bc:	e16f1f11 	clz	r1, r1
    a1c0:	01a012a1 	lsreq	r1, r1, #5
    a1c4:	0a000002 	beq	a1d4 <CTimer::GetTimeString()+0xcc>
    a1c8:	e3150003 	tst	r5, #3
    a1cc:	03a01001 	moveq	r1, #1
    a1d0:	13a01000 	movne	r1, #0
    a1d4:	e3510000 	cmp	r1, #0
    a1d8:	01a00002 	moveq	r0, r2
    a1dc:	11a00003 	movne	r0, r3
    a1e0:	e1540000 	cmp	r4, r0
    a1e4:	2affffec 	bcs	a19c <CTimer::GetTimeString()+0x94>
    a1e8:	e3000940 	movw	r0, #2368	; 0x940
    a1ec:	e3400001 	movt	r0, #1
    a1f0:	e3a0a000 	mov	sl, #0
    a1f4:	ea000001 	b	a200 <CTimer::GetTimeString()+0xf8>
    a1f8:	e0444003 	sub	r4, r4, r3
    a1fc:	e28aa001 	add	sl, sl, #1
    a200:	e35a0001 	cmp	sl, #1
    a204:	13a02000 	movne	r2, #0
    a208:	02012001 	andeq	r2, r1, #1
    a20c:	e3a0301d 	mov	r3, #29
    a210:	e3520000 	cmp	r2, #0
    a214:	0790310a 	ldreq	r3, [r0, sl, lsl #2]
    a218:	e1540003 	cmp	r4, r3
    a21c:	2afffff5 	bcs	a1f8 <CTimer::GetTimeString()+0xf0>
    a220:	e308251f 	movw	r2, #34079	; 0x851f
    a224:	e34521eb 	movt	r2, #20971	; 0x51eb
    a228:	e3a01064 	mov	r1, #100	; 0x64
    a22c:	e3a00010 	mov	r0, #16
    a230:	e0832299 	umull	r2, r3, r9, r2
    a234:	e1a0b2a3 	lsr	fp, r3, #5
    a238:	e06b9b91 	mls	fp, r1, fp, r9
    a23c:	ebfffeb3 	bl	9d10 <operator new(unsigned int)>
    a240:	e1a09000 	mov	r9, r0
    a244:	eb000bd1 	bl	d190 <CString::CString()>
    a248:	e30037b7 	movw	r3, #1975	; 0x7b7
    a24c:	e1550003 	cmp	r5, r3
    a250:	8a00000a 	bhi	a280 <CTimer::GetTimeString()+0x178>
    a254:	e1a00009 	mov	r0, r9
    a258:	e58db004 	str	fp, [sp, #4]
    a25c:	e1a03006 	mov	r3, r6
    a260:	e58d8000 	str	r8, [sp]
    a264:	e1a02007 	mov	r2, r7
    a268:	e30019fc 	movw	r1, #2556	; 0x9fc
    a26c:	e3401001 	movt	r1, #1
    a270:	eb000ed9 	bl	dddc <CString::Format(char const*, ...)>
    a274:	e1a00009 	mov	r0, r9
    a278:	e28dd014 	add	sp, sp, #20
    a27c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a280:	e30a0aab 	movw	r0, #43691	; 0xaaab
    a284:	e34a0aaa 	movt	r0, #43690	; 0xaaaa
    a288:	e3a0c018 	mov	ip, #24
    a28c:	e3022298 	movw	r2, #8856	; 0x2298
    a290:	e3402001 	movt	r2, #1
    a294:	e0810097 	umull	r0, r1, r7, r0
    a298:	e58db00c 	str	fp, [sp, #12]
    a29c:	e58d8008 	str	r8, [sp, #8]
    a2a0:	e2843001 	add	r3, r4, #1
    a2a4:	e1a00221 	lsr	r0, r1, #4
    a2a8:	e30019e0 	movw	r1, #2528	; 0x9e0
    a2ac:	e3401001 	movt	r1, #1
    a2b0:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    a2b4:	e067709c 	mls	r7, ip, r0, r7
    a2b8:	e58d6004 	str	r6, [sp, #4]
    a2bc:	e1a00009 	mov	r0, r9
    a2c0:	e58d7000 	str	r7, [sp]
    a2c4:	eb000ec4 	bl	dddc <CString::Format(char const*, ...)>
    a2c8:	e1a00009 	mov	r0, r9
    a2cc:	e28dd014 	add	sp, sp, #20
    a2d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2d4:	ebfffe91 	bl	9d20 <EnterCritical>
    a2d8:	e5943010 	ldr	r3, [r4, #16]
    a2dc:	e594500c 	ldr	r5, [r4, #12]
    a2e0:	e3530000 	cmp	r3, #0
    a2e4:	e5949004 	ldr	r9, [r4, #4]
    a2e8:	0affff8e 	beq	a128 <CTimer::GetTimeString()+0x20>
    a2ec:	ebfffe98 	bl	9d54 <LeaveCritical>
    a2f0:	eaffff8c 	b	a128 <CTimer::GetTimeString()+0x20>

0000a2f4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    a2f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2f8:	e1a0a000 	mov	sl, r0
    a2fc:	e1a04002 	mov	r4, r2
    a300:	e24dd00c 	sub	sp, sp, #12
    a304:	e3a00014 	mov	r0, #20
    a308:	e1a06001 	mov	r6, r1
    a30c:	e1a07003 	mov	r7, r3
    a310:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
    a314:	ebfffe7d 	bl	9d10 <operator new(unsigned int)>
    a318:	e3540000 	cmp	r4, #0
    a31c:	e59a1004 	ldr	r1, [sl, #4]
    a320:	e1a09000 	mov	r9, r0
    a324:	e0816006 	add	r6, r1, r6
    a328:	0a000042 	beq	a438 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
    a32c:	e59a301c 	ldr	r3, [sl, #28]
    a330:	e3042d43 	movw	r2, #19779	; 0x4d43
    a334:	e3442b54 	movt	r2, #19284	; 0x4b54
    a338:	e3530000 	cmp	r3, #0
    a33c:	e98900d0 	stmib	r9, {r4, r6, r7}
    a340:	e5895010 	str	r5, [r9, #16]
    a344:	e5892000 	str	r2, [r9]
    a348:	1a000038 	bne	a430 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
    a34c:	e28a5018 	add	r5, sl, #24
    a350:	e1a00005 	mov	r0, r5
    a354:	eb001361 	bl	f0e0 <CPtrList::GetFirst()>
    a358:	e2504000 	subs	r4, r0, #0
    a35c:	0a00002e 	beq	a41c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    a360:	e3003a10 	movw	r3, #2576	; 0xa10
    a364:	e3403001 	movt	r3, #1
    a368:	e3007978 	movw	r7, #2424	; 0x978
    a36c:	e3407001 	movt	r7, #1
    a370:	e3048d43 	movw	r8, #19779	; 0x4d43
    a374:	e3448b54 	movt	r8, #19284	; 0x4b54
    a378:	e58d3004 	str	r3, [sp, #4]
    a37c:	ea000011 	b	a3c8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd4>
    a380:	e59bc000 	ldr	ip, [fp]
    a384:	e3000a20 	movw	r0, #2592	; 0xa20
    a388:	e3400001 	movt	r0, #1
    a38c:	e15c0008 	cmp	ip, r8
    a390:	e3002116 	movw	r2, #278	; 0x116
    a394:	e1a01007 	mov	r1, r7
    a398:	0a000000 	beq	a3a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xac>
    a39c:	eb000817 	bl	c400 <assertion_failed>
    a3a0:	e59b3008 	ldr	r3, [fp, #8]
    a3a4:	e1a01004 	mov	r1, r4
    a3a8:	e1a00005 	mov	r0, r5
    a3ac:	e0433006 	sub	r3, r3, r6
    a3b0:	e3530000 	cmp	r3, #0
    a3b4:	ca00000d 	bgt	a3f0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
    a3b8:	eb00134a 	bl	f0e8 <CPtrList::GetNext(TPtrListElement*)>
    a3bc:	e3500000 	cmp	r0, #0
    a3c0:	0a000015 	beq	a41c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    a3c4:	e1a04000 	mov	r4, r0
    a3c8:	e1a01004 	mov	r1, r4
    a3cc:	e1a00005 	mov	r0, r5
    a3d0:	eb00135b 	bl	f144 <CPtrList::GetPtr(TPtrListElement*)>
    a3d4:	e250b000 	subs	fp, r0, #0
    a3d8:	1affffe8 	bne	a380 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x8c>
    a3dc:	e3002115 	movw	r2, #277	; 0x115
    a3e0:	e1a01007 	mov	r1, r7
    a3e4:	e59d0004 	ldr	r0, [sp, #4]
    a3e8:	eb000804 	bl	c400 <assertion_failed>
    a3ec:	eaffffe3 	b	a380 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x8c>
    a3f0:	e1a01004 	mov	r1, r4
    a3f4:	e1a00005 	mov	r0, r5
    a3f8:	e1a02009 	mov	r2, r9
    a3fc:	eb001367 	bl	f1a0 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    a400:	e59a301c 	ldr	r3, [sl, #28]
    a404:	e3530000 	cmp	r3, #0
    a408:	0a000000 	beq	a410 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x11c>
    a40c:	ebfffe50 	bl	9d54 <LeaveCritical>
    a410:	e1a00009 	mov	r0, r9
    a414:	e28dd00c 	add	sp, sp, #12
    a418:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a41c:	e1a01004 	mov	r1, r4
    a420:	e1a00005 	mov	r0, r5
    a424:	e1a02009 	mov	r2, r9
    a428:	eb0013a2 	bl	f2b8 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    a42c:	eafffff3 	b	a400 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
    a430:	ebfffe3a 	bl	9d20 <EnterCritical>
    a434:	eaffffc4 	b	a34c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
    a438:	e3001978 	movw	r1, #2424	; 0x978
    a43c:	e3401001 	movt	r1, #1
    a440:	e300070c 	movw	r0, #1804	; 0x70c
    a444:	e3400001 	movt	r0, #1
    a448:	e3002105 	movw	r2, #261	; 0x105
    a44c:	eb0007eb 	bl	c400 <assertion_failed>
    a450:	eaffffb5 	b	a32c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x38>

0000a454 <CTimer::CancelKernelTimer(unsigned int)>:
    a454:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a458:	e2514000 	subs	r4, r1, #0
    a45c:	e1a05000 	mov	r5, r0
    a460:	0a000021 	beq	a4ec <CTimer::CancelKernelTimer(unsigned int)+0x98>
    a464:	e595301c 	ldr	r3, [r5, #28]
    a468:	e3530000 	cmp	r3, #0
    a46c:	1a00001c 	bne	a4e4 <CTimer::CancelKernelTimer(unsigned int)+0x90>
    a470:	e2856018 	add	r6, r5, #24
    a474:	e1a01004 	mov	r1, r4
    a478:	e1a00006 	mov	r0, r6
    a47c:	eb00142b 	bl	f530 <CPtrList::Find(void*)>
    a480:	e2507000 	subs	r7, r0, #0
    a484:	0a000011 	beq	a4d0 <CTimer::CancelKernelTimer(unsigned int)+0x7c>
    a488:	e5942000 	ldr	r2, [r4]
    a48c:	e3043d43 	movw	r3, #19779	; 0x4d43
    a490:	e3443b54 	movt	r3, #19284	; 0x4b54
    a494:	e1520003 	cmp	r2, r3
    a498:	0a000005 	beq	a4b4 <CTimer::CancelKernelTimer(unsigned int)+0x60>
    a49c:	e3001978 	movw	r1, #2424	; 0x978
    a4a0:	e3401001 	movt	r1, #1
    a4a4:	e30009b8 	movw	r0, #2488	; 0x9b8
    a4a8:	e3400001 	movt	r0, #1
    a4ac:	e3002139 	movw	r2, #313	; 0x139
    a4b0:	eb0007d2 	bl	c400 <assertion_failed>
    a4b4:	e1a00006 	mov	r0, r6
    a4b8:	e1a01007 	mov	r1, r7
    a4bc:	eb0013c0 	bl	f3c4 <CPtrList::Remove(TPtrListElement*)>
    a4c0:	e3a03000 	mov	r3, #0
    a4c4:	e5843000 	str	r3, [r4]
    a4c8:	e1a00004 	mov	r0, r4
    a4cc:	ebfffe11 	bl	9d18 <operator delete(void*)>
    a4d0:	e595301c 	ldr	r3, [r5, #28]
    a4d4:	e3530000 	cmp	r3, #0
    a4d8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a4dc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a4e0:	eafffe1b 	b	9d54 <LeaveCritical>
    a4e4:	ebfffe0d 	bl	9d20 <EnterCritical>
    a4e8:	eaffffe0 	b	a470 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    a4ec:	e3001978 	movw	r1, #2424	; 0x978
    a4f0:	e3401001 	movt	r1, #1
    a4f4:	e30009ac 	movw	r0, #2476	; 0x9ac
    a4f8:	e3400001 	movt	r0, #1
    a4fc:	e3002132 	movw	r2, #306	; 0x132
    a500:	eb0007be 	bl	c400 <assertion_failed>
    a504:	eaffffd6 	b	a464 <CTimer::CancelKernelTimer(unsigned int)+0x10>

0000a508 <CTimer::PollKernelTimers()>:
    a508:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a50c:	e1a06000 	mov	r6, r0
    a510:	e590301c 	ldr	r3, [r0, #28]
    a514:	e3530000 	cmp	r3, #0
    a518:	1a00004e 	bne	a658 <CTimer::PollKernelTimers()+0x150>
    a51c:	e2867018 	add	r7, r6, #24
    a520:	e1a00007 	mov	r0, r7
    a524:	eb0012ed 	bl	f0e0 <CPtrList::GetFirst()>
    a528:	e2505000 	subs	r5, r0, #0
    a52c:	0a00003f 	beq	a630 <CTimer::PollKernelTimers()+0x128>
    a530:	e3009978 	movw	r9, #2424	; 0x978
    a534:	e3409001 	movt	r9, #1
    a538:	e300a9ac 	movw	sl, #2476	; 0x9ac
    a53c:	e340a001 	movt	sl, #1
    a540:	e3048d43 	movw	r8, #19779	; 0x4d43
    a544:	e3448b54 	movt	r8, #19284	; 0x4b54
    a548:	ea00000f 	b	a58c <CTimer::PollKernelTimers()+0x84>
    a54c:	e5945004 	ldr	r5, [r4, #4]
    a550:	e3550000 	cmp	r5, #0
    a554:	0a00002c 	beq	a60c <CTimer::PollKernelTimers()+0x104>
    a558:	e5942010 	ldr	r2, [r4, #16]
    a55c:	e1a00004 	mov	r0, r4
    a560:	e594100c 	ldr	r1, [r4, #12]
    a564:	e12fff35 	blx	r5
    a568:	e3a03000 	mov	r3, #0
    a56c:	e5843000 	str	r3, [r4]
    a570:	e1a00004 	mov	r0, r4
    a574:	ebfffde7 	bl	9d18 <operator delete(void*)>
    a578:	e596301c 	ldr	r3, [r6, #28]
    a57c:	e3530000 	cmp	r3, #0
    a580:	1a000027 	bne	a624 <CTimer::PollKernelTimers()+0x11c>
    a584:	e25b5000 	subs	r5, fp, #0
    a588:	0a000028 	beq	a630 <CTimer::PollKernelTimers()+0x128>
    a58c:	e1a01005 	mov	r1, r5
    a590:	e1a00007 	mov	r0, r7
    a594:	eb0012ea 	bl	f144 <CPtrList::GetPtr(TPtrListElement*)>
    a598:	e2504000 	subs	r4, r0, #0
    a59c:	0a000028 	beq	a644 <CTimer::PollKernelTimers()+0x13c>
    a5a0:	e5943000 	ldr	r3, [r4]
    a5a4:	e1530008 	cmp	r3, r8
    a5a8:	0a000004 	beq	a5c0 <CTimer::PollKernelTimers()+0xb8>
    a5ac:	e30009b8 	movw	r0, #2488	; 0x9b8
    a5b0:	e3400001 	movt	r0, #1
    a5b4:	e300214f 	movw	r2, #335	; 0x14f
    a5b8:	e1a01009 	mov	r1, r9
    a5bc:	eb00078f 	bl	c400 <assertion_failed>
    a5c0:	e5962004 	ldr	r2, [r6, #4]
    a5c4:	e5943008 	ldr	r3, [r4, #8]
    a5c8:	e0433002 	sub	r3, r3, r2
    a5cc:	e3530000 	cmp	r3, #0
    a5d0:	ca000016 	bgt	a630 <CTimer::PollKernelTimers()+0x128>
    a5d4:	e1a01005 	mov	r1, r5
    a5d8:	e1a00007 	mov	r0, r7
    a5dc:	eb0012c1 	bl	f0e8 <CPtrList::GetNext(TPtrListElement*)>
    a5e0:	e1a01005 	mov	r1, r5
    a5e4:	e1a0b000 	mov	fp, r0
    a5e8:	e1a00007 	mov	r0, r7
    a5ec:	eb001374 	bl	f3c4 <CPtrList::Remove(TPtrListElement*)>
    a5f0:	e596301c 	ldr	r3, [r6, #28]
    a5f4:	e3530000 	cmp	r3, #0
    a5f8:	0affffd3 	beq	a54c <CTimer::PollKernelTimers()+0x44>
    a5fc:	ebfffdd4 	bl	9d54 <LeaveCritical>
    a600:	e5945004 	ldr	r5, [r4, #4]
    a604:	e3550000 	cmp	r5, #0
    a608:	1affffd2 	bne	a558 <CTimer::PollKernelTimers()+0x50>
    a60c:	e300070c 	movw	r0, #1804	; 0x70c
    a610:	e3400001 	movt	r0, #1
    a614:	e300215d 	movw	r2, #349	; 0x15d
    a618:	e1a01009 	mov	r1, r9
    a61c:	eb000777 	bl	c400 <assertion_failed>
    a620:	eaffffcc 	b	a558 <CTimer::PollKernelTimers()+0x50>
    a624:	ebfffdbd 	bl	9d20 <EnterCritical>
    a628:	e25b5000 	subs	r5, fp, #0
    a62c:	1affffd6 	bne	a58c <CTimer::PollKernelTimers()+0x84>
    a630:	e596301c 	ldr	r3, [r6, #28]
    a634:	e3530000 	cmp	r3, #0
    a638:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a63c:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a640:	eafffdc3 	b	9d54 <LeaveCritical>
    a644:	e300214e 	movw	r2, #334	; 0x14e
    a648:	e1a01009 	mov	r1, r9
    a64c:	e1a0000a 	mov	r0, sl
    a650:	eb00076a 	bl	c400 <assertion_failed>
    a654:	eaffffd1 	b	a5a0 <CTimer::PollKernelTimers()+0x98>
    a658:	ebfffdb0 	bl	9d20 <EnterCritical>
    a65c:	eaffffae 	b	a51c <CTimer::PollKernelTimers()+0x14>

0000a660 <CTimer::InterruptHandler()>:
    a660:	e3a03a03 	mov	r3, #12288	; 0x3000
    a664:	e3433f00 	movt	r3, #16128	; 0x3f00
    a668:	e92d4010 	push	{r4, lr}
    a66c:	e1a04000 	mov	r4, r0
    a670:	e5933000 	ldr	r3, [r3]
    a674:	e3130008 	tst	r3, #8
    a678:	0a000036 	beq	a758 <CTimer::InterruptHandler()+0xf8>
    a67c:	e3a03a03 	mov	r3, #12288	; 0x3000
    a680:	e3433f00 	movt	r3, #16128	; 0x3f00
    a684:	e3021710 	movw	r1, #10000	; 0x2710
    a688:	e5932018 	ldr	r2, [r3, #24]
    a68c:	e0822001 	add	r2, r2, r1
    a690:	e5832018 	str	r2, [r3, #24]
    a694:	e5930004 	ldr	r0, [r3, #4]
    a698:	e1520000 	cmp	r2, r0
    a69c:	35932004 	ldrcc	r2, [r3, #4]
    a6a0:	30821001 	addcc	r1, r2, r1
    a6a4:	e3a02008 	mov	r2, #8
    a6a8:	35831018 	strcc	r1, [r3, #24]
    a6ac:	e3a03a03 	mov	r3, #12288	; 0x3000
    a6b0:	e3433f00 	movt	r3, #16128	; 0x3f00
    a6b4:	e5832000 	str	r2, [r3]
    a6b8:	e5942010 	ldr	r2, [r4, #16]
    a6bc:	e3520000 	cmp	r2, #0
    a6c0:	1a000016 	bne	a720 <CTimer::InterruptHandler()+0xc0>
    a6c4:	e5943004 	ldr	r3, [r4, #4]
    a6c8:	e308051f 	movw	r0, #34079	; 0x851f
    a6cc:	e34501eb 	movt	r0, #20971	; 0x51eb
    a6d0:	e2833001 	add	r3, r3, #1
    a6d4:	e3a0c064 	mov	ip, #100	; 0x64
    a6d8:	e5843004 	str	r3, [r4, #4]
    a6dc:	e0810093 	umull	r0, r1, r3, r0
    a6e0:	e1a012a1 	lsr	r1, r1, #5
    a6e4:	e063319c 	mls	r3, ip, r1, r3
    a6e8:	e3530000 	cmp	r3, #0
    a6ec:	1a000008 	bne	a714 <CTimer::InterruptHandler()+0xb4>
    a6f0:	e5943008 	ldr	r3, [r4, #8]
    a6f4:	e2833001 	add	r3, r3, #1
    a6f8:	e5843008 	str	r3, [r4, #8]
    a6fc:	e594300c 	ldr	r3, [r4, #12]
    a700:	e2833001 	add	r3, r3, #1
    a704:	e584300c 	str	r3, [r4, #12]
    a708:	e3520000 	cmp	r2, #0
    a70c:	0a000000 	beq	a714 <CTimer::InterruptHandler()+0xb4>
    a710:	ebfffd8f 	bl	9d54 <LeaveCritical>
    a714:	e1a00004 	mov	r0, r4
    a718:	e8bd4010 	pop	{r4, lr}
    a71c:	eaffff79 	b	a508 <CTimer::PollKernelTimers()>
    a720:	ebfffd7e 	bl	9d20 <EnterCritical>
    a724:	e5943004 	ldr	r3, [r4, #4]
    a728:	e308051f 	movw	r0, #34079	; 0x851f
    a72c:	e34501eb 	movt	r0, #20971	; 0x51eb
    a730:	e2833001 	add	r3, r3, #1
    a734:	e3a0c064 	mov	ip, #100	; 0x64
    a738:	e5843004 	str	r3, [r4, #4]
    a73c:	e5942010 	ldr	r2, [r4, #16]
    a740:	e0810093 	umull	r0, r1, r3, r0
    a744:	e1a012a1 	lsr	r1, r1, #5
    a748:	e063319c 	mls	r3, ip, r1, r3
    a74c:	e3530000 	cmp	r3, #0
    a750:	1affffec 	bne	a708 <CTimer::InterruptHandler()+0xa8>
    a754:	eaffffe5 	b	a6f0 <CTimer::InterruptHandler()+0x90>
    a758:	e3001978 	movw	r1, #2424	; 0x978
    a75c:	e3401001 	movt	r1, #1
    a760:	e3000a48 	movw	r0, #2632	; 0xa48
    a764:	e3400001 	movt	r0, #1
    a768:	e300216f 	movw	r2, #367	; 0x16f
    a76c:	eb000723 	bl	c400 <assertion_failed>
    a770:	eaffffc1 	b	a67c <CTimer::InterruptHandler()+0x1c>

0000a774 <CTimer::InterruptHandler(void*)>:
    a774:	e92d4010 	push	{r4, lr}
    a778:	e2504000 	subs	r4, r0, #0
    a77c:	0a000002 	beq	a78c <CTimer::InterruptHandler(void*)+0x18>
    a780:	e1a00004 	mov	r0, r4
    a784:	e8bd4010 	pop	{r4, lr}
    a788:	eaffffb4 	b	a660 <CTimer::InterruptHandler()>
    a78c:	e3001978 	movw	r1, #2424	; 0x978
    a790:	e3401001 	movt	r1, #1
    a794:	e3000a6c 	movw	r0, #2668	; 0xa6c
    a798:	e3400001 	movt	r0, #1
    a79c:	e3002191 	movw	r2, #401	; 0x191
    a7a0:	eb000716 	bl	c400 <assertion_failed>
    a7a4:	e1a00004 	mov	r0, r4
    a7a8:	e8bd4010 	pop	{r4, lr}
    a7ac:	eaffffab 	b	a660 <CTimer::InterruptHandler()>

0000a7b0 <CTimer::TuneMsDelay()>:
    a7b0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a7b4:	e1a06000 	mov	r6, r0
    a7b8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    a7bc:	e24dd00c 	sub	sp, sp, #12
    a7c0:	e3025710 	movw	r5, #10000	; 0x2710
    a7c4:	e5963020 	ldr	r3, [r6, #32]
    a7c8:	e308451f 	movw	r4, #34079	; 0x851f
    a7cc:	e34541eb 	movt	r4, #20971	; 0x51eb
    a7d0:	e5967004 	ldr	r7, [r6, #4]
    a7d4:	e0000390 	mul	r0, r0, r3
    a7d8:	eb000d8c 	bl	de10 <DelayLoop>
    a7dc:	e5962004 	ldr	r2, [r6, #4]
    a7e0:	e5963020 	ldr	r3, [r6, #32]
    a7e4:	e3041dd3 	movw	r1, #19923	; 0x4dd3
    a7e8:	e3411062 	movt	r1, #4194	; 0x1062
    a7ec:	e0422007 	sub	r2, r2, r7
    a7f0:	e735f215 	udiv	r5, r5, r2
    a7f4:	e0030593 	mul	r3, r3, r5
    a7f8:	e0832394 	umull	r2, r3, r4, r3
    a7fc:	e1a032a3 	lsr	r3, r3, #5
    a800:	e2832f7d 	add	r2, r3, #500	; 0x1f4
    a804:	e5863020 	str	r3, [r6, #32]
    a808:	e0832291 	umull	r2, r3, r1, r2
    a80c:	e1a03323 	lsr	r3, r3, #6
    a810:	e5863024 	str	r3, [r6, #36]	; 0x24
    a814:	eb000878 	bl	c9fc <CLogger::Get()>
    a818:	e0832495 	umull	r2, r3, r5, r4
    a81c:	e3a0c064 	mov	ip, #100	; 0x64
    a820:	e0841594 	umull	r1, r4, r4, r5
    a824:	e1a012a3 	lsr	r1, r3, #5
    a828:	e3a02003 	mov	r2, #3
    a82c:	e1a042a4 	lsr	r4, r4, #5
    a830:	e3003a78 	movw	r3, #2680	; 0xa78
    a834:	e3403001 	movt	r3, #1
    a838:	e065519c 	mls	r5, ip, r1, r5
    a83c:	e58d4000 	str	r4, [sp]
    a840:	e59f100c 	ldr	r1, [pc, #12]	; a854 <CTimer::TuneMsDelay()+0xa4>
    a844:	e58d5004 	str	r5, [sp, #4]
    a848:	eb000948 	bl	cd70 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a84c:	e28dd00c 	add	sp, sp, #12
    a850:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a854:	00010970 	.word	0x00010970

0000a858 <CTimer::Initialize()>:
    a858:	e92d4010 	push	{r4, lr}
    a85c:	e1a04000 	mov	r4, r0
    a860:	e5900000 	ldr	r0, [r0]
    a864:	e3500000 	cmp	r0, #0
    a868:	0a000011 	beq	a8b4 <CTimer::Initialize()+0x5c>
    a86c:	e1a03004 	mov	r3, r4
    a870:	e3a01003 	mov	r1, #3
    a874:	e30a2774 	movw	r2, #42868	; 0xa774
    a878:	e3402000 	movt	r2, #0
    a87c:	eb000e72 	bl	e24c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    a880:	e3a02a03 	mov	r2, #12288	; 0x3000
    a884:	e3432f00 	movt	r2, #16128	; 0x3f00
    a888:	e3a03df2 	mov	r3, #15488	; 0x3c80
    a88c:	e34f3e36 	movt	r3, #65078	; 0xfe36
    a890:	e1a00004 	mov	r0, r4
    a894:	e5823004 	str	r3, [r2, #4]
    a898:	e5923004 	ldr	r3, [r2, #4]
    a89c:	e2833c27 	add	r3, r3, #9984	; 0x2700
    a8a0:	e2833010 	add	r3, r3, #16
    a8a4:	e5823018 	str	r3, [r2, #24]
    a8a8:	ebffffc0 	bl	a7b0 <CTimer::TuneMsDelay()>
    a8ac:	e3a00001 	mov	r0, #1
    a8b0:	e8bd8010 	pop	{r4, pc}
    a8b4:	e3001978 	movw	r1, #2424	; 0x978
    a8b8:	e3401001 	movt	r1, #1
    a8bc:	e3000994 	movw	r0, #2452	; 0x994
    a8c0:	e3400001 	movt	r0, #1
    a8c4:	e3a02055 	mov	r2, #85	; 0x55
    a8c8:	eb0006cc 	bl	c400 <assertion_failed>
    a8cc:	e5940000 	ldr	r0, [r4]
    a8d0:	eaffffe5 	b	a86c <CTimer::Initialize()+0x14>

0000a8d4 <CTimer::SimpleMsDelay(unsigned int)>:
    a8d4:	e2503000 	subs	r3, r0, #0
    a8d8:	012fff1e 	bxeq	lr
    a8dc:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    a8e0:	e0000390 	mul	r0, r0, r3
    a8e4:	e3500000 	cmp	r0, #0
    a8e8:	012fff1e 	bxeq	lr
    a8ec:	e3a03a03 	mov	r3, #12288	; 0x3000
    a8f0:	e3433f00 	movt	r3, #16128	; 0x3f00
    a8f4:	e2800001 	add	r0, r0, #1
    a8f8:	e1a01003 	mov	r1, r3
    a8fc:	e5932004 	ldr	r2, [r3, #4]
    a900:	e5913004 	ldr	r3, [r1, #4]
    a904:	e0433002 	sub	r3, r3, r2
    a908:	e1500003 	cmp	r0, r3
    a90c:	8afffffb 	bhi	a900 <CTimer::SimpleMsDelay(unsigned int)+0x2c>
    a910:	e12fff1e 	bx	lr

0000a914 <CTimer::SimpleusDelay(unsigned int)>:
    a914:	e3500000 	cmp	r0, #0
    a918:	012fff1e 	bxeq	lr
    a91c:	e3a03a03 	mov	r3, #12288	; 0x3000
    a920:	e3433f00 	movt	r3, #16128	; 0x3f00
    a924:	e2800001 	add	r0, r0, #1
    a928:	e1a01003 	mov	r1, r3
    a92c:	e5932004 	ldr	r2, [r3, #4]
    a930:	e5913004 	ldr	r3, [r1, #4]
    a934:	e0433002 	sub	r3, r3, r2
    a938:	e1500003 	cmp	r0, r3
    a93c:	8afffffb 	bhi	a930 <CTimer::SimpleusDelay(unsigned int)+0x1c>
    a940:	e12fff1e 	bx	lr

0000a944 <CTimer::IsLeapYear(unsigned int)>:
    a944:	e308251f 	movw	r2, #34079	; 0x851f
    a948:	e34521eb 	movt	r2, #20971	; 0x51eb
    a94c:	e3a01064 	mov	r1, #100	; 0x64
    a950:	e083c092 	umull	ip, r3, r2, r0
    a954:	e1a032a3 	lsr	r3, r3, #5
    a958:	e0630391 	mls	r3, r1, r3, r0
    a95c:	e3530000 	cmp	r3, #0
    a960:	0a000003 	beq	a974 <CTimer::IsLeapYear(unsigned int)+0x30>
    a964:	e3100003 	tst	r0, #3
    a968:	03a00001 	moveq	r0, #1
    a96c:	13a00000 	movne	r0, #0
    a970:	e12fff1e 	bx	lr
    a974:	e0832290 	umull	r2, r3, r0, r2
    a978:	e3a02e19 	mov	r2, #400	; 0x190
    a97c:	e1a033a3 	lsr	r3, r3, #7
    a980:	e0600392 	mls	r0, r2, r3, r0
    a984:	e16f0f10 	clz	r0, r0
    a988:	e1a002a0 	lsr	r0, r0, #5
    a98c:	e12fff1e 	bx	lr

0000a990 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    a990:	e3500001 	cmp	r0, #1
    a994:	0a000003 	beq	a9a8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    a998:	e3003940 	movw	r3, #2368	; 0x940
    a99c:	e3403001 	movt	r3, #1
    a9a0:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    a9a4:	e12fff1e 	bx	lr
    a9a8:	e308251f 	movw	r2, #34079	; 0x851f
    a9ac:	e34521eb 	movt	r2, #20971	; 0x51eb
    a9b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a9b4:	e3a0e064 	mov	lr, #100	; 0x64
    a9b8:	e0832291 	umull	r2, r3, r1, r2
    a9bc:	e1a0c2a3 	lsr	ip, r3, #5
    a9c0:	e06c1c9e 	mls	ip, lr, ip, r1
    a9c4:	e35c0000 	cmp	ip, #0
    a9c8:	0a000008 	beq	a9f0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    a9cc:	e3110003 	tst	r1, #3
    a9d0:	03a01001 	moveq	r1, #1
    a9d4:	13a01000 	movne	r1, #0
    a9d8:	e3510000 	cmp	r1, #0
    a9dc:	13a0001d 	movne	r0, #29
    a9e0:	03003940 	movweq	r3, #2368	; 0x940
    a9e4:	03403001 	movteq	r3, #1
    a9e8:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    a9ec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a9f0:	e1a033a3 	lsr	r3, r3, #7
    a9f4:	e3a02e19 	mov	r2, #400	; 0x190
    a9f8:	e0611392 	mls	r1, r2, r3, r1
    a9fc:	e16f1f11 	clz	r1, r1
    aa00:	e1a012a1 	lsr	r1, r1, #5
    aa04:	eafffff3 	b	a9d8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

0000aa08 <CTimer::Get()>:
    aa08:	e92d4010 	push	{r4, lr}
    aa0c:	e3024398 	movw	r4, #9112	; 0x2398
    aa10:	e3404001 	movt	r4, #1
    aa14:	e5940000 	ldr	r0, [r4]
    aa18:	e3500000 	cmp	r0, #0
    aa1c:	18bd8010 	popne	{r4, pc}
    aa20:	e30021d6 	movw	r2, #470	; 0x1d6
    aa24:	e3001978 	movw	r1, #2424	; 0x978
    aa28:	e3401001 	movt	r1, #1
    aa2c:	e30003b4 	movw	r0, #948	; 0x3b4
    aa30:	e3400001 	movt	r0, #1
    aa34:	eb000671 	bl	c400 <assertion_failed>
    aa38:	e5940000 	ldr	r0, [r4]
    aa3c:	e8bd8010 	pop	{r4, pc}

0000aa40 <memcpy>:
    aa40:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa44:	e352007f 	cmp	r2, #127	; 0x7f
    aa48:	9a00000b 	bls	aa7c <memcpy+0x3c>
    aa4c:	e3110003 	tst	r1, #3
    aa50:	1a000009 	bne	aa7c <memcpy+0x3c>
    aa54:	e3100003 	tst	r0, #3
    aa58:	1a000007 	bne	aa7c <memcpy+0x3c>
    aa5c:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    aa60:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    aa64:	e2422020 	sub	r2, r2, #32
    aa68:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    aa6c:	f5d1f040 	pld	[r1, #64]	; 0x40
    aa70:	e352001f 	cmp	r2, #31
    aa74:	8afffff9 	bhi	aa60 <memcpy+0x20>
    aa78:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    aa7c:	e3520000 	cmp	r2, #0
    aa80:	0a000003 	beq	aa94 <memcpy+0x54>
    aa84:	e4d13001 	ldrb	r3, [r1], #1
    aa88:	e2522001 	subs	r2, r2, #1
    aa8c:	e4c03001 	strb	r3, [r0], #1
    aa90:	1afffffb 	bne	aa84 <memcpy+0x44>
    aa94:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    aa98:	e12fff1e 	bx	lr

0000aa9c <CDevice::~CDevice()>:
    aa9c:	e12fff1e 	bx	lr

0000aaa0 <CDevice::Read(void*, unsigned int)>:
    aaa0:	e3e00000 	mvn	r0, #0
    aaa4:	e12fff1e 	bx	lr

0000aaa8 <CDevice::Seek(unsigned long long)>:
    aaa8:	e3e00000 	mvn	r0, #0
    aaac:	e3e01000 	mvn	r1, #0
    aab0:	e12fff1e 	bx	lr

0000aab4 <CDevice::~CDevice()>:
    aab4:	e92d4010 	push	{r4, lr}
    aab8:	e1a04000 	mov	r4, r0
    aabc:	ebfffc95 	bl	9d18 <operator delete(void*)>
    aac0:	e1a00004 	mov	r0, r4
    aac4:	e8bd8010 	pop	{r4, pc}

0000aac8 <CDevice::CDevice()>:
    aac8:	e59f3004 	ldr	r3, [pc, #4]	; aad4 <CDevice::CDevice()+0xc>
    aacc:	e5803000 	str	r3, [r0]
    aad0:	e12fff1e 	bx	lr
    aad4:	00010ac8 	.word	0x00010ac8

0000aad8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    aad8:	e3a01000 	mov	r1, #0
    aadc:	e3a0c00a 	mov	ip, #10
    aae0:	ea000009 	b	ab0c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
    aae4:	e3530009 	cmp	r3, #9
    aae8:	8a00000f 	bhi	ab2c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
    aaec:	e3720001 	cmn	r2, #1
    aaf0:	13a03000 	movne	r3, #0
    aaf4:	03a03001 	moveq	r3, #1
    aaf8:	e1510002 	cmp	r1, r2
    aafc:	83833001 	orrhi	r3, r3, #1
    ab00:	e1a01002 	mov	r1, r2
    ab04:	e3530000 	cmp	r3, #0
    ab08:	1a000007 	bne	ab2c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
    ab0c:	e0d020d1 	ldrsb	r2, [r0], #1
    ab10:	e3520000 	cmp	r2, #0
    ab14:	e2423030 	sub	r3, r2, #48	; 0x30
    ab18:	e022319c 	mla	r2, ip, r1, r3
    ab1c:	e6ef3073 	uxtb	r3, r3
    ab20:	1affffef 	bne	aae4 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0xc>
    ab24:	e1a00001 	mov	r0, r1
    ab28:	e12fff1e 	bx	lr
    ab2c:	e3e01000 	mvn	r1, #0
    ab30:	e1a00001 	mov	r0, r1
    ab34:	e12fff1e 	bx	lr

0000ab38 <CKernelOptions::~CKernelOptions()>:
    ab38:	e302339c 	movw	r3, #9116	; 0x239c
    ab3c:	e3403001 	movt	r3, #1
    ab40:	e3a02000 	mov	r2, #0
    ab44:	e5832000 	str	r2, [r3]
    ab48:	e12fff1e 	bx	lr

0000ab4c <CKernelOptions::GetWidth() const>:
    ab4c:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    ab50:	e12fff1e 	bx	lr

0000ab54 <CKernelOptions::GetHeight() const>:
    ab54:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    ab58:	e12fff1e 	bx	lr

0000ab5c <CKernelOptions::GetLogDevice() const>:
    ab5c:	e2800e81 	add	r0, r0, #2064	; 0x810
    ab60:	e2800008 	add	r0, r0, #8
    ab64:	e12fff1e 	bx	lr

0000ab68 <CKernelOptions::GetLogLevel() const>:
    ab68:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    ab6c:	e12fff1e 	bx	lr

0000ab70 <CKernelOptions::GetKeyMap() const>:
    ab70:	e2800e83 	add	r0, r0, #2096	; 0x830
    ab74:	e12fff1e 	bx	lr

0000ab78 <CKernelOptions::GetUSBPowerDelay() const>:
    ab78:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    ab7c:	e12fff1e 	bx	lr

0000ab80 <CKernelOptions::GetCPUSpeed() const>:
    ab80:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    ab84:	e12fff1e 	bx	lr

0000ab88 <CKernelOptions::GetSoCMaxTemp() const>:
    ab88:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
    ab8c:	e12fff1e 	bx	lr

0000ab90 <CKernelOptions::Get()>:
    ab90:	e302339c 	movw	r3, #9116	; 0x239c
    ab94:	e3403001 	movt	r3, #1
    ab98:	e5930000 	ldr	r0, [r3]
    ab9c:	e12fff1e 	bx	lr

0000aba0 <CKernelOptions::GetToken()>:
    aba0:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    aba4:	e1d320d0 	ldrsb	r2, [r3]
    aba8:	e3520000 	cmp	r2, #0
    abac:	1a000005 	bne	abc8 <CKernelOptions::GetToken()+0x28>
    abb0:	ea000016 	b	ac10 <CKernelOptions::GetToken()+0x70>
    abb4:	e2833001 	add	r3, r3, #1
    abb8:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    abbc:	e1d320d0 	ldrsb	r2, [r3]
    abc0:	e3520000 	cmp	r2, #0
    abc4:	0a000011 	beq	ac10 <CKernelOptions::GetToken()+0x70>
    abc8:	e3520020 	cmp	r2, #32
    abcc:	0afffff8 	beq	abb4 <CKernelOptions::GetToken()+0x14>
    abd0:	e1a02003 	mov	r2, r3
    abd4:	ea000000 	b	abdc <CKernelOptions::GetToken()+0x3c>
    abd8:	e1a02001 	mov	r2, r1
    abdc:	e2821001 	add	r1, r2, #1
    abe0:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    abe4:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    abe8:	e35c0000 	cmp	ip, #0
    abec:	0a000008 	beq	ac14 <CKernelOptions::GetToken()+0x74>
    abf0:	e35c0020 	cmp	ip, #32
    abf4:	1afffff7 	bne	abd8 <CKernelOptions::GetToken()+0x38>
    abf8:	e2822002 	add	r2, r2, #2
    abfc:	e3a0c000 	mov	ip, #0
    ac00:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    ac04:	e1a00003 	mov	r0, r3
    ac08:	e5c1c000 	strb	ip, [r1]
    ac0c:	e12fff1e 	bx	lr
    ac10:	e3a03000 	mov	r3, #0
    ac14:	e1a00003 	mov	r0, r3
    ac18:	e12fff1e 	bx	lr

0000ac1c <CKernelOptions::CKernelOptions()>:
    ac1c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac20:	e1a05000 	mov	r5, r0
    ac24:	e2807e81 	add	r7, r0, #2064	; 0x810
    ac28:	e3a04000 	mov	r4, #0
    ac2c:	e3a02004 	mov	r2, #4
    ac30:	e3a0303c 	mov	r3, #60	; 0x3c
    ac34:	e2877008 	add	r7, r7, #8
    ac38:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    ac3c:	e24dd01c 	sub	sp, sp, #28
    ac40:	e585383c 	str	r3, [r5, #2108]	; 0x83c
    ac44:	e1a00007 	mov	r0, r7
    ac48:	e3001adc 	movw	r1, #2780	; 0xadc
    ac4c:	e3401001 	movt	r1, #1
    ac50:	e5854810 	str	r4, [r5, #2064]	; 0x810
    ac54:	e2859e83 	add	r9, r5, #2096	; 0x830
    ac58:	e5854814 	str	r4, [r5, #2068]	; 0x814
    ac5c:	e5854834 	str	r4, [r5, #2100]	; 0x834
    ac60:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
    ac64:	eb0013f3 	bl	fc38 <strcpy>
    ac68:	e1a00009 	mov	r0, r9
    ac6c:	e3001ae4 	movw	r1, #2788	; 0xae4
    ac70:	e3401001 	movt	r1, #1
    ac74:	eb0013ef 	bl	fc38 <strcpy>
    ac78:	e302339c 	movw	r3, #9116	; 0x239c
    ac7c:	e3403001 	movt	r3, #1
    ac80:	e28d0010 	add	r0, sp, #16
    ac84:	e5835000 	str	r5, [r3]
    ac88:	ebfff78d 	bl	8ac4 <CBcmPropertyTags::CBcmPropertyTags()>
    ac8c:	e58d4000 	str	r4, [sp]
    ac90:	e1a02005 	mov	r2, r5
    ac94:	e28d0010 	add	r0, sp, #16
    ac98:	e3a01001 	mov	r1, #1
    ac9c:	e3401005 	movt	r1, #5
    aca0:	e300380c 	movw	r3, #2060	; 0x80c
    aca4:	ebfff7ce 	bl	8be4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    aca8:	e1500004 	cmp	r0, r4
    acac:	0a000040 	beq	adb4 <CKernelOptions::CKernelOptions()+0x198>
    acb0:	e5953008 	ldr	r3, [r5, #8]
    acb4:	e3530b02 	cmp	r3, #2048	; 0x800
    acb8:	2a00003d 	bcs	adb4 <CKernelOptions::CKernelOptions()+0x198>
    acbc:	e0853003 	add	r3, r5, r3
    acc0:	e285200c 	add	r2, r5, #12
    acc4:	e3006b38 	movw	r6, #2872	; 0xb38
    acc8:	e3406001 	movt	r6, #1
    accc:	e3008ae8 	movw	r8, #2792	; 0xae8
    acd0:	e3408001 	movt	r8, #1
    acd4:	e300aaf0 	movw	sl, #2800	; 0xaf0
    acd8:	e340a001 	movt	sl, #1
    acdc:	e5c3400c 	strb	r4, [r3, #12]
    ace0:	e585280c 	str	r2, [r5, #2060]	; 0x80c
    ace4:	e1a00005 	mov	r0, r5
    ace8:	ebffffac 	bl	aba0 <CKernelOptions::GetToken()>
    acec:	e250b000 	subs	fp, r0, #0
    acf0:	0a00002f 	beq	adb4 <CKernelOptions::CKernelOptions()+0x198>
    acf4:	e1db30d0 	ldrsb	r3, [fp]
    acf8:	e3530000 	cmp	r3, #0
    acfc:	0a000008 	beq	ad24 <CKernelOptions::CKernelOptions()+0x108>
    ad00:	e353003d 	cmp	r3, #61	; 0x3d
    ad04:	e1a0400b 	mov	r4, fp
    ad08:	1a000002 	bne	ad18 <CKernelOptions::CKernelOptions()+0xfc>
    ad0c:	ea00002d 	b	adc8 <CKernelOptions::CKernelOptions()+0x1ac>
    ad10:	e353003d 	cmp	r3, #61	; 0x3d
    ad14:	0a00002b 	beq	adc8 <CKernelOptions::CKernelOptions()+0x1ac>
    ad18:	e1f430d1 	ldrsb	r3, [r4, #1]!
    ad1c:	e3530000 	cmp	r3, #0
    ad20:	1afffffa 	bne	ad10 <CKernelOptions::CKernelOptions()+0xf4>
    ad24:	e1a01006 	mov	r1, r6
    ad28:	e1a0000b 	mov	r0, fp
    ad2c:	eb0013a6 	bl	fbcc <strcmp>
    ad30:	e3500000 	cmp	r0, #0
    ad34:	0affffea 	beq	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    ad38:	e1a01008 	mov	r1, r8
    ad3c:	e1a0000b 	mov	r0, fp
    ad40:	eb0013a1 	bl	fbcc <strcmp>
    ad44:	e3500000 	cmp	r0, #0
    ad48:	13a03000 	movne	r3, #0
    ad4c:	0affffe4 	beq	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    ad50:	e1a0100a 	mov	r1, sl
    ad54:	e1a0000b 	mov	r0, fp
    ad58:	e58d300c 	str	r3, [sp, #12]
    ad5c:	eb00139a 	bl	fbcc <strcmp>
    ad60:	e2504000 	subs	r4, r0, #0
    ad64:	e59d300c 	ldr	r3, [sp, #12]
    ad68:	0a00002a 	beq	ae18 <CKernelOptions::CKernelOptions()+0x1fc>
    ad6c:	e3001af8 	movw	r1, #2808	; 0xaf8
    ad70:	e3401001 	movt	r1, #1
    ad74:	e1a0000b 	mov	r0, fp
    ad78:	e58d300c 	str	r3, [sp, #12]
    ad7c:	eb001392 	bl	fbcc <strcmp>
    ad80:	e3500000 	cmp	r0, #0
    ad84:	e59d300c 	ldr	r3, [sp, #12]
    ad88:	1a000028 	bne	ae30 <CKernelOptions::CKernelOptions()+0x214>
    ad8c:	e3530000 	cmp	r3, #0
    ad90:	0affffd3 	beq	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    ad94:	e1d320d0 	ldrsb	r2, [r3]
    ad98:	e3520000 	cmp	r2, #0
    ad9c:	0affffd0 	beq	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    ada0:	e1a00003 	mov	r0, r3
    ada4:	ebffff4b 	bl	aad8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    ada8:	e3500004 	cmp	r0, #4
    adac:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    adb0:	eaffffcb 	b	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    adb4:	e28d0010 	add	r0, sp, #16
    adb8:	ebfff747 	bl	8adc <CBcmPropertyTags::~CBcmPropertyTags()>
    adbc:	e1a00005 	mov	r0, r5
    adc0:	e28dd01c 	add	sp, sp, #28
    adc4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    adc8:	e3a03000 	mov	r3, #0
    adcc:	e1a01006 	mov	r1, r6
    add0:	e5c43000 	strb	r3, [r4]
    add4:	e1a0000b 	mov	r0, fp
    add8:	eb00137b 	bl	fbcc <strcmp>
    addc:	e3500000 	cmp	r0, #0
    ade0:	e2843001 	add	r3, r4, #1
    ade4:	1a000058 	bne	af4c <CKernelOptions::CKernelOptions()+0x330>
    ade8:	e3530000 	cmp	r3, #0
    adec:	0affffbc 	beq	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    adf0:	e1d420d1 	ldrsb	r2, [r4, #1]
    adf4:	e3520000 	cmp	r2, #0
    adf8:	0affffb9 	beq	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    adfc:	e1a00003 	mov	r0, r3
    ae00:	ebffff34 	bl	aad8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    ae04:	e300353c 	movw	r3, #1340	; 0x53c
    ae08:	e2402d0a 	sub	r2, r0, #640	; 0x280
    ae0c:	e1520003 	cmp	r2, r3
    ae10:	95850810 	strls	r0, [r5, #2064]	; 0x810
    ae14:	eaffffb2 	b	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    ae18:	e1a01003 	mov	r1, r3
    ae1c:	e3a02013 	mov	r2, #19
    ae20:	e1a00007 	mov	r0, r7
    ae24:	eb00138e 	bl	fc64 <strncpy>
    ae28:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    ae2c:	eaffffac 	b	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    ae30:	e3001b04 	movw	r1, #2820	; 0xb04
    ae34:	e3401001 	movt	r1, #1
    ae38:	e1a0000b 	mov	r0, fp
    ae3c:	e58d300c 	str	r3, [sp, #12]
    ae40:	eb001361 	bl	fbcc <strcmp>
    ae44:	e2504000 	subs	r4, r0, #0
    ae48:	e59d300c 	ldr	r3, [sp, #12]
    ae4c:	1a000005 	bne	ae68 <CKernelOptions::CKernelOptions()+0x24c>
    ae50:	e1a01003 	mov	r1, r3
    ae54:	e3a02002 	mov	r2, #2
    ae58:	e1a00009 	mov	r0, r9
    ae5c:	eb001380 	bl	fc64 <strncpy>
    ae60:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    ae64:	eaffff9e 	b	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    ae68:	e3001b0c 	movw	r1, #2828	; 0xb0c
    ae6c:	e3401001 	movt	r1, #1
    ae70:	e1a0000b 	mov	r0, fp
    ae74:	e58d300c 	str	r3, [sp, #12]
    ae78:	eb001353 	bl	fbcc <strcmp>
    ae7c:	e3500000 	cmp	r0, #0
    ae80:	e59d300c 	ldr	r3, [sp, #12]
    ae84:	1a00000b 	bne	aeb8 <CKernelOptions::CKernelOptions()+0x29c>
    ae88:	e3530000 	cmp	r3, #0
    ae8c:	0affff94 	beq	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    ae90:	e1d320d0 	ldrsb	r2, [r3]
    ae94:	e3520000 	cmp	r2, #0
    ae98:	0affff91 	beq	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    ae9c:	e1a00003 	mov	r0, r3
    aea0:	ebffff0c 	bl	aad8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    aea4:	e3013e78 	movw	r3, #7800	; 0x1e78
    aea8:	e24020c8 	sub	r2, r0, #200	; 0xc8
    aeac:	e1520003 	cmp	r2, r3
    aeb0:	95850834 	strls	r0, [r5, #2100]	; 0x834
    aeb4:	eaffff8a 	b	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    aeb8:	e3001b1c 	movw	r1, #2844	; 0xb1c
    aebc:	e3401001 	movt	r1, #1
    aec0:	e1a0000b 	mov	r0, fp
    aec4:	e58d300c 	str	r3, [sp, #12]
    aec8:	eb00133f 	bl	fbcc <strcmp>
    aecc:	e3500000 	cmp	r0, #0
    aed0:	e59d300c 	ldr	r3, [sp, #12]
    aed4:	1a000007 	bne	aef8 <CKernelOptions::CKernelOptions()+0x2dc>
    aed8:	e1a00003 	mov	r0, r3
    aedc:	e3001b24 	movw	r1, #2852	; 0xb24
    aee0:	e3401001 	movt	r1, #1
    aee4:	eb001338 	bl	fbcc <strcmp>
    aee8:	e3500000 	cmp	r0, #0
    aeec:	03a03001 	moveq	r3, #1
    aef0:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    aef4:	eaffff7a 	b	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    aef8:	e1a0000b 	mov	r0, fp
    aefc:	e3001b2c 	movw	r1, #2860	; 0xb2c
    af00:	e3401001 	movt	r1, #1
    af04:	e58d300c 	str	r3, [sp, #12]
    af08:	eb00132f 	bl	fbcc <strcmp>
    af0c:	e59d300c 	ldr	r3, [sp, #12]
    af10:	e2902000 	adds	r2, r0, #0
    af14:	13a02001 	movne	r2, #1
    af18:	e3530000 	cmp	r3, #0
    af1c:	03822001 	orreq	r2, r2, #1
    af20:	e3520000 	cmp	r2, #0
    af24:	1affff6e 	bne	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    af28:	e1d320d0 	ldrsb	r2, [r3]
    af2c:	e3520000 	cmp	r2, #0
    af30:	0affff6b 	beq	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    af34:	e1a00003 	mov	r0, r3
    af38:	ebfffee6 	bl	aad8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    af3c:	e2403028 	sub	r3, r0, #40	; 0x28
    af40:	e3530026 	cmp	r3, #38	; 0x26
    af44:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
    af48:	eaffff65 	b	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    af4c:	e1a01008 	mov	r1, r8
    af50:	e1a0000b 	mov	r0, fp
    af54:	e58d300c 	str	r3, [sp, #12]
    af58:	eb00131b 	bl	fbcc <strcmp>
    af5c:	e3500000 	cmp	r0, #0
    af60:	e59d300c 	ldr	r3, [sp, #12]
    af64:	1affff79 	bne	ad50 <CKernelOptions::CKernelOptions()+0x134>
    af68:	e3530000 	cmp	r3, #0
    af6c:	0affff5c 	beq	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    af70:	e1d420d1 	ldrsb	r2, [r4, #1]
    af74:	e3520000 	cmp	r2, #0
    af78:	0affff59 	beq	ace4 <CKernelOptions::CKernelOptions()+0xc8>
    af7c:	e1a00003 	mov	r0, r3
    af80:	ebfffed4 	bl	aad8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    af84:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    af88:	e3530f96 	cmp	r3, #600	; 0x258
    af8c:	95850814 	strls	r0, [r5, #2068]	; 0x814
    af90:	eaffff53 	b	ace4 <CKernelOptions::CKernelOptions()+0xc8>

0000af94 <CKernelOptions::GetOptionValue(char*)>:
    af94:	e1d030d0 	ldrsb	r3, [r0]
    af98:	e3530000 	cmp	r3, #0
    af9c:	1a000003 	bne	afb0 <CKernelOptions::GetOptionValue(char*)+0x1c>
    afa0:	ea000007 	b	afc4 <CKernelOptions::GetOptionValue(char*)+0x30>
    afa4:	e1f030d1 	ldrsb	r3, [r0, #1]!
    afa8:	e3530000 	cmp	r3, #0
    afac:	0a000004 	beq	afc4 <CKernelOptions::GetOptionValue(char*)+0x30>
    afb0:	e353003d 	cmp	r3, #61	; 0x3d
    afb4:	1afffffa 	bne	afa4 <CKernelOptions::GetOptionValue(char*)+0x10>
    afb8:	e3a02000 	mov	r2, #0
    afbc:	e2803001 	add	r3, r0, #1
    afc0:	e5c02000 	strb	r2, [r0]
    afc4:	e1a00003 	mov	r0, r3
    afc8:	e12fff1e 	bx	lr

0000afcc <CKernelOptions::GetDecimal(char*)>:
    afcc:	e2503000 	subs	r3, r0, #0
    afd0:	0a000002 	beq	afe0 <CKernelOptions::GetDecimal(char*)+0x14>
    afd4:	e1d330d0 	ldrsb	r3, [r3]
    afd8:	e3530000 	cmp	r3, #0
    afdc:	1a000001 	bne	afe8 <CKernelOptions::GetDecimal(char*)+0x1c>
    afe0:	e3e00000 	mvn	r0, #0
    afe4:	e12fff1e 	bx	lr
    afe8:	eafffeba 	b	aad8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000afec <CPageTable::CPageTable()>:
    afec:	e92d4010 	push	{r4, lr}
    aff0:	e1a04000 	mov	r4, r0
    aff4:	e3a01000 	mov	r1, #0
    aff8:	e3a029b2 	mov	r2, #2916352	; 0x2c8000
    affc:	e1a0c001 	mov	ip, r1
    b000:	e1a03002 	mov	r3, r2
    b004:	e3a0e002 	mov	lr, #2
    b008:	e3a00001 	mov	r0, #1
    b00c:	e8840006 	stm	r4, {r1, r2}
    b010:	e5d32000 	ldrb	r2, [r3]
    b014:	e35c0b01 	cmp	ip, #1024	; 0x400
    b018:	e5d31002 	ldrb	r1, [r3, #2]
    b01c:	e2833004 	add	r3, r3, #4
    b020:	e7c1201e 	bfi	r2, lr, #0, #2
    b024:	e3811001 	orr	r1, r1, #1
    b028:	e6ef2072 	uxtb	r2, r2
    b02c:	e20110f9 	and	r1, r1, #249	; 0xf9
    b030:	e3822004 	orr	r2, r2, #4
    b034:	e7c3119f 	bfc	r1, #3, #1
    b038:	e20220f7 	and	r2, r2, #247	; 0xf7
    b03c:	e5431002 	strb	r1, [r3, #-2]
    b040:	e7c4221f 	bfc	r2, #4, #1
    b044:	e5432004 	strb	r2, [r3, #-4]
    b048:	e15310b2 	ldrh	r1, [r3, #-2]
    b04c:	e15320b4 	ldrh	r2, [r3, #-4]
    b050:	e7cf121c 	bfi	r1, ip, #4, #12
    b054:	e28cc001 	add	ip, ip, #1
    b058:	e7c8229f 	bfc	r2, #5, #4
    b05c:	e14310b2 	strh	r1, [r3, #-2]
    b060:	e14320b4 	strh	r2, [r3, #-4]
    b064:	e1a02422 	lsr	r2, r2, #8
    b068:	e20220fd 	and	r2, r2, #253	; 0xfd
    b06c:	e7c32110 	bfi	r2, r0, #2, #2
    b070:	e202208f 	and	r2, r2, #143	; 0x8f
    b074:	e7c7239f 	bfc	r2, #7, #1
    b078:	e5432003 	strb	r2, [r3, #-3]
    b07c:	25532004 	ldrbcs	r2, [r3, #-4]
    b080:	23822010 	orrcs	r2, r2, #16
    b084:	25432004 	strbcs	r2, [r3, #-4]
    b088:	e35c0a01 	cmp	ip, #4096	; 0x1000
    b08c:	1affffdf 	bne	b010 <CPageTable::CPageTable()+0x24>
    b090:	eb000fca 	bl	efc0 <CleanDataCache>
    b094:	e1a00004 	mov	r0, r4
    b098:	e8bd8010 	pop	{r4, pc}

0000b09c <CPageTable::CPageTable(unsigned int)>:
    b09c:	e3a03001 	mov	r3, #1
    b0a0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b0a4:	e1a04000 	mov	r4, r0
    b0a8:	e5803000 	str	r3, [r0]
    b0ac:	e1a05001 	mov	r5, r1
    b0b0:	eb0011e6 	bl	f850 <palloc>
    b0b4:	e3500000 	cmp	r0, #0
    b0b8:	e5840004 	str	r0, [r4, #4]
    b0bc:	0a00003e 	beq	b1bc <CPageTable::CPageTable(unsigned int)+0x120>
    b0c0:	e7eb3050 	ubfx	r3, r0, #0, #12
    b0c4:	e3530000 	cmp	r3, #0
    b0c8:	1a000033 	bne	b19c <CPageTable::CPageTable(unsigned int)+0x100>
    b0cc:	e3a02000 	mov	r2, #0
    b0d0:	e300e340 	movw	lr, #832	; 0x340
    b0d4:	e340e001 	movt	lr, #1
    b0d8:	e1a08002 	mov	r8, r2
    b0dc:	e3a07002 	mov	r7, #2
    b0e0:	e3a06001 	mov	r6, #1
    b0e4:	ea000009 	b	b110 <CPageTable::CPageTable(unsigned int)+0x74>
    b0e8:	e6ef3071 	uxtb	r3, r1
    b0ec:	e5d01000 	ldrb	r1, [r0]
    b0f0:	e3833001 	orr	r3, r3, #1
    b0f4:	e7c31198 	bfi	r1, r8, #3, #1
    b0f8:	e5c03002 	strb	r3, [r0, #2]
    b0fc:	e5c01000 	strb	r1, [r0]
    b100:	e2822601 	add	r2, r2, #1048576	; 0x100000
    b104:	e2800004 	add	r0, r0, #4
    b108:	e3520101 	cmp	r2, #1073741824	; 0x40000000
    b10c:	0a00001f 	beq	b190 <CPageTable::CPageTable(unsigned int)+0xf4>
    b110:	e5d03001 	ldrb	r3, [r0, #1]
    b114:	e7e31a52 	ubfx	r1, r2, #20, #4
    b118:	e152000e 	cmp	r2, lr
    b11c:	e387c00c 	orr	ip, r7, #12
    b120:	e20330fc 	and	r3, r3, #252	; 0xfc
    b124:	e1a09c22 	lsr	r9, r2, #24
    b128:	e7c33116 	bfi	r3, r6, #2, #2
    b12c:	e1a01201 	lsl	r1, r1, #4
    b130:	e203308f 	and	r3, r3, #143	; 0x8f
    b134:	e5c01002 	strb	r1, [r0, #2]
    b138:	e7c7339f 	bfc	r3, #7, #1
    b13c:	e5c0c000 	strb	ip, [r0]
    b140:	e5c03001 	strb	r3, [r0, #1]
    b144:	e5c09003 	strb	r9, [r0, #3]
    b148:	3affffec 	bcc	b100 <CPageTable::CPageTable(unsigned int)+0x64>
    b14c:	e1520005 	cmp	r2, r5
    b150:	e6ef307c 	uxtb	r3, ip
    b154:	e3833010 	orr	r3, r3, #16
    b158:	e5c03000 	strb	r3, [r0]
    b15c:	2affffe1 	bcs	b0e8 <CPageTable::CPageTable(unsigned int)+0x4c>
    b160:	e3520501 	cmp	r2, #4194304	; 0x400000
    b164:	1affffe5 	bne	b100 <CPageTable::CPageTable(unsigned int)+0x64>
    b168:	e5d03000 	ldrb	r3, [r0]
    b16c:	e2800004 	add	r0, r0, #4
    b170:	e5502002 	ldrb	r2, [r0, #-2]
    b174:	e20330fb 	and	r3, r3, #251	; 0xfb
    b178:	e3822001 	orr	r2, r2, #1
    b17c:	e7c33198 	bfi	r3, r8, #3, #1
    b180:	e5402002 	strb	r2, [r0, #-2]
    b184:	e3a02605 	mov	r2, #5242880	; 0x500000
    b188:	e5403004 	strb	r3, [r0, #-4]
    b18c:	eaffffdf 	b	b110 <CPageTable::CPageTable(unsigned int)+0x74>
    b190:	eb000f8a 	bl	efc0 <CleanDataCache>
    b194:	e1a00004 	mov	r0, r4
    b198:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b19c:	e3001b40 	movw	r1, #2880	; 0xb40
    b1a0:	e3401001 	movt	r1, #1
    b1a4:	e3000b60 	movw	r0, #2912	; 0xb60
    b1a8:	e3400001 	movt	r0, #1
    b1ac:	e3a02051 	mov	r2, #81	; 0x51
    b1b0:	eb000492 	bl	c400 <assertion_failed>
    b1b4:	e5940004 	ldr	r0, [r4, #4]
    b1b8:	eaffffc3 	b	b0cc <CPageTable::CPageTable(unsigned int)+0x30>
    b1bc:	e3001b40 	movw	r1, #2880	; 0xb40
    b1c0:	e3401001 	movt	r1, #1
    b1c4:	e3000b50 	movw	r0, #2896	; 0xb50
    b1c8:	e3400001 	movt	r0, #1
    b1cc:	e3a02050 	mov	r2, #80	; 0x50
    b1d0:	eb00048a 	bl	c400 <assertion_failed>
    b1d4:	e5940004 	ldr	r0, [r4, #4]
    b1d8:	eaffffb8 	b	b0c0 <CPageTable::CPageTable(unsigned int)+0x24>

0000b1dc <CPageTable::~CPageTable()>:
    b1dc:	e5903000 	ldr	r3, [r0]
    b1e0:	e92d4010 	push	{r4, lr}
    b1e4:	e1a04000 	mov	r4, r0
    b1e8:	e3530000 	cmp	r3, #0
    b1ec:	0a000001 	beq	b1f8 <CPageTable::~CPageTable()+0x1c>
    b1f0:	e5900004 	ldr	r0, [r0, #4]
    b1f4:	eb0011cf 	bl	f938 <pfree>
    b1f8:	e1a00004 	mov	r0, r4
    b1fc:	e8bd8010 	pop	{r4, pc}

0000b200 <CPageTable::GetBaseAddress() const>:
    b200:	e5900004 	ldr	r0, [r0, #4]
    b204:	e3800059 	orr	r0, r0, #89	; 0x59
    b208:	e12fff1e 	bx	lr

0000b20c <CScreenDevice::~CScreenDevice()>:
    b20c:	e590300c 	ldr	r3, [r0, #12]
    b210:	e59f2064 	ldr	r2, [pc, #100]	; b27c <CScreenDevice::~CScreenDevice()+0x70>
    b214:	e3530000 	cmp	r3, #0
    b218:	e92d4070 	push	{r4, r5, r6, lr}
    b21c:	e1a04000 	mov	r4, r0
    b220:	e5802000 	str	r2, [r0]
    b224:	0a000003 	beq	b238 <CScreenDevice::~CScreenDevice()+0x2c>
    b228:	e5900018 	ldr	r0, [r0, #24]
    b22c:	e3500000 	cmp	r0, #0
    b230:	0a000000 	beq	b238 <CScreenDevice::~CScreenDevice()+0x2c>
    b234:	ebfffab8 	bl	9d1c <operator delete[](void*)>
    b238:	e5945010 	ldr	r5, [r4, #16]
    b23c:	e3a03000 	mov	r3, #0
    b240:	e5843018 	str	r3, [r4, #24]
    b244:	e1550003 	cmp	r5, r3
    b248:	0a000003 	beq	b25c <CScreenDevice::~CScreenDevice()+0x50>
    b24c:	e1a00005 	mov	r0, r5
    b250:	eb0013ba 	bl	10140 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    b254:	e1a00005 	mov	r0, r5
    b258:	ebfffaae 	bl	9d18 <operator delete(void*)>
    b25c:	e3a03000 	mov	r3, #0
    b260:	e2840014 	add	r0, r4, #20
    b264:	e5843010 	str	r3, [r4, #16]
    b268:	eb000489 	bl	c494 <CCharGenerator::~CCharGenerator()>
    b26c:	e1a00004 	mov	r0, r4
    b270:	ebfffe09 	bl	aa9c <CDevice::~CDevice()>
    b274:	e1a00004 	mov	r0, r4
    b278:	e8bd8070 	pop	{r4, r5, r6, pc}
    b27c:	00010b88 	.word	0x00010b88

0000b280 <CScreenDevice::~CScreenDevice()>:
    b280:	e92d4010 	push	{r4, lr}
    b284:	e1a04000 	mov	r4, r0
    b288:	ebffffdf 	bl	b20c <CScreenDevice::~CScreenDevice()>
    b28c:	e1a00004 	mov	r0, r4
    b290:	ebfffaa0 	bl	9d18 <operator delete(void*)>
    b294:	e1a00004 	mov	r0, r4
    b298:	e8bd8010 	pop	{r4, pc}

0000b29c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>:
    b29c:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    b2a0:	e15c0002 	cmp	ip, r2
    b2a4:	8590c020 	ldrhi	ip, [r0, #32]
    b2a8:	85900018 	ldrhi	r0, [r0, #24]
    b2ac:	8022029c 	mlahi	r2, ip, r2, r0
    b2b0:	87c23001 	strbhi	r3, [r2, r1]
    b2b4:	e12fff1e 	bx	lr

0000b2b8 <CScreenDevice::InvertCursor() [clone .part.6]>:
    b2b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b2bc:	e2806014 	add	r6, r0, #20
    b2c0:	e1a04000 	mov	r4, r0
    b2c4:	e1a00006 	mov	r0, r6
    b2c8:	eb000476 	bl	c4a8 <CCharGenerator::GetUnderline() const>
    b2cc:	e1a07000 	mov	r7, r0
    b2d0:	e1a00006 	mov	r0, r6
    b2d4:	eb000471 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    b2d8:	e1500007 	cmp	r0, r7
    b2dc:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
    b2e0:	e3a05000 	mov	r5, #0
    b2e4:	ea000008 	b	b30c <CScreenDevice::InvertCursor() [clone .part.6]+0x54>
    b2e8:	e5948020 	ldr	r8, [r4, #32]
    b2ec:	e3a03000 	mov	r3, #0
    b2f0:	e5949018 	ldr	r9, [r4, #24]
    b2f4:	e0289e98 	mla	r8, r8, lr, r9
    b2f8:	e7d8800c 	ldrb	r8, [r8, ip]
    b2fc:	e1580003 	cmp	r8, r3
    b300:	0a000012 	beq	b350 <CScreenDevice::InvertCursor() [clone .part.6]+0x98>
    b304:	ebffffe4 	bl	b29c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    b308:	e2855001 	add	r5, r5, #1
    b30c:	e1a00006 	mov	r0, r6
    b310:	eb000460 	bl	c498 <CCharGenerator::GetCharWidth() const>
    b314:	e1500005 	cmp	r0, r5
    b318:	9a00000f 	bls	b35c <CScreenDevice::InvertCursor() [clone .part.6]+0xa4>
    b31c:	e594c03c 	ldr	ip, [r4, #60]	; 0x3c
    b320:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b324:	e085c00c 	add	ip, r5, ip
    b328:	e15c0003 	cmp	ip, r3
    b32c:	2afffff5 	bcs	b308 <CScreenDevice::InvertCursor() [clone .part.6]+0x50>
    b330:	e594e040 	ldr	lr, [r4, #64]	; 0x40
    b334:	e1a0100c 	mov	r1, ip
    b338:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b33c:	e1a00004 	mov	r0, r4
    b340:	e087e00e 	add	lr, r7, lr
    b344:	e15e0003 	cmp	lr, r3
    b348:	e1a0200e 	mov	r2, lr
    b34c:	3affffe5 	bcc	b2e8 <CScreenDevice::InvertCursor() [clone .part.6]+0x30>
    b350:	e5d43048 	ldrb	r3, [r4, #72]	; 0x48
    b354:	ebffffd0 	bl	b29c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    b358:	eaffffea 	b	b308 <CScreenDevice::InvertCursor() [clone .part.6]+0x50>
    b35c:	e2877001 	add	r7, r7, #1
    b360:	eaffffda 	b	b2d0 <CScreenDevice::InvertCursor() [clone .part.6]+0x18>

0000b364 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
    b364:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b368:	e1a04000 	mov	r4, r0
    b36c:	e1a06003 	mov	r6, r3
    b370:	e1a08001 	mov	r8, r1
    b374:	e1a07002 	mov	r7, r2
    b378:	ebfffdd2 	bl	aac8 <CDevice::CDevice()>
    b37c:	e59fc050 	ldr	ip, [pc, #80]	; b3d4 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)+0x70>
    b380:	e3a05000 	mov	r5, #0
    b384:	e5848004 	str	r8, [r4, #4]
    b388:	e5847008 	str	r7, [r4, #8]
    b38c:	e2840014 	add	r0, r4, #20
    b390:	e584600c 	str	r6, [r4, #12]
    b394:	e584c000 	str	ip, [r4]
    b398:	e5845010 	str	r5, [r4, #16]
    b39c:	eb000439 	bl	c488 <CCharGenerator::CCharGenerator()>
    b3a0:	e3a03001 	mov	r3, #1
    b3a4:	e5845018 	str	r5, [r4, #24]
    b3a8:	e1a00004 	mov	r0, r4
    b3ac:	e5845030 	str	r5, [r4, #48]	; 0x30
    b3b0:	e5845034 	str	r5, [r4, #52]	; 0x34
    b3b4:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b3b8:	e5845040 	str	r5, [r4, #64]	; 0x40
    b3bc:	e584504c 	str	r5, [r4, #76]	; 0x4c
    b3c0:	e5845058 	str	r5, [r4, #88]	; 0x58
    b3c4:	e5843044 	str	r3, [r4, #68]	; 0x44
    b3c8:	e5c43048 	strb	r3, [r4, #72]	; 0x48
    b3cc:	e584305c 	str	r3, [r4, #92]	; 0x5c
    b3d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b3d4:	00010b88 	.word	0x00010b88

0000b3d8 <CScreenDevice::GetWidth() const>:
    b3d8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    b3dc:	e12fff1e 	bx	lr

0000b3e0 <CScreenDevice::GetHeight() const>:
    b3e0:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    b3e4:	e12fff1e 	bx	lr

0000b3e8 <CScreenDevice::GetColumns() const>:
    b3e8:	e1a03000 	mov	r3, r0
    b3ec:	e92d4010 	push	{r4, lr}
    b3f0:	e2800014 	add	r0, r0, #20
    b3f4:	e5934024 	ldr	r4, [r3, #36]	; 0x24
    b3f8:	eb000426 	bl	c498 <CCharGenerator::GetCharWidth() const>
    b3fc:	e730f014 	udiv	r0, r4, r0
    b400:	e8bd8010 	pop	{r4, pc}

0000b404 <CScreenDevice::GetRows() const>:
    b404:	e1a03000 	mov	r3, r0
    b408:	e92d4010 	push	{r4, lr}
    b40c:	e2800014 	add	r0, r0, #20
    b410:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
    b414:	eb000421 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    b418:	e730f014 	udiv	r0, r4, r0
    b41c:	e8bd8010 	pop	{r4, pc}

0000b420 <CScreenDevice::GetStatus()>:
    b420:	e591c018 	ldr	ip, [r1, #24]
    b424:	e591201c 	ldr	r2, [r1, #28]
    b428:	e92d4070 	push	{r4, r5, r6, lr}
    b42c:	e5915030 	ldr	r5, [r1, #48]	; 0x30
    b430:	e5914034 	ldr	r4, [r1, #52]	; 0x34
    b434:	e591e038 	ldr	lr, [r1, #56]	; 0x38
    b438:	e580c000 	str	ip, [r0]
    b43c:	e5802004 	str	r2, [r0, #4]
    b440:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    b444:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    b448:	e5805008 	str	r5, [r0, #8]
    b44c:	e5916044 	ldr	r6, [r1, #68]	; 0x44
    b450:	e580400c 	str	r4, [r0, #12]
    b454:	e5d15048 	ldrb	r5, [r1, #72]	; 0x48
    b458:	e580e010 	str	lr, [r0, #16]
    b45c:	e591404c 	ldr	r4, [r1, #76]	; 0x4c
    b460:	e580c014 	str	ip, [r0, #20]
    b464:	e591e050 	ldr	lr, [r1, #80]	; 0x50
    b468:	e5802018 	str	r2, [r0, #24]
    b46c:	e591c054 	ldr	ip, [r1, #84]	; 0x54
    b470:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    b474:	e580601c 	str	r6, [r0, #28]
    b478:	e5c05020 	strb	r5, [r0, #32]
    b47c:	e5804024 	str	r4, [r0, #36]	; 0x24
    b480:	e580e028 	str	lr, [r0, #40]	; 0x28
    b484:	e580c02c 	str	ip, [r0, #44]	; 0x2c
    b488:	e5802030 	str	r2, [r0, #48]	; 0x30
    b48c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b490 <CScreenDevice::SetStatus(TScreenStatus)>:
    b490:	e24dd010 	sub	sp, sp, #16
    b494:	e92d4070 	push	{r4, r5, r6, lr}
    b498:	e28dc014 	add	ip, sp, #20
    b49c:	e88c000e 	stm	ip, {r1, r2, r3}
    b4a0:	e590201c 	ldr	r2, [r0, #28]
    b4a4:	e59d3018 	ldr	r3, [sp, #24]
    b4a8:	e1520003 	cmp	r2, r3
    b4ac:	0a000003 	beq	b4c0 <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    b4b0:	e3a00000 	mov	r0, #0
    b4b4:	e8bd4070 	pop	{r4, r5, r6, lr}
    b4b8:	e28dd010 	add	sp, sp, #16
    b4bc:	e12fff1e 	bx	lr
    b4c0:	e5901020 	ldr	r1, [r0, #32]
    b4c4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b4c8:	e1510003 	cmp	r1, r3
    b4cc:	1afffff7 	bne	b4b0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b4d0:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    b4d4:	e1a04000 	mov	r4, r0
    b4d8:	e3530000 	cmp	r3, #0
    b4dc:	1a000020 	bne	b564 <CScreenDevice::SetStatus(TScreenStatus)+0xd4>
    b4e0:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    b4e4:	e3530000 	cmp	r3, #0
    b4e8:	1afffff0 	bne	b4b0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b4ec:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    b4f0:	e3530000 	cmp	r3, #0
    b4f4:	1affffed 	bne	b4b0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b4f8:	e59d1014 	ldr	r1, [sp, #20]
    b4fc:	e5940018 	ldr	r0, [r4, #24]
    b500:	ebfffd4e 	bl	aa40 <memcpy>
    b504:	e28d2020 	add	r2, sp, #32
    b508:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    b50c:	e59d101c 	ldr	r1, [sp, #28]
    b510:	e3530000 	cmp	r3, #0
    b514:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
    b518:	e892402c 	ldm	r2, {r2, r3, r5, lr}
    b51c:	e5841030 	str	r1, [r4, #48]	; 0x30
    b520:	e5dd0034 	ldrb	r0, [sp, #52]	; 0x34
    b524:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    b528:	e5842034 	str	r2, [r4, #52]	; 0x34
    b52c:	e5843038 	str	r3, [r4, #56]	; 0x38
    b530:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    b534:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    b538:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b53c:	e584e040 	str	lr, [r4, #64]	; 0x40
    b540:	e584c044 	str	ip, [r4, #68]	; 0x44
    b544:	e5c40048 	strb	r0, [r4, #72]	; 0x48
    b548:	e584104c 	str	r1, [r4, #76]	; 0x4c
    b54c:	e5842050 	str	r2, [r4, #80]	; 0x50
    b550:	e5843054 	str	r3, [r4, #84]	; 0x54
    b554:	1a00000f 	bne	b598 <CScreenDevice::SetStatus(TScreenStatus)+0x108>
    b558:	f57ff05f 	dmb	sy
    b55c:	e3a00001 	mov	r0, #1
    b560:	eaffffd3 	b	b4b4 <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    b564:	ebfff9ed 	bl	9d20 <EnterCritical>
    b568:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    b56c:	e3530000 	cmp	r3, #0
    b570:	1a000003 	bne	b584 <CScreenDevice::SetStatus(TScreenStatus)+0xf4>
    b574:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    b578:	e3530000 	cmp	r3, #0
    b57c:	0594201c 	ldreq	r2, [r4, #28]
    b580:	0affffdc 	beq	b4f8 <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    b584:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    b588:	e3530000 	cmp	r3, #0
    b58c:	0affffc7 	beq	b4b0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b590:	ebfff9ef 	bl	9d54 <LeaveCritical>
    b594:	eaffffc5 	b	b4b0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b598:	ebfff9ed 	bl	9d54 <LeaveCritical>
    b59c:	eaffffed 	b	b558 <CScreenDevice::SetStatus(TScreenStatus)+0xc8>

0000b5a0 <CScreenDevice::CarriageReturn()>:
    b5a0:	e3a03000 	mov	r3, #0
    b5a4:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b5a8:	e12fff1e 	bx	lr

0000b5ac <CScreenDevice::CursorHome()>:
    b5ac:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b5b0:	e3a02000 	mov	r2, #0
    b5b4:	e580203c 	str	r2, [r0, #60]	; 0x3c
    b5b8:	e5803040 	str	r3, [r0, #64]	; 0x40
    b5bc:	e12fff1e 	bx	lr

0000b5c0 <CScreenDevice::CursorLeft()>:
    b5c0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    b5c4:	e92d4070 	push	{r4, r5, r6, lr}
    b5c8:	e1a04000 	mov	r4, r0
    b5cc:	e3530000 	cmp	r3, #0
    b5d0:	1a00000f 	bne	b614 <CScreenDevice::CursorLeft()+0x54>
    b5d4:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b5d8:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b5dc:	e1520003 	cmp	r2, r3
    b5e0:	98bd8070 	popls	{r4, r5, r6, pc}
    b5e4:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    b5e8:	e2806014 	add	r6, r0, #20
    b5ec:	e1a00006 	mov	r0, r6
    b5f0:	eb0003a8 	bl	c498 <CCharGenerator::GetCharWidth() const>
    b5f4:	e0450000 	sub	r0, r5, r0
    b5f8:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b5fc:	e1a00006 	mov	r0, r6
    b600:	eb0003a6 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    b604:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b608:	e0430000 	sub	r0, r3, r0
    b60c:	e5840040 	str	r0, [r4, #64]	; 0x40
    b610:	e8bd8070 	pop	{r4, r5, r6, pc}
    b614:	e2800014 	add	r0, r0, #20
    b618:	eb00039e 	bl	c498 <CCharGenerator::GetCharWidth() const>
    b61c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    b620:	e0430000 	sub	r0, r3, r0
    b624:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b628:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b62c <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    b62c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b630:	e1a04002 	mov	r4, r2
    b634:	e2444001 	sub	r4, r4, #1
    b638:	e1a05000 	mov	r5, r0
    b63c:	e2806014 	add	r6, r0, #20
    b640:	e1a00006 	mov	r0, r6
    b644:	e1a07001 	mov	r7, r1
    b648:	eb000392 	bl	c498 <CCharGenerator::GetCharWidth() const>
    b64c:	e0040490 	mul	r4, r0, r4
    b650:	e1a00006 	mov	r0, r6
    b654:	eb000391 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    b658:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    b65c:	e1540003 	cmp	r4, r3
    b660:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    b664:	e2477001 	sub	r7, r7, #1
    b668:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    b66c:	e0000790 	mul	r0, r0, r7
    b670:	e1500003 	cmp	r0, r3
    b674:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    b678:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    b67c:	e1500003 	cmp	r0, r3
    b680:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    b684:	35850040 	strcc	r0, [r5, #64]	; 0x40
    b688:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b68c <CScreenDevice::CursorUp()>:
    b68c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b690:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b694:	e1520003 	cmp	r2, r3
    b698:	912fff1e 	bxls	lr
    b69c:	e92d4010 	push	{r4, lr}
    b6a0:	e1a04000 	mov	r4, r0
    b6a4:	e2800014 	add	r0, r0, #20
    b6a8:	eb00037c 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    b6ac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b6b0:	e0430000 	sub	r0, r3, r0
    b6b4:	e5840040 	str	r0, [r4, #64]	; 0x40
    b6b8:	e8bd8010 	pop	{r4, pc}

0000b6bc <CScreenDevice::DeleteChars(unsigned int)>:
    b6bc:	e12fff1e 	bx	lr

0000b6c0 <CScreenDevice::DeleteLines(unsigned int)>:
    b6c0:	e12fff1e 	bx	lr

0000b6c4 <CScreenDevice::InsertLines(unsigned int)>:
    b6c4:	e12fff1e 	bx	lr

0000b6c8 <CScreenDevice::InsertMode(int)>:
    b6c8:	e580104c 	str	r1, [r0, #76]	; 0x4c
    b6cc:	e12fff1e 	bx	lr

0000b6d0 <CScreenDevice::ReverseScroll()>:
    b6d0:	e12fff1e 	bx	lr

0000b6d4 <CScreenDevice::SetCursorMode(int)>:
    b6d4:	e5801044 	str	r1, [r0, #68]	; 0x44
    b6d8:	e12fff1e 	bx	lr

0000b6dc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    b6dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b6e0:	e1a04001 	mov	r4, r1
    b6e4:	e2444001 	sub	r4, r4, #1
    b6e8:	e1a06000 	mov	r6, r0
    b6ec:	e1a05002 	mov	r5, r2
    b6f0:	e2807014 	add	r7, r0, #20
    b6f4:	e1a00007 	mov	r0, r7
    b6f8:	eb000368 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    b6fc:	e0040490 	mul	r4, r0, r4
    b700:	e1a00007 	mov	r0, r7
    b704:	eb000365 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    b708:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    b70c:	e0000095 	mul	r0, r5, r0
    b710:	e3500000 	cmp	r0, #0
    b714:	11540002 	cmpne	r4, r2
    b718:	33a03001 	movcc	r3, #1
    b71c:	23a03000 	movcs	r3, #0
    b720:	e1500002 	cmp	r0, r2
    b724:	83a03000 	movhi	r3, #0
    b728:	92033001 	andls	r3, r3, #1
    b72c:	e1540000 	cmp	r4, r0
    b730:	23a03000 	movcs	r3, #0
    b734:	32033001 	andcc	r3, r3, #1
    b738:	e3530000 	cmp	r3, #0
    b73c:	e3a03000 	mov	r3, #0
    b740:	15864034 	strne	r4, [r6, #52]	; 0x34
    b744:	15860038 	strne	r0, [r6, #56]	; 0x38
    b748:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    b74c:	e586303c 	str	r3, [r6, #60]	; 0x3c
    b750:	e5864040 	str	r4, [r6, #64]	; 0x40
    b754:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b758 <CScreenDevice::SetStandoutMode(unsigned int)>:
    b758:	e351001b 	cmp	r1, #27
    b75c:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    b760:	ea00001d 	b	b7dc <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    b764:	0000b7ec 	.word	0x0000b7ec
    b768:	0000b7e0 	.word	0x0000b7e0
    b76c:	0000b7d4 	.word	0x0000b7d4
    b770:	0000b7dc 	.word	0x0000b7dc
    b774:	0000b7dc 	.word	0x0000b7dc
    b778:	0000b7dc 	.word	0x0000b7dc
    b77c:	0000b7dc 	.word	0x0000b7dc
    b780:	0000b7dc 	.word	0x0000b7dc
    b784:	0000b7dc 	.word	0x0000b7dc
    b788:	0000b7dc 	.word	0x0000b7dc
    b78c:	0000b7dc 	.word	0x0000b7dc
    b790:	0000b7dc 	.word	0x0000b7dc
    b794:	0000b7dc 	.word	0x0000b7dc
    b798:	0000b7dc 	.word	0x0000b7dc
    b79c:	0000b7dc 	.word	0x0000b7dc
    b7a0:	0000b7dc 	.word	0x0000b7dc
    b7a4:	0000b7dc 	.word	0x0000b7dc
    b7a8:	0000b7dc 	.word	0x0000b7dc
    b7ac:	0000b7dc 	.word	0x0000b7dc
    b7b0:	0000b7dc 	.word	0x0000b7dc
    b7b4:	0000b7dc 	.word	0x0000b7dc
    b7b8:	0000b7dc 	.word	0x0000b7dc
    b7bc:	0000b7dc 	.word	0x0000b7dc
    b7c0:	0000b7dc 	.word	0x0000b7dc
    b7c4:	0000b7dc 	.word	0x0000b7dc
    b7c8:	0000b7dc 	.word	0x0000b7dc
    b7cc:	0000b7dc 	.word	0x0000b7dc
    b7d0:	0000b7ec 	.word	0x0000b7ec
    b7d4:	e3a03003 	mov	r3, #3
    b7d8:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    b7dc:	e12fff1e 	bx	lr
    b7e0:	e3a03002 	mov	r3, #2
    b7e4:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    b7e8:	e12fff1e 	bx	lr
    b7ec:	e3a03001 	mov	r3, #1
    b7f0:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    b7f4:	e12fff1e 	bx	lr

0000b7f8 <CScreenDevice::Scroll()>:
    b7f8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b7fc:	e1a05000 	mov	r5, r0
    b800:	e2800014 	add	r0, r0, #20
    b804:	eb000325 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    b808:	e1a06000 	mov	r6, r0
    b80c:	e5952034 	ldr	r2, [r5, #52]	; 0x34
    b810:	e5954038 	ldr	r4, [r5, #56]	; 0x38
    b814:	e5953020 	ldr	r3, [r5, #32]
    b818:	e0444002 	sub	r4, r4, r2
    b81c:	e5951018 	ldr	r1, [r5, #24]
    b820:	e0444000 	sub	r4, r4, r0
    b824:	e0271293 	mla	r7, r3, r2, r1
    b828:	e0040493 	mul	r4, r3, r4
    b82c:	e3540000 	cmp	r4, #0
    b830:	1a000007 	bne	b854 <CScreenDevice::Scroll()+0x5c>
    b834:	e0030693 	mul	r3, r3, r6
    b838:	e1b03123 	lsrs	r3, r3, #2
    b83c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    b840:	e1a00007 	mov	r0, r7
    b844:	e1a02103 	lsl	r2, r3, #2
    b848:	e3a01000 	mov	r1, #0
    b84c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    b850:	ea0010b3 	b	fb24 <memset>
    b854:	e0808002 	add	r8, r0, r2
    b858:	e3c4900f 	bic	r9, r4, #15
    b85c:	e1a02009 	mov	r2, r9
    b860:	e1a00007 	mov	r0, r7
    b864:	e0281893 	mla	r8, r3, r8, r1
    b868:	e1a01008 	mov	r1, r8
    b86c:	ebfffc73 	bl	aa40 <memcpy>
    b870:	e0870009 	add	r0, r7, r9
    b874:	e204200f 	and	r2, r4, #15
    b878:	e0881009 	add	r1, r8, r9
    b87c:	e3c44003 	bic	r4, r4, #3
    b880:	ebfffc6e 	bl	aa40 <memcpy>
    b884:	e0877004 	add	r7, r7, r4
    b888:	e5953020 	ldr	r3, [r5, #32]
    b88c:	eaffffe8 	b	b834 <CScreenDevice::Scroll()+0x3c>

0000b890 <CScreenDevice::CursorDown()>:
    b890:	e92d4070 	push	{r4, r5, r6, lr}
    b894:	e1a04000 	mov	r4, r0
    b898:	e2805014 	add	r5, r0, #20
    b89c:	e1a00005 	mov	r0, r5
    b8a0:	eb0002fe 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    b8a4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b8a8:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    b8ac:	e0800003 	add	r0, r0, r3
    b8b0:	e1500002 	cmp	r0, r2
    b8b4:	e5840040 	str	r0, [r4, #64]	; 0x40
    b8b8:	38bd8070 	popcc	{r4, r5, r6, pc}
    b8bc:	e1a00004 	mov	r0, r4
    b8c0:	ebffffcc 	bl	b7f8 <CScreenDevice::Scroll()>
    b8c4:	e1a00005 	mov	r0, r5
    b8c8:	eb0002f4 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    b8cc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b8d0:	e0430000 	sub	r0, r3, r0
    b8d4:	e5840040 	str	r0, [r4, #64]	; 0x40
    b8d8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b8dc <CScreenDevice::NewLine()>:
    b8dc:	e3a02000 	mov	r2, #0
    b8e0:	e580203c 	str	r2, [r0, #60]	; 0x3c
    b8e4:	eaffffe9 	b	b890 <CScreenDevice::CursorDown()>

0000b8e8 <CScreenDevice::CursorRight()>:
    b8e8:	e92d4010 	push	{r4, lr}
    b8ec:	e1a04000 	mov	r4, r0
    b8f0:	e2800014 	add	r0, r0, #20
    b8f4:	eb0002e7 	bl	c498 <CCharGenerator::GetCharWidth() const>
    b8f8:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    b8fc:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    b900:	e0800003 	add	r0, r0, r3
    b904:	e1500002 	cmp	r0, r2
    b908:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b90c:	38bd8010 	popcc	{r4, pc}
    b910:	e3a03000 	mov	r3, #0
    b914:	e1a00004 	mov	r0, r4
    b918:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b91c:	e8bd4010 	pop	{r4, lr}
    b920:	eaffffda 	b	b890 <CScreenDevice::CursorDown()>

0000b924 <CScreenDevice::Tabulator()>:
    b924:	e92d4010 	push	{r4, lr}
    b928:	e1a04000 	mov	r4, r0
    b92c:	e2800014 	add	r0, r0, #20
    b930:	eb0002d8 	bl	c498 <CCharGenerator::GetCharWidth() const>
    b934:	e1a00180 	lsl	r0, r0, #3
    b938:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    b93c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    b940:	e0803003 	add	r3, r0, r3
    b944:	e733f013 	udiv	r3, r3, r0
    b948:	e0000390 	mul	r0, r0, r3
    b94c:	e1500002 	cmp	r0, r2
    b950:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b954:	38bd8010 	popcc	{r4, pc}
    b958:	e3a03000 	mov	r3, #0
    b95c:	e1a00004 	mov	r0, r4
    b960:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b964:	e8bd4010 	pop	{r4, lr}
    b968:	eaffffc8 	b	b890 <CScreenDevice::CursorDown()>

0000b96c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>:
    b96c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b970:	e2806014 	add	r6, r0, #20
    b974:	e1a08000 	mov	r8, r0
    b978:	e24dd00c 	sub	sp, sp, #12
    b97c:	e3a07000 	mov	r7, #0
    b980:	e1a00006 	mov	r0, r6
    b984:	e1a0a001 	mov	sl, r1
    b988:	e1a09002 	mov	r9, r2
    b98c:	e5ddb030 	ldrb	fp, [sp, #48]	; 0x30
    b990:	e58d3004 	str	r3, [sp, #4]
    b994:	eb0002c1 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    b998:	e1570000 	cmp	r7, r0
    b99c:	2a00001e 	bcs	ba1c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0xb0>
    b9a0:	e59d3004 	ldr	r3, [sp, #4]
    b9a4:	e3a04000 	mov	r4, #0
    b9a8:	e0873003 	add	r3, r7, r3
    b9ac:	e58d3000 	str	r3, [sp]
    b9b0:	e1a00006 	mov	r0, r6
    b9b4:	e0845009 	add	r5, r4, r9
    b9b8:	eb0002b6 	bl	c498 <CCharGenerator::GetCharWidth() const>
    b9bc:	e1540000 	cmp	r4, r0
    b9c0:	e1a02004 	mov	r2, r4
    b9c4:	e1a03007 	mov	r3, r7
    b9c8:	e1a0100a 	mov	r1, sl
    b9cc:	e1a00006 	mov	r0, r6
    b9d0:	e2844001 	add	r4, r4, #1
    b9d4:	2a00000b 	bcs	ba08 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x9c>
    b9d8:	eb0002b4 	bl	c4b0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    b9dc:	e5982024 	ldr	r2, [r8, #36]	; 0x24
    b9e0:	e3500000 	cmp	r0, #0
    b9e4:	11a0300b 	movne	r3, fp
    b9e8:	03a03000 	moveq	r3, #0
    b9ec:	e1550002 	cmp	r5, r2
    b9f0:	2affffee 	bcs	b9b0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x44>
    b9f4:	e1a01005 	mov	r1, r5
    b9f8:	e59d2000 	ldr	r2, [sp]
    b9fc:	e1a00008 	mov	r0, r8
    ba00:	ebfffe25 	bl	b29c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    ba04:	eaffffe9 	b	b9b0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x44>
    ba08:	e2877001 	add	r7, r7, #1
    ba0c:	e1a00006 	mov	r0, r6
    ba10:	eb0002a2 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    ba14:	e1570000 	cmp	r7, r0
    ba18:	3affffe0 	bcc	b9a0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x34>
    ba1c:	e28dd00c 	add	sp, sp, #12
    ba20:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ba24 <CScreenDevice::DisplayChar(char)>:
    ba24:	e6ef3071 	uxtb	r3, r1
    ba28:	e353001f 	cmp	r3, #31
    ba2c:	912fff1e 	bxls	lr
    ba30:	e92d4010 	push	{r4, lr}
    ba34:	e1a04000 	mov	r4, r0
    ba38:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    ba3c:	e24dd008 	sub	sp, sp, #8
    ba40:	e5d0c048 	ldrb	ip, [r0, #72]	; 0x48
    ba44:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    ba48:	e58dc000 	str	ip, [sp]
    ba4c:	ebffffc6 	bl	b96c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    ba50:	e1a00004 	mov	r0, r4
    ba54:	e28dd008 	add	sp, sp, #8
    ba58:	e8bd4010 	pop	{r4, lr}
    ba5c:	eaffffa1 	b	b8e8 <CScreenDevice::CursorRight()>

0000ba60 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    ba60:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ba64:	e1a05000 	mov	r5, r0
    ba68:	e1a07001 	mov	r7, r1
    ba6c:	e1a0a002 	mov	sl, r2
    ba70:	e2806014 	add	r6, r0, #20
    ba74:	e3a08000 	mov	r8, #0
    ba78:	e1a00006 	mov	r0, r6
    ba7c:	eb000287 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    ba80:	e1580000 	cmp	r8, r0
    ba84:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
    ba88:	e3a04000 	mov	r4, #0
    ba8c:	e088900a 	add	r9, r8, sl
    ba90:	e1a00006 	mov	r0, r6
    ba94:	eb00027f 	bl	c498 <CCharGenerator::GetCharWidth() const>
    ba98:	e1540000 	cmp	r4, r0
    ba9c:	e0841007 	add	r1, r4, r7
    baa0:	e2844001 	add	r4, r4, #1
    baa4:	2a000007 	bcs	bac8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x68>
    baa8:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    baac:	e1510003 	cmp	r1, r3
    bab0:	2afffff6 	bcs	ba90 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    bab4:	e3a03000 	mov	r3, #0
    bab8:	e1a02009 	mov	r2, r9
    babc:	e1a00005 	mov	r0, r5
    bac0:	ebfffdf5 	bl	b29c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    bac4:	eafffff1 	b	ba90 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    bac8:	e2888001 	add	r8, r8, #1
    bacc:	eaffffe9 	b	ba78 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x18>

0000bad0 <CScreenDevice::ClearLineEnd()>:
    bad0:	e92d4070 	push	{r4, r5, r6, lr}
    bad4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bad8:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    badc:	e1540003 	cmp	r4, r3
    bae0:	28bd8070 	popcs	{r4, r5, r6, pc}
    bae4:	e1a05000 	mov	r5, r0
    bae8:	e2806014 	add	r6, r0, #20
    baec:	e1a01004 	mov	r1, r4
    baf0:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    baf4:	e1a00005 	mov	r0, r5
    baf8:	ebffffd8 	bl	ba60 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bafc:	e1a00006 	mov	r0, r6
    bb00:	eb000264 	bl	c498 <CCharGenerator::GetCharWidth() const>
    bb04:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bb08:	e0844000 	add	r4, r4, r0
    bb0c:	e1530004 	cmp	r3, r4
    bb10:	8afffff5 	bhi	baec <CScreenDevice::ClearLineEnd()+0x1c>
    bb14:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bb18 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    bb18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bb1c:	e1a05000 	mov	r5, r0
    bb20:	e1a06001 	mov	r6, r1
    bb24:	e2807014 	add	r7, r0, #20
    bb28:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    bb2c:	e1a00007 	mov	r0, r7
    bb30:	eb000258 	bl	c498 <CCharGenerator::GetCharWidth() const>
    bb34:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bb38:	e0264096 	mla	r6, r6, r0, r4
    bb3c:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    bb40:	e1560003 	cmp	r6, r3
    bb44:	21a06003 	movcs	r6, r3
    bb48:	e1540006 	cmp	r4, r6
    bb4c:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    bb50:	e1a01004 	mov	r1, r4
    bb54:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bb58:	e1a00005 	mov	r0, r5
    bb5c:	ebffffbf 	bl	ba60 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bb60:	e1a00007 	mov	r0, r7
    bb64:	eb00024b 	bl	c498 <CCharGenerator::GetCharWidth() const>
    bb68:	e0844000 	add	r4, r4, r0
    bb6c:	e1540006 	cmp	r4, r6
    bb70:	3afffff6 	bcc	bb50 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    bb74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000bb78 <CScreenDevice::EraseChars(unsigned int)>:
    bb78:	e3510000 	cmp	r1, #0
    bb7c:	012fff1e 	bxeq	lr
    bb80:	eaffffe4 	b	bb18 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000bb84 <CScreenDevice::ClearDisplayEnd()>:
    bb84:	e92d4070 	push	{r4, r5, r6, lr}
    bb88:	e1a05000 	mov	r5, r0
    bb8c:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    bb90:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bb94:	e2806014 	add	r6, r0, #20
    bb98:	e1540003 	cmp	r4, r3
    bb9c:	2a000009 	bcs	bbc8 <CScreenDevice::ClearDisplayEnd()+0x44>
    bba0:	e1a01004 	mov	r1, r4
    bba4:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bba8:	e1a00005 	mov	r0, r5
    bbac:	ebffffab 	bl	ba60 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bbb0:	e1a00006 	mov	r0, r6
    bbb4:	eb000237 	bl	c498 <CCharGenerator::GetCharWidth() const>
    bbb8:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bbbc:	e0844000 	add	r4, r4, r0
    bbc0:	e1530004 	cmp	r3, r4
    bbc4:	8afffff5 	bhi	bba0 <CScreenDevice::ClearDisplayEnd()+0x1c>
    bbc8:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    bbcc:	e1a00006 	mov	r0, r6
    bbd0:	eb000232 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    bbd4:	e5953020 	ldr	r3, [r5, #32]
    bbd8:	e0840000 	add	r0, r4, r0
    bbdc:	e595201c 	ldr	r2, [r5, #28]
    bbe0:	e5951018 	ldr	r1, [r5, #24]
    bbe4:	e0000093 	mul	r0, r3, r0
    bbe8:	e0522000 	subs	r2, r2, r0
    bbec:	0a000003 	beq	bc00 <CScreenDevice::ClearDisplayEnd()+0x7c>
    bbf0:	e0810000 	add	r0, r1, r0
    bbf4:	e3a01000 	mov	r1, #0
    bbf8:	e8bd4070 	pop	{r4, r5, r6, lr}
    bbfc:	ea000fc8 	b	fb24 <memset>
    bc00:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bc04 <CScreenDevice::Write(char)>:
    bc04:	e92d4010 	push	{r4, lr}
    bc08:	e1a04000 	mov	r4, r0
    bc0c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    bc10:	e24dd008 	sub	sp, sp, #8
    bc14:	e3530007 	cmp	r3, #7
    bc18:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bc1c:	ea000010 	b	bc64 <CScreenDevice::Write(char)+0x60>
    bc20:	0000bcb0 	.word	0x0000bcb0
    bc24:	0000bd10 	.word	0x0000bd10
    bc28:	0000bd2c 	.word	0x0000bd2c
    bc2c:	0000bd84 	.word	0x0000bd84
    bc30:	0000be60 	.word	0x0000be60
    bc34:	0000be80 	.word	0x0000be80
    bc38:	0000bea0 	.word	0x0000bea0
    bc3c:	0000bc74 	.word	0x0000bc74
    bc40:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    bc44:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    bc48:	e1520003 	cmp	r2, r3
    bc4c:	2a000004 	bcs	bc64 <CScreenDevice::Write(char)+0x60>
    bc50:	e2800014 	add	r0, r0, #20
    bc54:	eb000211 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    bc58:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bc5c:	e0433000 	sub	r3, r3, r0
    bc60:	e5843040 	str	r3, [r4, #64]	; 0x40
    bc64:	e3a03000 	mov	r3, #0
    bc68:	e5843030 	str	r3, [r4, #48]	; 0x30
    bc6c:	e28dd008 	add	sp, sp, #8
    bc70:	e8bd8010 	pop	{r4, pc}
    bc74:	e3510068 	cmp	r1, #104	; 0x68
    bc78:	0a000097 	beq	bedc <CScreenDevice::Write(char)+0x2d8>
    bc7c:	e351006c 	cmp	r1, #108	; 0x6c
    bc80:	0a000095 	beq	bedc <CScreenDevice::Write(char)+0x2d8>
    bc84:	e2411030 	sub	r1, r1, #48	; 0x30
    bc88:	e6ef3071 	uxtb	r3, r1
    bc8c:	e3530009 	cmp	r3, #9
    bc90:	8afffff3 	bhi	bc64 <CScreenDevice::Write(char)+0x60>
    bc94:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    bc98:	e3a0200a 	mov	r2, #10
    bc9c:	e0211392 	mla	r1, r2, r3, r1
    bca0:	e3510063 	cmp	r1, #99	; 0x63
    bca4:	e5841050 	str	r1, [r4, #80]	; 0x50
    bca8:	8affffed 	bhi	bc64 <CScreenDevice::Write(char)+0x60>
    bcac:	eaffffee 	b	bc6c <CScreenDevice::Write(char)+0x68>
    bcb0:	e2413008 	sub	r3, r1, #8
    bcb4:	e3530013 	cmp	r3, #19
    bcb8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bcbc:	ea0000ec 	b	c074 <CScreenDevice::Write(char)+0x470>
    bcc0:	0000bf48 	.word	0x0000bf48
    bcc4:	0000bf3c 	.word	0x0000bf3c
    bcc8:	0000bf28 	.word	0x0000bf28
    bccc:	0000c074 	.word	0x0000c074
    bcd0:	0000c074 	.word	0x0000c074
    bcd4:	0000bf1c 	.word	0x0000bf1c
    bcd8:	0000c074 	.word	0x0000c074
    bcdc:	0000c074 	.word	0x0000c074
    bce0:	0000c074 	.word	0x0000c074
    bce4:	0000c074 	.word	0x0000c074
    bce8:	0000c074 	.word	0x0000c074
    bcec:	0000c074 	.word	0x0000c074
    bcf0:	0000c074 	.word	0x0000c074
    bcf4:	0000c074 	.word	0x0000c074
    bcf8:	0000c074 	.word	0x0000c074
    bcfc:	0000c074 	.word	0x0000c074
    bd00:	0000c074 	.word	0x0000c074
    bd04:	0000c074 	.word	0x0000c074
    bd08:	0000c074 	.word	0x0000c074
    bd0c:	0000bf10 	.word	0x0000bf10
    bd10:	e351004d 	cmp	r1, #77	; 0x4d
    bd14:	0affffd2 	beq	bc64 <CScreenDevice::Write(char)+0x60>
    bd18:	e351005b 	cmp	r1, #91	; 0x5b
    bd1c:	03a03002 	moveq	r3, #2
    bd20:	05803030 	streq	r3, [r0, #48]	; 0x30
    bd24:	0affffd0 	beq	bc6c <CScreenDevice::Write(char)+0x68>
    bd28:	eaffffcd 	b	bc64 <CScreenDevice::Write(char)+0x60>
    bd2c:	e241303f 	sub	r3, r1, #63	; 0x3f
    bd30:	e3530011 	cmp	r3, #17
    bd34:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bd38:	ea0000d9 	b	c0a4 <CScreenDevice::Write(char)+0x4a0>
    bd3c:	0000c030 	.word	0x0000c030
    bd40:	0000c0a4 	.word	0x0000c0a4
    bd44:	0000bc40 	.word	0x0000bc40
    bd48:	0000c064 	.word	0x0000c064
    bd4c:	0000c054 	.word	0x0000c054
    bd50:	0000c0a4 	.word	0x0000c0a4
    bd54:	0000c0a4 	.word	0x0000c0a4
    bd58:	0000c0a4 	.word	0x0000c0a4
    bd5c:	0000c0a4 	.word	0x0000c0a4
    bd60:	0000c03c 	.word	0x0000c03c
    bd64:	0000c0a4 	.word	0x0000c0a4
    bd68:	0000c020 	.word	0x0000c020
    bd6c:	0000c010 	.word	0x0000c010
    bd70:	0000bc64 	.word	0x0000bc64
    bd74:	0000bc64 	.word	0x0000bc64
    bd78:	0000c0a4 	.word	0x0000c0a4
    bd7c:	0000c0a4 	.word	0x0000c0a4
    bd80:	0000bc64 	.word	0x0000bc64
    bd84:	e241303b 	sub	r3, r1, #59	; 0x3b
    bd88:	e3530032 	cmp	r3, #50	; 0x32
    bd8c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bd90:	eaffffbb 	b	bc84 <CScreenDevice::Write(char)+0x80>
    bd94:	0000c004 	.word	0x0000c004
    bd98:	0000bc84 	.word	0x0000bc84
    bd9c:	0000bc84 	.word	0x0000bc84
    bda0:	0000bc84 	.word	0x0000bc84
    bda4:	0000bc84 	.word	0x0000bc84
    bda8:	0000bc84 	.word	0x0000bc84
    bdac:	0000bc84 	.word	0x0000bc84
    bdb0:	0000bc84 	.word	0x0000bc84
    bdb4:	0000bc84 	.word	0x0000bc84
    bdb8:	0000bc84 	.word	0x0000bc84
    bdbc:	0000bc84 	.word	0x0000bc84
    bdc0:	0000bc84 	.word	0x0000bc84
    bdc4:	0000bc84 	.word	0x0000bc84
    bdc8:	0000bc84 	.word	0x0000bc84
    bdcc:	0000bc84 	.word	0x0000bc84
    bdd0:	0000bc84 	.word	0x0000bc84
    bdd4:	0000bc84 	.word	0x0000bc84
    bdd8:	0000bc64 	.word	0x0000bc64
    bddc:	0000bc64 	.word	0x0000bc64
    bde0:	0000bc84 	.word	0x0000bc84
    bde4:	0000bc84 	.word	0x0000bc84
    bde8:	0000bc64 	.word	0x0000bc64
    bdec:	0000bc84 	.word	0x0000bc84
    bdf0:	0000bc84 	.word	0x0000bc84
    bdf4:	0000bc84 	.word	0x0000bc84
    bdf8:	0000bc84 	.word	0x0000bc84
    bdfc:	0000bc84 	.word	0x0000bc84
    be00:	0000bc84 	.word	0x0000bc84
    be04:	0000bc84 	.word	0x0000bc84
    be08:	0000bf54 	.word	0x0000bf54
    be0c:	0000bc84 	.word	0x0000bc84
    be10:	0000bc84 	.word	0x0000bc84
    be14:	0000bc84 	.word	0x0000bc84
    be18:	0000bc84 	.word	0x0000bc84
    be1c:	0000bc84 	.word	0x0000bc84
    be20:	0000bc84 	.word	0x0000bc84
    be24:	0000bc84 	.word	0x0000bc84
    be28:	0000bc84 	.word	0x0000bc84
    be2c:	0000bc84 	.word	0x0000bc84
    be30:	0000bc84 	.word	0x0000bc84
    be34:	0000bc84 	.word	0x0000bc84
    be38:	0000bc84 	.word	0x0000bc84
    be3c:	0000bc84 	.word	0x0000bc84
    be40:	0000bc84 	.word	0x0000bc84
    be44:	0000bc84 	.word	0x0000bc84
    be48:	0000bf68 	.word	0x0000bf68
    be4c:	0000bc84 	.word	0x0000bc84
    be50:	0000bc84 	.word	0x0000bc84
    be54:	0000bc84 	.word	0x0000bc84
    be58:	0000bf68 	.word	0x0000bf68
    be5c:	0000bf84 	.word	0x0000bf84
    be60:	e2411030 	sub	r1, r1, #48	; 0x30
    be64:	e6ef3071 	uxtb	r3, r1
    be68:	e3530009 	cmp	r3, #9
    be6c:	8affff7c 	bhi	bc64 <CScreenDevice::Write(char)+0x60>
    be70:	e3a03007 	mov	r3, #7
    be74:	e5801050 	str	r1, [r0, #80]	; 0x50
    be78:	e5803030 	str	r3, [r0, #48]	; 0x30
    be7c:	eaffff7a 	b	bc6c <CScreenDevice::Write(char)+0x68>
    be80:	e2411030 	sub	r1, r1, #48	; 0x30
    be84:	e6ef3071 	uxtb	r3, r1
    be88:	e3530009 	cmp	r3, #9
    be8c:	8affff74 	bhi	bc64 <CScreenDevice::Write(char)+0x60>
    be90:	e3a03006 	mov	r3, #6
    be94:	e5801054 	str	r1, [r0, #84]	; 0x54
    be98:	e5803030 	str	r3, [r0, #48]	; 0x30
    be9c:	eaffff72 	b	bc6c <CScreenDevice::Write(char)+0x68>
    bea0:	e3510048 	cmp	r1, #72	; 0x48
    bea4:	0a00008f 	beq	c0e8 <CScreenDevice::Write(char)+0x4e4>
    bea8:	e3510072 	cmp	r1, #114	; 0x72
    beac:	0a000011 	beq	bef8 <CScreenDevice::Write(char)+0x2f4>
    beb0:	e2411030 	sub	r1, r1, #48	; 0x30
    beb4:	e6ef3071 	uxtb	r3, r1
    beb8:	e3530009 	cmp	r3, #9
    bebc:	8affff68 	bhi	bc64 <CScreenDevice::Write(char)+0x60>
    bec0:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    bec4:	e3a0200a 	mov	r2, #10
    bec8:	e0211392 	mla	r1, r2, r3, r1
    becc:	e35100c7 	cmp	r1, #199	; 0xc7
    bed0:	e5801054 	str	r1, [r0, #84]	; 0x54
    bed4:	8affff62 	bhi	bc64 <CScreenDevice::Write(char)+0x60>
    bed8:	eaffff63 	b	bc6c <CScreenDevice::Write(char)+0x68>
    bedc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    bee0:	e3530019 	cmp	r3, #25
    bee4:	02411068 	subeq	r1, r1, #104	; 0x68
    bee8:	016f1f11 	clzeq	r1, r1
    beec:	01a012a1 	lsreq	r1, r1, #5
    bef0:	05841044 	streq	r1, [r4, #68]	; 0x44
    bef4:	eaffff5a 	b	bc64 <CScreenDevice::Write(char)+0x60>
    bef8:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    befc:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    bf00:	ebfffdf5 	bl	b6dc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    bf04:	e3a03000 	mov	r3, #0
    bf08:	e5843030 	str	r3, [r4, #48]	; 0x30
    bf0c:	eaffff56 	b	bc6c <CScreenDevice::Write(char)+0x68>
    bf10:	e3a03001 	mov	r3, #1
    bf14:	e5803030 	str	r3, [r0, #48]	; 0x30
    bf18:	eaffff53 	b	bc6c <CScreenDevice::Write(char)+0x68>
    bf1c:	e3a03000 	mov	r3, #0
    bf20:	e580303c 	str	r3, [r0, #60]	; 0x3c
    bf24:	eaffff50 	b	bc6c <CScreenDevice::Write(char)+0x68>
    bf28:	e3a03000 	mov	r3, #0
    bf2c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    bf30:	e28dd008 	add	sp, sp, #8
    bf34:	e8bd4010 	pop	{r4, lr}
    bf38:	eafffe54 	b	b890 <CScreenDevice::CursorDown()>
    bf3c:	e28dd008 	add	sp, sp, #8
    bf40:	e8bd4010 	pop	{r4, lr}
    bf44:	eafffe76 	b	b924 <CScreenDevice::Tabulator()>
    bf48:	e28dd008 	add	sp, sp, #8
    bf4c:	e8bd4010 	pop	{r4, lr}
    bf50:	eafffd9a 	b	b5c0 <CScreenDevice::CursorLeft()>
    bf54:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    bf58:	e3510000 	cmp	r1, #0
    bf5c:	0affff40 	beq	bc64 <CScreenDevice::Write(char)+0x60>
    bf60:	ebfffeec 	bl	bb18 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    bf64:	eaffff3e 	b	bc64 <CScreenDevice::Write(char)+0x60>
    bf68:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    bf6c:	e3530004 	cmp	r3, #4
    bf70:	02411068 	subeq	r1, r1, #104	; 0x68
    bf74:	016f1f11 	clzeq	r1, r1
    bf78:	01a012a1 	lsreq	r1, r1, #5
    bf7c:	0580104c 	streq	r1, [r0, #76]	; 0x4c
    bf80:	eaffff37 	b	bc64 <CScreenDevice::Write(char)+0x60>
    bf84:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    bf88:	e353001b 	cmp	r3, #27
    bf8c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bf90:	eaffff33 	b	bc64 <CScreenDevice::Write(char)+0x60>
    bf94:	0000c0dc 	.word	0x0000c0dc
    bf98:	0000c0d0 	.word	0x0000c0d0
    bf9c:	0000c0c4 	.word	0x0000c0c4
    bfa0:	0000bc64 	.word	0x0000bc64
    bfa4:	0000bc64 	.word	0x0000bc64
    bfa8:	0000bc64 	.word	0x0000bc64
    bfac:	0000bc64 	.word	0x0000bc64
    bfb0:	0000bc64 	.word	0x0000bc64
    bfb4:	0000bc64 	.word	0x0000bc64
    bfb8:	0000bc64 	.word	0x0000bc64
    bfbc:	0000bc64 	.word	0x0000bc64
    bfc0:	0000bc64 	.word	0x0000bc64
    bfc4:	0000bc64 	.word	0x0000bc64
    bfc8:	0000bc64 	.word	0x0000bc64
    bfcc:	0000bc64 	.word	0x0000bc64
    bfd0:	0000bc64 	.word	0x0000bc64
    bfd4:	0000bc64 	.word	0x0000bc64
    bfd8:	0000bc64 	.word	0x0000bc64
    bfdc:	0000bc64 	.word	0x0000bc64
    bfe0:	0000bc64 	.word	0x0000bc64
    bfe4:	0000bc64 	.word	0x0000bc64
    bfe8:	0000bc64 	.word	0x0000bc64
    bfec:	0000bc64 	.word	0x0000bc64
    bff0:	0000bc64 	.word	0x0000bc64
    bff4:	0000bc64 	.word	0x0000bc64
    bff8:	0000bc64 	.word	0x0000bc64
    bffc:	0000bc64 	.word	0x0000bc64
    c000:	0000c0dc 	.word	0x0000c0dc
    c004:	e3a03005 	mov	r3, #5
    c008:	e5803030 	str	r3, [r0, #48]	; 0x30
    c00c:	eaffff16 	b	bc6c <CScreenDevice::Write(char)+0x68>
    c010:	ebfffeae 	bl	bad0 <CScreenDevice::ClearLineEnd()>
    c014:	e3a03000 	mov	r3, #0
    c018:	e5843030 	str	r3, [r4, #48]	; 0x30
    c01c:	eaffff12 	b	bc6c <CScreenDevice::Write(char)+0x68>
    c020:	ebfffed7 	bl	bb84 <CScreenDevice::ClearDisplayEnd()>
    c024:	e3a03000 	mov	r3, #0
    c028:	e5843030 	str	r3, [r4, #48]	; 0x30
    c02c:	eaffff0e 	b	bc6c <CScreenDevice::Write(char)+0x68>
    c030:	e3a03004 	mov	r3, #4
    c034:	e5803030 	str	r3, [r0, #48]	; 0x30
    c038:	eaffff0b 	b	bc6c <CScreenDevice::Write(char)+0x68>
    c03c:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    c040:	e3a03000 	mov	r3, #0
    c044:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c048:	e5802040 	str	r2, [r0, #64]	; 0x40
    c04c:	e5803030 	str	r3, [r0, #48]	; 0x30
    c050:	eaffff05 	b	bc6c <CScreenDevice::Write(char)+0x68>
    c054:	ebfffe23 	bl	b8e8 <CScreenDevice::CursorRight()>
    c058:	e3a03000 	mov	r3, #0
    c05c:	e5843030 	str	r3, [r4, #48]	; 0x30
    c060:	eaffff01 	b	bc6c <CScreenDevice::Write(char)+0x68>
    c064:	ebfffe09 	bl	b890 <CScreenDevice::CursorDown()>
    c068:	e3a03000 	mov	r3, #0
    c06c:	e5843030 	str	r3, [r4, #48]	; 0x30
    c070:	eafffefd 	b	bc6c <CScreenDevice::Write(char)+0x68>
    c074:	e6ef3071 	uxtb	r3, r1
    c078:	e353001f 	cmp	r3, #31
    c07c:	9afffefa 	bls	bc6c <CScreenDevice::Write(char)+0x68>
    c080:	e5d0c048 	ldrb	ip, [r0, #72]	; 0x48
    c084:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c088:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    c08c:	e58dc000 	str	ip, [sp]
    c090:	ebfffe35 	bl	b96c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    c094:	e1a00004 	mov	r0, r4
    c098:	e28dd008 	add	sp, sp, #8
    c09c:	e8bd4010 	pop	{r4, lr}
    c0a0:	eafffe10 	b	b8e8 <CScreenDevice::CursorRight()>
    c0a4:	e2411030 	sub	r1, r1, #48	; 0x30
    c0a8:	e6ef3071 	uxtb	r3, r1
    c0ac:	e3530009 	cmp	r3, #9
    c0b0:	8afffeeb 	bhi	bc64 <CScreenDevice::Write(char)+0x60>
    c0b4:	e3a03003 	mov	r3, #3
    c0b8:	e5801050 	str	r1, [r0, #80]	; 0x50
    c0bc:	e5803030 	str	r3, [r0, #48]	; 0x30
    c0c0:	eafffee9 	b	bc6c <CScreenDevice::Write(char)+0x68>
    c0c4:	e3a03003 	mov	r3, #3
    c0c8:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    c0cc:	eafffee4 	b	bc64 <CScreenDevice::Write(char)+0x60>
    c0d0:	e3a03002 	mov	r3, #2
    c0d4:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    c0d8:	eafffee1 	b	bc64 <CScreenDevice::Write(char)+0x60>
    c0dc:	e3a03001 	mov	r3, #1
    c0e0:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    c0e4:	eafffede 	b	bc64 <CScreenDevice::Write(char)+0x60>
    c0e8:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    c0ec:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c0f0:	ebfffd4d 	bl	b62c <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    c0f4:	e3a03000 	mov	r3, #0
    c0f8:	e5843030 	str	r3, [r4, #48]	; 0x30
    c0fc:	eafffeda 	b	bc6c <CScreenDevice::Write(char)+0x68>

0000c100 <CScreenDevice::Write(void const*, unsigned int)>:
    c100:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    c104:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c108:	e1a05000 	mov	r5, r0
    c10c:	e3530000 	cmp	r3, #0
    c110:	e1a06001 	mov	r6, r1
    c114:	e1a08002 	mov	r8, r2
    c118:	1a000026 	bne	c1b8 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    c11c:	e5954044 	ldr	r4, [r5, #68]	; 0x44
    c120:	e3a03001 	mov	r3, #1
    c124:	e5853058 	str	r3, [r5, #88]	; 0x58
    c128:	e3540000 	cmp	r4, #0
    c12c:	1a00001a 	bne	c19c <CScreenDevice::Write(void const*, unsigned int)+0x9c>
    c130:	e3580000 	cmp	r8, #0
    c134:	e2487001 	sub	r7, r8, #1
    c138:	0a00000b 	beq	c16c <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    c13c:	e1a04006 	mov	r4, r6
    c140:	e0d410d1 	ldrsb	r1, [r4], #1
    c144:	e1a00005 	mov	r0, r5
    c148:	ebfffead 	bl	bc04 <CScreenDevice::Write(char)>
    c14c:	e2643001 	rsb	r3, r4, #1
    c150:	e0833007 	add	r3, r3, r7
    c154:	e1760003 	cmn	r6, r3
    c158:	1afffff8 	bne	c140 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    c15c:	e2874001 	add	r4, r7, #1
    c160:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    c164:	e3530000 	cmp	r3, #0
    c168:	1a000008 	bne	c190 <CScreenDevice::Write(void const*, unsigned int)+0x90>
    c16c:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
    c170:	e3a02000 	mov	r2, #0
    c174:	e5852058 	str	r2, [r5, #88]	; 0x58
    c178:	e1530002 	cmp	r3, r2
    c17c:	0a000000 	beq	c184 <CScreenDevice::Write(void const*, unsigned int)+0x84>
    c180:	ebfff6f3 	bl	9d54 <LeaveCritical>
    c184:	f57ff05f 	dmb	sy
    c188:	e1a00004 	mov	r0, r4
    c18c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c190:	e1a00005 	mov	r0, r5
    c194:	ebfffc47 	bl	b2b8 <CScreenDevice::InvertCursor() [clone .part.6]>
    c198:	eafffff3 	b	c16c <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    c19c:	e1a00005 	mov	r0, r5
    c1a0:	e2487001 	sub	r7, r8, #1
    c1a4:	ebfffc43 	bl	b2b8 <CScreenDevice::InvertCursor() [clone .part.6]>
    c1a8:	e3580000 	cmp	r8, #0
    c1ac:	1affffe2 	bne	c13c <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    c1b0:	e1a04008 	mov	r4, r8
    c1b4:	eaffffe9 	b	c160 <CScreenDevice::Write(void const*, unsigned int)+0x60>
    c1b8:	ebfff6d8 	bl	9d20 <EnterCritical>
    c1bc:	eaffffd6 	b	c11c <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000c1c0 <CScreenDevice::Initialize()>:
    c1c0:	e92d4070 	push	{r4, r5, r6, lr}
    c1c4:	e1a04000 	mov	r4, r0
    c1c8:	e590500c 	ldr	r5, [r0, #12]
    c1cc:	e24dd008 	sub	sp, sp, #8
    c1d0:	e3550000 	cmp	r5, #0
    c1d4:	1a00001c 	bne	c24c <CScreenDevice::Initialize()+0x8c>
    c1d8:	e3a00024 	mov	r0, #36	; 0x24
    c1dc:	ebfff6cb 	bl	9d10 <operator new(unsigned int)>
    c1e0:	e3a03008 	mov	r3, #8
    c1e4:	e5942008 	ldr	r2, [r4, #8]
    c1e8:	e1a06000 	mov	r6, r0
    c1ec:	e5941004 	ldr	r1, [r4, #4]
    c1f0:	e58d5004 	str	r5, [sp, #4]
    c1f4:	e58d5000 	str	r5, [sp]
    c1f8:	eb000f82 	bl	10008 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    c1fc:	e1a00006 	mov	r0, r6
    c200:	e30f2fdf 	movw	r2, #65503	; 0xffdf
    c204:	e3a01001 	mov	r1, #1
    c208:	e5846010 	str	r6, [r4, #16]
    c20c:	eb000fd1 	bl	10158 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    c210:	e3a02b3e 	mov	r2, #63488	; 0xf800
    c214:	e3a01002 	mov	r1, #2
    c218:	e5940010 	ldr	r0, [r4, #16]
    c21c:	eb000fcd 	bl	10158 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    c220:	e3a0201f 	mov	r2, #31
    c224:	e3a01003 	mov	r1, #3
    c228:	e5940010 	ldr	r0, [r4, #16]
    c22c:	eb000fc9 	bl	10158 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    c230:	e5940010 	ldr	r0, [r4, #16]
    c234:	eb000fdc 	bl	101ac <CBcmFrameBuffer::Initialize()>
    c238:	e3500000 	cmp	r0, #0
    c23c:	1a000028 	bne	c2e4 <CScreenDevice::Initialize()+0x124>
    c240:	e1a00005 	mov	r0, r5
    c244:	e28dd008 	add	sp, sp, #8
    c248:	e8bd8070 	pop	{r4, r5, r6, pc}
    c24c:	e5903004 	ldr	r3, [r0, #4]
    c250:	e5900008 	ldr	r0, [r0, #8]
    c254:	e5843024 	str	r3, [r4, #36]	; 0x24
    c258:	e5840028 	str	r0, [r4, #40]	; 0x28
    c25c:	e5843020 	str	r3, [r4, #32]
    c260:	e0000390 	mul	r0, r0, r3
    c264:	e584001c 	str	r0, [r4, #28]
    c268:	ebfff6a9 	bl	9d14 <operator new[](unsigned int)>
    c26c:	e5946028 	ldr	r6, [r4, #40]	; 0x28
    c270:	e5840018 	str	r0, [r4, #24]
    c274:	e2845014 	add	r5, r4, #20
    c278:	e1a00005 	mov	r0, r5
    c27c:	eb000087 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    c280:	e736f016 	udiv	r6, r6, r0
    c284:	e1a00005 	mov	r0, r5
    c288:	eb000084 	bl	c4a0 <CCharGenerator::GetCharHeight() const>
    c28c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    c290:	e3a02000 	mov	r2, #0
    c294:	e5843040 	str	r3, [r4, #64]	; 0x40
    c298:	e0060690 	mul	r6, r0, r6
    c29c:	e584203c 	str	r2, [r4, #60]	; 0x3c
    c2a0:	e1a00004 	mov	r0, r4
    c2a4:	e584602c 	str	r6, [r4, #44]	; 0x2c
    c2a8:	e5846038 	str	r6, [r4, #56]	; 0x38
    c2ac:	ebfffe34 	bl	bb84 <CScreenDevice::ClearDisplayEnd()>
    c2b0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c2b4:	e3530000 	cmp	r3, #0
    c2b8:	1a000021 	bne	c344 <CScreenDevice::Initialize()+0x184>
    c2bc:	eb0001a2 	bl	c94c <CDeviceNameService::Get()>
    c2c0:	e3a05001 	mov	r5, #1
    c2c4:	e1a02004 	mov	r2, r4
    c2c8:	e3a03000 	mov	r3, #0
    c2cc:	e3001adc 	movw	r1, #2780	; 0xadc
    c2d0:	e3401001 	movt	r1, #1
    c2d4:	eb000128 	bl	c77c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    c2d8:	e1a00005 	mov	r0, r5
    c2dc:	e28dd008 	add	sp, sp, #8
    c2e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c2e4:	e5940010 	ldr	r0, [r4, #16]
    c2e8:	eb000fea 	bl	10298 <CBcmFrameBuffer::GetDepth() const>
    c2ec:	e3500008 	cmp	r0, #8
    c2f0:	1affffd2 	bne	c240 <CScreenDevice::Initialize()+0x80>
    c2f4:	e5940010 	ldr	r0, [r4, #16]
    c2f8:	eb000fe8 	bl	102a0 <CBcmFrameBuffer::GetBuffer() const>
    c2fc:	e5840018 	str	r0, [r4, #24]
    c300:	e5940010 	ldr	r0, [r4, #16]
    c304:	eb000fe7 	bl	102a8 <CBcmFrameBuffer::GetSize() const>
    c308:	e584001c 	str	r0, [r4, #28]
    c30c:	e5940010 	ldr	r0, [r4, #16]
    c310:	eb000fde 	bl	10290 <CBcmFrameBuffer::GetPitch() const>
    c314:	e5840020 	str	r0, [r4, #32]
    c318:	e5940010 	ldr	r0, [r4, #16]
    c31c:	eb000fd3 	bl	10270 <CBcmFrameBuffer::GetWidth() const>
    c320:	e5840024 	str	r0, [r4, #36]	; 0x24
    c324:	e5940010 	ldr	r0, [r4, #16]
    c328:	eb000fd2 	bl	10278 <CBcmFrameBuffer::GetHeight() const>
    c32c:	e5943020 	ldr	r3, [r4, #32]
    c330:	e1a06000 	mov	r6, r0
    c334:	e5840028 	str	r0, [r4, #40]	; 0x28
    c338:	e3130003 	tst	r3, #3
    c33c:	0affffcc 	beq	c274 <CScreenDevice::Initialize()+0xb4>
    c340:	eaffffbe 	b	c240 <CScreenDevice::Initialize()+0x80>
    c344:	e1a00004 	mov	r0, r4
    c348:	ebfffbda 	bl	b2b8 <CScreenDevice::InvertCursor() [clone .part.6]>
    c34c:	eaffffda 	b	c2bc <CScreenDevice::Initialize()+0xfc>

0000c350 <CScreenDevice::InvertCursor()>:
    c350:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    c354:	e3530000 	cmp	r3, #0
    c358:	012fff1e 	bxeq	lr
    c35c:	eafffbd5 	b	b2b8 <CScreenDevice::InvertCursor() [clone .part.6]>

0000c360 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char)>:
    c360:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    c364:	e15c0001 	cmp	ip, r1
    c368:	912fff1e 	bxls	lr
    c36c:	eafffbca 	b	b29c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>

0000c370 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    c370:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c374:	e1530001 	cmp	r3, r1
    c378:	9a000007 	bls	c39c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x2c>
    c37c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    c380:	e1530002 	cmp	r3, r2
    c384:	9a000004 	bls	c39c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x2c>
    c388:	e590c020 	ldr	ip, [r0, #32]
    c38c:	e5903018 	ldr	r3, [r0, #24]
    c390:	e022329c 	mla	r2, ip, r2, r3
    c394:	e7d20001 	ldrb	r0, [r2, r1]
    c398:	e12fff1e 	bx	lr
    c39c:	e3a00000 	mov	r0, #0
    c3a0:	e12fff1e 	bx	lr

0000c3a4 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    c3a4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c3a8:	e1a05000 	mov	r5, r0
    c3ac:	e1a04001 	mov	r4, r1
    c3b0:	e24dd00c 	sub	sp, sp, #12
    c3b4:	e1a06002 	mov	r6, r2
    c3b8:	e2800014 	add	r0, r0, #20
    c3bc:	e2044003 	and	r4, r4, #3
    c3c0:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    c3c4:	eb000033 	bl	c498 <CCharGenerator::GetCharWidth() const>
    c3c8:	e2061003 	and	r1, r6, #3
    c3cc:	e3003b80 	movw	r3, #2944	; 0xb80
    c3d0:	e3403001 	movt	r3, #1
    c3d4:	e0831001 	add	r1, r3, r1
    c3d8:	e0240094 	mla	r4, r4, r0, r0
    c3dc:	e3a02002 	mov	r2, #2
    c3e0:	e3a03000 	mov	r3, #0
    c3e4:	e58d2000 	str	r2, [sp]
    c3e8:	e1a00005 	mov	r0, r5
    c3ec:	e1d111dc 	ldrsb	r1, [r1, #28]
    c3f0:	e0472004 	sub	r2, r7, r4
    c3f4:	ebfffd5c 	bl	b96c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    c3f8:	e28dd00c 	add	sp, sp, #12
    c3fc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c400 <assertion_failed>:
    c400:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c404:	e1a05000 	mov	r5, r0
    c408:	e1a06001 	mov	r6, r1
    c40c:	e24dd01c 	sub	sp, sp, #28
    c410:	e1a07002 	mov	r7, r2
    c414:	e1a0400d 	mov	r4, sp
    c418:	e28d0008 	add	r0, sp, #8
    c41c:	eb00035b 	bl	d190 <CString::CString()>
    c420:	e1a03007 	mov	r3, r7
    c424:	e1a02006 	mov	r2, r6
    c428:	e28d0008 	add	r0, sp, #8
    c42c:	e3001ba4 	movw	r1, #2980	; 0xba4
    c430:	e3401001 	movt	r1, #1
    c434:	eb000668 	bl	dddc <CString::Format(char const*, ...)>
    c438:	e28d0008 	add	r0, sp, #8
    c43c:	eb000369 	bl	d1e8 <CString::operator char const*() const>
    c440:	e1a01000 	mov	r1, r0
    c444:	e1a00004 	mov	r0, r4
    c448:	eb00007b 	bl	c63c <debug_stacktrace(unsigned int const*, char const*)>
    c44c:	eb00016a 	bl	c9fc <CLogger::Get()>
    c450:	e1a04000 	mov	r4, r0
    c454:	e28d0008 	add	r0, sp, #8
    c458:	eb000362 	bl	d1e8 <CString::operator char const*() const>
    c45c:	e3a02000 	mov	r2, #0
    c460:	e1a01000 	mov	r1, r0
    c464:	e58d5000 	str	r5, [sp]
    c468:	e1a00004 	mov	r0, r4
    c46c:	e3003bac 	movw	r3, #2988	; 0xbac
    c470:	e3403001 	movt	r3, #1
    c474:	eb00023d 	bl	cd70 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c478:	e28d0008 	add	r0, sp, #8
    c47c:	eb000311 	bl	d0c8 <CString::~CString()>
    c480:	e28dd01c 	add	sp, sp, #28
    c484:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c488 <CCharGenerator::CCharGenerator()>:
    c488:	e3a03008 	mov	r3, #8
    c48c:	e5803000 	str	r3, [r0]
    c490:	e12fff1e 	bx	lr

0000c494 <CCharGenerator::~CCharGenerator()>:
    c494:	e12fff1e 	bx	lr

0000c498 <CCharGenerator::GetCharWidth() const>:
    c498:	e5900000 	ldr	r0, [r0]
    c49c:	e12fff1e 	bx	lr

0000c4a0 <CCharGenerator::GetCharHeight() const>:
    c4a0:	e3a00013 	mov	r0, #19
    c4a4:	e12fff1e 	bx	lr

0000c4a8 <CCharGenerator::GetUnderline() const>:
    c4a8:	e3a00010 	mov	r0, #16
    c4ac:	e12fff1e 	bx	lr

0000c4b0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    c4b0:	e6ef1071 	uxtb	r1, r1
    c4b4:	e92d4070 	push	{r4, r5, r6, lr}
    c4b8:	e2414021 	sub	r4, r1, #33	; 0x21
    c4bc:	e35400de 	cmp	r4, #222	; 0xde
    c4c0:	8a00000f 	bhi	c504 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    c4c4:	e1a06003 	mov	r6, r3
    c4c8:	e5903000 	ldr	r3, [r0]
    c4cc:	e1a05002 	mov	r5, r2
    c4d0:	e1530002 	cmp	r3, r2
    c4d4:	9a00000c 	bls	c50c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x5c>
    c4d8:	e356000f 	cmp	r6, #15
    c4dc:	8a000008 	bhi	c504 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    c4e0:	e3001bc4 	movw	r1, #3012	; 0xbc4
    c4e4:	e3401001 	movt	r1, #1
    c4e8:	e3a02080 	mov	r2, #128	; 0x80
    c4ec:	e0811204 	add	r1, r1, r4, lsl #4
    c4f0:	e7d13006 	ldrb	r3, [r1, r6]
    c4f4:	e0133552 	ands	r3, r3, r2, asr r5
    c4f8:	13a00001 	movne	r0, #1
    c4fc:	03a00000 	moveq	r0, #0
    c500:	e8bd8070 	pop	{r4, r5, r6, pc}
    c504:	e3a00000 	mov	r0, #0
    c508:	e8bd8070 	pop	{r4, r5, r6, pc}
    c50c:	e30119b4 	movw	r1, #6580	; 0x19b4
    c510:	e3401001 	movt	r1, #1
    c514:	e30109c8 	movw	r0, #6600	; 0x19c8
    c518:	e3400001 	movt	r0, #1
    c51c:	e3a0204e 	mov	r2, #78	; 0x4e
    c520:	ebffffb6 	bl	c400 <assertion_failed>
    c524:	e356000f 	cmp	r6, #15
    c528:	9affffec 	bls	c4e0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
    c52c:	eafffff4 	b	c504 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>

0000c530 <debug_hexdump(void const*, unsigned int, char const*)>:
    c530:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c534:	e3520000 	cmp	r2, #0
    c538:	e1a05001 	mov	r5, r1
    c53c:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    c540:	e1a04000 	mov	r4, r0
    c544:	e30179e0 	movw	r7, #6624	; 0x19e0
    c548:	e3407001 	movt	r7, #1
    c54c:	11a07002 	movne	r7, r2
    c550:	eb000129 	bl	c9fc <CLogger::Get()>
    c554:	e58d4004 	str	r4, [sp, #4]
    c558:	e1a01007 	mov	r1, r7
    c55c:	e58d5000 	str	r5, [sp]
    c560:	e30139e8 	movw	r3, #6632	; 0x19e8
    c564:	e3403001 	movt	r3, #1
    c568:	e3a02004 	mov	r2, #4
    c56c:	eb0001ff 	bl	cd70 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c570:	e3550000 	cmp	r5, #0
    c574:	0a00002a 	beq	c624 <debug_hexdump(void const*, unsigned int, char const*)+0xf4>
    c578:	e3018a0c 	movw	r8, #6668	; 0x1a0c
    c57c:	e3408001 	movt	r8, #1
    c580:	eb00011d 	bl	c9fc <CLogger::Get()>
    c584:	e5d4e00f 	ldrb	lr, [r4, #15]
    c588:	e5d4b00e 	ldrb	fp, [r4, #14]
    c58c:	e6ffc074 	uxth	ip, r4
    c590:	e5d4a00d 	ldrb	sl, [r4, #13]
    c594:	e1a03008 	mov	r3, r8
    c598:	e5d4900c 	ldrb	r9, [r4, #12]
    c59c:	e3a02004 	mov	r2, #4
    c5a0:	e5d4600b 	ldrb	r6, [r4, #11]
    c5a4:	e1a01007 	mov	r1, r7
    c5a8:	e58de040 	str	lr, [sp, #64]	; 0x40
    c5ac:	e2844010 	add	r4, r4, #16
    c5b0:	e554e006 	ldrb	lr, [r4, #-6]
    c5b4:	e58db03c 	str	fp, [sp, #60]	; 0x3c
    c5b8:	e554b007 	ldrb	fp, [r4, #-7]
    c5bc:	e58da038 	str	sl, [sp, #56]	; 0x38
    c5c0:	e554a008 	ldrb	sl, [r4, #-8]
    c5c4:	e58d9034 	str	r9, [sp, #52]	; 0x34
    c5c8:	e5549009 	ldrb	r9, [r4, #-9]
    c5cc:	e58d6030 	str	r6, [sp, #48]	; 0x30
    c5d0:	e554600a 	ldrb	r6, [r4, #-10]
    c5d4:	e58de02c 	str	lr, [sp, #44]	; 0x2c
    c5d8:	e554e00b 	ldrb	lr, [r4, #-11]
    c5dc:	e58db028 	str	fp, [sp, #40]	; 0x28
    c5e0:	e554b00c 	ldrb	fp, [r4, #-12]
    c5e4:	e58da024 	str	sl, [sp, #36]	; 0x24
    c5e8:	e554a00d 	ldrb	sl, [r4, #-13]
    c5ec:	e58d9020 	str	r9, [sp, #32]
    c5f0:	e554900e 	ldrb	r9, [r4, #-14]
    c5f4:	e58d601c 	str	r6, [sp, #28]
    c5f8:	e554600f 	ldrb	r6, [r4, #-15]
    c5fc:	e58de018 	str	lr, [sp, #24]
    c600:	e554e010 	ldrb	lr, [r4, #-16]
    c604:	e58db014 	str	fp, [sp, #20]
    c608:	e58da010 	str	sl, [sp, #16]
    c60c:	e58d900c 	str	r9, [sp, #12]
    c610:	e58d6008 	str	r6, [sp, #8]
    c614:	e88d5000 	stm	sp, {ip, lr}
    c618:	eb0001d4 	bl	cd70 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c61c:	e355000f 	cmp	r5, #15
    c620:	8a000001 	bhi	c62c <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
    c624:	e28dd04c 	add	sp, sp, #76	; 0x4c
    c628:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c62c:	e2555010 	subs	r5, r5, #16
    c630:	1affffd2 	bne	c580 <debug_hexdump(void const*, unsigned int, char const*)+0x50>
    c634:	e28dd04c 	add	sp, sp, #76	; 0x4c
    c638:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c63c <debug_stacktrace(unsigned int const*, char const*)>:
    c63c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c640:	e3510000 	cmp	r1, #0
    c644:	e30179e0 	movw	r7, #6624	; 0x19e0
    c648:	e3407001 	movt	r7, #1
    c64c:	11a07001 	movne	r7, r1
    c650:	e3006340 	movw	r6, #832	; 0x340
    c654:	e3406001 	movt	r6, #1
    c658:	e3018a64 	movw	r8, #6756	; 0x1a64
    c65c:	e3408001 	movt	r8, #1
    c660:	e24dd008 	sub	sp, sp, #8
    c664:	e1a05000 	mov	r5, r0
    c668:	e3a04000 	mov	r4, #0
    c66c:	ea000003 	b	c680 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    c670:	e2844001 	add	r4, r4, #1
    c674:	e2855004 	add	r5, r5, #4
    c678:	e3540040 	cmp	r4, #64	; 0x40
    c67c:	0a000010 	beq	c6c4 <debug_stacktrace(unsigned int const*, char const*)+0x88>
    c680:	e5953000 	ldr	r3, [r5]
    c684:	e3530902 	cmp	r3, #32768	; 0x8000
    c688:	3afffff8 	bcc	c670 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    c68c:	e1530006 	cmp	r3, r6
    c690:	2afffff6 	bcs	c670 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    c694:	eb0000d8 	bl	c9fc <CLogger::Get()>
    c698:	e5952000 	ldr	r2, [r5]
    c69c:	e1a03008 	mov	r3, r8
    c6a0:	e58d4000 	str	r4, [sp]
    c6a4:	e58d2004 	str	r2, [sp, #4]
    c6a8:	e1a01007 	mov	r1, r7
    c6ac:	e3a02004 	mov	r2, #4
    c6b0:	e2844001 	add	r4, r4, #1
    c6b4:	eb0001ad 	bl	cd70 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c6b8:	e3540040 	cmp	r4, #64	; 0x40
    c6bc:	e2855004 	add	r5, r5, #4
    c6c0:	1affffee 	bne	c680 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    c6c4:	e28dd008 	add	sp, sp, #8
    c6c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c6cc <CDeviceNameService::CDeviceNameService()>:
    c6cc:	e92d4070 	push	{r4, r5, r6, lr}
    c6d0:	e30253a0 	movw	r5, #9120	; 0x23a0
    c6d4:	e3405001 	movt	r5, #1
    c6d8:	e3a03000 	mov	r3, #0
    c6dc:	e1a04000 	mov	r4, r0
    c6e0:	e5803004 	str	r3, [r0, #4]
    c6e4:	e5952000 	ldr	r2, [r5]
    c6e8:	e5803000 	str	r3, [r0]
    c6ec:	e1520003 	cmp	r2, r3
    c6f0:	0a000005 	beq	c70c <CDeviceNameService::CDeviceNameService()+0x40>
    c6f4:	e3011a78 	movw	r1, #6776	; 0x1a78
    c6f8:	e3401001 	movt	r1, #1
    c6fc:	e3010a90 	movw	r0, #6800	; 0x1a90
    c700:	e3400001 	movt	r0, #1
    c704:	e3a0201e 	mov	r2, #30
    c708:	ebffff3c 	bl	c400 <assertion_failed>
    c70c:	e5854000 	str	r4, [r5]
    c710:	e1a00004 	mov	r0, r4
    c714:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c718 <CDeviceNameService::~CDeviceNameService()>:
    c718:	e5903000 	ldr	r3, [r0]
    c71c:	e92d4070 	push	{r4, r5, r6, lr}
    c720:	e1a05000 	mov	r5, r0
    c724:	e3530000 	cmp	r3, #0
    c728:	0a00000d 	beq	c764 <CDeviceNameService::~CDeviceNameService()+0x4c>
    c72c:	e3a06000 	mov	r6, #0
    c730:	e5930004 	ldr	r0, [r3, #4]
    c734:	e5934000 	ldr	r4, [r3]
    c738:	e3500000 	cmp	r0, #0
    c73c:	0a000000 	beq	c744 <CDeviceNameService::~CDeviceNameService()+0x2c>
    c740:	ebfff575 	bl	9d1c <operator delete[](void*)>
    c744:	e5953000 	ldr	r3, [r5]
    c748:	e1a00003 	mov	r0, r3
    c74c:	e5836004 	str	r6, [r3, #4]
    c750:	e5836008 	str	r6, [r3, #8]
    c754:	ebfff56f 	bl	9d18 <operator delete(void*)>
    c758:	e2543000 	subs	r3, r4, #0
    c75c:	e5854000 	str	r4, [r5]
    c760:	1afffff2 	bne	c730 <CDeviceNameService::~CDeviceNameService()+0x18>
    c764:	e30233a0 	movw	r3, #9120	; 0x23a0
    c768:	e3403001 	movt	r3, #1
    c76c:	e3a02000 	mov	r2, #0
    c770:	e1a00005 	mov	r0, r5
    c774:	e5832000 	str	r2, [r3]
    c778:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c77c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
    c77c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c780:	e1a08003 	mov	r8, r3
    c784:	e5903004 	ldr	r3, [r0, #4]
    c788:	e1a05000 	mov	r5, r0
    c78c:	e1a06001 	mov	r6, r1
    c790:	e3530000 	cmp	r3, #0
    c794:	e1a07002 	mov	r7, r2
    c798:	1a000017 	bne	c7fc <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x80>
    c79c:	e3a00010 	mov	r0, #16
    c7a0:	ebfff55a 	bl	9d10 <operator new(unsigned int)>
    c7a4:	e3560000 	cmp	r6, #0
    c7a8:	e1a04000 	mov	r4, r0
    c7ac:	0a00001b 	beq	c820 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xa4>
    c7b0:	e1a00006 	mov	r0, r6
    c7b4:	eb000cfa 	bl	fba4 <strlen>
    c7b8:	e2800001 	add	r0, r0, #1
    c7bc:	ebfff554 	bl	9d14 <operator new[](unsigned int)>
    c7c0:	e1a01006 	mov	r1, r6
    c7c4:	e5840004 	str	r0, [r4, #4]
    c7c8:	eb000d1a 	bl	fc38 <strcpy>
    c7cc:	e3570000 	cmp	r7, #0
    c7d0:	0a00000b 	beq	c804 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x88>
    c7d4:	e5952004 	ldr	r2, [r5, #4]
    c7d8:	e5953000 	ldr	r3, [r5]
    c7dc:	e3520000 	cmp	r2, #0
    c7e0:	e5847008 	str	r7, [r4, #8]
    c7e4:	e584800c 	str	r8, [r4, #12]
    c7e8:	e5843000 	str	r3, [r4]
    c7ec:	e5854000 	str	r4, [r5]
    c7f0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    c7f4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    c7f8:	eafff555 	b	9d54 <LeaveCritical>
    c7fc:	ebfff547 	bl	9d20 <EnterCritical>
    c800:	eaffffe5 	b	c79c <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x20>
    c804:	e3011a78 	movw	r1, #6776	; 0x1a78
    c808:	e3401001 	movt	r1, #1
    c80c:	e3010aa8 	movw	r0, #6824	; 0x1aa8
    c810:	e3400001 	movt	r0, #1
    c814:	e3a0203f 	mov	r2, #63	; 0x3f
    c818:	ebfffef8 	bl	c400 <assertion_failed>
    c81c:	eaffffec 	b	c7d4 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x58>
    c820:	e3011a78 	movw	r1, #6776	; 0x1a78
    c824:	e3401001 	movt	r1, #1
    c828:	e3010a9c 	movw	r0, #6812	; 0x1a9c
    c82c:	e3400001 	movt	r0, #1
    c830:	e3a0203a 	mov	r2, #58	; 0x3a
    c834:	ebfffef1 	bl	c400 <assertion_failed>
    c838:	eaffffdc 	b	c7b0 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x34>

0000c83c <CDeviceNameService::GetDevice(char const*, int)>:
    c83c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c840:	e2515000 	subs	r5, r1, #0
    c844:	e1a07000 	mov	r7, r0
    c848:	e1a06002 	mov	r6, r2
    c84c:	0a000037 	beq	c930 <CDeviceNameService::GetDevice(char const*, int)+0xf4>
    c850:	e5973004 	ldr	r3, [r7, #4]
    c854:	e3530000 	cmp	r3, #0
    c858:	1a00001a 	bne	c8c8 <CDeviceNameService::GetDevice(char const*, int)+0x8c>
    c85c:	e5974000 	ldr	r4, [r7]
    c860:	e3540000 	cmp	r4, #0
    c864:	0a00001f 	beq	c8e8 <CDeviceNameService::GetDevice(char const*, int)+0xac>
    c868:	e3019a78 	movw	r9, #6776	; 0x1a78
    c86c:	e3409001 	movt	r9, #1
    c870:	e3018ab8 	movw	r8, #6840	; 0x1ab8
    c874:	e3408001 	movt	r8, #1
    c878:	ea000009 	b	c8a4 <CDeviceNameService::GetDevice(char const*, int)+0x68>
    c87c:	e1a00005 	mov	r0, r5
    c880:	eb000cd1 	bl	fbcc <strcmp>
    c884:	e3500000 	cmp	r0, #0
    c888:	1a000002 	bne	c898 <CDeviceNameService::GetDevice(char const*, int)+0x5c>
    c88c:	e594300c 	ldr	r3, [r4, #12]
    c890:	e1530006 	cmp	r3, r6
    c894:	0a000016 	beq	c8f4 <CDeviceNameService::GetDevice(char const*, int)+0xb8>
    c898:	e5944000 	ldr	r4, [r4]
    c89c:	e3540000 	cmp	r4, #0
    c8a0:	0a00000c 	beq	c8d8 <CDeviceNameService::GetDevice(char const*, int)+0x9c>
    c8a4:	e5941004 	ldr	r1, [r4, #4]
    c8a8:	e3510000 	cmp	r1, #0
    c8ac:	1afffff2 	bne	c87c <CDeviceNameService::GetDevice(char const*, int)+0x40>
    c8b0:	e1a01009 	mov	r1, r9
    c8b4:	e3a02053 	mov	r2, #83	; 0x53
    c8b8:	e1a00008 	mov	r0, r8
    c8bc:	ebfffecf 	bl	c400 <assertion_failed>
    c8c0:	e5941004 	ldr	r1, [r4, #4]
    c8c4:	eaffffec 	b	c87c <CDeviceNameService::GetDevice(char const*, int)+0x40>
    c8c8:	ebfff514 	bl	9d20 <EnterCritical>
    c8cc:	e5974000 	ldr	r4, [r7]
    c8d0:	e3540000 	cmp	r4, #0
    c8d4:	1affffe3 	bne	c868 <CDeviceNameService::GetDevice(char const*, int)+0x2c>
    c8d8:	e5973004 	ldr	r3, [r7, #4]
    c8dc:	e3530000 	cmp	r3, #0
    c8e0:	0a000000 	beq	c8e8 <CDeviceNameService::GetDevice(char const*, int)+0xac>
    c8e4:	ebfff51a 	bl	9d54 <LeaveCritical>
    c8e8:	e3a04000 	mov	r4, #0
    c8ec:	e1a00004 	mov	r0, r4
    c8f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    c8f4:	e5973004 	ldr	r3, [r7, #4]
    c8f8:	e5944008 	ldr	r4, [r4, #8]
    c8fc:	e3530000 	cmp	r3, #0
    c900:	1a000008 	bne	c928 <CDeviceNameService::GetDevice(char const*, int)+0xec>
    c904:	e3540000 	cmp	r4, #0
    c908:	1afffff7 	bne	c8ec <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    c90c:	e3011a78 	movw	r1, #6776	; 0x1a78
    c910:	e3401001 	movt	r1, #1
    c914:	e3010acc 	movw	r0, #6860	; 0x1acc
    c918:	e3400001 	movt	r0, #1
    c91c:	e3a0205b 	mov	r2, #91	; 0x5b
    c920:	ebfffeb6 	bl	c400 <assertion_failed>
    c924:	eafffff0 	b	c8ec <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    c928:	ebfff509 	bl	9d54 <LeaveCritical>
    c92c:	eafffff4 	b	c904 <CDeviceNameService::GetDevice(char const*, int)+0xc8>
    c930:	e3011a78 	movw	r1, #6776	; 0x1a78
    c934:	e3401001 	movt	r1, #1
    c938:	e3010a9c 	movw	r0, #6812	; 0x1a9c
    c93c:	e3400001 	movt	r0, #1
    c940:	e3a0204c 	mov	r2, #76	; 0x4c
    c944:	ebfffead 	bl	c400 <assertion_failed>
    c948:	eaffffc0 	b	c850 <CDeviceNameService::GetDevice(char const*, int)+0x14>

0000c94c <CDeviceNameService::Get()>:
    c94c:	e92d4010 	push	{r4, lr}
    c950:	e30243a0 	movw	r4, #9120	; 0x23a0
    c954:	e3404001 	movt	r4, #1
    c958:	e5940000 	ldr	r0, [r4]
    c95c:	e3500000 	cmp	r0, #0
    c960:	18bd8010 	popne	{r4, pc}
    c964:	e3a02069 	mov	r2, #105	; 0x69
    c968:	e3011a78 	movw	r1, #6776	; 0x1a78
    c96c:	e3401001 	movt	r1, #1
    c970:	e3010adc 	movw	r0, #6876	; 0x1adc
    c974:	e3400001 	movt	r0, #1
    c978:	ebfffea0 	bl	c400 <assertion_failed>
    c97c:	e5940000 	ldr	r0, [r4]
    c980:	e8bd8010 	pop	{r4, pc}

0000c984 <CLogger::CLogger(unsigned int, CTimer*)>:
    c984:	e92d4010 	push	{r4, lr}
    c988:	e1a04000 	mov	r4, r0
    c98c:	e3a03000 	mov	r3, #0
    c990:	e3a0c001 	mov	ip, #1
    c994:	e3a00901 	mov	r0, #16384	; 0x4000
    c998:	e5843008 	str	r3, [r4, #8]
    c99c:	e584300c 	str	r3, [r4, #12]
    c9a0:	e5843010 	str	r3, [r4, #16]
    c9a4:	e5843014 	str	r3, [r4, #20]
    c9a8:	e8840006 	stm	r4, {r1, r2}
    c9ac:	e584c018 	str	ip, [r4, #24]
    c9b0:	ebfff4d7 	bl	9d14 <operator new[](unsigned int)>
    c9b4:	e30233a4 	movw	r3, #9124	; 0x23a4
    c9b8:	e3403001 	movt	r3, #1
    c9bc:	e584000c 	str	r0, [r4, #12]
    c9c0:	e1a00004 	mov	r0, r4
    c9c4:	e5834000 	str	r4, [r3]
    c9c8:	e8bd8010 	pop	{r4, pc}

0000c9cc <CLogger::~CLogger()>:
    c9cc:	e92d4010 	push	{r4, lr}
    c9d0:	e1a04000 	mov	r4, r0
    c9d4:	e590000c 	ldr	r0, [r0, #12]
    c9d8:	e3a02000 	mov	r2, #0
    c9dc:	e30233a4 	movw	r3, #9124	; 0x23a4
    c9e0:	e3403001 	movt	r3, #1
    c9e4:	e1500002 	cmp	r0, r2
    c9e8:	e5832000 	str	r2, [r3]
    c9ec:	0a000000 	beq	c9f4 <CLogger::~CLogger()+0x28>
    c9f0:	ebfff4c9 	bl	9d1c <operator delete[](void*)>
    c9f4:	e1a00004 	mov	r0, r4
    c9f8:	e8bd8010 	pop	{r4, pc}

0000c9fc <CLogger::Get()>:
    c9fc:	e30233a4 	movw	r3, #9124	; 0x23a4
    ca00:	e3403001 	movt	r3, #1
    ca04:	e5930000 	ldr	r0, [r3]
    ca08:	e12fff1e 	bx	lr

0000ca0c <CLogger::Write(char const*)>:
    ca0c:	e92d4070 	push	{r4, r5, r6, lr}
    ca10:	e1a04000 	mov	r4, r0
    ca14:	e1a00001 	mov	r0, r1
    ca18:	e1a05001 	mov	r5, r1
    ca1c:	eb000c60 	bl	fba4 <strlen>
    ca20:	e5943008 	ldr	r3, [r4, #8]
    ca24:	e1a02000 	mov	r2, r0
    ca28:	e1a06000 	mov	r6, r0
    ca2c:	e1a01005 	mov	r1, r5
    ca30:	e1a00003 	mov	r0, r3
    ca34:	e5933000 	ldr	r3, [r3]
    ca38:	e593300c 	ldr	r3, [r3, #12]
    ca3c:	e12fff33 	blx	r3
    ca40:	e5943018 	ldr	r3, [r4, #24]
    ca44:	e3530000 	cmp	r3, #0
    ca48:	1a000017 	bne	caac <CLogger::Write(char const*)+0xa0>
    ca4c:	e0850006 	add	r0, r5, r6
    ca50:	e1550000 	cmp	r5, r0
    ca54:	0a00000f 	beq	ca98 <CLogger::Write(char const*)+0x8c>
    ca58:	e0d530d1 	ldrsb	r3, [r5], #1
    ca5c:	e353000d 	cmp	r3, #13
    ca60:	0afffffa 	beq	ca50 <CLogger::Write(char const*)+0x44>
    ca64:	e5941010 	ldr	r1, [r4, #16]
    ca68:	e594c00c 	ldr	ip, [r4, #12]
    ca6c:	e7cc3001 	strb	r3, [ip, r1]
    ca70:	e5943010 	ldr	r3, [r4, #16]
    ca74:	e5941014 	ldr	r1, [r4, #20]
    ca78:	e2833001 	add	r3, r3, #1
    ca7c:	e7ed3053 	ubfx	r3, r3, #0, #14
    ca80:	e1530001 	cmp	r3, r1
    ca84:	e5843010 	str	r3, [r4, #16]
    ca88:	1afffff0 	bne	ca50 <CLogger::Write(char const*)+0x44>
    ca8c:	e2433001 	sub	r3, r3, #1
    ca90:	e7ed3053 	ubfx	r3, r3, #0, #14
    ca94:	e5843010 	str	r3, [r4, #16]
    ca98:	e5943018 	ldr	r3, [r4, #24]
    ca9c:	e3530000 	cmp	r3, #0
    caa0:	08bd8070 	popeq	{r4, r5, r6, pc}
    caa4:	e8bd4070 	pop	{r4, r5, r6, lr}
    caa8:	eafff4a9 	b	9d54 <LeaveCritical>
    caac:	ebfff49b 	bl	9d20 <EnterCritical>
    cab0:	eaffffe5 	b	ca4c <CLogger::Write(char const*)+0x40>

0000cab4 <CLogger::Read(void*, unsigned int)>:
    cab4:	e5903018 	ldr	r3, [r0, #24]
    cab8:	e92d4070 	push	{r4, r5, r6, lr}
    cabc:	e1a04000 	mov	r4, r0
    cac0:	e3530000 	cmp	r3, #0
    cac4:	e1a05001 	mov	r5, r1
    cac8:	e1a06002 	mov	r6, r2
    cacc:	1a00001b 	bne	cb40 <CLogger::Read(void*, unsigned int)+0x8c>
    cad0:	e5902010 	ldr	r2, [r0, #16]
    cad4:	e5903014 	ldr	r3, [r0, #20]
    cad8:	e1520003 	cmp	r2, r3
    cadc:	0a000020 	beq	cb64 <CLogger::Read(void*, unsigned int)+0xb0>
    cae0:	e1a01005 	mov	r1, r5
    cae4:	e3a05000 	mov	r5, #0
    cae8:	ea00000a 	b	cb18 <CLogger::Read(void*, unsigned int)+0x64>
    caec:	e594000c 	ldr	r0, [r4, #12]
    caf0:	e2855001 	add	r5, r5, #1
    caf4:	e19030d3 	ldrsb	r3, [r0, r3]
    caf8:	e4c13001 	strb	r3, [r1], #1
    cafc:	e5943014 	ldr	r3, [r4, #20]
    cb00:	e5940010 	ldr	r0, [r4, #16]
    cb04:	e2833001 	add	r3, r3, #1
    cb08:	e7ed3053 	ubfx	r3, r3, #0, #14
    cb0c:	e1530000 	cmp	r3, r0
    cb10:	e5843014 	str	r3, [r4, #20]
    cb14:	0a000001 	beq	cb20 <CLogger::Read(void*, unsigned int)+0x6c>
    cb18:	e1550006 	cmp	r5, r6
    cb1c:	1afffff2 	bne	caec <CLogger::Read(void*, unsigned int)+0x38>
    cb20:	e5943018 	ldr	r3, [r4, #24]
    cb24:	e3530000 	cmp	r3, #0
    cb28:	1a000001 	bne	cb34 <CLogger::Read(void*, unsigned int)+0x80>
    cb2c:	e1a00005 	mov	r0, r5
    cb30:	e8bd8070 	pop	{r4, r5, r6, pc}
    cb34:	ebfff486 	bl	9d54 <LeaveCritical>
    cb38:	e1a00005 	mov	r0, r5
    cb3c:	e8bd8070 	pop	{r4, r5, r6, pc}
    cb40:	ebfff476 	bl	9d20 <EnterCritical>
    cb44:	e5942010 	ldr	r2, [r4, #16]
    cb48:	e5943014 	ldr	r3, [r4, #20]
    cb4c:	e1520003 	cmp	r2, r3
    cb50:	1affffe2 	bne	cae0 <CLogger::Read(void*, unsigned int)+0x2c>
    cb54:	e5943018 	ldr	r3, [r4, #24]
    cb58:	e3530000 	cmp	r3, #0
    cb5c:	0a000000 	beq	cb64 <CLogger::Read(void*, unsigned int)+0xb0>
    cb60:	ebfff47b 	bl	9d54 <LeaveCritical>
    cb64:	e3e05000 	mvn	r5, #0
    cb68:	e1a00005 	mov	r0, r5
    cb6c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cb70 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    cb70:	e590c000 	ldr	ip, [r0]
    cb74:	e152000c 	cmp	r2, ip
    cb78:	812fff1e 	bxhi	lr
    cb7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cb80:	e1a05002 	mov	r5, r2
    cb84:	e1a04000 	mov	r4, r0
    cb88:	e24dd020 	sub	sp, sp, #32
    cb8c:	e1a07003 	mov	r7, r3
    cb90:	e1a0000d 	mov	r0, sp
    cb94:	e1a06001 	mov	r6, r1
    cb98:	eb00017c 	bl	d190 <CString::CString()>
    cb9c:	e3550000 	cmp	r5, #0
    cba0:	0a000049 	beq	cccc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
    cba4:	e5940004 	ldr	r0, [r4, #4]
    cba8:	e3500000 	cmp	r0, #0
    cbac:	0a000032 	beq	cc7c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    cbb0:	ebfff554 	bl	a108 <CTimer::GetTimeString()>
    cbb4:	e2508000 	subs	r8, r0, #0
    cbb8:	0a00000b 	beq	cbec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
    cbbc:	eb000189 	bl	d1e8 <CString::operator char const*() const>
    cbc0:	e1a01000 	mov	r1, r0
    cbc4:	e1a0000d 	mov	r0, sp
    cbc8:	eb0001a1 	bl	d254 <CString::Append(char const*)>
    cbcc:	e1a0000d 	mov	r0, sp
    cbd0:	e3011af0 	movw	r1, #6896	; 0x1af0
    cbd4:	e3401001 	movt	r1, #1
    cbd8:	eb00019d 	bl	d254 <CString::Append(char const*)>
    cbdc:	e5983000 	ldr	r3, [r8]
    cbe0:	e1a00008 	mov	r0, r8
    cbe4:	e5933004 	ldr	r3, [r3, #4]
    cbe8:	e12fff33 	blx	r3
    cbec:	e1a01006 	mov	r1, r6
    cbf0:	e1a0000d 	mov	r0, sp
    cbf4:	eb000196 	bl	d254 <CString::Append(char const*)>
    cbf8:	e28d6010 	add	r6, sp, #16
    cbfc:	e1a0000d 	mov	r0, sp
    cc00:	e3011af4 	movw	r1, #6900	; 0x1af4
    cc04:	e3401001 	movt	r1, #1
    cc08:	eb000191 	bl	d254 <CString::Append(char const*)>
    cc0c:	e1a00006 	mov	r0, r6
    cc10:	eb00015e 	bl	d190 <CString::CString()>
    cc14:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    cc18:	e1a01007 	mov	r1, r7
    cc1c:	e1a00006 	mov	r0, r6
    cc20:	eb000292 	bl	d670 <CString::FormatV(char const*, std::__va_list)>
    cc24:	e1a00006 	mov	r0, r6
    cc28:	eb00016e 	bl	d1e8 <CString::operator char const*() const>
    cc2c:	e1a01000 	mov	r1, r0
    cc30:	e1a0000d 	mov	r0, sp
    cc34:	eb000186 	bl	d254 <CString::Append(char const*)>
    cc38:	e3550000 	cmp	r5, #0
    cc3c:	0a00003c 	beq	cd34 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    cc40:	e1a0000d 	mov	r0, sp
    cc44:	e3011b00 	movw	r1, #6912	; 0x1b00
    cc48:	e3401001 	movt	r1, #1
    cc4c:	eb000180 	bl	d254 <CString::Append(char const*)>
    cc50:	e1a0000d 	mov	r0, sp
    cc54:	eb000163 	bl	d1e8 <CString::operator char const*() const>
    cc58:	e1a01000 	mov	r1, r0
    cc5c:	e1a00004 	mov	r0, r4
    cc60:	ebffff69 	bl	ca0c <CLogger::Write(char const*)>
    cc64:	e1a00006 	mov	r0, r6
    cc68:	eb000116 	bl	d0c8 <CString::~CString()>
    cc6c:	e1a0000d 	mov	r0, sp
    cc70:	eb000114 	bl	d0c8 <CString::~CString()>
    cc74:	e28dd020 	add	sp, sp, #32
    cc78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cc7c:	e1a01006 	mov	r1, r6
    cc80:	e1a0000d 	mov	r0, sp
    cc84:	eb000172 	bl	d254 <CString::Append(char const*)>
    cc88:	e28d6010 	add	r6, sp, #16
    cc8c:	e1a0000d 	mov	r0, sp
    cc90:	e3011af4 	movw	r1, #6900	; 0x1af4
    cc94:	e3401001 	movt	r1, #1
    cc98:	eb00016d 	bl	d254 <CString::Append(char const*)>
    cc9c:	e1a00006 	mov	r0, r6
    cca0:	eb00013a 	bl	d190 <CString::CString()>
    cca4:	e1a01007 	mov	r1, r7
    cca8:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    ccac:	e1a00006 	mov	r0, r6
    ccb0:	eb00026e 	bl	d670 <CString::FormatV(char const*, std::__va_list)>
    ccb4:	e1a00006 	mov	r0, r6
    ccb8:	eb00014a 	bl	d1e8 <CString::operator char const*() const>
    ccbc:	e1a01000 	mov	r1, r0
    ccc0:	e1a0000d 	mov	r0, sp
    ccc4:	eb000162 	bl	d254 <CString::Append(char const*)>
    ccc8:	eaffffdc 	b	cc40 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
    cccc:	e3011ae8 	movw	r1, #6888	; 0x1ae8
    ccd0:	e3401001 	movt	r1, #1
    ccd4:	e1a0000d 	mov	r0, sp
    ccd8:	eb000148 	bl	d200 <CString::operator=(char const*)>
    ccdc:	e5940004 	ldr	r0, [r4, #4]
    cce0:	e3500000 	cmp	r0, #0
    cce4:	1affffb1 	bne	cbb0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    cce8:	e1a01006 	mov	r1, r6
    ccec:	e1a0000d 	mov	r0, sp
    ccf0:	eb000157 	bl	d254 <CString::Append(char const*)>
    ccf4:	e28d6010 	add	r6, sp, #16
    ccf8:	e1a0000d 	mov	r0, sp
    ccfc:	e3011af4 	movw	r1, #6900	; 0x1af4
    cd00:	e3401001 	movt	r1, #1
    cd04:	eb000152 	bl	d254 <CString::Append(char const*)>
    cd08:	e1a00006 	mov	r0, r6
    cd0c:	eb00011f 	bl	d190 <CString::CString()>
    cd10:	e1a01007 	mov	r1, r7
    cd14:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    cd18:	e1a00006 	mov	r0, r6
    cd1c:	eb000253 	bl	d670 <CString::FormatV(char const*, std::__va_list)>
    cd20:	e1a00006 	mov	r0, r6
    cd24:	eb00012f 	bl	d1e8 <CString::operator char const*() const>
    cd28:	e1a01000 	mov	r1, r0
    cd2c:	e1a0000d 	mov	r0, sp
    cd30:	eb000147 	bl	d254 <CString::Append(char const*)>
    cd34:	e1a0000d 	mov	r0, sp
    cd38:	e3011af8 	movw	r1, #6904	; 0x1af8
    cd3c:	e3401001 	movt	r1, #1
    cd40:	eb000143 	bl	d254 <CString::Append(char const*)>
    cd44:	e1a0000d 	mov	r0, sp
    cd48:	e3011b00 	movw	r1, #6912	; 0x1b00
    cd4c:	e3401001 	movt	r1, #1
    cd50:	eb00013f 	bl	d254 <CString::Append(char const*)>
    cd54:	e1a0000d 	mov	r0, sp
    cd58:	eb000122 	bl	d1e8 <CString::operator char const*() const>
    cd5c:	e1a01000 	mov	r1, r0
    cd60:	e1a00004 	mov	r0, r4
    cd64:	ebffff28 	bl	ca0c <CLogger::Write(char const*)>
    cd68:	ebfff41a 	bl	9dd8 <halt>
    cd6c:	eaffffbc 	b	cc64 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

0000cd70 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    cd70:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    cd74:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    cd78:	e24dd010 	sub	sp, sp, #16
    cd7c:	e28dc018 	add	ip, sp, #24
    cd80:	e59d3014 	ldr	r3, [sp, #20]
    cd84:	e58dc000 	str	ip, [sp]
    cd88:	e58dc00c 	str	ip, [sp, #12]
    cd8c:	ebffff77 	bl	cb70 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    cd90:	e28dd010 	add	sp, sp, #16
    cd94:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    cd98:	e28dd004 	add	sp, sp, #4
    cd9c:	e12fff1e 	bx	lr

0000cda0 <CLogger::Initialize(CDevice*)>:
    cda0:	e92d4010 	push	{r4, lr}
    cda4:	e1a04000 	mov	r4, r0
    cda8:	e24dd008 	sub	sp, sp, #8
    cdac:	e5801008 	str	r1, [r0, #8]
    cdb0:	eb00082f 	bl	ee74 <CMachineInfo::Get()>
    cdb4:	eb0007bc 	bl	ecac <CMachineInfo::GetMachineName() const>
    cdb8:	e3a02003 	mov	r2, #3
    cdbc:	e58d0000 	str	r0, [sp]
    cdc0:	e3013b04 	movw	r3, #6916	; 0x1b04
    cdc4:	e3403001 	movt	r3, #1
    cdc8:	e1a00004 	mov	r0, r4
    cdcc:	e3011b1c 	movw	r1, #6940	; 0x1b1c
    cdd0:	e3401001 	movt	r1, #1
    cdd4:	ebffffe5 	bl	cd70 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cdd8:	e3a00001 	mov	r0, #1
    cddc:	e28dd008 	add	sp, sp, #8
    cde0:	e8bd8010 	pop	{r4, pc}

0000cde4 <CSerialDevice::Write(void const*, unsigned int)>:
    cde4:	e5903084 	ldr	r3, [r0, #132]	; 0x84
    cde8:	e92d4070 	push	{r4, r5, r6, lr}
    cdec:	e1a06000 	mov	r6, r0
    cdf0:	e3530000 	cmp	r3, #0
    cdf4:	e1a04001 	mov	r4, r1
    cdf8:	e1a05002 	mov	r5, r2
    cdfc:	1a00001d 	bne	ce78 <CSerialDevice::Write(void const*, unsigned int)+0x94>
    ce00:	e3540000 	cmp	r4, #0
    ce04:	0a00001d 	beq	ce80 <CSerialDevice::Write(void const*, unsigned int)+0x9c>
    ce08:	e3550000 	cmp	r5, #0
    ce0c:	0a00000e 	beq	ce4c <CSerialDevice::Write(void const*, unsigned int)+0x68>
    ce10:	e3a02a01 	mov	r2, #4096	; 0x1000
    ce14:	e3432f20 	movt	r2, #16160	; 0x3f20
    ce18:	e084c005 	add	ip, r4, r5
    ce1c:	e1a01004 	mov	r1, r4
    ce20:	e3a0e00d 	mov	lr, #13
    ce24:	e5d10000 	ldrb	r0, [r1]
    ce28:	e5923018 	ldr	r3, [r2, #24]
    ce2c:	e3130020 	tst	r3, #32
    ce30:	1afffffc 	bne	ce28 <CSerialDevice::Write(void const*, unsigned int)+0x44>
    ce34:	e5820000 	str	r0, [r2]
    ce38:	e4d13001 	ldrb	r3, [r1], #1
    ce3c:	e353000a 	cmp	r3, #10
    ce40:	0a000007 	beq	ce64 <CSerialDevice::Write(void const*, unsigned int)+0x80>
    ce44:	e15c0001 	cmp	ip, r1
    ce48:	1afffff5 	bne	ce24 <CSerialDevice::Write(void const*, unsigned int)+0x40>
    ce4c:	e5963084 	ldr	r3, [r6, #132]	; 0x84
    ce50:	e3530000 	cmp	r3, #0
    ce54:	0a000000 	beq	ce5c <CSerialDevice::Write(void const*, unsigned int)+0x78>
    ce58:	ebfff3bd 	bl	9d54 <LeaveCritical>
    ce5c:	e1a00005 	mov	r0, r5
    ce60:	e8bd8070 	pop	{r4, r5, r6, pc}
    ce64:	e5923018 	ldr	r3, [r2, #24]
    ce68:	e3130020 	tst	r3, #32
    ce6c:	1afffffc 	bne	ce64 <CSerialDevice::Write(void const*, unsigned int)+0x80>
    ce70:	e582e000 	str	lr, [r2]
    ce74:	eafffff2 	b	ce44 <CSerialDevice::Write(void const*, unsigned int)+0x60>
    ce78:	ebfff3a8 	bl	9d20 <EnterCritical>
    ce7c:	eaffffdf 	b	ce00 <CSerialDevice::Write(void const*, unsigned int)+0x1c>
    ce80:	e3011b40 	movw	r1, #6976	; 0x1b40
    ce84:	e3401001 	movt	r1, #1
    ce88:	e3010b4c 	movw	r0, #6988	; 0x1b4c
    ce8c:	e3400001 	movt	r0, #1
    ce90:	e3a02090 	mov	r2, #144	; 0x90
    ce94:	ebfffd59 	bl	c400 <assertion_failed>
    ce98:	eaffffda 	b	ce08 <CSerialDevice::Write(void const*, unsigned int)+0x24>

0000ce9c <CSerialDevice::CSerialDevice()>:
    ce9c:	e92d4010 	push	{r4, lr}
    cea0:	e1a04000 	mov	r4, r0
    cea4:	ebfff707 	bl	aac8 <CDevice::CDevice()>
    cea8:	e1a00004 	mov	r0, r4
    ceac:	e59fc05c 	ldr	ip, [pc, #92]	; cf10 <CSerialDevice::CSerialDevice()+0x74>
    ceb0:	e3a03000 	mov	r3, #0
    ceb4:	e3a01020 	mov	r1, #32
    ceb8:	e1a02003 	mov	r2, r3
    cebc:	e480c004 	str	ip, [r0], #4
    cec0:	ebfff272 	bl	9890 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    cec4:	e3a03000 	mov	r3, #0
    cec8:	e1a02003 	mov	r2, r3
    cecc:	e2840024 	add	r0, r4, #36	; 0x24
    ced0:	e3a01021 	mov	r1, #33	; 0x21
    ced4:	ebfff26d 	bl	9890 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    ced8:	e2840044 	add	r0, r4, #68	; 0x44
    cedc:	e3a03000 	mov	r3, #0
    cee0:	e3a02004 	mov	r2, #4
    cee4:	e3a0100e 	mov	r1, #14
    cee8:	ebfff268 	bl	9890 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    ceec:	e2840064 	add	r0, r4, #100	; 0x64
    cef0:	e3a03000 	mov	r3, #0
    cef4:	e3a02004 	mov	r2, #4
    cef8:	e3a0100f 	mov	r1, #15
    cefc:	ebfff263 	bl	9890 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    cf00:	e3a03001 	mov	r3, #1
    cf04:	e5843084 	str	r3, [r4, #132]	; 0x84
    cf08:	e1a00004 	mov	r0, r4
    cf0c:	e8bd8010 	pop	{r4, pc}
    cf10:	00011b2c 	.word	0x00011b2c

0000cf14 <CSerialDevice::Initialize(unsigned int)>:
    cf14:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cf18:	e1a07001 	mov	r7, r1
    cf1c:	e1a05000 	mov	r5, r0
    cf20:	eb0007d3 	bl	ee74 <CMachineInfo::Get()>
    cf24:	e3a01002 	mov	r1, #2
    cf28:	eb000775 	bl	ed04 <CMachineInfo::GetClockRate(unsigned int) const>
    cf2c:	e2508000 	subs	r8, r0, #0
    cf30:	0a00003a 	beq	d020 <CSerialDevice::Initialize(unsigned int)+0x10c>
    cf34:	e30c3594 	movw	r3, #50580	; 0xc594
    cf38:	e340302d 	movt	r3, #45	; 0x2d
    cf3c:	e2472f4b 	sub	r2, r7, #300	; 0x12c
    cf40:	e1520003 	cmp	r2, r3
    cf44:	8a00002e 	bhi	d004 <CSerialDevice::Initialize(unsigned int)+0xf0>
    cf48:	e1a04207 	lsl	r4, r7, #4
    cf4c:	e30f3ffe 	movw	r3, #65534	; 0xfffe
    cf50:	e736f418 	udiv	r6, r8, r4
    cf54:	e2462001 	sub	r2, r6, #1
    cf58:	e1520003 	cmp	r2, r3
    cf5c:	8a000021 	bhi	cfe8 <CSerialDevice::Initialize(unsigned int)+0xd4>
    cf60:	e0618694 	mls	r1, r4, r6, r8
    cf64:	e1a01181 	lsl	r1, r1, #3
    cf68:	e731f711 	udiv	r1, r1, r7
    cf6c:	e2014001 	and	r4, r1, #1
    cf70:	e08440a1 	add	r4, r4, r1, lsr #1
    cf74:	e354003f 	cmp	r4, #63	; 0x3f
    cf78:	9a000005 	bls	cf94 <CSerialDevice::Initialize(unsigned int)+0x80>
    cf7c:	e3011b40 	movw	r1, #6976	; 0x1b40
    cf80:	e3401001 	movt	r1, #1
    cf84:	e3010bb8 	movw	r0, #7096	; 0x1bb8
    cf88:	e3400001 	movt	r0, #1
    cf8c:	e3a02076 	mov	r2, #118	; 0x76
    cf90:	ebfffd1a 	bl	c400 <assertion_failed>
    cf94:	e3a02a01 	mov	r2, #4096	; 0x1000
    cf98:	e3432f20 	movt	r2, #16160	; 0x3f20
    cf9c:	e3003301 	movw	r3, #769	; 0x301
    cfa0:	e30007ff 	movw	r0, #2047	; 0x7ff
    cfa4:	e3a07000 	mov	r7, #0
    cfa8:	e3a01060 	mov	r1, #96	; 0x60
    cfac:	e5827038 	str	r7, [r2, #56]	; 0x38
    cfb0:	e5820044 	str	r0, [r2, #68]	; 0x44
    cfb4:	e5826024 	str	r6, [r2, #36]	; 0x24
    cfb8:	e5824028 	str	r4, [r2, #40]	; 0x28
    cfbc:	e582102c 	str	r1, [r2, #44]	; 0x2c
    cfc0:	e5827034 	str	r7, [r2, #52]	; 0x34
    cfc4:	e5823030 	str	r3, [r2, #48]	; 0x30
    cfc8:	ebfffe5f 	bl	c94c <CDeviceNameService::Get()>
    cfcc:	e1a03007 	mov	r3, r7
    cfd0:	e1a02005 	mov	r2, r5
    cfd4:	e3011bcc 	movw	r1, #7116	; 0x1bcc
    cfd8:	e3401001 	movt	r1, #1
    cfdc:	ebfffde6 	bl	c77c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    cfe0:	e3a00001 	mov	r0, #1
    cfe4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cfe8:	e3011b40 	movw	r1, #6976	; 0x1b40
    cfec:	e3401001 	movt	r1, #1
    cff0:	e3010b94 	movw	r0, #7060	; 0x1b94
    cff4:	e3400001 	movt	r0, #1
    cff8:	e3a02073 	mov	r2, #115	; 0x73
    cffc:	ebfffcff 	bl	c400 <assertion_failed>
    d000:	eaffffd6 	b	cf60 <CSerialDevice::Initialize(unsigned int)+0x4c>
    d004:	e3011b40 	movw	r1, #6976	; 0x1b40
    d008:	e3401001 	movt	r1, #1
    d00c:	e3010b68 	movw	r0, #7016	; 0x1b68
    d010:	e3400001 	movt	r0, #1
    d014:	e3a02070 	mov	r2, #112	; 0x70
    d018:	ebfffcf8 	bl	c400 <assertion_failed>
    d01c:	eaffffc9 	b	cf48 <CSerialDevice::Initialize(unsigned int)+0x34>
    d020:	e3011b40 	movw	r1, #6976	; 0x1b40
    d024:	e3401001 	movt	r1, #1
    d028:	e3010b58 	movw	r0, #7000	; 0x1b58
    d02c:	e3400001 	movt	r0, #1
    d030:	e3a0206e 	mov	r2, #110	; 0x6e
    d034:	ebfffcf1 	bl	c400 <assertion_failed>
    d038:	eaffffbd 	b	cf34 <CSerialDevice::Initialize(unsigned int)+0x20>

0000d03c <CSerialDevice::Write(unsigned char)>:
    d03c:	e3a02a01 	mov	r2, #4096	; 0x1000
    d040:	e3432f20 	movt	r2, #16160	; 0x3f20
    d044:	e5923018 	ldr	r3, [r2, #24]
    d048:	e3130020 	tst	r3, #32
    d04c:	1afffffc 	bne	d044 <CSerialDevice::Write(unsigned char)+0x8>
    d050:	e5821000 	str	r1, [r2]
    d054:	e12fff1e 	bx	lr

0000d058 <CSerialDevice::~CSerialDevice()>:
    d058:	e3a03a01 	mov	r3, #4096	; 0x1000
    d05c:	e3433f20 	movt	r3, #16160	; 0x3f20
    d060:	e59f1040 	ldr	r1, [pc, #64]	; d0a8 <CSerialDevice::~CSerialDevice()+0x50>
    d064:	e3a02000 	mov	r2, #0
    d068:	e92d4010 	push	{r4, lr}
    d06c:	e1a04000 	mov	r4, r0
    d070:	e4801064 	str	r1, [r0], #100	; 0x64
    d074:	e5832038 	str	r2, [r3, #56]	; 0x38
    d078:	e5832030 	str	r2, [r3, #48]	; 0x30
    d07c:	ebffef04 	bl	8c94 <CGPIOPin::~CGPIOPin()>
    d080:	e2840044 	add	r0, r4, #68	; 0x44
    d084:	ebffef02 	bl	8c94 <CGPIOPin::~CGPIOPin()>
    d088:	e2840024 	add	r0, r4, #36	; 0x24
    d08c:	ebffef00 	bl	8c94 <CGPIOPin::~CGPIOPin()>
    d090:	e2840004 	add	r0, r4, #4
    d094:	ebffeefe 	bl	8c94 <CGPIOPin::~CGPIOPin()>
    d098:	e1a00004 	mov	r0, r4
    d09c:	ebfff67e 	bl	aa9c <CDevice::~CDevice()>
    d0a0:	e1a00004 	mov	r0, r4
    d0a4:	e8bd8010 	pop	{r4, pc}
    d0a8:	00011b2c 	.word	0x00011b2c

0000d0ac <CSerialDevice::~CSerialDevice()>:
    d0ac:	e92d4010 	push	{r4, lr}
    d0b0:	e1a04000 	mov	r4, r0
    d0b4:	ebffffe7 	bl	d058 <CSerialDevice::~CSerialDevice()>
    d0b8:	e1a00004 	mov	r0, r4
    d0bc:	ebfff315 	bl	9d18 <operator delete(void*)>
    d0c0:	e1a00004 	mov	r0, r4
    d0c4:	e8bd8010 	pop	{r4, pc}

0000d0c8 <CString::~CString()>:
    d0c8:	e92d4010 	push	{r4, lr}
    d0cc:	e1a04000 	mov	r4, r0
    d0d0:	e5900004 	ldr	r0, [r0, #4]
    d0d4:	e59f3014 	ldr	r3, [pc, #20]	; d0f0 <CString::~CString()+0x28>
    d0d8:	e3500000 	cmp	r0, #0
    d0dc:	e5843000 	str	r3, [r4]
    d0e0:	0a000000 	beq	d0e8 <CString::~CString()+0x20>
    d0e4:	ebfff30c 	bl	9d1c <operator delete[](void*)>
    d0e8:	e1a00004 	mov	r0, r4
    d0ec:	e8bd8010 	pop	{r4, pc}
    d0f0:	00011bdc 	.word	0x00011bdc

0000d0f4 <CString::~CString()>:
    d0f4:	e92d4010 	push	{r4, lr}
    d0f8:	e1a04000 	mov	r4, r0
    d0fc:	e5900004 	ldr	r0, [r0, #4]
    d100:	e59f301c 	ldr	r3, [pc, #28]	; d124 <CString::~CString()+0x30>
    d104:	e3500000 	cmp	r0, #0
    d108:	e5843000 	str	r3, [r4]
    d10c:	0a000000 	beq	d114 <CString::~CString()+0x20>
    d110:	ebfff301 	bl	9d1c <operator delete[](void*)>
    d114:	e1a00004 	mov	r0, r4
    d118:	ebfff2fe 	bl	9d18 <operator delete(void*)>
    d11c:	e1a00004 	mov	r0, r4
    d120:	e8bd8010 	pop	{r4, pc}
    d124:	00011bdc 	.word	0x00011bdc

0000d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    d128:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d12c:	e990002c 	ldmib	r0, {r2, r3, r5}
    d130:	e0455002 	sub	r5, r5, r2
    d134:	e0851001 	add	r1, r5, r1
    d138:	e2812001 	add	r2, r1, #1
    d13c:	e1520003 	cmp	r2, r3
    d140:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    d144:	e1a04000 	mov	r4, r0
    d148:	e2816041 	add	r6, r1, #65	; 0x41
    d14c:	e1a00006 	mov	r0, r6
    d150:	ebfff2ef 	bl	9d14 <operator new[](unsigned int)>
    d154:	e3a02000 	mov	r2, #0
    d158:	e594300c 	ldr	r3, [r4, #12]
    d15c:	e1a07000 	mov	r7, r0
    d160:	e5c32000 	strb	r2, [r3]
    d164:	e5941004 	ldr	r1, [r4, #4]
    d168:	eb000ab2 	bl	fc38 <strcpy>
    d16c:	e5940004 	ldr	r0, [r4, #4]
    d170:	e3500000 	cmp	r0, #0
    d174:	0a000000 	beq	d17c <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    d178:	ebfff2e7 	bl	9d1c <operator delete[](void*)>
    d17c:	e0875005 	add	r5, r7, r5
    d180:	e5847004 	str	r7, [r4, #4]
    d184:	e584500c 	str	r5, [r4, #12]
    d188:	e5846008 	str	r6, [r4, #8]
    d18c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d190 <CString::CString()>:
    d190:	e59f100c 	ldr	r1, [pc, #12]	; d1a4 <CString::CString()+0x14>
    d194:	e3a02000 	mov	r2, #0
    d198:	e5802008 	str	r2, [r0, #8]
    d19c:	e8800006 	stm	r0, {r1, r2}
    d1a0:	e12fff1e 	bx	lr
    d1a4:	00011bdc 	.word	0x00011bdc

0000d1a8 <CString::CString(char const*)>:
    d1a8:	e92d4070 	push	{r4, r5, r6, lr}
    d1ac:	e1a04000 	mov	r4, r0
    d1b0:	e59f302c 	ldr	r3, [pc, #44]	; d1e4 <CString::CString(char const*)+0x3c>
    d1b4:	e1a00001 	mov	r0, r1
    d1b8:	e1a05001 	mov	r5, r1
    d1bc:	e5843000 	str	r3, [r4]
    d1c0:	eb000a77 	bl	fba4 <strlen>
    d1c4:	e2800001 	add	r0, r0, #1
    d1c8:	e5840008 	str	r0, [r4, #8]
    d1cc:	ebfff2d0 	bl	9d14 <operator new[](unsigned int)>
    d1d0:	e1a01005 	mov	r1, r5
    d1d4:	e5840004 	str	r0, [r4, #4]
    d1d8:	eb000a96 	bl	fc38 <strcpy>
    d1dc:	e1a00004 	mov	r0, r4
    d1e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    d1e4:	00011bdc 	.word	0x00011bdc

0000d1e8 <CString::operator char const*() const>:
    d1e8:	e5900004 	ldr	r0, [r0, #4]
    d1ec:	e30038c8 	movw	r3, #2248	; 0x8c8
    d1f0:	e3403001 	movt	r3, #1
    d1f4:	e3500000 	cmp	r0, #0
    d1f8:	01a00003 	moveq	r0, r3
    d1fc:	e12fff1e 	bx	lr

0000d200 <CString::operator=(char const*)>:
    d200:	e92d4070 	push	{r4, r5, r6, lr}
    d204:	e1a04000 	mov	r4, r0
    d208:	e5900004 	ldr	r0, [r0, #4]
    d20c:	e1a05001 	mov	r5, r1
    d210:	e3500000 	cmp	r0, #0
    d214:	0a000000 	beq	d21c <CString::operator=(char const*)+0x1c>
    d218:	ebfff2bf 	bl	9d1c <operator delete[](void*)>
    d21c:	e1a00005 	mov	r0, r5
    d220:	eb000a5f 	bl	fba4 <strlen>
    d224:	e2800001 	add	r0, r0, #1
    d228:	e5840008 	str	r0, [r4, #8]
    d22c:	ebfff2b8 	bl	9d14 <operator new[](unsigned int)>
    d230:	e1a01005 	mov	r1, r5
    d234:	e5840004 	str	r0, [r4, #4]
    d238:	eb000a7e 	bl	fc38 <strcpy>
    d23c:	e5940004 	ldr	r0, [r4, #4]
    d240:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d244 <CString::GetLength() const>:
    d244:	e5900004 	ldr	r0, [r0, #4]
    d248:	e3500000 	cmp	r0, #0
    d24c:	012fff1e 	bxeq	lr
    d250:	ea000a53 	b	fba4 <strlen>

0000d254 <CString::Append(char const*)>:
    d254:	e92d4070 	push	{r4, r5, r6, lr}
    d258:	e1a04000 	mov	r4, r0
    d25c:	e5900004 	ldr	r0, [r0, #4]
    d260:	e3a03001 	mov	r3, #1
    d264:	e1a06001 	mov	r6, r1
    d268:	e3500000 	cmp	r0, #0
    d26c:	e5843008 	str	r3, [r4, #8]
    d270:	0a000003 	beq	d284 <CString::Append(char const*)+0x30>
    d274:	eb000a4a 	bl	fba4 <strlen>
    d278:	e5943008 	ldr	r3, [r4, #8]
    d27c:	e0830000 	add	r0, r3, r0
    d280:	e5840008 	str	r0, [r4, #8]
    d284:	e1a00006 	mov	r0, r6
    d288:	eb000a45 	bl	fba4 <strlen>
    d28c:	e5943008 	ldr	r3, [r4, #8]
    d290:	e0800003 	add	r0, r0, r3
    d294:	e5840008 	str	r0, [r4, #8]
    d298:	ebfff29d 	bl	9d14 <operator new[](unsigned int)>
    d29c:	e5941004 	ldr	r1, [r4, #4]
    d2a0:	e1a05000 	mov	r5, r0
    d2a4:	e3510000 	cmp	r1, #0
    d2a8:	05c01000 	strbeq	r1, [r0]
    d2ac:	0a000004 	beq	d2c4 <CString::Append(char const*)+0x70>
    d2b0:	eb000a60 	bl	fc38 <strcpy>
    d2b4:	e5940004 	ldr	r0, [r4, #4]
    d2b8:	e3500000 	cmp	r0, #0
    d2bc:	0a000000 	beq	d2c4 <CString::Append(char const*)+0x70>
    d2c0:	ebfff295 	bl	9d1c <operator delete[](void*)>
    d2c4:	e1a01006 	mov	r1, r6
    d2c8:	e1a00005 	mov	r0, r5
    d2cc:	eb000a77 	bl	fcb0 <strcat>
    d2d0:	e5845004 	str	r5, [r4, #4]
    d2d4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d2d8 <CString::Compare(char const*) const>:
    d2d8:	e5900004 	ldr	r0, [r0, #4]
    d2dc:	ea000a3a 	b	fbcc <strcmp>

0000d2e0 <CString::Find(char) const>:
    d2e0:	e5902004 	ldr	r2, [r0, #4]
    d2e4:	e1d230d0 	ldrsb	r3, [r2]
    d2e8:	e3530000 	cmp	r3, #0
    d2ec:	0a000009 	beq	d318 <CString::Find(char) const+0x38>
    d2f0:	e1510003 	cmp	r1, r3
    d2f4:	e3a00000 	mov	r0, #0
    d2f8:	1a000002 	bne	d308 <CString::Find(char) const+0x28>
    d2fc:	ea000007 	b	d320 <CString::Find(char) const+0x40>
    d300:	e1530001 	cmp	r3, r1
    d304:	012fff1e 	bxeq	lr
    d308:	e1f230d1 	ldrsb	r3, [r2, #1]!
    d30c:	e2800001 	add	r0, r0, #1
    d310:	e3530000 	cmp	r3, #0
    d314:	1afffff9 	bne	d300 <CString::Find(char) const+0x20>
    d318:	e3e00000 	mvn	r0, #0
    d31c:	e12fff1e 	bx	lr
    d320:	e12fff1e 	bx	lr

0000d324 <CString::PutChar(char, unsigned int)>:
    d324:	e92d4070 	push	{r4, r5, r6, lr}
    d328:	e2524000 	subs	r4, r2, #0
    d32c:	08bd8070 	popeq	{r4, r5, r6, pc}
    d330:	e1a06001 	mov	r6, r1
    d334:	e1a01004 	mov	r1, r4
    d338:	e1a05000 	mov	r5, r0
    d33c:	ebffff79 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d340:	e2443001 	sub	r3, r4, #1
    d344:	e595200c 	ldr	r2, [r5, #12]
    d348:	e2433001 	sub	r3, r3, #1
    d34c:	e3730001 	cmn	r3, #1
    d350:	e2820001 	add	r0, r2, #1
    d354:	e585000c 	str	r0, [r5, #12]
    d358:	e5c26000 	strb	r6, [r2]
    d35c:	1afffff8 	bne	d344 <CString::PutChar(char, unsigned int)+0x20>
    d360:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d364 <CString::PutString(char const*)>:
    d364:	e92d4070 	push	{r4, r5, r6, lr}
    d368:	e1a04000 	mov	r4, r0
    d36c:	e1a00001 	mov	r0, r1
    d370:	e1a05001 	mov	r5, r1
    d374:	eb000a0a 	bl	fba4 <strlen>
    d378:	e2506000 	subs	r6, r0, #0
    d37c:	0a000002 	beq	d38c <CString::PutString(char const*)+0x28>
    d380:	e1a01006 	mov	r1, r6
    d384:	e1a00004 	mov	r0, r4
    d388:	ebffff66 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d38c:	e1a01005 	mov	r1, r5
    d390:	e594000c 	ldr	r0, [r4, #12]
    d394:	eb000a27 	bl	fc38 <strcpy>
    d398:	e594100c 	ldr	r1, [r4, #12]
    d39c:	e0811006 	add	r1, r1, r6
    d3a0:	e584100c 	str	r1, [r4, #12]
    d3a4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d3a8 <CString::ReserveSpace(unsigned int)>:
    d3a8:	e3510000 	cmp	r1, #0
    d3ac:	012fff1e 	bxeq	lr
    d3b0:	eaffff5c 	b	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000d3b4 <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    d3b4:	e1510002 	cmp	r1, r2
    d3b8:	e92d4070 	push	{r4, r5, r6, lr}
    d3bc:	23a0c001 	movcs	ip, #1
    d3c0:	3a000018 	bcc	d428 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x74>
    d3c4:	e00c0c92 	mul	ip, r2, ip
    d3c8:	e734fc11 	udiv	r4, r1, ip
    d3cc:	e1540002 	cmp	r4, r2
    d3d0:	e1a0e004 	mov	lr, r4
    d3d4:	2afffffa 	bcs	d3c4 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x10>
    d3d8:	e3530000 	cmp	r3, #0
    d3dc:	e1a05000 	mov	r5, r0
    d3e0:	13a06037 	movne	r6, #55	; 0x37
    d3e4:	03a06057 	moveq	r6, #87	; 0x57
    d3e8:	ea000001 	b	d3f4 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x40>
    d3ec:	e734fc11 	udiv	r4, r1, ip
    d3f0:	e1a0e004 	mov	lr, r4
    d3f4:	e061149c 	mls	r1, ip, r4, r1
    d3f8:	e35e0009 	cmp	lr, #9
    d3fc:	e73cf21c 	udiv	ip, ip, r2
    d400:	e086300e 	add	r3, r6, lr
    d404:	e28ee030 	add	lr, lr, #48	; 0x30
    d408:	e2855001 	add	r5, r5, #1
    d40c:	e6af3073 	sxtb	r3, r3
    d410:	96af307e 	sxtbls	r3, lr
    d414:	e35c0000 	cmp	ip, #0
    d418:	e5453001 	strb	r3, [r5, #-1]
    d41c:	1afffff2 	bne	d3ec <CString::ntoa(char*, unsigned long, unsigned int, int)+0x38>
    d420:	e5c5c000 	strb	ip, [r5]
    d424:	e8bd8070 	pop	{r4, r5, r6, pc}
    d428:	e1a0e001 	mov	lr, r1
    d42c:	e3a0c001 	mov	ip, #1
    d430:	e1a04001 	mov	r4, r1
    d434:	eaffffe7 	b	d3d8 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x24>

0000d438 <CString::ftoa(char*, double, unsigned int)>:
    d438:	eeb50bc0 	vcmpe.f64	d0, #0.0
    d43c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d440:	eddf0b88 	vldr	d16, [pc, #544]	; d668 <CString::ftoa(char*, double, unsigned int)+0x230>
    d444:	ed2d8b02 	vpush	{d8}
    d448:	eeb08b40 	vmov.f64	d8, d0
    d44c:	e24dd010 	sub	sp, sp, #16
    d450:	e1a05000 	mov	r5, r0
    d454:	e1a06001 	mov	r6, r1
    d458:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    d45c:	4eb18b40 	vnegmi.f64	d8, d0
    d460:	43a0302d 	movmi	r3, #45	; 0x2d
    d464:	45c03000 	strbmi	r3, [r0]
    d468:	42807001 	addmi	r7, r0, #1
    d46c:	51a07000 	movpl	r7, r0
    d470:	eeb48be0 	vcmpe.f64	d8, d16
    d474:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    d478:	ca000068 	bgt	d620 <CString::ftoa(char*, double, unsigned int)+0x1e8>
    d47c:	eefc7bc8 	vcvt.u32.f64	s15, d8
    d480:	ee174a90 	vmov	r4, s15
    d484:	e3540009 	cmp	r4, #9
    d488:	83a03001 	movhi	r3, #1
    d48c:	83a0100a 	movhi	r1, #10
    d490:	9a00006a 	bls	d640 <CString::ftoa(char*, double, unsigned int)+0x208>
    d494:	e0030391 	mul	r3, r1, r3
    d498:	e732f314 	udiv	r2, r4, r3
    d49c:	e3520009 	cmp	r2, #9
    d4a0:	8afffffb 	bhi	d494 <CString::ftoa(char*, double, unsigned int)+0x5c>
    d4a4:	e30c8ccd 	movw	r8, #52429	; 0xcccd
    d4a8:	e34c8ccc 	movt	r8, #52428	; 0xcccc
    d4ac:	e1a0c007 	mov	ip, r7
    d4b0:	e1a01004 	mov	r1, r4
    d4b4:	e73ef314 	udiv	lr, r4, r3
    d4b8:	ea000001 	b	d4c4 <CString::ftoa(char*, double, unsigned int)+0x8c>
    d4bc:	e73ef311 	udiv	lr, r1, r3
    d4c0:	e1a0200e 	mov	r2, lr
    d4c4:	e3520009 	cmp	r2, #9
    d4c8:	e2820057 	add	r0, r2, #87	; 0x57
    d4cc:	e2822030 	add	r2, r2, #48	; 0x30
    d4d0:	e0611e93 	mls	r1, r3, lr, r1
    d4d4:	e6af0070 	sxtb	r0, r0
    d4d8:	e28cc001 	add	ip, ip, #1
    d4dc:	96af0072 	sxtbls	r0, r2
    d4e0:	e0832398 	umull	r2, r3, r8, r3
    d4e4:	e1b031a3 	lsrs	r3, r3, #3
    d4e8:	e54c0001 	strb	r0, [ip, #-1]
    d4ec:	1afffff2 	bne	d4bc <CString::ftoa(char*, double, unsigned int)+0x84>
    d4f0:	e3560000 	cmp	r6, #0
    d4f4:	e5cc3000 	strb	r3, [ip]
    d4f8:	1a000003 	bne	d50c <CString::ftoa(char*, double, unsigned int)+0xd4>
    d4fc:	e1a00005 	mov	r0, r5
    d500:	e28dd010 	add	sp, sp, #16
    d504:	ecbd8b02 	vpop	{d8}
    d508:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d50c:	e1a00007 	mov	r0, r7
    d510:	eb0009a3 	bl	fba4 <strlen>
    d514:	e3560009 	cmp	r6, #9
    d518:	23a06009 	movcs	r6, #9
    d51c:	e3a0302e 	mov	r3, #46	; 0x2e
    d520:	e3560001 	cmp	r6, #1
    d524:	e0878000 	add	r8, r7, r0
    d528:	e7c73000 	strb	r3, [r7, r0]
    d52c:	e2887001 	add	r7, r8, #1
    d530:	0a000049 	beq	d65c <CString::ftoa(char*, double, unsigned int)+0x224>
    d534:	e3a0200a 	mov	r2, #10
    d538:	e3a03002 	mov	r3, #2
    d53c:	e1a01002 	mov	r1, r2
    d540:	e2833001 	add	r3, r3, #1
    d544:	e0020291 	mul	r2, r1, r2
    d548:	e1530006 	cmp	r3, r6
    d54c:	9afffffb 	bls	d540 <CString::ftoa(char*, double, unsigned int)+0x108>
    d550:	ee072a90 	vmov	s15, r2
    d554:	eef81b67 	vcvt.f64.u32	d17, s15
    d558:	ee074a90 	vmov	s15, r4
    d55c:	eef80b67 	vcvt.f64.u32	d16, s15
    d560:	ee388b60 	vsub.f64	d8, d8, d16
    d564:	ee288b21 	vmul.f64	d8, d8, d17
    d568:	eefc7bc8 	vcvt.u32.f64	s15, d8
    d56c:	ee17ca90 	vmov	ip, s15
    d570:	e35c0009 	cmp	ip, #9
    d574:	83a03001 	movhi	r3, #1
    d578:	83a0000a 	movhi	r0, #10
    d57c:	9a000032 	bls	d64c <CString::ftoa(char*, double, unsigned int)+0x214>
    d580:	e0030390 	mul	r3, r0, r3
    d584:	e731f31c 	udiv	r1, ip, r3
    d588:	e3510009 	cmp	r1, #9
    d58c:	e1a02001 	mov	r2, r1
    d590:	8afffffa 	bhi	d580 <CString::ftoa(char*, double, unsigned int)+0x148>
    d594:	e30c4ccd 	movw	r4, #52429	; 0xcccd
    d598:	e34c4ccc 	movt	r4, #52428	; 0xcccc
    d59c:	e28de004 	add	lr, sp, #4
    d5a0:	ea000001 	b	d5ac <CString::ftoa(char*, double, unsigned int)+0x174>
    d5a4:	e731f31c 	udiv	r1, ip, r3
    d5a8:	e1a02001 	mov	r2, r1
    d5ac:	e3520009 	cmp	r2, #9
    d5b0:	e2820057 	add	r0, r2, #87	; 0x57
    d5b4:	e2822030 	add	r2, r2, #48	; 0x30
    d5b8:	e06cc193 	mls	ip, r3, r1, ip
    d5bc:	e6af1070 	sxtb	r1, r0
    d5c0:	e28ee001 	add	lr, lr, #1
    d5c4:	96af1072 	sxtbls	r1, r2
    d5c8:	e0832394 	umull	r2, r3, r4, r3
    d5cc:	e1b031a3 	lsrs	r3, r3, #3
    d5d0:	e54e1001 	strb	r1, [lr, #-1]
    d5d4:	1afffff2 	bne	d5a4 <CString::ftoa(char*, double, unsigned int)+0x16c>
    d5d8:	e28d0004 	add	r0, sp, #4
    d5dc:	e5ce3000 	strb	r3, [lr]
    d5e0:	eb00096f 	bl	fba4 <strlen>
    d5e4:	e0566000 	subs	r6, r6, r0
    d5e8:	0a000005 	beq	d604 <CString::ftoa(char*, double, unsigned int)+0x1cc>
    d5ec:	e3a02030 	mov	r2, #48	; 0x30
    d5f0:	e0883006 	add	r3, r8, r6
    d5f4:	e5e82001 	strb	r2, [r8, #1]!
    d5f8:	e1580003 	cmp	r8, r3
    d5fc:	1afffffc 	bne	d5f4 <CString::ftoa(char*, double, unsigned int)+0x1bc>
    d600:	e0877006 	add	r7, r7, r6
    d604:	e28d1004 	add	r1, sp, #4
    d608:	e1a00007 	mov	r0, r7
    d60c:	eb000989 	bl	fc38 <strcpy>
    d610:	e1a00005 	mov	r0, r5
    d614:	e28dd010 	add	sp, sp, #16
    d618:	ecbd8b02 	vpop	{d8}
    d61c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d620:	e1a00007 	mov	r0, r7
    d624:	e3011be4 	movw	r1, #7140	; 0x1be4
    d628:	e3401001 	movt	r1, #1
    d62c:	eb000981 	bl	fc38 <strcpy>
    d630:	e1a00005 	mov	r0, r5
    d634:	e28dd010 	add	sp, sp, #16
    d638:	ecbd8b02 	vpop	{d8}
    d63c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d640:	ee172a90 	vmov	r2, s15
    d644:	e3a03001 	mov	r3, #1
    d648:	eaffff95 	b	d4a4 <CString::ftoa(char*, double, unsigned int)+0x6c>
    d64c:	ee172a90 	vmov	r2, s15
    d650:	e3a03001 	mov	r3, #1
    d654:	ee171a90 	vmov	r1, s15
    d658:	eaffffcd 	b	d594 <CString::ftoa(char*, double, unsigned int)+0x15c>
    d65c:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    d660:	eaffffbc 	b	d558 <CString::ftoa(char*, double, unsigned int)+0x120>
    d664:	e320f000 	nop	{0}
    d668:	ffe00000 	.word	0xffe00000
    d66c:	41efffff 	.word	0x41efffff

0000d670 <CString::FormatV(char const*, std::__va_list)>:
    d670:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d674:	e1a06000 	mov	r6, r0
    d678:	e5900004 	ldr	r0, [r0, #4]
    d67c:	e24dd024 	sub	sp, sp, #36	; 0x24
    d680:	e1a05001 	mov	r5, r1
    d684:	e3500000 	cmp	r0, #0
    d688:	e1a09002 	mov	r9, r2
    d68c:	0a000000 	beq	d694 <CString::FormatV(char const*, std::__va_list)+0x24>
    d690:	ebfff1a1 	bl	9d1c <operator delete[](void*)>
    d694:	e3a00040 	mov	r0, #64	; 0x40
    d698:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    d69c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    d6a0:	e5860008 	str	r0, [r6, #8]
    d6a4:	e58d3004 	str	r3, [sp, #4]
    d6a8:	ebfff199 	bl	9d14 <operator new[](unsigned int)>
    d6ac:	e5860004 	str	r0, [r6, #4]
    d6b0:	e586000c 	str	r0, [r6, #12]
    d6b4:	e1d540d0 	ldrsb	r4, [r5]
    d6b8:	e3540000 	cmp	r4, #0
    d6bc:	0a00008a 	beq	d8ec <CString::FormatV(char const*, std::__va_list)+0x27c>
    d6c0:	e3540025 	cmp	r4, #37	; 0x25
    d6c4:	13a01001 	movne	r1, #1
    d6c8:	11a00006 	movne	r0, r6
    d6cc:	1a000129 	bne	db78 <CString::FormatV(char const*, std::__va_list)+0x508>
    d6d0:	e1d570d1 	ldrsb	r7, [r5, #1]
    d6d4:	e3570025 	cmp	r7, #37	; 0x25
    d6d8:	0a00013c 	beq	dbd0 <CString::FormatV(char const*, std::__va_list)+0x560>
    d6dc:	e357002d 	cmp	r7, #45	; 0x2d
    d6e0:	e3a04000 	mov	r4, #0
    d6e4:	12855001 	addne	r5, r5, #1
    d6e8:	13a08000 	movne	r8, #0
    d6ec:	03a08001 	moveq	r8, #1
    d6f0:	01d570d2 	ldrsbeq	r7, [r5, #2]
    d6f4:	02855002 	addeq	r5, r5, #2
    d6f8:	e3570030 	cmp	r7, #48	; 0x30
    d6fc:	03a03001 	moveq	r3, #1
    d700:	13a03000 	movne	r3, #0
    d704:	058d3000 	streq	r3, [sp]
    d708:	01d570d1 	ldrsbeq	r7, [r5, #1]
    d70c:	00855003 	addeq	r5, r5, r3
    d710:	158d3000 	strne	r3, [sp]
    d714:	e2473030 	sub	r3, r7, #48	; 0x30
    d718:	e6ef3073 	uxtb	r3, r3
    d71c:	e3530009 	cmp	r3, #9
    d720:	8a000007 	bhi	d744 <CString::FormatV(char const*, std::__va_list)+0xd4>
    d724:	e3a0200a 	mov	r2, #10
    d728:	e0247492 	mla	r4, r2, r4, r7
    d72c:	e1f570d1 	ldrsb	r7, [r5, #1]!
    d730:	e2473030 	sub	r3, r7, #48	; 0x30
    d734:	e2444030 	sub	r4, r4, #48	; 0x30
    d738:	e6ef3073 	uxtb	r3, r3
    d73c:	e3530009 	cmp	r3, #9
    d740:	9afffff8 	bls	d728 <CString::FormatV(char const*, std::__va_list)+0xb8>
    d744:	e357002e 	cmp	r7, #46	; 0x2e
    d748:	0a000110 	beq	db90 <CString::FormatV(char const*, std::__va_list)+0x520>
    d74c:	e1d500d0 	ldrsb	r0, [r5]
    d750:	e3a01006 	mov	r1, #6
    d754:	e350006c 	cmp	r0, #108	; 0x6c
    d758:	03a02001 	moveq	r2, #1
    d75c:	01d500d1 	ldrsbeq	r0, [r5, #1]
    d760:	00855002 	addeq	r5, r5, r2
    d764:	e2403058 	sub	r3, r0, #88	; 0x58
    d768:	e3530020 	cmp	r3, #32
    d76c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    d770:	ea0000f5 	b	db4c <CString::FormatV(char const*, std::__va_list)+0x4dc>
    d774:	0000dad4 	.word	0x0000dad4
    d778:	0000db4c 	.word	0x0000db4c
    d77c:	0000db4c 	.word	0x0000db4c
    d780:	0000db4c 	.word	0x0000db4c
    d784:	0000db4c 	.word	0x0000db4c
    d788:	0000db4c 	.word	0x0000db4c
    d78c:	0000db4c 	.word	0x0000db4c
    d790:	0000db4c 	.word	0x0000db4c
    d794:	0000db4c 	.word	0x0000db4c
    d798:	0000db4c 	.word	0x0000db4c
    d79c:	0000db4c 	.word	0x0000db4c
    d7a0:	0000da68 	.word	0x0000da68
    d7a4:	0000d96c 	.word	0x0000d96c
    d7a8:	0000db4c 	.word	0x0000db4c
    d7ac:	0000d8fc 	.word	0x0000d8fc
    d7b0:	0000db4c 	.word	0x0000db4c
    d7b4:	0000db4c 	.word	0x0000db4c
    d7b8:	0000db4c 	.word	0x0000db4c
    d7bc:	0000db4c 	.word	0x0000db4c
    d7c0:	0000db4c 	.word	0x0000db4c
    d7c4:	0000db4c 	.word	0x0000db4c
    d7c8:	0000db4c 	.word	0x0000db4c
    d7cc:	0000db4c 	.word	0x0000db4c
    d7d0:	0000d7f8 	.word	0x0000d7f8
    d7d4:	0000db4c 	.word	0x0000db4c
    d7d8:	0000db4c 	.word	0x0000db4c
    d7dc:	0000db4c 	.word	0x0000db4c
    d7e0:	0000dae4 	.word	0x0000dae4
    d7e4:	0000db4c 	.word	0x0000db4c
    d7e8:	0000dadc 	.word	0x0000dadc
    d7ec:	0000db4c 	.word	0x0000db4c
    d7f0:	0000db4c 	.word	0x0000db4c
    d7f4:	0000dad4 	.word	0x0000dad4
    d7f8:	e3a0a008 	mov	sl, #8
    d7fc:	e599c000 	ldr	ip, [r9]
    d800:	e2899004 	add	r9, r9, #4
    d804:	e15c000a 	cmp	ip, sl
    d808:	23a03001 	movcs	r3, #1
    d80c:	3a00016e 	bcc	ddcc <CString::FormatV(char const*, std::__va_list)+0x75c>
    d810:	e003039a 	mul	r3, sl, r3
    d814:	e731f31c 	udiv	r1, ip, r3
    d818:	e15a0001 	cmp	sl, r1
    d81c:	e1a02001 	mov	r2, r1
    d820:	9afffffa 	bls	d810 <CString::FormatV(char const*, std::__va_list)+0x1a0>
    d824:	e3500058 	cmp	r0, #88	; 0x58
    d828:	e28d7008 	add	r7, sp, #8
    d82c:	13a0b057 	movne	fp, #87	; 0x57
    d830:	03a0b037 	moveq	fp, #55	; 0x37
    d834:	e1a0e007 	mov	lr, r7
    d838:	ea000001 	b	d844 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    d83c:	e731f31c 	udiv	r1, ip, r3
    d840:	e1a02001 	mov	r2, r1
    d844:	e06cc193 	mls	ip, r3, r1, ip
    d848:	e3520009 	cmp	r2, #9
    d84c:	e733fa13 	udiv	r3, r3, sl
    d850:	e08b0002 	add	r0, fp, r2
    d854:	e2822030 	add	r2, r2, #48	; 0x30
    d858:	e28ee001 	add	lr, lr, #1
    d85c:	e6af0070 	sxtb	r0, r0
    d860:	96af0072 	sxtbls	r0, r2
    d864:	e3530000 	cmp	r3, #0
    d868:	e54e0001 	strb	r0, [lr, #-1]
    d86c:	1afffff2 	bne	d83c <CString::FormatV(char const*, std::__va_list)+0x1cc>
    d870:	e1a00007 	mov	r0, r7
    d874:	e5ce3000 	strb	r3, [lr]
    d878:	eb0008c9 	bl	fba4 <strlen>
    d87c:	e3580000 	cmp	r8, #0
    d880:	e1a0a000 	mov	sl, r0
    d884:	1a0000f4 	bne	dc5c <CString::FormatV(char const*, std::__va_list)+0x5ec>
    d888:	e1500004 	cmp	r0, r4
    d88c:	2a00000f 	bcs	d8d0 <CString::FormatV(char const*, std::__va_list)+0x260>
    d890:	e59d3000 	ldr	r3, [sp]
    d894:	e0444000 	sub	r4, r4, r0
    d898:	e1a01004 	mov	r1, r4
    d89c:	e1a00006 	mov	r0, r6
    d8a0:	e3530000 	cmp	r3, #0
    d8a4:	03a08020 	moveq	r8, #32
    d8a8:	13a08030 	movne	r8, #48	; 0x30
    d8ac:	ebfffe1d 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d8b0:	e2443001 	sub	r3, r4, #1
    d8b4:	e596200c 	ldr	r2, [r6, #12]
    d8b8:	e2433001 	sub	r3, r3, #1
    d8bc:	e3730001 	cmn	r3, #1
    d8c0:	e2821001 	add	r1, r2, #1
    d8c4:	e586100c 	str	r1, [r6, #12]
    d8c8:	e5c28000 	strb	r8, [r2]
    d8cc:	1afffff8 	bne	d8b4 <CString::FormatV(char const*, std::__va_list)+0x244>
    d8d0:	e1a01007 	mov	r1, r7
    d8d4:	e1a00006 	mov	r0, r6
    d8d8:	ebfffea1 	bl	d364 <CString::PutString(char const*)>
    d8dc:	e2855001 	add	r5, r5, #1
    d8e0:	e1d540d0 	ldrsb	r4, [r5]
    d8e4:	e3540000 	cmp	r4, #0
    d8e8:	1affff74 	bne	d6c0 <CString::FormatV(char const*, std::__va_list)+0x50>
    d8ec:	e596300c 	ldr	r3, [r6, #12]
    d8f0:	e5c34000 	strb	r4, [r3]
    d8f4:	e28dd024 	add	sp, sp, #36	; 0x24
    d8f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8fc:	e2893007 	add	r3, r9, #7
    d900:	e28d7008 	add	r7, sp, #8
    d904:	e3c33007 	bic	r3, r3, #7
    d908:	e1a00007 	mov	r0, r7
    d90c:	e2839008 	add	r9, r3, #8
    d910:	ed930b00 	vldr	d0, [r3]
    d914:	ebfffec7 	bl	d438 <CString::ftoa(char*, double, unsigned int)>
    d918:	e1a00007 	mov	r0, r7
    d91c:	eb0008a0 	bl	fba4 <strlen>
    d920:	e3580000 	cmp	r8, #0
    d924:	e1a0a000 	mov	sl, r0
    d928:	1a000108 	bne	dd50 <CString::FormatV(char const*, std::__va_list)+0x6e0>
    d92c:	e1500004 	cmp	r0, r4
    d930:	2affffe6 	bcs	d8d0 <CString::FormatV(char const*, std::__va_list)+0x260>
    d934:	e0444000 	sub	r4, r4, r0
    d938:	e1a00006 	mov	r0, r6
    d93c:	e1a01004 	mov	r1, r4
    d940:	ebfffdf8 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d944:	e2443001 	sub	r3, r4, #1
    d948:	e3a00020 	mov	r0, #32
    d94c:	e596200c 	ldr	r2, [r6, #12]
    d950:	e2433001 	sub	r3, r3, #1
    d954:	e3730001 	cmn	r3, #1
    d958:	e2821001 	add	r1, r2, #1
    d95c:	e586100c 	str	r1, [r6, #12]
    d960:	e5c20000 	strb	r0, [r2]
    d964:	1afffff8 	bne	d94c <CString::FormatV(char const*, std::__va_list)+0x2dc>
    d968:	eaffffd8 	b	d8d0 <CString::FormatV(char const*, std::__va_list)+0x260>
    d96c:	e5990000 	ldr	r0, [r9]
    d970:	e2899004 	add	r9, r9, #4
    d974:	e3500000 	cmp	r0, #0
    d978:	b2600000 	rsblt	r0, r0, #0
    d97c:	b3a0b001 	movlt	fp, #1
    d980:	a3a0b000 	movge	fp, #0
    d984:	e3500009 	cmp	r0, #9
    d988:	e1a0a00b 	mov	sl, fp
    d98c:	e1a0e000 	mov	lr, r0
    d990:	c3a03001 	movgt	r3, #1
    d994:	c3a0100a 	movgt	r1, #10
    d998:	da000108 	ble	ddc0 <CString::FormatV(char const*, std::__va_list)+0x750>
    d99c:	e0030391 	mul	r3, r1, r3
    d9a0:	e732f310 	udiv	r2, r0, r3
    d9a4:	e3520009 	cmp	r2, #9
    d9a8:	8afffffb 	bhi	d99c <CString::FormatV(char const*, std::__va_list)+0x32c>
    d9ac:	e28d7008 	add	r7, sp, #8
    d9b0:	e58d8000 	str	r8, [sp]
    d9b4:	e730f310 	udiv	r0, r0, r3
    d9b8:	e1a0c007 	mov	ip, r7
    d9bc:	e59d8004 	ldr	r8, [sp, #4]
    d9c0:	ea000001 	b	d9cc <CString::FormatV(char const*, std::__va_list)+0x35c>
    d9c4:	e730f31e 	udiv	r0, lr, r3
    d9c8:	e1a02000 	mov	r2, r0
    d9cc:	e3520009 	cmp	r2, #9
    d9d0:	e2821057 	add	r1, r2, #87	; 0x57
    d9d4:	e2822030 	add	r2, r2, #48	; 0x30
    d9d8:	e06ee093 	mls	lr, r3, r0, lr
    d9dc:	e6af1071 	sxtb	r1, r1
    d9e0:	e28cc001 	add	ip, ip, #1
    d9e4:	96af1072 	sxtbls	r1, r2
    d9e8:	e0832398 	umull	r2, r3, r8, r3
    d9ec:	e1b031a3 	lsrs	r3, r3, #3
    d9f0:	e54c1001 	strb	r1, [ip, #-1]
    d9f4:	1afffff2 	bne	d9c4 <CString::FormatV(char const*, std::__va_list)+0x354>
    d9f8:	e59d8000 	ldr	r8, [sp]
    d9fc:	e1a00007 	mov	r0, r7
    da00:	e5cc3000 	strb	r3, [ip]
    da04:	eb000866 	bl	fba4 <strlen>
    da08:	e3580000 	cmp	r8, #0
    da0c:	e080b00b 	add	fp, r0, fp
    da10:	0a000077 	beq	dbf4 <CString::FormatV(char const*, std::__va_list)+0x584>
    da14:	e35a0000 	cmp	sl, #0
    da18:	1a0000df 	bne	dd9c <CString::FormatV(char const*, std::__va_list)+0x72c>
    da1c:	e1a01007 	mov	r1, r7
    da20:	e1a00006 	mov	r0, r6
    da24:	ebfffe4e 	bl	d364 <CString::PutString(char const*)>
    da28:	e15b0004 	cmp	fp, r4
    da2c:	2affffaa 	bcs	d8dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    da30:	e044b00b 	sub	fp, r4, fp
    da34:	e1a00006 	mov	r0, r6
    da38:	e1a0100b 	mov	r1, fp
    da3c:	ebfffdb9 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    da40:	e24b3001 	sub	r3, fp, #1
    da44:	e3a00020 	mov	r0, #32
    da48:	e596200c 	ldr	r2, [r6, #12]
    da4c:	e2433001 	sub	r3, r3, #1
    da50:	e3730001 	cmn	r3, #1
    da54:	e2821001 	add	r1, r2, #1
    da58:	e586100c 	str	r1, [r6, #12]
    da5c:	e5c20000 	strb	r0, [r2]
    da60:	1afffff8 	bne	da48 <CString::FormatV(char const*, std::__va_list)+0x3d8>
    da64:	eaffff9c 	b	d8dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    da68:	e3580000 	cmp	r8, #0
    da6c:	e2897004 	add	r7, r9, #4
    da70:	e1d980d0 	ldrsb	r8, [r9]
    da74:	1a00008b 	bne	dca8 <CString::FormatV(char const*, std::__va_list)+0x638>
    da78:	e3540001 	cmp	r4, #1
    da7c:	9a00000b 	bls	dab0 <CString::FormatV(char const*, std::__va_list)+0x440>
    da80:	e2441001 	sub	r1, r4, #1
    da84:	e1a00006 	mov	r0, r6
    da88:	ebfffda6 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    da8c:	e2444002 	sub	r4, r4, #2
    da90:	e3a01020 	mov	r1, #32
    da94:	e596300c 	ldr	r3, [r6, #12]
    da98:	e2444001 	sub	r4, r4, #1
    da9c:	e3740001 	cmn	r4, #1
    daa0:	e2832001 	add	r2, r3, #1
    daa4:	e586200c 	str	r2, [r6, #12]
    daa8:	e5c31000 	strb	r1, [r3]
    daac:	1afffff8 	bne	da94 <CString::FormatV(char const*, std::__va_list)+0x424>
    dab0:	e3a01001 	mov	r1, #1
    dab4:	e1a00006 	mov	r0, r6
    dab8:	ebfffd9a 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dabc:	e596300c 	ldr	r3, [r6, #12]
    dac0:	e1a09007 	mov	r9, r7
    dac4:	e2832001 	add	r2, r3, #1
    dac8:	e586200c 	str	r2, [r6, #12]
    dacc:	e5c38000 	strb	r8, [r3]
    dad0:	eaffff81 	b	d8dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    dad4:	e3a0a010 	mov	sl, #16
    dad8:	eaffff47 	b	d7fc <CString::FormatV(char const*, std::__va_list)+0x18c>
    dadc:	e3a0a00a 	mov	sl, #10
    dae0:	eaffff45 	b	d7fc <CString::FormatV(char const*, std::__va_list)+0x18c>
    dae4:	e599a000 	ldr	sl, [r9]
    dae8:	e2899004 	add	r9, r9, #4
    daec:	e1a0000a 	mov	r0, sl
    daf0:	eb00082b 	bl	fba4 <strlen>
    daf4:	e3580000 	cmp	r8, #0
    daf8:	e1a07000 	mov	r7, r0
    dafc:	1a000080 	bne	dd04 <CString::FormatV(char const*, std::__va_list)+0x694>
    db00:	e1500004 	cmp	r0, r4
    db04:	2a00000c 	bcs	db3c <CString::FormatV(char const*, std::__va_list)+0x4cc>
    db08:	e0444000 	sub	r4, r4, r0
    db0c:	e1a00006 	mov	r0, r6
    db10:	e1a01004 	mov	r1, r4
    db14:	ebfffd83 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    db18:	e2443001 	sub	r3, r4, #1
    db1c:	e3a00020 	mov	r0, #32
    db20:	e596200c 	ldr	r2, [r6, #12]
    db24:	e2433001 	sub	r3, r3, #1
    db28:	e3730001 	cmn	r3, #1
    db2c:	e2821001 	add	r1, r2, #1
    db30:	e586100c 	str	r1, [r6, #12]
    db34:	e5c20000 	strb	r0, [r2]
    db38:	1afffff8 	bne	db20 <CString::FormatV(char const*, std::__va_list)+0x4b0>
    db3c:	e1a0100a 	mov	r1, sl
    db40:	e1a00006 	mov	r0, r6
    db44:	ebfffe06 	bl	d364 <CString::PutString(char const*)>
    db48:	eaffff63 	b	d8dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    db4c:	e3a01001 	mov	r1, #1
    db50:	e1a00006 	mov	r0, r6
    db54:	ebfffd73 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    db58:	e596300c 	ldr	r3, [r6, #12]
    db5c:	e3a01001 	mov	r1, #1
    db60:	e3a02025 	mov	r2, #37	; 0x25
    db64:	e0830001 	add	r0, r3, r1
    db68:	e586000c 	str	r0, [r6, #12]
    db6c:	e1a00006 	mov	r0, r6
    db70:	e5c32000 	strb	r2, [r3]
    db74:	e1d540d0 	ldrsb	r4, [r5]
    db78:	ebfffd6a 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    db7c:	e596300c 	ldr	r3, [r6, #12]
    db80:	e2832001 	add	r2, r3, #1
    db84:	e586200c 	str	r2, [r6, #12]
    db88:	e5c34000 	strb	r4, [r3]
    db8c:	eaffff52 	b	d8dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    db90:	e1d500d1 	ldrsb	r0, [r5, #1]
    db94:	e3a01000 	mov	r1, #0
    db98:	e2855001 	add	r5, r5, #1
    db9c:	e2403030 	sub	r3, r0, #48	; 0x30
    dba0:	e6ef3073 	uxtb	r3, r3
    dba4:	e3530009 	cmp	r3, #9
    dba8:	8afffee9 	bhi	d754 <CString::FormatV(char const*, std::__va_list)+0xe4>
    dbac:	e3a0200a 	mov	r2, #10
    dbb0:	e0210192 	mla	r1, r2, r1, r0
    dbb4:	e1f500d1 	ldrsb	r0, [r5, #1]!
    dbb8:	e2403030 	sub	r3, r0, #48	; 0x30
    dbbc:	e2411030 	sub	r1, r1, #48	; 0x30
    dbc0:	e6ef3073 	uxtb	r3, r3
    dbc4:	e3530009 	cmp	r3, #9
    dbc8:	9afffff8 	bls	dbb0 <CString::FormatV(char const*, std::__va_list)+0x540>
    dbcc:	eafffee0 	b	d754 <CString::FormatV(char const*, std::__va_list)+0xe4>
    dbd0:	e3a01001 	mov	r1, #1
    dbd4:	e1a00006 	mov	r0, r6
    dbd8:	ebfffd52 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dbdc:	e596300c 	ldr	r3, [r6, #12]
    dbe0:	e2855002 	add	r5, r5, #2
    dbe4:	e2832001 	add	r2, r3, #1
    dbe8:	e586200c 	str	r2, [r6, #12]
    dbec:	e5c37000 	strb	r7, [r3]
    dbf0:	eafffeaf 	b	d6b4 <CString::FormatV(char const*, std::__va_list)+0x44>
    dbf4:	e15b0004 	cmp	fp, r4
    dbf8:	2a00000c 	bcs	dc30 <CString::FormatV(char const*, std::__va_list)+0x5c0>
    dbfc:	e044b00b 	sub	fp, r4, fp
    dc00:	e1a00006 	mov	r0, r6
    dc04:	e1a0100b 	mov	r1, fp
    dc08:	ebfffd46 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dc0c:	e24b3001 	sub	r3, fp, #1
    dc10:	e3a00020 	mov	r0, #32
    dc14:	e596200c 	ldr	r2, [r6, #12]
    dc18:	e2433001 	sub	r3, r3, #1
    dc1c:	e3730001 	cmn	r3, #1
    dc20:	e2821001 	add	r1, r2, #1
    dc24:	e586100c 	str	r1, [r6, #12]
    dc28:	e5c20000 	strb	r0, [r2]
    dc2c:	1afffff8 	bne	dc14 <CString::FormatV(char const*, std::__va_list)+0x5a4>
    dc30:	e35a0000 	cmp	sl, #0
    dc34:	0affff25 	beq	d8d0 <CString::FormatV(char const*, std::__va_list)+0x260>
    dc38:	e3a01001 	mov	r1, #1
    dc3c:	e1a00006 	mov	r0, r6
    dc40:	ebfffd38 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dc44:	e596300c 	ldr	r3, [r6, #12]
    dc48:	e3a0202d 	mov	r2, #45	; 0x2d
    dc4c:	e2831001 	add	r1, r3, #1
    dc50:	e586100c 	str	r1, [r6, #12]
    dc54:	e5c32000 	strb	r2, [r3]
    dc58:	eaffff1c 	b	d8d0 <CString::FormatV(char const*, std::__va_list)+0x260>
    dc5c:	e1a01007 	mov	r1, r7
    dc60:	e1a00006 	mov	r0, r6
    dc64:	ebfffdbe 	bl	d364 <CString::PutString(char const*)>
    dc68:	e15a0004 	cmp	sl, r4
    dc6c:	2affff1a 	bcs	d8dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    dc70:	e044400a 	sub	r4, r4, sl
    dc74:	e1a00006 	mov	r0, r6
    dc78:	e1a01004 	mov	r1, r4
    dc7c:	ebfffd29 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dc80:	e2443001 	sub	r3, r4, #1
    dc84:	e3a00020 	mov	r0, #32
    dc88:	e596200c 	ldr	r2, [r6, #12]
    dc8c:	e2433001 	sub	r3, r3, #1
    dc90:	e3730001 	cmn	r3, #1
    dc94:	e2821001 	add	r1, r2, #1
    dc98:	e586100c 	str	r1, [r6, #12]
    dc9c:	e5c20000 	strb	r0, [r2]
    dca0:	1afffff8 	bne	dc88 <CString::FormatV(char const*, std::__va_list)+0x618>
    dca4:	eaffff0c 	b	d8dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    dca8:	e3a01001 	mov	r1, #1
    dcac:	e1a00006 	mov	r0, r6
    dcb0:	ebfffd1c 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dcb4:	e596300c 	ldr	r3, [r6, #12]
    dcb8:	e3540001 	cmp	r4, #1
    dcbc:	e2832001 	add	r2, r3, #1
    dcc0:	e586200c 	str	r2, [r6, #12]
    dcc4:	e5c38000 	strb	r8, [r3]
    dcc8:	9a00000b 	bls	dcfc <CString::FormatV(char const*, std::__va_list)+0x68c>
    dccc:	e2441001 	sub	r1, r4, #1
    dcd0:	e1a00006 	mov	r0, r6
    dcd4:	ebfffd13 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dcd8:	e2444002 	sub	r4, r4, #2
    dcdc:	e3a01020 	mov	r1, #32
    dce0:	e596300c 	ldr	r3, [r6, #12]
    dce4:	e2444001 	sub	r4, r4, #1
    dce8:	e3740001 	cmn	r4, #1
    dcec:	e2832001 	add	r2, r3, #1
    dcf0:	e586200c 	str	r2, [r6, #12]
    dcf4:	e5c31000 	strb	r1, [r3]
    dcf8:	1afffff8 	bne	dce0 <CString::FormatV(char const*, std::__va_list)+0x670>
    dcfc:	e1a09007 	mov	r9, r7
    dd00:	eafffef5 	b	d8dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    dd04:	e1a0100a 	mov	r1, sl
    dd08:	e1a00006 	mov	r0, r6
    dd0c:	ebfffd94 	bl	d364 <CString::PutString(char const*)>
    dd10:	e1570004 	cmp	r7, r4
    dd14:	2afffef0 	bcs	d8dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    dd18:	e0444007 	sub	r4, r4, r7
    dd1c:	e1a00006 	mov	r0, r6
    dd20:	e1a01004 	mov	r1, r4
    dd24:	ebfffcff 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dd28:	e2443001 	sub	r3, r4, #1
    dd2c:	e3a00020 	mov	r0, #32
    dd30:	e596200c 	ldr	r2, [r6, #12]
    dd34:	e2433001 	sub	r3, r3, #1
    dd38:	e3730001 	cmn	r3, #1
    dd3c:	e2821001 	add	r1, r2, #1
    dd40:	e586100c 	str	r1, [r6, #12]
    dd44:	e5c20000 	strb	r0, [r2]
    dd48:	1afffff8 	bne	dd30 <CString::FormatV(char const*, std::__va_list)+0x6c0>
    dd4c:	eafffee2 	b	d8dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    dd50:	e1a01007 	mov	r1, r7
    dd54:	e1a00006 	mov	r0, r6
    dd58:	ebfffd81 	bl	d364 <CString::PutString(char const*)>
    dd5c:	e15a0004 	cmp	sl, r4
    dd60:	2afffedd 	bcs	d8dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    dd64:	e044400a 	sub	r4, r4, sl
    dd68:	e1a00006 	mov	r0, r6
    dd6c:	e1a01004 	mov	r1, r4
    dd70:	ebfffcec 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dd74:	e2443001 	sub	r3, r4, #1
    dd78:	e3a00020 	mov	r0, #32
    dd7c:	e596200c 	ldr	r2, [r6, #12]
    dd80:	e2433001 	sub	r3, r3, #1
    dd84:	e3730001 	cmn	r3, #1
    dd88:	e2821001 	add	r1, r2, #1
    dd8c:	e586100c 	str	r1, [r6, #12]
    dd90:	e5c20000 	strb	r0, [r2]
    dd94:	1afffff8 	bne	dd7c <CString::FormatV(char const*, std::__va_list)+0x70c>
    dd98:	eafffecf 	b	d8dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    dd9c:	e3a01001 	mov	r1, #1
    dda0:	e1a00006 	mov	r0, r6
    dda4:	ebfffcdf 	bl	d128 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dda8:	e596300c 	ldr	r3, [r6, #12]
    ddac:	e3a0202d 	mov	r2, #45	; 0x2d
    ddb0:	e2831001 	add	r1, r3, #1
    ddb4:	e586100c 	str	r1, [r6, #12]
    ddb8:	e5c32000 	strb	r2, [r3]
    ddbc:	eaffff16 	b	da1c <CString::FormatV(char const*, std::__va_list)+0x3ac>
    ddc0:	e1a02000 	mov	r2, r0
    ddc4:	e3a03001 	mov	r3, #1
    ddc8:	eafffef7 	b	d9ac <CString::FormatV(char const*, std::__va_list)+0x33c>
    ddcc:	e1a0200c 	mov	r2, ip
    ddd0:	e3a03001 	mov	r3, #1
    ddd4:	e1a0100c 	mov	r1, ip
    ddd8:	eafffe91 	b	d824 <CString::FormatV(char const*, std::__va_list)+0x1b4>

0000dddc <CString::Format(char const*, ...)>:
    dddc:	e92d000e 	push	{r1, r2, r3}
    dde0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    dde4:	e24dd008 	sub	sp, sp, #8
    dde8:	e28d3010 	add	r3, sp, #16
    ddec:	e1a02003 	mov	r2, r3
    ddf0:	e59d100c 	ldr	r1, [sp, #12]
    ddf4:	e58d3004 	str	r3, [sp, #4]
    ddf8:	ebfffe1c 	bl	d670 <CString::FormatV(char const*, std::__va_list)>
    ddfc:	e28dd008 	add	sp, sp, #8
    de00:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    de04:	e28dd00c 	add	sp, sp, #12
    de08:	e12fff1e 	bx	lr
    de0c:	00000000 	andeq	r0, r0, r0

0000de10 <DelayLoop>:
    de10:	e2500001 	subs	r0, r0, #1
    de14:	8afffffd 	bhi	de10 <DelayLoop>
    de18:	e1a0f00e 	mov	pc, lr

0000de1c <CExceptionHandler::CExceptionHandler()>:
    de1c:	e92d4070 	push	{r4, r5, r6, lr}
    de20:	e30253a8 	movw	r5, #9128	; 0x23a8
    de24:	e3405001 	movt	r5, #1
    de28:	e1a04000 	mov	r4, r0
    de2c:	e5953000 	ldr	r3, [r5]
    de30:	e3530000 	cmp	r3, #0
    de34:	0a000005 	beq	de50 <CExceptionHandler::CExceptionHandler()+0x34>
    de38:	e3011bf8 	movw	r1, #7160	; 0x1bf8
    de3c:	e3401001 	movt	r1, #1
    de40:	e3000984 	movw	r0, #2436	; 0x984
    de44:	e3400001 	movt	r0, #1
    de48:	e3a0202e 	mov	r2, #46	; 0x2e
    de4c:	ebfff96b 	bl	c400 <assertion_failed>
    de50:	e59f1048 	ldr	r1, [pc, #72]	; dea0 <CExceptionHandler::CExceptionHandler()+0x84>
    de54:	e3a00000 	mov	r0, #0
    de58:	e59f2044 	ldr	r2, [pc, #68]	; dea4 <CExceptionHandler::CExceptionHandler()+0x88>
    de5c:	e59f3044 	ldr	r3, [pc, #68]	; dea8 <CExceptionHandler::CExceptionHandler()+0x8c>
    de60:	e1a01141 	asr	r1, r1, #2
    de64:	e5854000 	str	r4, [r5]
    de68:	e1a02142 	asr	r2, r2, #2
    de6c:	e2411002 	sub	r1, r1, #2
    de70:	e1a03143 	asr	r3, r3, #2
    de74:	e2422002 	sub	r2, r2, #2
    de78:	e2433002 	sub	r3, r3, #2
    de7c:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    de80:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    de84:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    de88:	e5801004 	str	r1, [r0, #4]
    de8c:	e580200c 	str	r2, [r0, #12]
    de90:	e5803010 	str	r3, [r0, #16]
    de94:	ebffefc6 	bl	9db4 <SyncDataAndInstructionCache>
    de98:	e1a00004 	mov	r0, r4
    de9c:	e8bd8070 	pop	{r4, r5, r6, pc}
    dea0:	0000e070 	.word	0x0000e070
    dea4:	0000e0a8 	.word	0x0000e0a8
    dea8:	0000e0e4 	.word	0x0000e0e4

0000deac <CExceptionHandler::~CExceptionHandler()>:
    deac:	e30233a8 	movw	r3, #9128	; 0x23a8
    deb0:	e3403001 	movt	r3, #1
    deb4:	e3a02000 	mov	r2, #0
    deb8:	e5832000 	str	r2, [r3]
    debc:	e12fff1e 	bx	lr

0000dec0 <CExceptionHandler::Throw(unsigned int)>:
    dec0:	e92d4010 	push	{r4, lr}
    dec4:	e1a04001 	mov	r4, r1
    dec8:	e24dd008 	sub	sp, sp, #8
    decc:	ebfffaca 	bl	c9fc <CLogger::Get()>
    ded0:	e30222c8 	movw	r2, #8904	; 0x22c8
    ded4:	e3402001 	movt	r2, #1
    ded8:	e3013c10 	movw	r3, #7184	; 0x1c10
    dedc:	e3403001 	movt	r3, #1
    dee0:	e3011bf0 	movw	r1, #7152	; 0x1bf0
    dee4:	e3401001 	movt	r1, #1
    dee8:	e792c104 	ldr	ip, [r2, r4, lsl #2]
    deec:	e3a02000 	mov	r2, #0
    def0:	e58dc000 	str	ip, [sp]
    def4:	ebfffb9d 	bl	cd70 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    def8:	e28dd008 	add	sp, sp, #8
    defc:	e8bd8010 	pop	{r4, pc}

0000df00 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    df00:	e3510002 	cmp	r1, #2
    df04:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    df08:	e1a05001 	mov	r5, r1
    df0c:	e24dd024 	sub	sp, sp, #36	; 0x24
    df10:	e1a04002 	mov	r4, r2
    df14:	0a000027 	beq	dfb8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb8>
    df18:	e3510003 	cmp	r1, #3
    df1c:	0a000022 	beq	dfac <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
    df20:	e3a07000 	mov	r7, #0
    df24:	e1a08007 	mov	r8, r7
    df28:	e3540000 	cmp	r4, #0
    df2c:	0a000024 	beq	dfc4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
    df30:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    df34:	e3011bf0 	movw	r1, #7152	; 0x1bf0
    df38:	e3401001 	movt	r1, #1
    df3c:	e203301f 	and	r3, r3, #31
    df40:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    df44:	e3530012 	cmp	r3, #18
    df48:	e5949040 	ldr	r9, [r4, #64]	; 0x40
    df4c:	08940240 	ldmeq	r4, {r6, r9}
    df50:	e1a00006 	mov	r0, r6
    df54:	ebfff9b8 	bl	c63c <debug_stacktrace(unsigned int const*, char const*)>
    df58:	ebfffaa7 	bl	c9fc <CLogger::Get()>
    df5c:	e30232c8 	movw	r3, #8904	; 0x22c8
    df60:	e3403001 	movt	r3, #1
    df64:	e594e044 	ldr	lr, [r4, #68]	; 0x44
    df68:	e3a02000 	mov	r2, #0
    df6c:	e594c048 	ldr	ip, [r4, #72]	; 0x48
    df70:	e3011bf0 	movw	r1, #7152	; 0x1bf0
    df74:	e3401001 	movt	r1, #1
    df78:	e7934105 	ldr	r4, [r3, r5, lsl #2]
    df7c:	e3013c2c 	movw	r3, #7212	; 0x1c2c
    df80:	e3403001 	movt	r3, #1
    df84:	e58d9014 	str	r9, [sp, #20]
    df88:	e58d6010 	str	r6, [sp, #16]
    df8c:	e58d700c 	str	r7, [sp, #12]
    df90:	e58d8008 	str	r8, [sp, #8]
    df94:	e58d4000 	str	r4, [sp]
    df98:	e58de018 	str	lr, [sp, #24]
    df9c:	e58dc004 	str	ip, [sp, #4]
    dfa0:	ebfffb72 	bl	cd70 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    dfa4:	e28dd024 	add	sp, sp, #36	; 0x24
    dfa8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    dfac:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
    dfb0:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
    dfb4:	eaffffdb 	b	df28 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    dfb8:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
    dfbc:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
    dfc0:	eaffffd8 	b	df28 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    dfc4:	e3011bf8 	movw	r1, #7160	; 0x1bf8
    dfc8:	e3401001 	movt	r1, #1
    dfcc:	e3010c20 	movw	r0, #7200	; 0x1c20
    dfd0:	e3400001 	movt	r0, #1
    dfd4:	e3a02067 	mov	r2, #103	; 0x67
    dfd8:	ebfff908 	bl	c400 <assertion_failed>
    dfdc:	eaffffd3 	b	df30 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>

0000dfe0 <CExceptionHandler::Get()>:
    dfe0:	e92d4010 	push	{r4, lr}
    dfe4:	e30243a8 	movw	r4, #9128	; 0x23a8
    dfe8:	e3404001 	movt	r4, #1
    dfec:	e5940000 	ldr	r0, [r4]
    dff0:	e3500000 	cmp	r0, #0
    dff4:	18bd8010 	popne	{r4, pc}
    dff8:	e3a0207e 	mov	r2, #126	; 0x7e
    dffc:	e3011bf8 	movw	r1, #7160	; 0x1bf8
    e000:	e3401001 	movt	r1, #1
    e004:	e30003b4 	movw	r0, #948	; 0x3b4
    e008:	e3400001 	movt	r0, #1
    e00c:	ebfff8fb 	bl	c400 <assertion_failed>
    e010:	e5940000 	ldr	r0, [r4]
    e014:	e8bd8010 	pop	{r4, pc}

0000e018 <ExceptionHandler>:
    e018:	e92d4070 	push	{r4, r5, r6, lr}
    e01c:	e30243a8 	movw	r4, #9128	; 0x23a8
    e020:	e3404001 	movt	r4, #1
    e024:	e1a05000 	mov	r5, r0
    e028:	e1a06001 	mov	r6, r1
    e02c:	e5940000 	ldr	r0, [r4]
    e030:	e3500000 	cmp	r0, #0
    e034:	0a000003 	beq	e048 <ExceptionHandler+0x30>
    e038:	e1a02006 	mov	r2, r6
    e03c:	e1a01005 	mov	r1, r5
    e040:	e8bd4070 	pop	{r4, r5, r6, lr}
    e044:	eaffffad 	b	df00 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
    e048:	e3a0207e 	mov	r2, #126	; 0x7e
    e04c:	e3011bf8 	movw	r1, #7160	; 0x1bf8
    e050:	e3401001 	movt	r1, #1
    e054:	e30003b4 	movw	r0, #948	; 0x3b4
    e058:	e3400001 	movt	r0, #1
    e05c:	ebfff8e7 	bl	c400 <assertion_failed>
    e060:	e5940000 	ldr	r0, [r4]
    e064:	e1a02006 	mov	r2, r6
    e068:	e1a01005 	mov	r1, r5
    e06c:	e8bd4070 	pop	{r4, r5, r6, lr}
    e070:	eaffffa2 	b	df00 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

0000e074 <UndefinedInstructionStub>:
    e074:	e24ee004 	sub	lr, lr, #4
    e078:	e92d4000 	stmfd	sp!, {lr}
    e07c:	e14fe000 	mrs	lr, SPSR
    e080:	e92d4000 	stmfd	sp!, {lr}
    e084:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e088:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e08c:	e1a0100d 	mov	r1, sp
    e090:	f1020012 	cps	#18
    e094:	e1a0200d 	mov	r2, sp
    e098:	e1a0300e 	mov	r3, lr
    e09c:	f102001f 	cps	#31
    e0a0:	e1a0d001 	mov	sp, r1
    e0a4:	e92d000c 	push	{r2, r3}
    e0a8:	e1a0100d 	mov	r1, sp
    e0ac:	e3a00001 	mov	r0, #1
    e0b0:	eaffffd8 	b	e018 <ExceptionHandler>

0000e0b4 <PrefetchAbortStub>:
    e0b4:	e24ee004 	sub	lr, lr, #4
    e0b8:	e92d4000 	stmfd	sp!, {lr}
    e0bc:	e14fe000 	mrs	lr, SPSR
    e0c0:	e92d4000 	stmfd	sp!, {lr}
    e0c4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e0c8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e0cc:	e1a0100d 	mov	r1, sp
    e0d0:	f1020012 	cps	#18
    e0d4:	e1a0200d 	mov	r2, sp
    e0d8:	e1a0300e 	mov	r3, lr
    e0dc:	f102001f 	cps	#31
    e0e0:	e1a0d001 	mov	sp, r1
    e0e4:	e92d000c 	push	{r2, r3}
    e0e8:	e1a0100d 	mov	r1, sp
    e0ec:	e3a00002 	mov	r0, #2
    e0f0:	eaffffc8 	b	e018 <ExceptionHandler>

0000e0f4 <DataAbortStub>:
    e0f4:	e24ee008 	sub	lr, lr, #8
    e0f8:	e92d4000 	stmfd	sp!, {lr}
    e0fc:	e14fe000 	mrs	lr, SPSR
    e100:	e92d4000 	stmfd	sp!, {lr}
    e104:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e108:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e10c:	e1a0100d 	mov	r1, sp
    e110:	f1020012 	cps	#18
    e114:	e1a0200d 	mov	r2, sp
    e118:	e1a0300e 	mov	r3, lr
    e11c:	f102001f 	cps	#31
    e120:	e1a0d001 	mov	sp, r1
    e124:	e92d000c 	push	{r2, r3}
    e128:	e1a0100d 	mov	r1, sp
    e12c:	e3a00003 	mov	r0, #3
    e130:	eaffffb8 	b	e018 <ExceptionHandler>

0000e134 <IRQStub>:
    e134:	e24ee004 	sub	lr, lr, #4
    e138:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e13c:	eb0000f2 	bl	e50c <InterruptHandler>
    e140:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000e144 <CInterruptSystem::CInterruptSystem()>:
    e144:	e2802f47 	add	r2, r0, #284	; 0x11c
    e148:	e1a0c000 	mov	ip, r0
    e14c:	e2403004 	sub	r3, r0, #4
    e150:	e3a01000 	mov	r1, #0
    e154:	e1a00002 	mov	r0, r2
    e158:	e5a31004 	str	r1, [r3, #4]!
    e15c:	e5a21004 	str	r1, [r2, #4]!
    e160:	e1530000 	cmp	r3, r0
    e164:	1afffffb 	bne	e158 <CInterruptSystem::CInterruptSystem()+0x14>
    e168:	e30233ac 	movw	r3, #9132	; 0x23ac
    e16c:	e3403001 	movt	r3, #1
    e170:	e1a0000c 	mov	r0, ip
    e174:	e583c000 	str	ip, [r3]
    e178:	e12fff1e 	bx	lr

0000e17c <CInterruptSystem::~CInterruptSystem()>:
    e17c:	e30233ac 	movw	r3, #9132	; 0x23ac
    e180:	e3403001 	movt	r3, #1
    e184:	e3a02000 	mov	r2, #0
    e188:	e5832000 	str	r2, [r3]
    e18c:	e12fff1e 	bx	lr

0000e190 <CInterruptSystem::Initialize()>:
    e190:	e59f3040 	ldr	r3, [pc, #64]	; e1d8 <CInterruptSystem::Initialize()+0x48>
    e194:	e92d4010 	push	{r4, lr}
    e198:	e3a04000 	mov	r4, #0
    e19c:	e1a03143 	asr	r3, r3, #2
    e1a0:	e2433002 	sub	r3, r3, #2
    e1a4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    e1a8:	e5843018 	str	r3, [r4, #24]
    e1ac:	ebffef00 	bl	9db4 <SyncDataAndInstructionCache>
    e1b0:	e3a03a0b 	mov	r3, #45056	; 0xb000
    e1b4:	e3433f00 	movt	r3, #16128	; 0x3f00
    e1b8:	e3e02000 	mvn	r2, #0
    e1bc:	e583420c 	str	r4, [r3, #524]	; 0x20c
    e1c0:	e583221c 	str	r2, [r3, #540]	; 0x21c
    e1c4:	e5832220 	str	r2, [r3, #544]	; 0x220
    e1c8:	e5832224 	str	r2, [r3, #548]	; 0x224
    e1cc:	f1080080 	cpsie	i
    e1d0:	e3a00001 	mov	r0, #1
    e1d4:	e8bd8010 	pop	{r4, pc}
    e1d8:	0000e11c 	.word	0x0000e11c

0000e1dc <CInterruptSystem::EnableIRQ(unsigned int)>:
    e1dc:	e3500047 	cmp	r0, #71	; 0x47
    e1e0:	e92d4010 	push	{r4, lr}
    e1e4:	e1a04000 	mov	r4, r0
    e1e8:	8a00000e 	bhi	e228 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
    e1ec:	e350001f 	cmp	r0, #31
    e1f0:	930b2210 	movwls	r2, #45584	; 0xb210
    e1f4:	93432f00 	movtls	r2, #16128	; 0x3f00
    e1f8:	8a000004 	bhi	e210 <CInterruptSystem::EnableIRQ(unsigned int)+0x34>
    e1fc:	e204401f 	and	r4, r4, #31
    e200:	e3a03001 	mov	r3, #1
    e204:	e1a04413 	lsl	r4, r3, r4
    e208:	e5824000 	str	r4, [r2]
    e20c:	e8bd8010 	pop	{r4, pc}
    e210:	e350003f 	cmp	r0, #63	; 0x3f
    e214:	930b2214 	movwls	r2, #45588	; 0xb214
    e218:	93432f00 	movtls	r2, #16128	; 0x3f00
    e21c:	830b2218 	movwhi	r2, #45592	; 0xb218
    e220:	83432f00 	movthi	r2, #16128	; 0x3f00
    e224:	eafffff4 	b	e1fc <CInterruptSystem::EnableIRQ(unsigned int)+0x20>
    e228:	e3a02074 	mov	r2, #116	; 0x74
    e22c:	e3011cb4 	movw	r1, #7348	; 0x1cb4
    e230:	e3401001 	movt	r1, #1
    e234:	e3010cc4 	movw	r0, #7364	; 0x1cc4
    e238:	e3400001 	movt	r0, #1
    e23c:	ebfff86f 	bl	c400 <assertion_failed>
    e240:	e30b2218 	movw	r2, #45592	; 0xb218
    e244:	e3432f00 	movt	r2, #16128	; 0x3f00
    e248:	eaffffeb 	b	e1fc <CInterruptSystem::EnableIRQ(unsigned int)+0x20>

0000e24c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    e24c:	e3510047 	cmp	r1, #71	; 0x47
    e250:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e254:	e1a04001 	mov	r4, r1
    e258:	e1a05000 	mov	r5, r0
    e25c:	e1a08002 	mov	r8, r2
    e260:	e1a07003 	mov	r7, r3
    e264:	8a00000e 	bhi	e2a4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
    e268:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e26c:	e0856104 	add	r6, r5, r4, lsl #2
    e270:	e3530000 	cmp	r3, #0
    e274:	0a000005 	beq	e290 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x44>
    e278:	e3011cb4 	movw	r1, #7348	; 0x1cb4
    e27c:	e3401001 	movt	r1, #1
    e280:	e3010cd8 	movw	r0, #7384	; 0x1cd8
    e284:	e3400001 	movt	r0, #1
    e288:	e3a0205d 	mov	r2, #93	; 0x5d
    e28c:	ebfff85b 	bl	c400 <assertion_failed>
    e290:	e7858104 	str	r8, [r5, r4, lsl #2]
    e294:	e1a00004 	mov	r0, r4
    e298:	e5867120 	str	r7, [r6, #288]	; 0x120
    e29c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    e2a0:	eaffffcd 	b	e1dc <CInterruptSystem::EnableIRQ(unsigned int)>
    e2a4:	e3011cb4 	movw	r1, #7348	; 0x1cb4
    e2a8:	e3401001 	movt	r1, #1
    e2ac:	e3010cc4 	movw	r0, #7364	; 0x1cc4
    e2b0:	e3400001 	movt	r0, #1
    e2b4:	e3a0205c 	mov	r2, #92	; 0x5c
    e2b8:	ebfff850 	bl	c400 <assertion_failed>
    e2bc:	eaffffe9 	b	e268 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>

0000e2c0 <CInterruptSystem::DisableIRQ(unsigned int)>:
    e2c0:	e3500047 	cmp	r0, #71	; 0x47
    e2c4:	e92d4010 	push	{r4, lr}
    e2c8:	e1a04000 	mov	r4, r0
    e2cc:	8a00000e 	bhi	e30c <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
    e2d0:	e350001f 	cmp	r0, #31
    e2d4:	930b221c 	movwls	r2, #45596	; 0xb21c
    e2d8:	93432f00 	movtls	r2, #16128	; 0x3f00
    e2dc:	8a000004 	bhi	e2f4 <CInterruptSystem::DisableIRQ(unsigned int)+0x34>
    e2e0:	e204401f 	and	r4, r4, #31
    e2e4:	e3a03001 	mov	r3, #1
    e2e8:	e1a04413 	lsl	r4, r3, r4
    e2ec:	e5824000 	str	r4, [r2]
    e2f0:	e8bd8010 	pop	{r4, pc}
    e2f4:	e350003f 	cmp	r0, #63	; 0x3f
    e2f8:	930b2220 	movwls	r2, #45600	; 0xb220
    e2fc:	93432f00 	movtls	r2, #16128	; 0x3f00
    e300:	830b2224 	movwhi	r2, #45604	; 0xb224
    e304:	83432f00 	movthi	r2, #16128	; 0x3f00
    e308:	eafffff4 	b	e2e0 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>
    e30c:	e3a0207f 	mov	r2, #127	; 0x7f
    e310:	e3011cb4 	movw	r1, #7348	; 0x1cb4
    e314:	e3401001 	movt	r1, #1
    e318:	e3010cc4 	movw	r0, #7364	; 0x1cc4
    e31c:	e3400001 	movt	r0, #1
    e320:	ebfff836 	bl	c400 <assertion_failed>
    e324:	e30b2224 	movw	r2, #45604	; 0xb224
    e328:	e3432f00 	movt	r2, #16128	; 0x3f00
    e32c:	eaffffeb 	b	e2e0 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>

0000e330 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    e330:	e3510047 	cmp	r1, #71	; 0x47
    e334:	e92d4070 	push	{r4, r5, r6, lr}
    e338:	e1a04001 	mov	r4, r1
    e33c:	e1a05000 	mov	r5, r0
    e340:	8a000009 	bhi	e36c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    e344:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e348:	e0856104 	add	r6, r5, r4, lsl #2
    e34c:	e3530000 	cmp	r3, #0
    e350:	0a00000f 	beq	e394 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
    e354:	e1a00004 	mov	r0, r4
    e358:	ebffffd8 	bl	e2c0 <CInterruptSystem::DisableIRQ(unsigned int)>
    e35c:	e3a03000 	mov	r3, #0
    e360:	e7853104 	str	r3, [r5, r4, lsl #2]
    e364:	e5863120 	str	r3, [r6, #288]	; 0x120
    e368:	e8bd8070 	pop	{r4, r5, r6, pc}
    e36c:	e3011cb4 	movw	r1, #7348	; 0x1cb4
    e370:	e3401001 	movt	r1, #1
    e374:	e3010cc4 	movw	r0, #7364	; 0x1cc4
    e378:	e3400001 	movt	r0, #1
    e37c:	e3a02067 	mov	r2, #103	; 0x67
    e380:	e0856104 	add	r6, r5, r4, lsl #2
    e384:	ebfff81d 	bl	c400 <assertion_failed>
    e388:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e38c:	e3530000 	cmp	r3, #0
    e390:	1affffef 	bne	e354 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    e394:	e3011cb4 	movw	r1, #7348	; 0x1cb4
    e398:	e3401001 	movt	r1, #1
    e39c:	e3010cf4 	movw	r0, #7412	; 0x1cf4
    e3a0:	e3400001 	movt	r0, #1
    e3a4:	e3a02068 	mov	r2, #104	; 0x68
    e3a8:	ebfff814 	bl	c400 <assertion_failed>
    e3ac:	eaffffe8 	b	e354 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>

0000e3b0 <CInterruptSystem::Get()>:
    e3b0:	e92d4010 	push	{r4, lr}
    e3b4:	e30243ac 	movw	r4, #9132	; 0x23ac
    e3b8:	e3404001 	movt	r4, #1
    e3bc:	e5940000 	ldr	r0, [r4]
    e3c0:	e3500000 	cmp	r0, #0
    e3c4:	18bd8010 	popne	{r4, pc}
    e3c8:	e3a02088 	mov	r2, #136	; 0x88
    e3cc:	e3011cb4 	movw	r1, #7348	; 0x1cb4
    e3d0:	e3401001 	movt	r1, #1
    e3d4:	e30003b4 	movw	r0, #948	; 0x3b4
    e3d8:	e3400001 	movt	r0, #1
    e3dc:	ebfff807 	bl	c400 <assertion_failed>
    e3e0:	e5940000 	ldr	r0, [r4]
    e3e4:	e8bd8010 	pop	{r4, pc}

0000e3e8 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    e3e8:	e3510047 	cmp	r1, #71	; 0x47
    e3ec:	e92d4070 	push	{r4, r5, r6, lr}
    e3f0:	e1a06001 	mov	r6, r1
    e3f4:	e1a05000 	mov	r5, r0
    e3f8:	8a000007 	bhi	e41c <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    e3fc:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    e400:	e0855106 	add	r5, r5, r6, lsl #2
    e404:	e3540000 	cmp	r4, #0
    e408:	0a00000d 	beq	e444 <CInterruptSystem::CallIRQHandler(unsigned int)+0x5c>
    e40c:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    e410:	e12fff34 	blx	r4
    e414:	e3a00001 	mov	r0, #1
    e418:	e8bd8070 	pop	{r4, r5, r6, pc}
    e41c:	e3011cb4 	movw	r1, #7348	; 0x1cb4
    e420:	e3401001 	movt	r1, #1
    e424:	e3010cc4 	movw	r0, #7364	; 0x1cc4
    e428:	e3400001 	movt	r0, #1
    e42c:	e3a0208e 	mov	r2, #142	; 0x8e
    e430:	ebfff7f2 	bl	c400 <assertion_failed>
    e434:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    e438:	e0855106 	add	r5, r5, r6, lsl #2
    e43c:	e3540000 	cmp	r4, #0
    e440:	1afffff1 	bne	e40c <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    e444:	e1a00006 	mov	r0, r6
    e448:	ebffff9c 	bl	e2c0 <CInterruptSystem::DisableIRQ(unsigned int)>
    e44c:	e1a00004 	mov	r0, r4
    e450:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e454 <CInterruptSystem::InterruptHandler()>:
    e454:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e458:	e30263ac 	movw	r6, #9132	; 0x23ac
    e45c:	e3406001 	movt	r6, #1
    e460:	e24dd010 	sub	sp, sp, #16
    e464:	e5963000 	ldr	r3, [r6]
    e468:	e3530000 	cmp	r3, #0
    e46c:	0a00001f 	beq	e4f0 <CInterruptSystem::InterruptHandler()+0x9c>
    e470:	e3a03a0b 	mov	r3, #45056	; 0xb000
    e474:	e3433f00 	movt	r3, #16128	; 0x3f00
    e478:	e28d8008 	add	r8, sp, #8
    e47c:	e3a07000 	mov	r7, #0
    e480:	e5934204 	ldr	r4, [r3, #516]	; 0x204
    e484:	e58d4004 	str	r4, [sp, #4]
    e488:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    e48c:	e58d2008 	str	r2, [sp, #8]
    e490:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    e494:	e6ef3073 	uxtb	r3, r3
    e498:	e58d300c 	str	r3, [sp, #12]
    e49c:	e3540000 	cmp	r4, #0
    e4a0:	0a00000d 	beq	e4dc <CInterruptSystem::InterruptHandler()+0x88>
    e4a4:	e1a05007 	mov	r5, r7
    e4a8:	ea000002 	b	e4b8 <CInterruptSystem::InterruptHandler()+0x64>
    e4ac:	e1b040a4 	lsrs	r4, r4, #1
    e4b0:	e2855001 	add	r5, r5, #1
    e4b4:	0a000008 	beq	e4dc <CInterruptSystem::InterruptHandler()+0x88>
    e4b8:	e3140001 	tst	r4, #1
    e4bc:	0afffffa 	beq	e4ac <CInterruptSystem::InterruptHandler()+0x58>
    e4c0:	e1a01005 	mov	r1, r5
    e4c4:	e5960000 	ldr	r0, [r6]
    e4c8:	ebffffc6 	bl	e3e8 <CInterruptSystem::CallIRQHandler(unsigned int)>
    e4cc:	e3500000 	cmp	r0, #0
    e4d0:	0afffff5 	beq	e4ac <CInterruptSystem::InterruptHandler()+0x58>
    e4d4:	e28dd010 	add	sp, sp, #16
    e4d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e4dc:	e2877020 	add	r7, r7, #32
    e4e0:	e3570060 	cmp	r7, #96	; 0x60
    e4e4:	0afffffa 	beq	e4d4 <CInterruptSystem::InterruptHandler()+0x80>
    e4e8:	e4984004 	ldr	r4, [r8], #4
    e4ec:	eaffffea 	b	e49c <CInterruptSystem::InterruptHandler()+0x48>
    e4f0:	e3011cb4 	movw	r1, #7348	; 0x1cb4
    e4f4:	e3401001 	movt	r1, #1
    e4f8:	e30003b4 	movw	r0, #948	; 0x3b4
    e4fc:	e3400001 	movt	r0, #1
    e500:	e3a020a1 	mov	r2, #161	; 0xa1
    e504:	ebfff7bd 	bl	c400 <assertion_failed>
    e508:	eaffffd8 	b	e470 <CInterruptSystem::InterruptHandler()+0x1c>

0000e50c <InterruptHandler>:
    e50c:	eaffffd0 	b	e454 <CInterruptSystem::InterruptHandler()>

0000e510 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    e510:	e1a03000 	mov	r3, r0
    e514:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    e518:	e3a0e000 	mov	lr, #0
    e51c:	e1a0c00e 	mov	ip, lr
    e520:	e28020dc 	add	r2, r0, #220	; 0xdc
    e524:	e5801000 	str	r1, [r0]
    e528:	e5a3e004 	str	lr, [r3, #4]!
    e52c:	e5a3c004 	str	ip, [r3, #4]!
    e530:	e1530002 	cmp	r3, r2
    e534:	1afffffc 	bne	e52c <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    e538:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000e53c <CGPIOManager::~CGPIOManager()>:
    e53c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e540:	e3016d10 	movw	r6, #7440	; 0x1d10
    e544:	e3406001 	movt	r6, #1
    e548:	e3015d20 	movw	r5, #7456	; 0x1d20
    e54c:	e3405001 	movt	r5, #1
    e550:	e1a08000 	mov	r8, r0
    e554:	e2804004 	add	r4, r0, #4
    e558:	e28070dc 	add	r7, r0, #220	; 0xdc
    e55c:	e5b43004 	ldr	r3, [r4, #4]!
    e560:	e3a0202c 	mov	r2, #44	; 0x2c
    e564:	e1a01006 	mov	r1, r6
    e568:	e1a00005 	mov	r0, r5
    e56c:	e3530000 	cmp	r3, #0
    e570:	0a000000 	beq	e578 <CGPIOManager::~CGPIOManager()+0x3c>
    e574:	ebfff7a1 	bl	c400 <assertion_failed>
    e578:	e1540007 	cmp	r4, r7
    e57c:	1afffff6 	bne	e55c <CGPIOManager::~CGPIOManager()+0x20>
    e580:	e5983004 	ldr	r3, [r8, #4]
    e584:	e3530000 	cmp	r3, #0
    e588:	0a000004 	beq	e5a0 <CGPIOManager::~CGPIOManager()+0x64>
    e58c:	e5980000 	ldr	r0, [r8]
    e590:	e3500000 	cmp	r0, #0
    e594:	0a000003 	beq	e5a8 <CGPIOManager::~CGPIOManager()+0x6c>
    e598:	e3a01034 	mov	r1, #52	; 0x34
    e59c:	ebffff63 	bl	e330 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    e5a0:	e1a00008 	mov	r0, r8
    e5a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e5a8:	e3011d10 	movw	r1, #7440	; 0x1d10
    e5ac:	e3401001 	movt	r1, #1
    e5b0:	e3010d34 	movw	r0, #7476	; 0x1d34
    e5b4:	e3400001 	movt	r0, #1
    e5b8:	e3a02032 	mov	r2, #50	; 0x32
    e5bc:	ebfff78f 	bl	c400 <assertion_failed>
    e5c0:	e5980000 	ldr	r0, [r8]
    e5c4:	eafffff3 	b	e598 <CGPIOManager::~CGPIOManager()+0x5c>

0000e5c8 <CGPIOManager::Initialize()>:
    e5c8:	e5903004 	ldr	r3, [r0, #4]
    e5cc:	e92d4010 	push	{r4, lr}
    e5d0:	e1a04000 	mov	r4, r0
    e5d4:	e3530000 	cmp	r3, #0
    e5d8:	1a00000a 	bne	e608 <CGPIOManager::Initialize()+0x40>
    e5dc:	e5940000 	ldr	r0, [r4]
    e5e0:	e3500000 	cmp	r0, #0
    e5e4:	0a000010 	beq	e62c <CGPIOManager::Initialize()+0x64>
    e5e8:	e1a03004 	mov	r3, r4
    e5ec:	e3a01034 	mov	r1, #52	; 0x34
    e5f0:	e30e286c 	movw	r2, #59500	; 0xe86c
    e5f4:	e3402000 	movt	r2, #0
    e5f8:	ebffff13 	bl	e24c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    e5fc:	e3a00001 	mov	r0, #1
    e600:	e5840004 	str	r0, [r4, #4]
    e604:	e8bd8010 	pop	{r4, pc}
    e608:	e3011d10 	movw	r1, #7440	; 0x1d10
    e60c:	e3401001 	movt	r1, #1
    e610:	e3010d48 	movw	r0, #7496	; 0x1d48
    e614:	e3400001 	movt	r0, #1
    e618:	e3a0203b 	mov	r2, #59	; 0x3b
    e61c:	ebfff777 	bl	c400 <assertion_failed>
    e620:	e5940000 	ldr	r0, [r4]
    e624:	e3500000 	cmp	r0, #0
    e628:	1affffee 	bne	e5e8 <CGPIOManager::Initialize()+0x20>
    e62c:	e3011d10 	movw	r1, #7440	; 0x1d10
    e630:	e3401001 	movt	r1, #1
    e634:	e3010d34 	movw	r0, #7476	; 0x1d34
    e638:	e3400001 	movt	r0, #1
    e63c:	e3a0203c 	mov	r2, #60	; 0x3c
    e640:	ebfff76e 	bl	c400 <assertion_failed>
    e644:	e5940000 	ldr	r0, [r4]
    e648:	eaffffe6 	b	e5e8 <CGPIOManager::Initialize()+0x20>

0000e64c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    e64c:	e5903004 	ldr	r3, [r0, #4]
    e650:	e92d4070 	push	{r4, r5, r6, lr}
    e654:	e1a04000 	mov	r4, r0
    e658:	e3530000 	cmp	r3, #0
    e65c:	e1a05001 	mov	r5, r1
    e660:	0a000010 	beq	e6a8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
    e664:	e3550000 	cmp	r5, #0
    e668:	0a00001c 	beq	e6e0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    e66c:	e5956004 	ldr	r6, [r5, #4]
    e670:	e3560035 	cmp	r6, #53	; 0x35
    e674:	8a000012 	bhi	e6c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x78>
    e678:	e0844106 	add	r4, r4, r6, lsl #2
    e67c:	e5943008 	ldr	r3, [r4, #8]
    e680:	e3530000 	cmp	r3, #0
    e684:	0a000005 	beq	e6a0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
    e688:	e3011d10 	movw	r1, #7440	; 0x1d10
    e68c:	e3401001 	movt	r1, #1
    e690:	e3010d20 	movw	r0, #7456	; 0x1d20
    e694:	e3400001 	movt	r0, #1
    e698:	e3a0204b 	mov	r2, #75	; 0x4b
    e69c:	ebfff757 	bl	c400 <assertion_failed>
    e6a0:	e5845008 	str	r5, [r4, #8]
    e6a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    e6a8:	e3011d10 	movw	r1, #7440	; 0x1d10
    e6ac:	e3401001 	movt	r1, #1
    e6b0:	e3010d5c 	movw	r0, #7516	; 0x1d5c
    e6b4:	e3400001 	movt	r0, #1
    e6b8:	e3a02045 	mov	r2, #69	; 0x45
    e6bc:	ebfff74f 	bl	c400 <assertion_failed>
    e6c0:	eaffffe7 	b	e664 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
    e6c4:	e3011d10 	movw	r1, #7440	; 0x1d10
    e6c8:	e3401001 	movt	r1, #1
    e6cc:	e3000870 	movw	r0, #2160	; 0x870
    e6d0:	e3400001 	movt	r0, #1
    e6d4:	e3a02049 	mov	r2, #73	; 0x49
    e6d8:	ebfff748 	bl	c400 <assertion_failed>
    e6dc:	eaffffe5 	b	e678 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
    e6e0:	e3011d10 	movw	r1, #7440	; 0x1d10
    e6e4:	e3401001 	movt	r1, #1
    e6e8:	e3010d6c 	movw	r0, #7532	; 0x1d6c
    e6ec:	e3400001 	movt	r0, #1
    e6f0:	e3a02047 	mov	r2, #71	; 0x47
    e6f4:	ebfff741 	bl	c400 <assertion_failed>
    e6f8:	eaffffdb 	b	e66c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>

0000e6fc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    e6fc:	e5903004 	ldr	r3, [r0, #4]
    e700:	e92d4070 	push	{r4, r5, r6, lr}
    e704:	e1a04000 	mov	r4, r0
    e708:	e3530000 	cmp	r3, #0
    e70c:	e1a05001 	mov	r5, r1
    e710:	0a00000b 	beq	e744 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
    e714:	e3550000 	cmp	r5, #0
    e718:	0a000021 	beq	e7a4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    e71c:	e5955004 	ldr	r5, [r5, #4]
    e720:	e3550035 	cmp	r5, #53	; 0x35
    e724:	8a00000d 	bhi	e760 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x64>
    e728:	e0844105 	add	r4, r4, r5, lsl #2
    e72c:	e5943008 	ldr	r3, [r4, #8]
    e730:	e3530000 	cmp	r3, #0
    e734:	0a000013 	beq	e788 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
    e738:	e3a03000 	mov	r3, #0
    e73c:	e5843008 	str	r3, [r4, #8]
    e740:	e8bd8070 	pop	{r4, r5, r6, pc}
    e744:	e3011d10 	movw	r1, #7440	; 0x1d10
    e748:	e3401001 	movt	r1, #1
    e74c:	e3010d5c 	movw	r0, #7516	; 0x1d5c
    e750:	e3400001 	movt	r0, #1
    e754:	e3a02052 	mov	r2, #82	; 0x52
    e758:	ebfff728 	bl	c400 <assertion_failed>
    e75c:	eaffffec 	b	e714 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
    e760:	e0844105 	add	r4, r4, r5, lsl #2
    e764:	e3011d10 	movw	r1, #7440	; 0x1d10
    e768:	e3401001 	movt	r1, #1
    e76c:	e3000870 	movw	r0, #2160	; 0x870
    e770:	e3400001 	movt	r0, #1
    e774:	e3a02056 	mov	r2, #86	; 0x56
    e778:	ebfff720 	bl	c400 <assertion_failed>
    e77c:	e5943008 	ldr	r3, [r4, #8]
    e780:	e3530000 	cmp	r3, #0
    e784:	1affffeb 	bne	e738 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    e788:	e3011d10 	movw	r1, #7440	; 0x1d10
    e78c:	e3401001 	movt	r1, #1
    e790:	e3010d78 	movw	r0, #7544	; 0x1d78
    e794:	e3400001 	movt	r0, #1
    e798:	e3a02058 	mov	r2, #88	; 0x58
    e79c:	ebfff717 	bl	c400 <assertion_failed>
    e7a0:	eaffffe4 	b	e738 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    e7a4:	e3011d10 	movw	r1, #7440	; 0x1d10
    e7a8:	e3401001 	movt	r1, #1
    e7ac:	e3010d6c 	movw	r0, #7532	; 0x1d6c
    e7b0:	e3400001 	movt	r0, #1
    e7b4:	e3a02054 	mov	r2, #84	; 0x54
    e7b8:	ebfff710 	bl	c400 <assertion_failed>
    e7bc:	eaffffd6 	b	e71c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>

0000e7c0 <CGPIOManager::InterruptHandler()>:
    e7c0:	e5903004 	ldr	r3, [r0, #4]
    e7c4:	e92d4070 	push	{r4, r5, r6, lr}
    e7c8:	e1a06000 	mov	r6, r0
    e7cc:	e3530000 	cmp	r3, #0
    e7d0:	0a00001b 	beq	e844 <CGPIOManager::InterruptHandler()+0x84>
    e7d4:	e3a03000 	mov	r3, #0
    e7d8:	e3433f20 	movt	r3, #16160	; 0x3f20
    e7dc:	e1a02003 	mov	r2, r3
    e7e0:	e3a04000 	mov	r4, #0
    e7e4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
    e7e8:	ea000004 	b	e800 <CGPIOManager::InterruptHandler()+0x40>
    e7ec:	e2844001 	add	r4, r4, #1
    e7f0:	e314001f 	tst	r4, #31
    e7f4:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    e7f8:	e3540036 	cmp	r4, #54	; 0x36
    e7fc:	08bd8070 	popeq	{r4, r5, r6, pc}
    e800:	e3130001 	tst	r3, #1
    e804:	e1a030a3 	lsr	r3, r3, #1
    e808:	0afffff7 	beq	e7ec <CGPIOManager::InterruptHandler()+0x2c>
    e80c:	e2843002 	add	r3, r4, #2
    e810:	e204501f 	and	r5, r4, #31
    e814:	e3a02001 	mov	r2, #1
    e818:	e7960103 	ldr	r0, [r6, r3, lsl #2]
    e81c:	e1a05512 	lsl	r5, r2, r5
    e820:	e3500000 	cmp	r0, #0
    e824:	0a00000d 	beq	e860 <CGPIOManager::InterruptHandler()+0xa0>
    e828:	ebffec3d 	bl	9924 <CGPIOPin::InterruptHandler()>
    e82c:	e3a03010 	mov	r3, #16
    e830:	e3403fc8 	movt	r3, #4040	; 0xfc8
    e834:	e08332a4 	add	r3, r3, r4, lsr #5
    e838:	e1a03103 	lsl	r3, r3, #2
    e83c:	e5835000 	str	r5, [r3]
    e840:	e8bd8070 	pop	{r4, r5, r6, pc}
    e844:	e3011d10 	movw	r1, #7440	; 0x1d10
    e848:	e3401001 	movt	r1, #1
    e84c:	e3010d5c 	movw	r0, #7516	; 0x1d5c
    e850:	e3400001 	movt	r0, #1
    e854:	e3a0205e 	mov	r2, #94	; 0x5e
    e858:	ebfff6e8 	bl	c400 <assertion_failed>
    e85c:	eaffffdc 	b	e7d4 <CGPIOManager::InterruptHandler()+0x14>
    e860:	e1a00004 	mov	r0, r4
    e864:	ebffec5a 	bl	99d4 <CGPIOPin::DisableAllInterrupts(unsigned int)>
    e868:	eaffffef 	b	e82c <CGPIOManager::InterruptHandler()+0x6c>

0000e86c <CGPIOManager::InterruptStub(void*)>:
    e86c:	e92d4010 	push	{r4, lr}
    e870:	e2504000 	subs	r4, r0, #0
    e874:	0a000002 	beq	e884 <CGPIOManager::InterruptStub(void*)+0x18>
    e878:	e1a00004 	mov	r0, r4
    e87c:	e8bd4010 	pop	{r4, lr}
    e880:	eaffffce 	b	e7c0 <CGPIOManager::InterruptHandler()>
    e884:	e3011d10 	movw	r1, #7440	; 0x1d10
    e888:	e3401001 	movt	r1, #1
    e88c:	e3010d8c 	movw	r0, #7564	; 0x1d8c
    e890:	e3400001 	movt	r0, #1
    e894:	e3a0208a 	mov	r2, #138	; 0x8a
    e898:	ebfff6d8 	bl	c400 <assertion_failed>
    e89c:	e1a00004 	mov	r0, r4
    e8a0:	e8bd4010 	pop	{r4, lr}
    e8a4:	eaffffc5 	b	e7c0 <CGPIOManager::InterruptHandler()>

0000e8a8 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    e8a8:	e12fff1e 	bx	lr

0000e8ac <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    e8ac:	e92d4010 	push	{r4, lr}
    e8b0:	e1a04000 	mov	r4, r0
    e8b4:	ebffed17 	bl	9d18 <operator delete(void*)>
    e8b8:	e1a00004 	mov	r0, r4
    e8bc:	e8bd8010 	pop	{r4, pc}

0000e8c0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
    e8c0:	e92d4070 	push	{r4, r5, r6, lr}
    e8c4:	e30243b0 	movw	r4, #9136	; 0x23b0
    e8c8:	e3404001 	movt	r4, #1
    e8cc:	e1a05000 	mov	r5, r0
    e8d0:	e1a06001 	mov	r6, r1
    e8d4:	e5943000 	ldr	r3, [r4]
    e8d8:	e3530000 	cmp	r3, #0
    e8dc:	1a00001a 	bne	e94c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x8c>
    e8e0:	e1d500bc 	ldrh	r0, [r5, #12]
    e8e4:	e1d530be 	ldrh	r3, [r5, #14]
    e8e8:	e5856008 	str	r6, [r5, #8]
    e8ec:	e0402003 	sub	r2, r0, r3
    e8f0:	e6bf2072 	sxth	r2, r2
    e8f4:	e3520000 	cmp	r2, #0
    e8f8:	da00000c 	ble	e930 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x70>
    e8fc:	e3560000 	cmp	r6, #0
    e900:	1a00000c 	bne	e938 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x78>
    e904:	e2833001 	add	r3, r3, #1
    e908:	e6ff3073 	uxth	r3, r3
    e90c:	e1c530be 	strh	r3, [r5, #14]
    e910:	e5951004 	ldr	r1, [r5, #4]
    e914:	e1833800 	orr	r3, r3, r0, lsl #16
    e918:	e5942004 	ldr	r2, [r4, #4]
    e91c:	e7823101 	str	r3, [r2, r1, lsl #2]
    e920:	e5943000 	ldr	r3, [r4]
    e924:	e3530000 	cmp	r3, #0
    e928:	1a000005 	bne	e944 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x84>
    e92c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e930:	e3560000 	cmp	r6, #0
    e934:	1a000006 	bne	e954 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x94>
    e938:	e5943000 	ldr	r3, [r4]
    e93c:	e3530000 	cmp	r3, #0
    e940:	08bd8070 	popeq	{r4, r5, r6, pc}
    e944:	e8bd4070 	pop	{r4, r5, r6, lr}
    e948:	eaffed01 	b	9d54 <LeaveCritical>
    e94c:	ebffecf3 	bl	9d20 <EnterCritical>
    e950:	eaffffe2 	b	e8e0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x20>
    e954:	e2800001 	add	r0, r0, #1
    e958:	e6ff0070 	uxth	r0, r0
    e95c:	e1c500bc 	strh	r0, [r5, #12]
    e960:	eaffffea 	b	e910 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x50>

0000e964 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    e964:	e3510001 	cmp	r1, #1
    e968:	e92d4030 	push	{r4, r5, lr}
    e96c:	e59f20dc 	ldr	r2, [pc, #220]	; ea50 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xec>
    e970:	e3a03000 	mov	r3, #0
    e974:	e24dd024 	sub	sp, sp, #36	; 0x24
    e978:	e1a04000 	mov	r4, r0
    e97c:	e5801004 	str	r1, [r0, #4]
    e980:	e5802000 	str	r2, [r0]
    e984:	e1c030bc 	strh	r3, [r0, #12]
    e988:	e1c030be 	strh	r3, [r0, #14]
    e98c:	9a000002 	bls	e99c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
    e990:	e1a00004 	mov	r0, r4
    e994:	e28dd024 	add	sp, sp, #36	; 0x24
    e998:	e8bd8030 	pop	{r4, r5, pc}
    e99c:	e30253b0 	movw	r5, #9136	; 0x23b0
    e9a0:	e3405001 	movt	r5, #1
    e9a4:	e5953000 	ldr	r3, [r5]
    e9a8:	e3530000 	cmp	r3, #0
    e9ac:	1a000009 	bne	e9d8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x74>
    e9b0:	e5953004 	ldr	r3, [r5, #4]
    e9b4:	e3530000 	cmp	r3, #0
    e9b8:	0a00000a 	beq	e9e8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x84>
    e9bc:	e5953004 	ldr	r3, [r5, #4]
    e9c0:	e3530000 	cmp	r3, #0
    e9c4:	0afffff1 	beq	e990 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    e9c8:	e3a01000 	mov	r1, #0
    e9cc:	e1a00004 	mov	r0, r4
    e9d0:	ebffffba 	bl	e8c0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
    e9d4:	eaffffed 	b	e990 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    e9d8:	ebffecd0 	bl	9d20 <EnterCritical>
    e9dc:	e5953004 	ldr	r3, [r5, #4]
    e9e0:	e3530000 	cmp	r3, #0
    e9e4:	1a00000f 	bne	ea28 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xc4>
    e9e8:	e28d0008 	add	r0, sp, #8
    e9ec:	ebffe834 	bl	8ac4 <CBcmPropertyTags::CBcmPropertyTags()>
    e9f0:	e3a03000 	mov	r3, #0
    e9f4:	e58d3000 	str	r3, [sp]
    e9f8:	e3a03010 	mov	r3, #16
    e9fc:	e08d2003 	add	r2, sp, r3
    ea00:	e28d0008 	add	r0, sp, #8
    ea04:	e3a01010 	mov	r1, #16
    ea08:	e3401004 	movt	r1, #4
    ea0c:	ebffe874 	bl	8be4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ea10:	e3500000 	cmp	r0, #0
    ea14:	e28d0008 	add	r0, sp, #8
    ea18:	159d301c 	ldrne	r3, [sp, #28]
    ea1c:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    ea20:	15853004 	strne	r3, [r5, #4]
    ea24:	ebffe82c 	bl	8adc <CBcmPropertyTags::~CBcmPropertyTags()>
    ea28:	e5953000 	ldr	r3, [r5]
    ea2c:	e3530000 	cmp	r3, #0
    ea30:	0a000000 	beq	ea38 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xd4>
    ea34:	ebffecc6 	bl	9d54 <LeaveCritical>
    ea38:	e5943004 	ldr	r3, [r4, #4]
    ea3c:	e3530001 	cmp	r3, #1
    ea40:	9affffdd 	bls	e9bc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x58>
    ea44:	e1a00004 	mov	r0, r4
    ea48:	e28dd024 	add	sp, sp, #36	; 0x24
    ea4c:	e8bd8030 	pop	{r4, r5, pc}
    ea50:	00011da0 	.word	0x00011da0

0000ea54 <CVirtualGPIOPin::Write(unsigned int)>:
    ea54:	e5902004 	ldr	r2, [r0, #4]
    ea58:	e1a03001 	mov	r3, r1
    ea5c:	e3520001 	cmp	r2, #1
    ea60:	812fff1e 	bxhi	lr
    ea64:	e30223b0 	movw	r2, #9136	; 0x23b0
    ea68:	e3402001 	movt	r2, #1
    ea6c:	e3510001 	cmp	r1, #1
    ea70:	93a03000 	movls	r3, #0
    ea74:	83a03001 	movhi	r3, #1
    ea78:	e5922004 	ldr	r2, [r2, #4]
    ea7c:	e3520000 	cmp	r2, #0
    ea80:	03833001 	orreq	r3, r3, #1
    ea84:	e3530000 	cmp	r3, #0
    ea88:	112fff1e 	bxne	lr
    ea8c:	eaffff8b 	b	e8c0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>

0000ea90 <CVirtualGPIOPin::Invert()>:
    ea90:	e5901008 	ldr	r1, [r0, #8]
    ea94:	e2211001 	eor	r1, r1, #1
    ea98:	eaffffed 	b	ea54 <CVirtualGPIOPin::Write(unsigned int)>

0000ea9c <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    ea9c:	e30233b0 	movw	r3, #9136	; 0x23b0
    eaa0:	e3403001 	movt	r3, #1
    eaa4:	e3a02000 	mov	r2, #0
    eaa8:	e5832000 	str	r2, [r3]
    eaac:	e12fff1e 	bx	lr

0000eab0 <CMachineInfo::CMachineInfo()>:
    eab0:	e30223b8 	movw	r2, #9144	; 0x23b8
    eab4:	e3402001 	movt	r2, #1
    eab8:	e92d4030 	push	{r4, r5, lr}
    eabc:	e3a03000 	mov	r3, #0
    eac0:	e1a04000 	mov	r4, r0
    eac4:	e5925000 	ldr	r5, [r2]
    eac8:	e3a0000a 	mov	r0, #10
    eacc:	e3a01003 	mov	r1, #3
    ead0:	e24dd024 	sub	sp, sp, #36	; 0x24
    ead4:	e1550003 	cmp	r5, r3
    ead8:	e5c40004 	strb	r0, [r4, #4]
    eadc:	e5c41010 	strb	r1, [r4, #16]
    eae0:	e5843000 	str	r3, [r4]
    eae4:	e5843008 	str	r3, [r4, #8]
    eae8:	e584300c 	str	r3, [r4, #12]
    eaec:	e5843014 	str	r3, [r4, #20]
    eaf0:	0a00000e 	beq	eb30 <CMachineInfo::CMachineInfo()+0x80>
    eaf4:	e595e000 	ldr	lr, [r5]
    eaf8:	e5d5c004 	ldrb	ip, [r5, #4]
    eafc:	e5950008 	ldr	r0, [r5, #8]
    eb00:	e595100c 	ldr	r1, [r5, #12]
    eb04:	e5d52010 	ldrb	r2, [r5, #16]
    eb08:	e5953014 	ldr	r3, [r5, #20]
    eb0c:	e584e000 	str	lr, [r4]
    eb10:	e5c4c004 	strb	ip, [r4, #4]
    eb14:	e5840008 	str	r0, [r4, #8]
    eb18:	e584100c 	str	r1, [r4, #12]
    eb1c:	e5c42010 	strb	r2, [r4, #16]
    eb20:	e5843014 	str	r3, [r4, #20]
    eb24:	e1a00004 	mov	r0, r4
    eb28:	e28dd024 	add	sp, sp, #36	; 0x24
    eb2c:	e8bd8030 	pop	{r4, r5, pc}
    eb30:	e28d0008 	add	r0, sp, #8
    eb34:	e5824000 	str	r4, [r2]
    eb38:	ebffe7e1 	bl	8ac4 <CBcmPropertyTags::CBcmPropertyTags()>
    eb3c:	e3a03010 	mov	r3, #16
    eb40:	e58d5000 	str	r5, [sp]
    eb44:	e28d0008 	add	r0, sp, #8
    eb48:	e3a01002 	mov	r1, #2
    eb4c:	e3401001 	movt	r1, #1
    eb50:	e08d2003 	add	r2, sp, r3
    eb54:	ebffe822 	bl	8be4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    eb58:	e3500000 	cmp	r0, #0
    eb5c:	0a00000c 	beq	eb94 <CMachineInfo::CMachineInfo()+0xe4>
    eb60:	e59d201c 	ldr	r2, [sp, #28]
    eb64:	e2123502 	ands	r3, r2, #8388608	; 0x800000
    eb68:	e5842000 	str	r2, [r4]
    eb6c:	1a00000b 	bne	eba0 <CMachineInfo::CMachineInfo()+0xf0>
    eb70:	e3a01002 	mov	r1, #2
    eb74:	e59f00fc 	ldr	r0, [pc, #252]	; ec78 <CMachineInfo::CMachineInfo()+0x1c8>
    eb78:	ea000000 	b	eb80 <CMachineInfo::CMachineInfo()+0xd0>
    eb7c:	e7901203 	ldr	r1, [r0, r3, lsl #4]
    eb80:	e1520001 	cmp	r2, r1
    eb84:	0a000011 	beq	ebd0 <CMachineInfo::CMachineInfo()+0x120>
    eb88:	e2833001 	add	r3, r3, #1
    eb8c:	e3530011 	cmp	r3, #17
    eb90:	1afffff9 	bne	eb7c <CMachineInfo::CMachineInfo()+0xcc>
    eb94:	e28d0008 	add	r0, sp, #8
    eb98:	ebffe7cf 	bl	8adc <CBcmPropertyTags::~CBcmPropertyTags()>
    eb9c:	eaffffe0 	b	eb24 <CMachineInfo::CMachineInfo()+0x74>
    eba0:	e59f10d4 	ldr	r1, [pc, #212]	; ec7c <CMachineInfo::CMachineInfo()+0x1cc>
    eba4:	e1a03005 	mov	r3, r5
    eba8:	e7e70252 	ubfx	r0, r2, #4, #8
    ebac:	ea000000 	b	ebb4 <CMachineInfo::CMachineInfo()+0x104>
    ebb0:	e511500c 	ldr	r5, [r1, #-12]
    ebb4:	e1550000 	cmp	r5, r0
    ebb8:	e281100c 	add	r1, r1, #12
    ebbc:	0a000011 	beq	ec08 <CMachineInfo::CMachineInfo()+0x158>
    ebc0:	e2833001 	add	r3, r3, #1
    ebc4:	e3530008 	cmp	r3, #8
    ebc8:	1afffff8 	bne	ebb0 <CMachineInfo::CMachineInfo()+0x100>
    ebcc:	eafffff0 	b	eb94 <CMachineInfo::CMachineInfo()+0xe4>
    ebd0:	e3012da8 	movw	r2, #7592	; 0x1da8
    ebd4:	e3402001 	movt	r2, #1
    ebd8:	e3a01000 	mov	r1, #0
    ebdc:	e3a00001 	mov	r0, #1
    ebe0:	e0823203 	add	r3, r2, r3, lsl #4
    ebe4:	e5c41010 	strb	r1, [r4, #16]
    ebe8:	e5840008 	str	r0, [r4, #8]
    ebec:	e5d31064 	ldrb	r1, [r3, #100]	; 0x64
    ebf0:	e5932068 	ldr	r2, [r3, #104]	; 0x68
    ebf4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    ebf8:	e5c41004 	strb	r1, [r4, #4]
    ebfc:	e584200c 	str	r2, [r4, #12]
    ec00:	e5843014 	str	r3, [r4, #20]
    ec04:	eaffffe2 	b	eb94 <CMachineInfo::CMachineInfo()+0xe4>
    ec08:	e3a0c00c 	mov	ip, #12
    ec0c:	e7e2ea52 	ubfx	lr, r2, #20, #3
    ec10:	e3011da8 	movw	r1, #7592	; 0x1da8
    ec14:	e3401001 	movt	r1, #1
    ec18:	e3a00c01 	mov	r0, #256	; 0x100
    ec1c:	e7e35652 	ubfx	r5, r2, #12, #4
    ec20:	e021139c 	mla	r1, ip, r3, r1
    ec24:	e3550002 	cmp	r5, #2
    ec28:	e202300f 	and	r3, r2, #15
    ec2c:	e5c45010 	strb	r5, [r4, #16]
    ec30:	e5d1c004 	ldrb	ip, [r1, #4]
    ec34:	e1a02e10 	lsl	r2, r0, lr
    ec38:	e5842014 	str	r2, [r4, #20]
    ec3c:	83a02003 	movhi	r2, #3
    ec40:	85c42010 	strbhi	r2, [r4, #16]
    ec44:	e35e0000 	cmp	lr, #0
    ec48:	035c0003 	cmpeq	ip, #3
    ec4c:	e5911008 	ldr	r1, [r1, #8]
    ec50:	e2833001 	add	r3, r3, #1
    ec54:	e5c4c004 	strb	ip, [r4, #4]
    ec58:	e5841008 	str	r1, [r4, #8]
    ec5c:	e584300c 	str	r3, [r4, #12]
    ec60:	1affffcb 	bne	eb94 <CMachineInfo::CMachineInfo()+0xe4>
    ec64:	e3530001 	cmp	r3, #1
    ec68:	13a03002 	movne	r3, #2
    ec6c:	03a03001 	moveq	r3, #1
    ec70:	e5c43004 	strb	r3, [r4, #4]
    ec74:	eaffffc6 	b	eb94 <CMachineInfo::CMachineInfo()+0xe4>
    ec78:	00011e08 	.word	0x00011e08
    ec7c:	00011db4 	.word	0x00011db4

0000ec80 <CMachineInfo::~CMachineInfo()>:
    ec80:	e30233b8 	movw	r3, #9144	; 0x23b8
    ec84:	e3403001 	movt	r3, #1
    ec88:	e3a0100a 	mov	r1, #10
    ec8c:	e5c01004 	strb	r1, [r0, #4]
    ec90:	e5932000 	ldr	r2, [r3]
    ec94:	e1500002 	cmp	r0, r2
    ec98:	03a02000 	moveq	r2, #0
    ec9c:	05832000 	streq	r2, [r3]
    eca0:	e12fff1e 	bx	lr

0000eca4 <CMachineInfo::GetMachineModel() const>:
    eca4:	e5d00004 	ldrb	r0, [r0, #4]
    eca8:	e12fff1e 	bx	lr

0000ecac <CMachineInfo::GetMachineName() const>:
    ecac:	e5d02004 	ldrb	r2, [r0, #4]
    ecb0:	e3013da8 	movw	r3, #7592	; 0x1da8
    ecb4:	e3403001 	movt	r3, #1
    ecb8:	e0833102 	add	r3, r3, r2, lsl #2
    ecbc:	e5930170 	ldr	r0, [r3, #368]	; 0x170
    ecc0:	e12fff1e 	bx	lr

0000ecc4 <CMachineInfo::GetModelMajor() const>:
    ecc4:	e5900008 	ldr	r0, [r0, #8]
    ecc8:	e12fff1e 	bx	lr

0000eccc <CMachineInfo::GetModelRevision() const>:
    eccc:	e590000c 	ldr	r0, [r0, #12]
    ecd0:	e12fff1e 	bx	lr

0000ecd4 <CMachineInfo::GetSoCType() const>:
    ecd4:	e5d00010 	ldrb	r0, [r0, #16]
    ecd8:	e12fff1e 	bx	lr

0000ecdc <CMachineInfo::GetRAMSize() const>:
    ecdc:	e5900014 	ldr	r0, [r0, #20]
    ece0:	e12fff1e 	bx	lr

0000ece4 <CMachineInfo::GetSoCName() const>:
    ece4:	e5d02010 	ldrb	r2, [r0, #16]
    ece8:	e3013da8 	movw	r3, #7592	; 0x1da8
    ecec:	e3403001 	movt	r3, #1
    ecf0:	e0833102 	add	r3, r3, r2, lsl #2
    ecf4:	e593019c 	ldr	r0, [r3, #412]	; 0x19c
    ecf8:	e12fff1e 	bx	lr

0000ecfc <CMachineInfo::GetRevisionRaw() const>:
    ecfc:	e5900000 	ldr	r0, [r0]
    ed00:	e12fff1e 	bx	lr

0000ed04 <CMachineInfo::GetClockRate(unsigned int) const>:
    ed04:	e92d4070 	push	{r4, r5, r6, lr}
    ed08:	e1a06000 	mov	r6, r0
    ed0c:	e1a05001 	mov	r5, r1
    ed10:	e24dd028 	sub	sp, sp, #40	; 0x28
    ed14:	e28d000c 	add	r0, sp, #12
    ed18:	ebffe769 	bl	8ac4 <CBcmPropertyTags::CBcmPropertyTags()>
    ed1c:	e3a03004 	mov	r3, #4
    ed20:	e58d3000 	str	r3, [sp]
    ed24:	e3a03014 	mov	r3, #20
    ed28:	e28d000c 	add	r0, sp, #12
    ed2c:	e3a01002 	mov	r1, #2
    ed30:	e3401003 	movt	r1, #3
    ed34:	e08d2003 	add	r2, sp, r3
    ed38:	e58d5020 	str	r5, [sp, #32]
    ed3c:	ebffe7a8 	bl	8be4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ed40:	e2504000 	subs	r4, r0, #0
    ed44:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
    ed48:	1a00000b 	bne	ed7c <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    ed4c:	e3550002 	cmp	r5, #2
    ed50:	0a00000e 	beq	ed90 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    ed54:	e3550004 	cmp	r5, #4
    ed58:	0a000012 	beq	eda8 <CMachineInfo::GetClockRate(unsigned int) const+0xa4>
    ed5c:	e3550001 	cmp	r5, #1
    ed60:	0a00000d 	beq	ed9c <CMachineInfo::GetClockRate(unsigned int) const+0x98>
    ed64:	e3011f54 	movw	r1, #8020	; 0x1f54
    ed68:	e3401001 	movt	r1, #1
    ed6c:	e3010d0c 	movw	r0, #7436	; 0x1d0c
    ed70:	e3400001 	movt	r0, #1
    ed74:	e3a02f43 	mov	r2, #268	; 0x10c
    ed78:	ebfff5a0 	bl	c400 <assertion_failed>
    ed7c:	e28d000c 	add	r0, sp, #12
    ed80:	ebffe755 	bl	8adc <CBcmPropertyTags::~CBcmPropertyTags()>
    ed84:	e1a00004 	mov	r0, r4
    ed88:	e28dd028 	add	sp, sp, #40	; 0x28
    ed8c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ed90:	e3a04b1b 	mov	r4, #27648	; 0x6c00
    ed94:	e34042dc 	movt	r4, #732	; 0x2dc
    ed98:	eafffff7 	b	ed7c <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    ed9c:	e3a04ce1 	mov	r4, #57600	; 0xe100
    eda0:	e34045f5 	movt	r4, #1525	; 0x5f5
    eda4:	eafffff4 	b	ed7c <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    eda8:	e5962008 	ldr	r2, [r6, #8]
    edac:	e3a03ca3 	mov	r3, #41728	; 0xa300
    edb0:	e34131e1 	movt	r3, #4577	; 0x11e1
    edb4:	e3520002 	cmp	r2, #2
    edb8:	e30b4280 	movw	r4, #45696	; 0xb280
    edbc:	e3404ee6 	movt	r4, #3814	; 0xee6
    edc0:	81a04003 	movhi	r4, r3
    edc4:	eaffffec 	b	ed7c <CMachineInfo::GetClockRate(unsigned int) const+0x78>

0000edc8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    edc8:	e3510036 	cmp	r1, #54	; 0x36
    edcc:	0a00000f 	beq	ee10 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x48>
    edd0:	e3510037 	cmp	r1, #55	; 0x37
    edd4:	1a000004 	bne	edec <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    edd8:	e5d03004 	ldrb	r3, [r0, #4]
    eddc:	e3530003 	cmp	r3, #3
    ede0:	c3a00028 	movgt	r0, #40	; 0x28
    ede4:	d3a0002d 	movle	r0, #45	; 0x2d
    ede8:	e12fff1e 	bx	lr
    edec:	e92d4010 	push	{r4, lr}
    edf0:	e3002137 	movw	r2, #311	; 0x137
    edf4:	e3011f54 	movw	r1, #8020	; 0x1f54
    edf8:	e3401001 	movt	r1, #1
    edfc:	e3010d0c 	movw	r0, #7436	; 0x1d0c
    ee00:	e3400001 	movt	r0, #1
    ee04:	ebfff57d 	bl	c400 <assertion_failed>
    ee08:	e3a00000 	mov	r0, #0
    ee0c:	e8bd8010 	pop	{r4, pc}
    ee10:	e5d03004 	ldrb	r3, [r0, #4]
    ee14:	e3530003 	cmp	r3, #3
    ee18:	ca000001 	bgt	ee24 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
    ee1c:	e3a00028 	mov	r0, #40	; 0x28
    ee20:	e12fff1e 	bx	lr
    ee24:	e5903008 	ldr	r3, [r0, #8]
    ee28:	e3530003 	cmp	r3, #3
    ee2c:	33a0002d 	movcc	r0, #45	; 0x2d
    ee30:	23a00029 	movcs	r0, #41	; 0x29
    ee34:	e12fff1e 	bx	lr

0000ee38 <CMachineInfo::GetDevice(TDeviceId) const>:
    ee38:	e3510000 	cmp	r1, #0
    ee3c:	1a000003 	bne	ee50 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    ee40:	e5d00004 	ldrb	r0, [r0, #4]
    ee44:	e2500001 	subs	r0, r0, #1
    ee48:	13a00001 	movne	r0, #1
    ee4c:	e12fff1e 	bx	lr
    ee50:	e92d4010 	push	{r4, lr}
    ee54:	e3a02e15 	mov	r2, #336	; 0x150
    ee58:	e3011f54 	movw	r1, #8020	; 0x1f54
    ee5c:	e3401001 	movt	r1, #1
    ee60:	e3010d0c 	movw	r0, #7436	; 0x1d0c
    ee64:	e3400001 	movt	r0, #1
    ee68:	ebfff564 	bl	c400 <assertion_failed>
    ee6c:	e3a00000 	mov	r0, #0
    ee70:	e8bd8010 	pop	{r4, pc}

0000ee74 <CMachineInfo::Get()>:
    ee74:	e92d4010 	push	{r4, lr}
    ee78:	e30243b8 	movw	r4, #9144	; 0x23b8
    ee7c:	e3404001 	movt	r4, #1
    ee80:	e5940000 	ldr	r0, [r4]
    ee84:	e3500000 	cmp	r0, #0
    ee88:	18bd8010 	popne	{r4, pc}
    ee8c:	e3002159 	movw	r2, #345	; 0x159
    ee90:	e3011f54 	movw	r1, #8020	; 0x1f54
    ee94:	e3401001 	movt	r1, #1
    ee98:	e30003b4 	movw	r0, #948	; 0x3b4
    ee9c:	e3400001 	movt	r0, #1
    eea0:	ebfff556 	bl	c400 <assertion_failed>
    eea4:	e5940000 	ldr	r0, [r4]
    eea8:	e8bd8010 	pop	{r4, pc}

0000eeac <InvalidateDataCacheL1Only>:
    eeac:	e92d0070 	push	{r4, r5, r6}
    eeb0:	e3a00000 	mov	r0, #0
    eeb4:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
    eeb8:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
    eebc:	e3071fff 	movw	r1, #32767	; 0x7fff
    eec0:	e00126a0 	and	r2, r1, r0, lsr #13
    eec4:	e30013ff 	movw	r1, #1023	; 0x3ff
    eec8:	e00131a0 	and	r3, r1, r0, lsr #3
    eecc:	e2822001 	add	r2, r2, #1
    eed0:	e2000007 	and	r0, r0, #7
    eed4:	e2800004 	add	r0, r0, #4
    eed8:	e16f1f13 	clz	r1, r3
    eedc:	e2834001 	add	r4, r3, #1
    eee0:	e2422001 	sub	r2, r2, #1
    eee4:	e1a03004 	mov	r3, r4
    eee8:	e2533001 	subs	r3, r3, #1
    eeec:	e1a05113 	lsl	r5, r3, r1
    eef0:	e1a06012 	lsl	r6, r2, r0
    eef4:	e1855006 	orr	r5, r5, r6
    eef8:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
    eefc:	cafffff9 	bgt	eee8 <InvalidateDataCacheL1Only+0x3c>
    ef00:	e3520000 	cmp	r2, #0
    ef04:	cafffff5 	bgt	eee0 <InvalidateDataCacheL1Only+0x34>
    ef08:	f57ff04e 	dsb	st
    ef0c:	f57ff06f 	isb	sy
    ef10:	e8bd0070 	pop	{r4, r5, r6}
    ef14:	e12fff1e 	bx	lr

0000ef18 <InvalidateDataCache>:
    ef18:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    ef1c:	f57ff05f 	dmb	sy
    ef20:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    ef24:	e1a03ba0 	lsr	r3, r0, #23
    ef28:	e213300e 	ands	r3, r3, #14
    ef2c:	0a00001d 	beq	efa8 <InvalidateDataCache+0x90>
    ef30:	e3a0a000 	mov	sl, #0
    ef34:	e08a20aa 	add	r2, sl, sl, lsr #1
    ef38:	e1a01230 	lsr	r1, r0, r2
    ef3c:	e2011007 	and	r1, r1, #7
    ef40:	e3510002 	cmp	r1, #2
    ef44:	ba000014 	blt	ef9c <InvalidateDataCache+0x84>
    ef48:	e10f9000 	mrs	r9, CPSR
    ef4c:	f10c0080 	cpsid	i
    ef50:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    ef54:	f57ff06f 	isb	sy
    ef58:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    ef5c:	e121f009 	msr	CPSR_c, r9
    ef60:	e2012007 	and	r2, r1, #7
    ef64:	e2822004 	add	r2, r2, #4
    ef68:	e30043ff 	movw	r4, #1023	; 0x3ff
    ef6c:	e01441a1 	ands	r4, r4, r1, lsr #3
    ef70:	e16f5f14 	clz	r5, r4
    ef74:	e3077fff 	movw	r7, #32767	; 0x7fff
    ef78:	e01776a1 	ands	r7, r7, r1, lsr #13
    ef7c:	e1a09007 	mov	r9, r7
    ef80:	e18ab514 	orr	fp, sl, r4, lsl r5
    ef84:	e18bb219 	orr	fp, fp, r9, lsl r2
    ef88:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
    ef8c:	e2599001 	subs	r9, r9, #1
    ef90:	aafffffa 	bge	ef80 <InvalidateDataCache+0x68>
    ef94:	e2544001 	subs	r4, r4, #1
    ef98:	aafffff7 	bge	ef7c <InvalidateDataCache+0x64>
    ef9c:	e28aa002 	add	sl, sl, #2
    efa0:	e153000a 	cmp	r3, sl
    efa4:	caffffe2 	bgt	ef34 <InvalidateDataCache+0x1c>
    efa8:	e3a0a000 	mov	sl, #0
    efac:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    efb0:	f57ff04e 	dsb	st
    efb4:	f57ff06f 	isb	sy
    efb8:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    efbc:	e12fff1e 	bx	lr

0000efc0 <CleanDataCache>:
    efc0:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    efc4:	f57ff05f 	dmb	sy
    efc8:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    efcc:	e1a03ba0 	lsr	r3, r0, #23
    efd0:	e213300e 	ands	r3, r3, #14
    efd4:	0a00001d 	beq	f050 <CleanDataCache+0x90>
    efd8:	e3a0a000 	mov	sl, #0
    efdc:	e08a20aa 	add	r2, sl, sl, lsr #1
    efe0:	e1a01230 	lsr	r1, r0, r2
    efe4:	e2011007 	and	r1, r1, #7
    efe8:	e3510002 	cmp	r1, #2
    efec:	ba000014 	blt	f044 <CleanDataCache+0x84>
    eff0:	e10f9000 	mrs	r9, CPSR
    eff4:	f10c0080 	cpsid	i
    eff8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    effc:	f57ff06f 	isb	sy
    f000:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    f004:	e121f009 	msr	CPSR_c, r9
    f008:	e2012007 	and	r2, r1, #7
    f00c:	e2822004 	add	r2, r2, #4
    f010:	e30043ff 	movw	r4, #1023	; 0x3ff
    f014:	e01441a1 	ands	r4, r4, r1, lsr #3
    f018:	e16f5f14 	clz	r5, r4
    f01c:	e3077fff 	movw	r7, #32767	; 0x7fff
    f020:	e01776a1 	ands	r7, r7, r1, lsr #13
    f024:	e1a09007 	mov	r9, r7
    f028:	e18ab514 	orr	fp, sl, r4, lsl r5
    f02c:	e18bb219 	orr	fp, fp, r9, lsl r2
    f030:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
    f034:	e2599001 	subs	r9, r9, #1
    f038:	aafffffa 	bge	f028 <CleanDataCache+0x68>
    f03c:	e2544001 	subs	r4, r4, #1
    f040:	aafffff7 	bge	f024 <CleanDataCache+0x64>
    f044:	e28aa002 	add	sl, sl, #2
    f048:	e153000a 	cmp	r3, sl
    f04c:	caffffe2 	bgt	efdc <CleanDataCache+0x1c>
    f050:	e3a0a000 	mov	sl, #0
    f054:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    f058:	f57ff04e 	dsb	st
    f05c:	f57ff06f 	isb	sy
    f060:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    f064:	e12fff1e 	bx	lr

0000f068 <CleanAndInvalidateDataCacheRange>:
    f068:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
    f06c:	e1a03823 	lsr	r3, r3, #16
    f070:	e203300f 	and	r3, r3, #15
    f074:	e3a02004 	mov	r2, #4
    f078:	e1a02312 	lsl	r2, r2, r3
    f07c:	e0801001 	add	r1, r0, r1
    f080:	e2423001 	sub	r3, r2, #1
    f084:	e1c00003 	bic	r0, r0, r3
    f088:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    f08c:	e0800002 	add	r0, r0, r2
    f090:	e1500001 	cmp	r0, r1
    f094:	3afffffb 	bcc	f088 <CleanAndInvalidateDataCacheRange+0x20>
    f098:	f57ff04e 	dsb	st
    f09c:	e12fff1e 	bx	lr

0000f0a0 <CPtrList::CPtrList()>:
    f0a0:	e3a02000 	mov	r2, #0
    f0a4:	e5802000 	str	r2, [r0]
    f0a8:	e12fff1e 	bx	lr

0000f0ac <CPtrList::~CPtrList()>:
    f0ac:	e5903000 	ldr	r3, [r0]
    f0b0:	e92d4010 	push	{r4, lr}
    f0b4:	e1a04000 	mov	r4, r0
    f0b8:	e3530000 	cmp	r3, #0
    f0bc:	0a000005 	beq	f0d8 <CPtrList::~CPtrList()+0x2c>
    f0c0:	e3021048 	movw	r1, #8264	; 0x2048
    f0c4:	e3401001 	movt	r1, #1
    f0c8:	e3020054 	movw	r0, #8276	; 0x2054
    f0cc:	e3400001 	movt	r0, #1
    f0d0:	e3a0202a 	mov	r2, #42	; 0x2a
    f0d4:	ebfff4c9 	bl	c400 <assertion_failed>
    f0d8:	e1a00004 	mov	r0, r4
    f0dc:	e8bd8010 	pop	{r4, pc}

0000f0e0 <CPtrList::GetFirst()>:
    f0e0:	e5900000 	ldr	r0, [r0]
    f0e4:	e12fff1e 	bx	lr

0000f0e8 <CPtrList::GetNext(TPtrListElement*)>:
    f0e8:	e92d4010 	push	{r4, lr}
    f0ec:	e2514000 	subs	r4, r1, #0
    f0f0:	0a00000c 	beq	f128 <CPtrList::GetNext(TPtrListElement*)+0x40>
    f0f4:	e5942000 	ldr	r2, [r4]
    f0f8:	e3043d43 	movw	r3, #19779	; 0x4d43
    f0fc:	e345304c 	movt	r3, #20556	; 0x504c
    f100:	e1520003 	cmp	r2, r3
    f104:	0a000005 	beq	f120 <CPtrList::GetNext(TPtrListElement*)+0x38>
    f108:	e3021048 	movw	r1, #8264	; 0x2048
    f10c:	e3401001 	movt	r1, #1
    f110:	e3020074 	movw	r0, #8308	; 0x2074
    f114:	e3400001 	movt	r0, #1
    f118:	e3a02035 	mov	r2, #53	; 0x35
    f11c:	ebfff4b7 	bl	c400 <assertion_failed>
    f120:	e5940008 	ldr	r0, [r4, #8]
    f124:	e8bd8010 	pop	{r4, pc}
    f128:	e3021048 	movw	r1, #8264	; 0x2048
    f12c:	e3401001 	movt	r1, #1
    f130:	e3020064 	movw	r0, #8292	; 0x2064
    f134:	e3400001 	movt	r0, #1
    f138:	e3a02034 	mov	r2, #52	; 0x34
    f13c:	ebfff4af 	bl	c400 <assertion_failed>
    f140:	eaffffeb 	b	f0f4 <CPtrList::GetNext(TPtrListElement*)+0xc>

0000f144 <CPtrList::GetPtr(TPtrListElement*)>:
    f144:	e92d4010 	push	{r4, lr}
    f148:	e2514000 	subs	r4, r1, #0
    f14c:	0a00000c 	beq	f184 <CPtrList::GetPtr(TPtrListElement*)+0x40>
    f150:	e5942000 	ldr	r2, [r4]
    f154:	e3043d43 	movw	r3, #19779	; 0x4d43
    f158:	e345304c 	movt	r3, #20556	; 0x504c
    f15c:	e1520003 	cmp	r2, r3
    f160:	0a000005 	beq	f17c <CPtrList::GetPtr(TPtrListElement*)+0x38>
    f164:	e3021048 	movw	r1, #8264	; 0x2048
    f168:	e3401001 	movt	r1, #1
    f16c:	e3020074 	movw	r0, #8308	; 0x2074
    f170:	e3400001 	movt	r0, #1
    f174:	e3a0203d 	mov	r2, #61	; 0x3d
    f178:	ebfff4a0 	bl	c400 <assertion_failed>
    f17c:	e594000c 	ldr	r0, [r4, #12]
    f180:	e8bd8010 	pop	{r4, pc}
    f184:	e3021048 	movw	r1, #8264	; 0x2048
    f188:	e3401001 	movt	r1, #1
    f18c:	e3020064 	movw	r0, #8292	; 0x2064
    f190:	e3400001 	movt	r0, #1
    f194:	e3a0203c 	mov	r2, #60	; 0x3c
    f198:	ebfff498 	bl	c400 <assertion_failed>
    f19c:	eaffffeb 	b	f150 <CPtrList::GetPtr(TPtrListElement*)+0xc>

0000f1a0 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
    f1a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f1a4:	e1a06000 	mov	r6, r0
    f1a8:	e3a00010 	mov	r0, #16
    f1ac:	e1a07002 	mov	r7, r2
    f1b0:	e1a04001 	mov	r4, r1
    f1b4:	ebffead5 	bl	9d10 <operator new(unsigned int)>
    f1b8:	e5962000 	ldr	r2, [r6]
    f1bc:	e3043d43 	movw	r3, #19779	; 0x4d43
    f1c0:	e345304c 	movt	r3, #20556	; 0x504c
    f1c4:	e3520000 	cmp	r2, #0
    f1c8:	e1a05000 	mov	r5, r0
    f1cc:	e580700c 	str	r7, [r0, #12]
    f1d0:	e5803000 	str	r3, [r0]
    f1d4:	0a000029 	beq	f280 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
    f1d8:	e3540000 	cmp	r4, #0
    f1dc:	0a00002e 	beq	f29c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
    f1e0:	e5942000 	ldr	r2, [r4]
    f1e4:	e3043d43 	movw	r3, #19779	; 0x4d43
    f1e8:	e345304c 	movt	r3, #20556	; 0x504c
    f1ec:	e1520003 	cmp	r2, r3
    f1f0:	0a000005 	beq	f20c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x6c>
    f1f4:	e3021048 	movw	r1, #8264	; 0x2048
    f1f8:	e3401001 	movt	r1, #1
    f1fc:	e30200b4 	movw	r0, #8372	; 0x20b4
    f200:	e3400001 	movt	r0, #1
    f204:	e3a0204e 	mov	r2, #78	; 0x4e
    f208:	ebfff47c 	bl	c400 <assertion_failed>
    f20c:	e5963000 	ldr	r3, [r6]
    f210:	e1540003 	cmp	r4, r3
    f214:	0a000013 	beq	f268 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
    f218:	e5943004 	ldr	r3, [r4, #4]
    f21c:	e5854008 	str	r4, [r5, #8]
    f220:	e3530000 	cmp	r3, #0
    f224:	e5853004 	str	r3, [r5, #4]
    f228:	0a00000c 	beq	f260 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
    f22c:	e5931000 	ldr	r1, [r3]
    f230:	e3042d43 	movw	r2, #19779	; 0x4d43
    f234:	e345204c 	movt	r2, #20556	; 0x504c
    f238:	e1510002 	cmp	r1, r2
    f23c:	0a000006 	beq	f25c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xbc>
    f240:	e3021048 	movw	r1, #8264	; 0x2048
    f244:	e3401001 	movt	r1, #1
    f248:	e30200d8 	movw	r0, #8408	; 0x20d8
    f24c:	e3400001 	movt	r0, #1
    f250:	e3a02060 	mov	r2, #96	; 0x60
    f254:	ebfff469 	bl	c400 <assertion_failed>
    f258:	e5943004 	ldr	r3, [r4, #4]
    f25c:	e5835008 	str	r5, [r3, #8]
    f260:	e5845004 	str	r5, [r4, #4]
    f264:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f268:	e3a03000 	mov	r3, #0
    f26c:	e5845004 	str	r5, [r4, #4]
    f270:	e5854008 	str	r4, [r5, #8]
    f274:	e5865000 	str	r5, [r6]
    f278:	e5853004 	str	r3, [r5, #4]
    f27c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f280:	e3021048 	movw	r1, #8264	; 0x2048
    f284:	e3401001 	movt	r1, #1
    f288:	e3020098 	movw	r0, #8344	; 0x2098
    f28c:	e3400001 	movt	r0, #1
    f290:	e3a0204c 	mov	r2, #76	; 0x4c
    f294:	ebfff459 	bl	c400 <assertion_failed>
    f298:	eaffffce 	b	f1d8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x38>
    f29c:	e3021048 	movw	r1, #8264	; 0x2048
    f2a0:	e3401001 	movt	r1, #1
    f2a4:	e30200a8 	movw	r0, #8360	; 0x20a8
    f2a8:	e3400001 	movt	r0, #1
    f2ac:	e3a0204d 	mov	r2, #77	; 0x4d
    f2b0:	ebfff452 	bl	c400 <assertion_failed>
    f2b4:	eaffffc9 	b	f1e0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x40>

0000f2b8 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
    f2b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f2bc:	e1a06000 	mov	r6, r0
    f2c0:	e1a05001 	mov	r5, r1
    f2c4:	e3a00010 	mov	r0, #16
    f2c8:	e1a07002 	mov	r7, r2
    f2cc:	ebffea8f 	bl	9d10 <operator new(unsigned int)>
    f2d0:	e3550000 	cmp	r5, #0
    f2d4:	e3043d43 	movw	r3, #19779	; 0x4d43
    f2d8:	e345304c 	movt	r3, #20556	; 0x504c
    f2dc:	e5803000 	str	r3, [r0]
    f2e0:	e1a04000 	mov	r4, r0
    f2e4:	e580700c 	str	r7, [r0, #12]
    f2e8:	e5963000 	ldr	r3, [r6]
    f2ec:	0a000020 	beq	f374 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
    f2f0:	e3530000 	cmp	r3, #0
    f2f4:	0a00002b 	beq	f3a8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
    f2f8:	e5952000 	ldr	r2, [r5]
    f2fc:	e3043d43 	movw	r3, #19779	; 0x4d43
    f300:	e345304c 	movt	r3, #20556	; 0x504c
    f304:	e1520003 	cmp	r2, r3
    f308:	0a000005 	beq	f324 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
    f30c:	e3021048 	movw	r1, #8264	; 0x2048
    f310:	e3401001 	movt	r1, #1
    f314:	e3020100 	movw	r0, #8448	; 0x2100
    f318:	e3400001 	movt	r0, #1
    f31c:	e3a0207e 	mov	r2, #126	; 0x7e
    f320:	ebfff436 	bl	c400 <assertion_failed>
    f324:	e5953008 	ldr	r3, [r5, #8]
    f328:	e5845004 	str	r5, [r4, #4]
    f32c:	e3530000 	cmp	r3, #0
    f330:	e5843008 	str	r3, [r4, #8]
    f334:	0a00000c 	beq	f36c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>
    f338:	e5931000 	ldr	r1, [r3]
    f33c:	e3042d43 	movw	r2, #19779	; 0x4d43
    f340:	e345204c 	movt	r2, #20556	; 0x504c
    f344:	e1510002 	cmp	r1, r2
    f348:	0a000006 	beq	f368 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb0>
    f34c:	e3021048 	movw	r1, #8264	; 0x2048
    f350:	e3401001 	movt	r1, #1
    f354:	e3020124 	movw	r0, #8484	; 0x2124
    f358:	e3400001 	movt	r0, #1
    f35c:	e3a02085 	mov	r2, #133	; 0x85
    f360:	ebfff426 	bl	c400 <assertion_failed>
    f364:	e5953008 	ldr	r3, [r5, #8]
    f368:	e5834004 	str	r4, [r3, #4]
    f36c:	e5854008 	str	r4, [r5, #8]
    f370:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f374:	e3530000 	cmp	r3, #0
    f378:	0a000005 	beq	f394 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
    f37c:	e3021048 	movw	r1, #8264	; 0x2048
    f380:	e3401001 	movt	r1, #1
    f384:	e3020054 	movw	r0, #8276	; 0x2054
    f388:	e3400001 	movt	r0, #1
    f38c:	e3a02074 	mov	r2, #116	; 0x74
    f390:	ebfff41a 	bl	c400 <assertion_failed>
    f394:	e3a03000 	mov	r3, #0
    f398:	e5864000 	str	r4, [r6]
    f39c:	e5843004 	str	r3, [r4, #4]
    f3a0:	e5843008 	str	r3, [r4, #8]
    f3a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f3a8:	e3021048 	movw	r1, #8264	; 0x2048
    f3ac:	e3401001 	movt	r1, #1
    f3b0:	e3020098 	movw	r0, #8344	; 0x2098
    f3b4:	e3400001 	movt	r0, #1
    f3b8:	e3a0207d 	mov	r2, #125	; 0x7d
    f3bc:	ebfff40f 	bl	c400 <assertion_failed>
    f3c0:	eaffffcc 	b	f2f8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x40>

0000f3c4 <CPtrList::Remove(TPtrListElement*)>:
    f3c4:	e92d4070 	push	{r4, r5, r6, lr}
    f3c8:	e2514000 	subs	r4, r1, #0
    f3cc:	e1a05000 	mov	r5, r0
    f3d0:	0a000047 	beq	f4f4 <CPtrList::Remove(TPtrListElement*)+0x130>
    f3d4:	e5942000 	ldr	r2, [r4]
    f3d8:	e3043d43 	movw	r3, #19779	; 0x4d43
    f3dc:	e345304c 	movt	r3, #20556	; 0x504c
    f3e0:	e1520003 	cmp	r2, r3
    f3e4:	0a000005 	beq	f400 <CPtrList::Remove(TPtrListElement*)+0x3c>
    f3e8:	e3021048 	movw	r1, #8264	; 0x2048
    f3ec:	e3401001 	movt	r1, #1
    f3f0:	e3020074 	movw	r0, #8308	; 0x2074
    f3f4:	e3400001 	movt	r0, #1
    f3f8:	e3a02090 	mov	r2, #144	; 0x90
    f3fc:	ebfff3ff 	bl	c400 <assertion_failed>
    f400:	e5953000 	ldr	r3, [r5]
    f404:	e1540003 	cmp	r4, r3
    f408:	0a000026 	beq	f4a8 <CPtrList::Remove(TPtrListElement*)+0xe4>
    f40c:	e5943004 	ldr	r3, [r4, #4]
    f410:	e3530000 	cmp	r3, #0
    f414:	0a00003d 	beq	f510 <CPtrList::Remove(TPtrListElement*)+0x14c>
    f418:	e5931000 	ldr	r1, [r3]
    f41c:	e3042d43 	movw	r2, #19779	; 0x4d43
    f420:	e345204c 	movt	r2, #20556	; 0x504c
    f424:	e1510002 	cmp	r1, r2
    f428:	0a000006 	beq	f448 <CPtrList::Remove(TPtrListElement*)+0x84>
    f42c:	e3021048 	movw	r1, #8264	; 0x2048
    f430:	e3401001 	movt	r1, #1
    f434:	e3020194 	movw	r0, #8596	; 0x2194
    f438:	e3400001 	movt	r0, #1
    f43c:	e3a0209f 	mov	r2, #159	; 0x9f
    f440:	ebfff3ee 	bl	c400 <assertion_failed>
    f444:	e5943004 	ldr	r3, [r4, #4]
    f448:	e5942008 	ldr	r2, [r4, #8]
    f44c:	e5832008 	str	r2, [r3, #8]
    f450:	e5942008 	ldr	r2, [r4, #8]
    f454:	e3520000 	cmp	r2, #0
    f458:	0a00000d 	beq	f494 <CPtrList::Remove(TPtrListElement*)+0xd0>
    f45c:	e5920000 	ldr	r0, [r2]
    f460:	e3041d43 	movw	r1, #19779	; 0x4d43
    f464:	e345104c 	movt	r1, #20556	; 0x504c
    f468:	e1500001 	cmp	r0, r1
    f46c:	0a000007 	beq	f490 <CPtrList::Remove(TPtrListElement*)+0xcc>
    f470:	e3a020a4 	mov	r2, #164	; 0xa4
    f474:	e3021048 	movw	r1, #8264	; 0x2048
    f478:	e3401001 	movt	r1, #1
    f47c:	e3020150 	movw	r0, #8528	; 0x2150
    f480:	e3400001 	movt	r0, #1
    f484:	ebfff3dd 	bl	c400 <assertion_failed>
    f488:	e5942008 	ldr	r2, [r4, #8]
    f48c:	e5943004 	ldr	r3, [r4, #4]
    f490:	e5823004 	str	r3, [r2, #4]
    f494:	e3a03000 	mov	r3, #0
    f498:	e1a00004 	mov	r0, r4
    f49c:	e5843000 	str	r3, [r4]
    f4a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    f4a4:	eaffea1b 	b	9d18 <operator delete(void*)>
    f4a8:	e5943008 	ldr	r3, [r4, #8]
    f4ac:	e3530000 	cmp	r3, #0
    f4b0:	e5853000 	str	r3, [r5]
    f4b4:	0afffff6 	beq	f494 <CPtrList::Remove(TPtrListElement*)+0xd0>
    f4b8:	e5931000 	ldr	r1, [r3]
    f4bc:	e3042d43 	movw	r2, #19779	; 0x4d43
    f4c0:	e345204c 	movt	r2, #20556	; 0x504c
    f4c4:	e1510002 	cmp	r1, r2
    f4c8:	0a000006 	beq	f4e8 <CPtrList::Remove(TPtrListElement*)+0x124>
    f4cc:	e3021048 	movw	r1, #8264	; 0x2048
    f4d0:	e3401001 	movt	r1, #1
    f4d4:	e3020150 	movw	r0, #8528	; 0x2150
    f4d8:	e3400001 	movt	r0, #1
    f4dc:	e3a02098 	mov	r2, #152	; 0x98
    f4e0:	ebfff3c6 	bl	c400 <assertion_failed>
    f4e4:	e5943008 	ldr	r3, [r4, #8]
    f4e8:	e3a02000 	mov	r2, #0
    f4ec:	e5832004 	str	r2, [r3, #4]
    f4f0:	eaffffe7 	b	f494 <CPtrList::Remove(TPtrListElement*)+0xd0>
    f4f4:	e3021048 	movw	r1, #8264	; 0x2048
    f4f8:	e3401001 	movt	r1, #1
    f4fc:	e3020064 	movw	r0, #8292	; 0x2064
    f500:	e3400001 	movt	r0, #1
    f504:	e3a0208f 	mov	r2, #143	; 0x8f
    f508:	ebfff3bc 	bl	c400 <assertion_failed>
    f50c:	eaffffb0 	b	f3d4 <CPtrList::Remove(TPtrListElement*)+0x10>
    f510:	e3021048 	movw	r1, #8264	; 0x2048
    f514:	e3401001 	movt	r1, #1
    f518:	e302017c 	movw	r0, #8572	; 0x217c
    f51c:	e3400001 	movt	r0, #1
    f520:	e3a0209e 	mov	r2, #158	; 0x9e
    f524:	ebfff3b5 	bl	c400 <assertion_failed>
    f528:	e5943004 	ldr	r3, [r4, #4]
    f52c:	eaffffb9 	b	f418 <CPtrList::Remove(TPtrListElement*)+0x54>

0000f530 <CPtrList::Find(void*)>:
    f530:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f534:	e5904000 	ldr	r4, [r0]
    f538:	e3540000 	cmp	r4, #0
    f53c:	0a000016 	beq	f59c <CPtrList::Find(void*)+0x6c>
    f540:	e3048d43 	movw	r8, #19779	; 0x4d43
    f544:	e345804c 	movt	r8, #20556	; 0x504c
    f548:	e3027048 	movw	r7, #8264	; 0x2048
    f54c:	e3407001 	movt	r7, #1
    f550:	e3026074 	movw	r6, #8308	; 0x2074
    f554:	e3406001 	movt	r6, #1
    f558:	e1a05001 	mov	r5, r1
    f55c:	ea000002 	b	f56c <CPtrList::Find(void*)+0x3c>
    f560:	e5944008 	ldr	r4, [r4, #8]
    f564:	e3540000 	cmp	r4, #0
    f568:	0a00000b 	beq	f59c <CPtrList::Find(void*)+0x6c>
    f56c:	e5943000 	ldr	r3, [r4]
    f570:	e3a020b3 	mov	r2, #179	; 0xb3
    f574:	e1a01007 	mov	r1, r7
    f578:	e1a00006 	mov	r0, r6
    f57c:	e1530008 	cmp	r3, r8
    f580:	0a000000 	beq	f588 <CPtrList::Find(void*)+0x58>
    f584:	ebfff39d 	bl	c400 <assertion_failed>
    f588:	e594300c 	ldr	r3, [r4, #12]
    f58c:	e1530005 	cmp	r3, r5
    f590:	1afffff2 	bne	f560 <CPtrList::Find(void*)+0x30>
    f594:	e1a00004 	mov	r0, r4
    f598:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f59c:	e3a04000 	mov	r4, #0
    f5a0:	e1a00004 	mov	r0, r4
    f5a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000f5a8 <mem_init>:
    f5a8:	e0801001 	add	r1, r0, r1
    f5ac:	e30223bc 	movw	r2, #9148	; 0x23bc
    f5b0:	e3402001 	movt	r2, #1
    f5b4:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
    f5b8:	e3500605 	cmp	r0, #5242880	; 0x500000
    f5bc:	e2433a03 	sub	r3, r3, #12288	; 0x3000
    f5c0:	33a00605 	movcc	r0, #5242880	; 0x500000
    f5c4:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
    f5c8:	e241c501 	sub	ip, r1, #4194304	; 0x400000
    f5cc:	e3c3300f 	bic	r3, r3, #15
    f5d0:	e5820000 	str	r0, [r2]
    f5d4:	e582100c 	str	r1, [r2, #12]
    f5d8:	e582c004 	str	ip, [r2, #4]
    f5dc:	e5823008 	str	r3, [r2, #8]
    f5e0:	e12fff1e 	bx	lr

0000f5e4 <mem_get_size>:
    f5e4:	e30233bc 	movw	r3, #9148	; 0x23bc
    f5e8:	e3403001 	movt	r3, #1
    f5ec:	e5930004 	ldr	r0, [r3, #4]
    f5f0:	e5931000 	ldr	r1, [r3]
    f5f4:	e593200c 	ldr	r2, [r3, #12]
    f5f8:	e5933008 	ldr	r3, [r3, #8]
    f5fc:	e0400001 	sub	r0, r0, r1
    f600:	e0423003 	sub	r3, r2, r3
    f604:	e0800003 	add	r0, r0, r3
    f608:	e12fff1e 	bx	lr

0000f60c <malloc>:
    f60c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f610:	e30273bc 	movw	r7, #9148	; 0x23bc
    f614:	e3407001 	movt	r7, #1
    f618:	e1a05000 	mov	r5, r0
    f61c:	e5973000 	ldr	r3, [r7]
    f620:	e3530000 	cmp	r3, #0
    f624:	0a000053 	beq	f778 <malloc+0x16c>
    f628:	e5973010 	ldr	r3, [r7, #16]
    f62c:	e3530000 	cmp	r3, #0
    f630:	1a00004b 	bne	f764 <malloc+0x158>
    f634:	e30242d8 	movw	r4, #8920	; 0x22d8
    f638:	e3404001 	movt	r4, #1
    f63c:	e5943000 	ldr	r3, [r4]
    f640:	e3530000 	cmp	r3, #0
    f644:	0a000007 	beq	f668 <malloc+0x5c>
    f648:	e1550003 	cmp	r5, r3
    f64c:	8a000002 	bhi	f65c <malloc+0x50>
    f650:	ea000011 	b	f69c <malloc+0x90>
    f654:	e1530005 	cmp	r3, r5
    f658:	2a00000f 	bcs	f69c <malloc+0x90>
    f65c:	e5b43008 	ldr	r3, [r4, #8]!
    f660:	e3530000 	cmp	r3, #0
    f664:	1afffffa 	bne	f654 <malloc+0x48>
    f668:	e5976000 	ldr	r6, [r7]
    f66c:	e285301f 	add	r3, r5, #31
    f670:	e3c3300f 	bic	r3, r3, #15
    f674:	e5972004 	ldr	r2, [r7, #4]
    f678:	e0863003 	add	r3, r6, r3
    f67c:	e1530002 	cmp	r3, r2
    f680:	e5873000 	str	r3, [r7]
    f684:	9a000028 	bls	f72c <malloc+0x120>
    f688:	e5974010 	ldr	r4, [r7, #16]
    f68c:	e3540000 	cmp	r4, #0
    f690:	1a000035 	bne	f76c <malloc+0x160>
    f694:	e1a00004 	mov	r0, r4
    f698:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f69c:	e5946004 	ldr	r6, [r4, #4]
    f6a0:	e3560000 	cmp	r6, #0
    f6a4:	01a05003 	moveq	r5, r3
    f6a8:	0affffee 	beq	f668 <malloc+0x5c>
    f6ac:	e5962000 	ldr	r2, [r6]
    f6b0:	e3043d43 	movw	r3, #19779	; 0x4d43
    f6b4:	e344324c 	movt	r3, #16972	; 0x424c
    f6b8:	e1520003 	cmp	r2, r3
    f6bc:	0a000005 	beq	f6d8 <malloc+0xcc>
    f6c0:	e30211c0 	movw	r1, #8640	; 0x21c0
    f6c4:	e3401001 	movt	r1, #1
    f6c8:	e30201e0 	movw	r0, #8672	; 0x21e0
    f6cc:	e3400001 	movt	r0, #1
    f6d0:	e3a02089 	mov	r2, #137	; 0x89
    f6d4:	ebfff349 	bl	c400 <assertion_failed>
    f6d8:	e5963008 	ldr	r3, [r6, #8]
    f6dc:	e5843004 	str	r3, [r4, #4]
    f6e0:	e5973010 	ldr	r3, [r7, #16]
    f6e4:	e3530000 	cmp	r3, #0
    f6e8:	1a00001b 	bne	f75c <malloc+0x150>
    f6ec:	e2864010 	add	r4, r6, #16
    f6f0:	e3a03000 	mov	r3, #0
    f6f4:	e314000f 	tst	r4, #15
    f6f8:	e5c63008 	strb	r3, [r6, #8]
    f6fc:	e5c63009 	strb	r3, [r6, #9]
    f700:	e5c6300a 	strb	r3, [r6, #10]
    f704:	e5c6300b 	strb	r3, [r6, #11]
    f708:	0affffe1 	beq	f694 <malloc+0x88>
    f70c:	e3a020a1 	mov	r2, #161	; 0xa1
    f710:	e30211c0 	movw	r1, #8640	; 0x21c0
    f714:	e3401001 	movt	r1, #1
    f718:	e3020204 	movw	r0, #8708	; 0x2204
    f71c:	e3400001 	movt	r0, #1
    f720:	ebfff336 	bl	c400 <assertion_failed>
    f724:	e1a00004 	mov	r0, r4
    f728:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f72c:	e3a03042 	mov	r3, #66	; 0x42
    f730:	e3a00043 	mov	r0, #67	; 0x43
    f734:	e5c63003 	strb	r3, [r6, #3]
    f738:	e3a0104d 	mov	r1, #77	; 0x4d
    f73c:	e5973010 	ldr	r3, [r7, #16]
    f740:	e3a0204c 	mov	r2, #76	; 0x4c
    f744:	e5865004 	str	r5, [r6, #4]
    f748:	e3530000 	cmp	r3, #0
    f74c:	e5c60000 	strb	r0, [r6]
    f750:	e5c61001 	strb	r1, [r6, #1]
    f754:	e5c62002 	strb	r2, [r6, #2]
    f758:	0affffe3 	beq	f6ec <malloc+0xe0>
    f75c:	ebffe97c 	bl	9d54 <LeaveCritical>
    f760:	eaffffe1 	b	f6ec <malloc+0xe0>
    f764:	ebffe96d 	bl	9d20 <EnterCritical>
    f768:	eaffffb1 	b	f634 <malloc+0x28>
    f76c:	ebffe978 	bl	9d54 <LeaveCritical>
    f770:	e3a04000 	mov	r4, #0
    f774:	eaffffc6 	b	f694 <malloc+0x88>
    f778:	e30211c0 	movw	r1, #8640	; 0x21c0
    f77c:	e3401001 	movt	r1, #1
    f780:	e30201cc 	movw	r0, #8652	; 0x21cc
    f784:	e3400001 	movt	r0, #1
    f788:	e3a0206f 	mov	r2, #111	; 0x6f
    f78c:	ebfff31b 	bl	c400 <assertion_failed>
    f790:	eaffffa4 	b	f628 <malloc+0x1c>

0000f794 <free>:
    f794:	e92d4070 	push	{r4, r5, r6, lr}
    f798:	e2505000 	subs	r5, r0, #0
    f79c:	08bd8070 	popeq	{r4, r5, r6, pc}
    f7a0:	e5352010 	ldr	r2, [r5, #-16]!
    f7a4:	e3043d43 	movw	r3, #19779	; 0x4d43
    f7a8:	e344324c 	movt	r3, #16972	; 0x424c
    f7ac:	e1520003 	cmp	r2, r3
    f7b0:	0a000005 	beq	f7cc <free+0x38>
    f7b4:	e30211c0 	movw	r1, #8640	; 0x21c0
    f7b8:	e3401001 	movt	r1, #1
    f7bc:	e30201e0 	movw	r0, #8672	; 0x21e0
    f7c0:	e3400001 	movt	r0, #1
    f7c4:	e3a020ae 	mov	r2, #174	; 0xae
    f7c8:	ebfff30c 	bl	c400 <assertion_failed>
    f7cc:	e30242d8 	movw	r4, #8920	; 0x22d8
    f7d0:	e3404001 	movt	r4, #1
    f7d4:	e5943000 	ldr	r3, [r4]
    f7d8:	e3530000 	cmp	r3, #0
    f7dc:	08bd8070 	popeq	{r4, r5, r6, pc}
    f7e0:	e5952004 	ldr	r2, [r5, #4]
    f7e4:	e1520003 	cmp	r2, r3
    f7e8:	1a000002 	bne	f7f8 <free+0x64>
    f7ec:	ea000005 	b	f808 <free+0x74>
    f7f0:	e1530002 	cmp	r3, r2
    f7f4:	0a000003 	beq	f808 <free+0x74>
    f7f8:	e5b43008 	ldr	r3, [r4, #8]!
    f7fc:	e3530000 	cmp	r3, #0
    f800:	1afffffa 	bne	f7f0 <free+0x5c>
    f804:	e8bd8070 	pop	{r4, r5, r6, pc}
    f808:	e30263bc 	movw	r6, #9148	; 0x23bc
    f80c:	e3406001 	movt	r6, #1
    f810:	e5963010 	ldr	r3, [r6, #16]
    f814:	e3530000 	cmp	r3, #0
    f818:	1a000003 	bne	f82c <free+0x98>
    f81c:	e5943004 	ldr	r3, [r4, #4]
    f820:	e5853008 	str	r3, [r5, #8]
    f824:	e5845004 	str	r5, [r4, #4]
    f828:	e8bd8070 	pop	{r4, r5, r6, pc}
    f82c:	ebffe93b 	bl	9d20 <EnterCritical>
    f830:	e5962010 	ldr	r2, [r6, #16]
    f834:	e5943004 	ldr	r3, [r4, #4]
    f838:	e3520000 	cmp	r2, #0
    f83c:	e5853008 	str	r3, [r5, #8]
    f840:	e5845004 	str	r5, [r4, #4]
    f844:	08bd8070 	popeq	{r4, r5, r6, pc}
    f848:	e8bd4070 	pop	{r4, r5, r6, lr}
    f84c:	eaffe940 	b	9d54 <LeaveCritical>

0000f850 <palloc>:
    f850:	e92d4070 	push	{r4, r5, r6, lr}
    f854:	e30243bc 	movw	r4, #9148	; 0x23bc
    f858:	e3404001 	movt	r4, #1
    f85c:	e5943008 	ldr	r3, [r4, #8]
    f860:	e3530000 	cmp	r3, #0
    f864:	0a00002c 	beq	f91c <palloc+0xcc>
    f868:	e5943014 	ldr	r3, [r4, #20]
    f86c:	e3530000 	cmp	r3, #0
    f870:	1a000019 	bne	f8dc <palloc+0x8c>
    f874:	e5945018 	ldr	r5, [r4, #24]
    f878:	e3550000 	cmp	r5, #0
    f87c:	0a00001a 	beq	f8ec <palloc+0x9c>
    f880:	e5952000 	ldr	r2, [r5]
    f884:	e3043d43 	movw	r3, #19779	; 0x4d43
    f888:	e3453047 	movt	r3, #20551	; 0x5047
    f88c:	e1520003 	cmp	r2, r3
    f890:	0a000005 	beq	f8ac <palloc+0x5c>
    f894:	e30211c0 	movw	r1, #8640	; 0x21c0
    f898:	e3401001 	movt	r1, #1
    f89c:	e3020244 	movw	r0, #8772	; 0x2244
    f8a0:	e3400001 	movt	r0, #1
    f8a4:	e3a020d4 	mov	r2, #212	; 0xd4
    f8a8:	ebfff2d4 	bl	c400 <assertion_failed>
    f8ac:	e5953004 	ldr	r3, [r5, #4]
    f8b0:	e3a02000 	mov	r2, #0
    f8b4:	e5852000 	str	r2, [r5]
    f8b8:	e5843018 	str	r3, [r4, #24]
    f8bc:	e5943014 	ldr	r3, [r4, #20]
    f8c0:	e3530000 	cmp	r3, #0
    f8c4:	1a000001 	bne	f8d0 <palloc+0x80>
    f8c8:	e1a00005 	mov	r0, r5
    f8cc:	e8bd8070 	pop	{r4, r5, r6, pc}
    f8d0:	ebffe91f 	bl	9d54 <LeaveCritical>
    f8d4:	e1a00005 	mov	r0, r5
    f8d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    f8dc:	ebffe90f 	bl	9d20 <EnterCritical>
    f8e0:	e5945018 	ldr	r5, [r4, #24]
    f8e4:	e3550000 	cmp	r5, #0
    f8e8:	1affffe4 	bne	f880 <palloc+0x30>
    f8ec:	e5945008 	ldr	r5, [r4, #8]
    f8f0:	e594200c 	ldr	r2, [r4, #12]
    f8f4:	e2853a01 	add	r3, r5, #4096	; 0x1000
    f8f8:	e1530002 	cmp	r3, r2
    f8fc:	e5843008 	str	r3, [r4, #8]
    f900:	9affffed 	bls	f8bc <palloc+0x6c>
    f904:	e5945014 	ldr	r5, [r4, #20]
    f908:	e3550000 	cmp	r5, #0
    f90c:	0affffed 	beq	f8c8 <palloc+0x78>
    f910:	ebffe90f 	bl	9d54 <LeaveCritical>
    f914:	e3a00000 	mov	r0, #0
    f918:	e8bd8070 	pop	{r4, r5, r6, pc}
    f91c:	e30211c0 	movw	r1, #8640	; 0x21c0
    f920:	e3401001 	movt	r1, #1
    f924:	e3020230 	movw	r0, #8752	; 0x2230
    f928:	e3400001 	movt	r0, #1
    f92c:	e3a020c6 	mov	r2, #198	; 0xc6
    f930:	ebfff2b2 	bl	c400 <assertion_failed>
    f934:	eaffffcb 	b	f868 <palloc+0x18>

0000f938 <pfree>:
    f938:	e92d4070 	push	{r4, r5, r6, lr}
    f93c:	e2505000 	subs	r5, r0, #0
    f940:	08bd8070 	popeq	{r4, r5, r6, pc}
    f944:	e30243bc 	movw	r4, #9148	; 0x23bc
    f948:	e3404001 	movt	r4, #1
    f94c:	e5943014 	ldr	r3, [r4, #20]
    f950:	e3530000 	cmp	r3, #0
    f954:	1a000006 	bne	f974 <pfree+0x3c>
    f958:	e5942018 	ldr	r2, [r4, #24]
    f95c:	e3043d43 	movw	r3, #19779	; 0x4d43
    f960:	e3453047 	movt	r3, #20551	; 0x5047
    f964:	e5853000 	str	r3, [r5]
    f968:	e5852004 	str	r2, [r5, #4]
    f96c:	e5845018 	str	r5, [r4, #24]
    f970:	e8bd8070 	pop	{r4, r5, r6, pc}
    f974:	ebffe8e9 	bl	9d20 <EnterCritical>
    f978:	e5941014 	ldr	r1, [r4, #20]
    f97c:	e5942018 	ldr	r2, [r4, #24]
    f980:	e3043d43 	movw	r3, #19779	; 0x4d43
    f984:	e3453047 	movt	r3, #20551	; 0x5047
    f988:	e3510000 	cmp	r1, #0
    f98c:	e5853000 	str	r3, [r5]
    f990:	e5852004 	str	r2, [r5, #4]
    f994:	e5845018 	str	r5, [r4, #24]
    f998:	08bd8070 	popeq	{r4, r5, r6, pc}
    f99c:	e8bd4070 	pop	{r4, r5, r6, lr}
    f9a0:	eaffe8eb 	b	9d54 <LeaveCritical>

0000f9a4 <_GLOBAL__sub_I_mem_init>:
    f9a4:	e30233bc 	movw	r3, #9148	; 0x23bc
    f9a8:	e3403001 	movt	r3, #1
    f9ac:	e3a02001 	mov	r2, #1
    f9b0:	e5832010 	str	r2, [r3, #16]
    f9b4:	e5832014 	str	r2, [r3, #20]
    f9b8:	e12fff1e 	bx	lr

0000f9bc <CBcmMailBox::CBcmMailBox(unsigned int)>:
    f9bc:	e3a02000 	mov	r2, #0
    f9c0:	e8800006 	stm	r0, {r1, r2}
    f9c4:	e12fff1e 	bx	lr

0000f9c8 <CBcmMailBox::~CBcmMailBox()>:
    f9c8:	e12fff1e 	bx	lr

0000f9cc <CBcmMailBox::Flush()>:
    f9cc:	e92d4010 	push	{r4, lr}
    f9d0:	e3a04a0b 	mov	r4, #45056	; 0xb000
    f9d4:	e3434f00 	movt	r4, #16128	; 0x3f00
    f9d8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    f9dc:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f9e0:	18bd8010 	popne	{r4, pc}
    f9e4:	e3a00014 	mov	r0, #20
    f9e8:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    f9ec:	ebffebb8 	bl	a8d4 <CTimer::SimpleMsDelay(unsigned int)>
    f9f0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    f9f4:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f9f8:	0afffff9 	beq	f9e4 <CBcmMailBox::Flush()+0x18>
    f9fc:	e8bd8010 	pop	{r4, pc}

0000fa00 <CBcmMailBox::Read()>:
    fa00:	e5901000 	ldr	r1, [r0]
    fa04:	e3a02a0b 	mov	r2, #45056	; 0xb000
    fa08:	e3432f00 	movt	r2, #16128	; 0x3f00
    fa0c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    fa10:	e3130101 	tst	r3, #1073741824	; 0x40000000
    fa14:	1afffffc 	bne	fa0c <CBcmMailBox::Read()+0xc>
    fa18:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
    fa1c:	e200300f 	and	r3, r0, #15
    fa20:	e1510003 	cmp	r1, r3
    fa24:	1afffff8 	bne	fa0c <CBcmMailBox::Read()+0xc>
    fa28:	e3c0000f 	bic	r0, r0, #15
    fa2c:	e12fff1e 	bx	lr

0000fa30 <CBcmMailBox::Write(unsigned int)>:
    fa30:	e92d4070 	push	{r4, r5, r6, lr}
    fa34:	e3a02a0b 	mov	r2, #45056	; 0xb000
    fa38:	e3432f00 	movt	r2, #16128	; 0x3f00
    fa3c:	e1a05000 	mov	r5, r0
    fa40:	e1a04001 	mov	r4, r1
    fa44:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
    fa48:	e3530000 	cmp	r3, #0
    fa4c:	bafffffc 	blt	fa44 <CBcmMailBox::Write(unsigned int)+0x14>
    fa50:	e314000f 	tst	r4, #15
    fa54:	0a000005 	beq	fa70 <CBcmMailBox::Write(unsigned int)+0x40>
    fa58:	e3021268 	movw	r1, #8808	; 0x2268
    fa5c:	e3401001 	movt	r1, #1
    fa60:	e3020278 	movw	r0, #8824	; 0x2278
    fa64:	e3400001 	movt	r0, #1
    fa68:	e3a0205a 	mov	r2, #90	; 0x5a
    fa6c:	ebfff263 	bl	c400 <assertion_failed>
    fa70:	e5952000 	ldr	r2, [r5]
    fa74:	e3a03a0b 	mov	r3, #45056	; 0xb000
    fa78:	e3433f00 	movt	r3, #16128	; 0x3f00
    fa7c:	e1844002 	orr	r4, r4, r2
    fa80:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
    fa84:	e8bd8070 	pop	{r4, r5, r6, pc}

0000fa88 <CBcmMailBox::WriteRead(unsigned int)>:
    fa88:	e5903004 	ldr	r3, [r0, #4]
    fa8c:	e92d4070 	push	{r4, r5, r6, lr}
    fa90:	e1a05000 	mov	r5, r0
    fa94:	e3530000 	cmp	r3, #0
    fa98:	e1a06001 	mov	r6, r1
    fa9c:	1a00001e 	bne	fb1c <CBcmMailBox::WriteRead(unsigned int)+0x94>
    faa0:	e3a04a0b 	mov	r4, #45056	; 0xb000
    faa4:	e3434f00 	movt	r4, #16128	; 0x3f00
    faa8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    faac:	e3130101 	tst	r3, #1073741824	; 0x40000000
    fab0:	1a000005 	bne	facc <CBcmMailBox::WriteRead(unsigned int)+0x44>
    fab4:	e3a00014 	mov	r0, #20
    fab8:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    fabc:	ebffeb84 	bl	a8d4 <CTimer::SimpleMsDelay(unsigned int)>
    fac0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    fac4:	e3130101 	tst	r3, #1073741824	; 0x40000000
    fac8:	0afffff9 	beq	fab4 <CBcmMailBox::WriteRead(unsigned int)+0x2c>
    facc:	e1a00005 	mov	r0, r5
    fad0:	e1a01006 	mov	r1, r6
    fad4:	ebffffd5 	bl	fa30 <CBcmMailBox::Write(unsigned int)>
    fad8:	e5950000 	ldr	r0, [r5]
    fadc:	e3a02a0b 	mov	r2, #45056	; 0xb000
    fae0:	e3432f00 	movt	r2, #16128	; 0x3f00
    fae4:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    fae8:	e3130101 	tst	r3, #1073741824	; 0x40000000
    faec:	1afffffc 	bne	fae4 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
    faf0:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
    faf4:	e203100f 	and	r1, r3, #15
    faf8:	e1510000 	cmp	r1, r0
    fafc:	1afffff8 	bne	fae4 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
    fb00:	e5952004 	ldr	r2, [r5, #4]
    fb04:	e3c3400f 	bic	r4, r3, #15
    fb08:	e3520000 	cmp	r2, #0
    fb0c:	0a000000 	beq	fb14 <CBcmMailBox::WriteRead(unsigned int)+0x8c>
    fb10:	ebffe88f 	bl	9d54 <LeaveCritical>
    fb14:	e1a00004 	mov	r0, r4
    fb18:	e8bd8070 	pop	{r4, r5, r6, pc}
    fb1c:	ebffe87f 	bl	9d20 <EnterCritical>
    fb20:	eaffffde 	b	faa0 <CBcmMailBox::WriteRead(unsigned int)+0x18>

0000fb24 <memset>:
    fb24:	e3520000 	cmp	r2, #0
    fb28:	012fff1e 	bxeq	lr
    fb2c:	e6af1071 	sxtb	r1, r1
    fb30:	e0802002 	add	r2, r0, r2
    fb34:	e1a03000 	mov	r3, r0
    fb38:	e4c31001 	strb	r1, [r3], #1
    fb3c:	e1530002 	cmp	r3, r2
    fb40:	1afffffc 	bne	fb38 <memset+0x14>
    fb44:	e12fff1e 	bx	lr

0000fb48 <memcmp>:
    fb48:	e3520000 	cmp	r2, #0
    fb4c:	0a00000e 	beq	fb8c <memcmp+0x44>
    fb50:	e5d0c000 	ldrb	ip, [r0]
    fb54:	e5d13000 	ldrb	r3, [r1]
    fb58:	e15c0003 	cmp	ip, r3
    fb5c:	ca00000c 	bgt	fb94 <memcmp+0x4c>
    fb60:	ba00000d 	blt	fb9c <memcmp+0x54>
    fb64:	e0812002 	add	r2, r1, r2
    fb68:	e2811001 	add	r1, r1, #1
    fb6c:	ea000004 	b	fb84 <memcmp+0x3c>
    fb70:	e5f0c001 	ldrb	ip, [r0, #1]!
    fb74:	e4d13001 	ldrb	r3, [r1], #1
    fb78:	e15c0003 	cmp	ip, r3
    fb7c:	ca000004 	bgt	fb94 <memcmp+0x4c>
    fb80:	ba000005 	blt	fb9c <memcmp+0x54>
    fb84:	e1510002 	cmp	r1, r2
    fb88:	1afffff8 	bne	fb70 <memcmp+0x28>
    fb8c:	e3a00000 	mov	r0, #0
    fb90:	e12fff1e 	bx	lr
    fb94:	e3a00001 	mov	r0, #1
    fb98:	e12fff1e 	bx	lr
    fb9c:	e3e00000 	mvn	r0, #0
    fba0:	e12fff1e 	bx	lr

0000fba4 <strlen>:
    fba4:	e1d010d0 	ldrsb	r1, [r0]
    fba8:	e2803001 	add	r3, r0, #1
    fbac:	e3510000 	cmp	r1, #0
    fbb0:	0a000003 	beq	fbc4 <strlen+0x20>
    fbb4:	e0431000 	sub	r1, r3, r0
    fbb8:	e0d320d1 	ldrsb	r2, [r3], #1
    fbbc:	e3520000 	cmp	r2, #0
    fbc0:	1afffffb 	bne	fbb4 <strlen+0x10>
    fbc4:	e1a00001 	mov	r0, r1
    fbc8:	e12fff1e 	bx	lr

0000fbcc <strcmp>:
    fbcc:	e1d030d0 	ldrsb	r3, [r0]
    fbd0:	e1d120d0 	ldrsb	r2, [r1]
    fbd4:	e3530000 	cmp	r3, #0
    fbd8:	1a000007 	bne	fbfc <strcmp+0x30>
    fbdc:	ea000008 	b	fc04 <strcmp+0x38>
    fbe0:	e1530002 	cmp	r3, r2
    fbe4:	ca00000b 	bgt	fc18 <strcmp+0x4c>
    fbe8:	ba00000c 	blt	fc20 <strcmp+0x54>
    fbec:	e1f030d1 	ldrsb	r3, [r0, #1]!
    fbf0:	e3530000 	cmp	r3, #0
    fbf4:	0a00000b 	beq	fc28 <strcmp+0x5c>
    fbf8:	e1f120d1 	ldrsb	r2, [r1, #1]!
    fbfc:	e3520000 	cmp	r2, #0
    fc00:	1afffff6 	bne	fbe0 <strcmp+0x14>
    fc04:	e1530002 	cmp	r3, r2
    fc08:	ca000002 	bgt	fc18 <strcmp+0x4c>
    fc0c:	b3e00000 	mvnlt	r0, #0
    fc10:	a3a00000 	movge	r0, #0
    fc14:	e12fff1e 	bx	lr
    fc18:	e3a00001 	mov	r0, #1
    fc1c:	e12fff1e 	bx	lr
    fc20:	e3e00000 	mvn	r0, #0
    fc24:	e12fff1e 	bx	lr
    fc28:	e1d120d1 	ldrsb	r2, [r1, #1]
    fc2c:	e1530002 	cmp	r3, r2
    fc30:	dafffff5 	ble	fc0c <strcmp+0x40>
    fc34:	eafffff7 	b	fc18 <strcmp+0x4c>

0000fc38 <strcpy>:
    fc38:	e1d130d0 	ldrsb	r3, [r1]
    fc3c:	e1a02000 	mov	r2, r0
    fc40:	e3530000 	cmp	r3, #0
    fc44:	0a000003 	beq	fc58 <strcpy+0x20>
    fc48:	e4c23001 	strb	r3, [r2], #1
    fc4c:	e1f130d1 	ldrsb	r3, [r1, #1]!
    fc50:	e3530000 	cmp	r3, #0
    fc54:	1afffffb 	bne	fc48 <strcpy+0x10>
    fc58:	e3a03000 	mov	r3, #0
    fc5c:	e5c23000 	strb	r3, [r2]
    fc60:	e12fff1e 	bx	lr

0000fc64 <strncpy>:
    fc64:	e3520000 	cmp	r2, #0
    fc68:	012fff1e 	bxeq	lr
    fc6c:	e1d1c0d0 	ldrsb	ip, [r1]
    fc70:	e35c0000 	cmp	ip, #0
    fc74:	0a000009 	beq	fca0 <strncpy+0x3c>
    fc78:	e0802002 	add	r2, r0, r2
    fc7c:	e1a03000 	mov	r3, r0
    fc80:	ea000002 	b	fc90 <strncpy+0x2c>
    fc84:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    fc88:	e35c0000 	cmp	ip, #0
    fc8c:	0a000004 	beq	fca4 <strncpy+0x40>
    fc90:	e4c3c001 	strb	ip, [r3], #1
    fc94:	e1530002 	cmp	r3, r2
    fc98:	1afffff9 	bne	fc84 <strncpy+0x20>
    fc9c:	e12fff1e 	bx	lr
    fca0:	e1a03000 	mov	r3, r0
    fca4:	e3a02000 	mov	r2, #0
    fca8:	e5c32000 	strb	r2, [r3]
    fcac:	e12fff1e 	bx	lr

0000fcb0 <strcat>:
    fcb0:	e1d030d0 	ldrsb	r3, [r0]
    fcb4:	e3530000 	cmp	r3, #0
    fcb8:	e1a03000 	mov	r3, r0
    fcbc:	0a000002 	beq	fccc <strcat+0x1c>
    fcc0:	e1f320d1 	ldrsb	r2, [r3, #1]!
    fcc4:	e3520000 	cmp	r2, #0
    fcc8:	1afffffc 	bne	fcc0 <strcat+0x10>
    fccc:	e1d120d0 	ldrsb	r2, [r1]
    fcd0:	e3520000 	cmp	r2, #0
    fcd4:	0a000003 	beq	fce8 <strcat+0x38>
    fcd8:	e4c32001 	strb	r2, [r3], #1
    fcdc:	e1f120d1 	ldrsb	r2, [r1, #1]!
    fce0:	e3520000 	cmp	r2, #0
    fce4:	1afffffb 	bne	fcd8 <strcat+0x28>
    fce8:	e3a02000 	mov	r2, #0
    fcec:	e5c32000 	strb	r2, [r3]
    fcf0:	e12fff1e 	bx	lr

0000fcf4 <strchr>:
    fcf4:	e1d020d0 	ldrsb	r2, [r0]
    fcf8:	e3520000 	cmp	r2, #0
    fcfc:	0a000009 	beq	fd28 <strchr+0x34>
    fd00:	e1510002 	cmp	r1, r2
    fd04:	1a000002 	bne	fd14 <strchr+0x20>
    fd08:	ea000008 	b	fd30 <strchr+0x3c>
    fd0c:	e1530001 	cmp	r3, r1
    fd10:	012fff1e 	bxeq	lr
    fd14:	e1f030d1 	ldrsb	r3, [r0, #1]!
    fd18:	e3530000 	cmp	r3, #0
    fd1c:	1afffffa 	bne	fd0c <strchr+0x18>
    fd20:	e1a00003 	mov	r0, r3
    fd24:	e12fff1e 	bx	lr
    fd28:	e1a00002 	mov	r0, r2
    fd2c:	e12fff1e 	bx	lr
    fd30:	e12fff1e 	bx	lr

0000fd34 <strtok_r>:
    fd34:	e3500000 	cmp	r0, #0
    fd38:	0a00002c 	beq	fdf0 <strtok_r+0xbc>
    fd3c:	e92d4030 	push	{r4, r5, lr}
    fd40:	e1d0e0d0 	ldrsb	lr, [r0]
    fd44:	e35e0000 	cmp	lr, #0
    fd48:	11d140d0 	ldrsbne	r4, [r1]
    fd4c:	0a000024 	beq	fde4 <strtok_r+0xb0>
    fd50:	e3540000 	cmp	r4, #0
    fd54:	0a000008 	beq	fd7c <strtok_r+0x48>
    fd58:	e15e0004 	cmp	lr, r4
    fd5c:	0a000019 	beq	fdc8 <strtok_r+0x94>
    fd60:	e1a0c001 	mov	ip, r1
    fd64:	ea000001 	b	fd70 <strtok_r+0x3c>
    fd68:	e15e0003 	cmp	lr, r3
    fd6c:	0a000015 	beq	fdc8 <strtok_r+0x94>
    fd70:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    fd74:	e3530000 	cmp	r3, #0
    fd78:	1afffffa 	bne	fd68 <strtok_r+0x34>
    fd7c:	e35e0000 	cmp	lr, #0
    fd80:	0a000017 	beq	fde4 <strtok_r+0xb0>
    fd84:	e1a05000 	mov	r5, r0
    fd88:	e3540000 	cmp	r4, #0
    fd8c:	0a000008 	beq	fdb4 <strtok_r+0x80>
    fd90:	e15e0004 	cmp	lr, r4
    fd94:	0a00000d 	beq	fdd0 <strtok_r+0x9c>
    fd98:	e1a0c001 	mov	ip, r1
    fd9c:	ea000001 	b	fda8 <strtok_r+0x74>
    fda0:	e15e0003 	cmp	lr, r3
    fda4:	0a000009 	beq	fdd0 <strtok_r+0x9c>
    fda8:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    fdac:	e3530000 	cmp	r3, #0
    fdb0:	1afffffa 	bne	fda0 <strtok_r+0x6c>
    fdb4:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
    fdb8:	e35e0000 	cmp	lr, #0
    fdbc:	1afffff1 	bne	fd88 <strtok_r+0x54>
    fdc0:	e5825000 	str	r5, [r2]
    fdc4:	e8bd8030 	pop	{r4, r5, pc}
    fdc8:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
    fdcc:	eaffffdf 	b	fd50 <strtok_r+0x1c>
    fdd0:	e3a03000 	mov	r3, #0
    fdd4:	e2855001 	add	r5, r5, #1
    fdd8:	e5453001 	strb	r3, [r5, #-1]
    fddc:	e5825000 	str	r5, [r2]
    fde0:	e8bd8030 	pop	{r4, r5, pc}
    fde4:	e3a00000 	mov	r0, #0
    fde8:	e5820000 	str	r0, [r2]
    fdec:	e8bd8030 	pop	{r4, r5, pc}
    fdf0:	e5920000 	ldr	r0, [r2]
    fdf4:	e3500000 	cmp	r0, #0
    fdf8:	1affffcf 	bne	fd3c <strtok_r+0x8>
    fdfc:	e12fff1e 	bx	lr

0000fe00 <strtoul>:
    fe00:	e3510000 	cmp	r1, #0
    fe04:	e92d4070 	push	{r4, r5, r6, lr}
    fe08:	e2425002 	sub	r5, r2, #2
    fe0c:	e3c2e010 	bic	lr, r2, #16
    fe10:	15810000 	strne	r0, [r1]
    fe14:	e3520000 	cmp	r2, #0
    fe18:	13550022 	cmpne	r5, #34	; 0x22
    fe1c:	83a05001 	movhi	r5, #1
    fe20:	93a05000 	movls	r5, #0
    fe24:	8a000036 	bhi	ff04 <strtoul+0x104>
    fe28:	e1d0c0d0 	ldrsb	ip, [r0]
    fe2c:	e1a04000 	mov	r4, r0
    fe30:	e2800001 	add	r0, r0, #1
    fe34:	e35c0020 	cmp	ip, #32
    fe38:	e24c3009 	sub	r3, ip, #9
    fe3c:	e6ef3073 	uxtb	r3, r3
    fe40:	0afffff8 	beq	fe28 <strtoul+0x28>
    fe44:	e3530004 	cmp	r3, #4
    fe48:	9afffff6 	bls	fe28 <strtoul+0x28>
    fe4c:	e35c002b 	cmp	ip, #43	; 0x2b
    fe50:	0a00002d 	beq	ff0c <strtoul+0x10c>
    fe54:	e35c002d 	cmp	ip, #45	; 0x2d
    fe58:	03a06001 	moveq	r6, #1
    fe5c:	13a06000 	movne	r6, #0
    fe60:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
    fe64:	01a04000 	moveq	r4, r0
    fe68:	e35c0030 	cmp	ip, #48	; 0x30
    fe6c:	0a00002b 	beq	ff20 <strtoul+0x120>
    fe70:	e3520000 	cmp	r2, #0
    fe74:	03a0200a 	moveq	r2, #10
    fe78:	e35c002f 	cmp	ip, #47	; 0x2f
    fe7c:	e1a0300c 	mov	r3, ip
    fe80:	da00001c 	ble	fef8 <strtoul+0xf8>
    fe84:	e3a05001 	mov	r5, #1
    fe88:	e3a0e000 	mov	lr, #0
    fe8c:	ea000007 	b	feb0 <strtoul+0xb0>
    fe90:	e150000e 	cmp	r0, lr
    fe94:	e3a05000 	mov	r5, #0
    fe98:	e1a0e000 	mov	lr, r0
    fe9c:	3a000028 	bcc	ff44 <strtoul+0x144>
    fea0:	e1f430d1 	ldrsb	r3, [r4, #1]!
    fea4:	e353002f 	cmp	r3, #47	; 0x2f
    fea8:	e1a0c003 	mov	ip, r3
    feac:	da000029 	ble	ff58 <strtoul+0x158>
    feb0:	e24cc061 	sub	ip, ip, #97	; 0x61
    feb4:	e35c0019 	cmp	ip, #25
    feb8:	92433020 	subls	r3, r3, #32
    febc:	e3530040 	cmp	r3, #64	; 0x40
    fec0:	c2433007 	subgt	r3, r3, #7
    fec4:	e2433030 	sub	r3, r3, #48	; 0x30
    fec8:	e1520003 	cmp	r2, r3
    fecc:	e020329e 	mla	r0, lr, r2, r3
    fed0:	caffffee 	bgt	fe90 <strtoul+0x90>
    fed4:	e2255001 	eor	r5, r5, #1
    fed8:	e1a0000e 	mov	r0, lr
    fedc:	e3510000 	cmp	r1, #0
    fee0:	e0055006 	and	r5, r5, r6
    fee4:	0a000000 	beq	feec <strtoul+0xec>
    fee8:	e5814000 	str	r4, [r1]
    feec:	e3550000 	cmp	r5, #0
    fef0:	12600000 	rsbne	r0, r0, #0
    fef4:	e8bd8070 	pop	{r4, r5, r6, pc}
    fef8:	e3510000 	cmp	r1, #0
    fefc:	13a00000 	movne	r0, #0
    ff00:	1afffff8 	bne	fee8 <strtoul+0xe8>
    ff04:	e3a00000 	mov	r0, #0
    ff08:	e8bd8070 	pop	{r4, r5, r6, pc}
    ff0c:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    ff10:	e3a06000 	mov	r6, #0
    ff14:	e1a04000 	mov	r4, r0
    ff18:	e35c0030 	cmp	ip, #48	; 0x30
    ff1c:	1affffd3 	bne	fe70 <strtoul+0x70>
    ff20:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    ff24:	e2840001 	add	r0, r4, #1
    ff28:	e3cc3020 	bic	r3, ip, #32
    ff2c:	e3530058 	cmp	r3, #88	; 0x58
    ff30:	0a00000a 	beq	ff60 <strtoul+0x160>
    ff34:	e3520000 	cmp	r2, #0
    ff38:	e1a04000 	mov	r4, r0
    ff3c:	03a02008 	moveq	r2, #8
    ff40:	eaffffcc 	b	fe78 <strtoul+0x78>
    ff44:	e1510005 	cmp	r1, r5
    ff48:	0a00000a 	beq	ff78 <strtoul+0x178>
    ff4c:	e5814000 	str	r4, [r1]
    ff50:	e3e00000 	mvn	r0, #0
    ff54:	e8bd8070 	pop	{r4, r5, r6, pc}
    ff58:	e3a05001 	mov	r5, #1
    ff5c:	eaffffde 	b	fedc <strtoul+0xdc>
    ff60:	e35e0000 	cmp	lr, #0
    ff64:	1affffe6 	bne	ff04 <strtoul+0x104>
    ff68:	e1d4c0d2 	ldrsb	ip, [r4, #2]
    ff6c:	e3a02010 	mov	r2, #16
    ff70:	e2844002 	add	r4, r4, #2
    ff74:	eaffffbf 	b	fe78 <strtoul+0x78>
    ff78:	e3e00000 	mvn	r0, #0
    ff7c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ff80 <char2int>:
    ff80:	e12fff1e 	bx	lr

0000ff84 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
    ff84:	e92d4010 	push	{r4, lr}
    ff88:	e1a04000 	mov	r4, r0
    ff8c:	e3a01000 	mov	r1, #0
    ff90:	e24dd010 	sub	sp, sp, #16
    ff94:	e3a02c01 	mov	r2, #256	; 0x100
    ff98:	e5943020 	ldr	r3, [r4, #32]
    ff9c:	e28d0008 	add	r0, sp, #8
    ffa0:	e583100c 	str	r1, [r3, #12]
    ffa4:	e5832010 	str	r2, [r3, #16]
    ffa8:	ebffe2c5 	bl	8ac4 <CBcmPropertyTags::CBcmPropertyTags()>
    ffac:	e3003408 	movw	r3, #1032	; 0x408
    ffb0:	e5942020 	ldr	r2, [r4, #32]
    ffb4:	e28d0008 	add	r0, sp, #8
    ffb8:	e58d3000 	str	r3, [sp]
    ffbc:	e308100b 	movw	r1, #32779	; 0x800b
    ffc0:	e3401004 	movt	r1, #4
    ffc4:	e3003414 	movw	r3, #1044	; 0x414
    ffc8:	ebffe305 	bl	8be4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ffcc:	e3500000 	cmp	r0, #0
    ffd0:	e28d0008 	add	r0, sp, #8
    ffd4:	0a000003 	beq	ffe8 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x64>
    ffd8:	e5943020 	ldr	r3, [r4, #32]
    ffdc:	e593300c 	ldr	r3, [r3, #12]
    ffe0:	e3530000 	cmp	r3, #0
    ffe4:	0a000003 	beq	fff8 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
    ffe8:	ebffe2bb 	bl	8adc <CBcmPropertyTags::~CBcmPropertyTags()>
    ffec:	e3a00000 	mov	r0, #0
    fff0:	e28dd010 	add	sp, sp, #16
    fff4:	e8bd8010 	pop	{r4, pc}
    fff8:	ebffe2b7 	bl	8adc <CBcmPropertyTags::~CBcmPropertyTags()>
    fffc:	e3a00001 	mov	r0, #1
   10000:	e28dd010 	add	sp, sp, #16
   10004:	e8bd8010 	pop	{r4, pc}

00010008 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   10008:	e92d4030 	push	{r4, r5, lr}
   1000c:	e3510000 	cmp	r1, #0
   10010:	13520000 	cmpne	r2, #0
   10014:	e1a04000 	mov	r4, r0
   10018:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   1001c:	e3a05000 	mov	r5, #0
   10020:	e8840006 	stm	r4, {r1, r2}
   10024:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
   10028:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
   1002c:	e5843010 	str	r3, [r4, #16]
   10030:	e584c00c 	str	ip, [r4, #12]
   10034:	e5840008 	str	r0, [r4, #8]
   10038:	e5845014 	str	r5, [r4, #20]
   1003c:	e5845018 	str	r5, [r4, #24]
   10040:	e584501c 	str	r5, [r4, #28]
   10044:	e5845020 	str	r5, [r4, #32]
   10048:	1a000011 	bne	10094 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   1004c:	e28d000c 	add	r0, sp, #12
   10050:	ebffe29b 	bl	8ac4 <CBcmPropertyTags::CBcmPropertyTags()>
   10054:	e3a03014 	mov	r3, #20
   10058:	e58d5000 	str	r5, [sp]
   1005c:	e28d000c 	add	r0, sp, #12
   10060:	e3a01003 	mov	r1, #3
   10064:	e3401004 	movt	r1, #4
   10068:	e08d2003 	add	r2, sp, r3
   1006c:	ebffe2dc 	bl	8be4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10070:	e1500005 	cmp	r0, r5
   10074:	1a000027 	bne	10118 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
   10078:	e3a02d0a 	mov	r2, #640	; 0x280
   1007c:	e3a03e1e 	mov	r3, #480	; 0x1e0
   10080:	e884000c 	stm	r4, {r2, r3}
   10084:	e28d000c 	add	r0, sp, #12
   10088:	ebffe293 	bl	8adc <CBcmPropertyTags::~CBcmPropertyTags()>
   1008c:	e5940008 	ldr	r0, [r4, #8]
   10090:	e5943010 	ldr	r3, [r4, #16]
   10094:	e3500000 	cmp	r0, #0
   10098:	0a00001a 	beq	10108 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   1009c:	e594200c 	ldr	r2, [r4, #12]
   100a0:	e3520000 	cmp	r2, #0
   100a4:	0a000017 	beq	10108 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   100a8:	e3530008 	cmp	r3, #8
   100ac:	8a000007 	bhi	100d0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
   100b0:	e3000414 	movw	r0, #1044	; 0x414
   100b4:	ebffe716 	bl	9d14 <operator new[](unsigned int)>
   100b8:	e3a02b01 	mov	r2, #1024	; 0x400
   100bc:	e5840020 	str	r0, [r4, #32]
   100c0:	e3a01000 	mov	r1, #0
   100c4:	e2800014 	add	r0, r0, #20
   100c8:	ebfffe95 	bl	fb24 <memset>
   100cc:	e5943010 	ldr	r3, [r4, #16]
   100d0:	e3022310 	movw	r2, #8976	; 0x2310
   100d4:	e3402001 	movt	r2, #1
   100d8:	e5945000 	ldr	r5, [r4]
   100dc:	e1a00004 	mov	r0, r4
   100e0:	e594e004 	ldr	lr, [r4, #4]
   100e4:	e594c008 	ldr	ip, [r4, #8]
   100e8:	e594100c 	ldr	r1, [r4, #12]
   100ec:	e582500c 	str	r5, [r2, #12]
   100f0:	e582e010 	str	lr, [r2, #16]
   100f4:	e582c020 	str	ip, [r2, #32]
   100f8:	e5821024 	str	r1, [r2, #36]	; 0x24
   100fc:	e5823034 	str	r3, [r2, #52]	; 0x34
   10100:	e28dd02c 	add	sp, sp, #44	; 0x2c
   10104:	e8bd8030 	pop	{r4, r5, pc}
   10108:	e8940006 	ldm	r4, {r1, r2}
   1010c:	e5841008 	str	r1, [r4, #8]
   10110:	e584200c 	str	r2, [r4, #12]
   10114:	eaffffe3 	b	100a8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   10118:	e59d2020 	ldr	r2, [sp, #32]
   1011c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   10120:	e2421d0a 	sub	r1, r2, #640	; 0x280
   10124:	e5842000 	str	r2, [r4]
   10128:	e2432e1e 	sub	r2, r3, #480	; 0x1e0
   1012c:	e5843004 	str	r3, [r4, #4]
   10130:	e3520f96 	cmp	r2, #600	; 0x258
   10134:	93510c05 	cmpls	r1, #1280	; 0x500
   10138:	9affffd1 	bls	10084 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
   1013c:	eaffffcd 	b	10078 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>

00010140 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   10140:	e92d4010 	push	{r4, lr}
   10144:	e1a04000 	mov	r4, r0
   10148:	e5900020 	ldr	r0, [r0, #32]
   1014c:	ebffe6f1 	bl	9d18 <operator delete(void*)>
   10150:	e1a00004 	mov	r0, r4
   10154:	e8bd8010 	pop	{r4, pc}

00010158 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   10158:	e5903010 	ldr	r3, [r0, #16]
   1015c:	e3530008 	cmp	r3, #8
   10160:	812fff1e 	bxhi	lr
   10164:	e5900020 	ldr	r0, [r0, #32]
   10168:	e1a03982 	lsl	r3, r2, #19
   1016c:	e1a0c5a2 	lsr	ip, r2, #11
   10170:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   10174:	e1a02282 	lsl	r2, r2, #5
   10178:	e0801101 	add	r1, r0, r1, lsl #2
   1017c:	e183318c 	orr	r3, r3, ip, lsl #3
   10180:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   10184:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   10188:	e1822003 	orr	r2, r2, r3
   1018c:	e5812014 	str	r2, [r1, #20]
   10190:	e12fff1e 	bx	lr

00010194 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   10194:	e5903010 	ldr	r3, [r0, #16]
   10198:	e3530008 	cmp	r3, #8
   1019c:	95903020 	ldrls	r3, [r0, #32]
   101a0:	90831101 	addls	r1, r3, r1, lsl #2
   101a4:	95812014 	strls	r2, [r1, #20]
   101a8:	e12fff1e 	bx	lr

000101ac <CBcmFrameBuffer::Initialize()>:
   101ac:	e92d4070 	push	{r4, r5, r6, lr}
   101b0:	e1a05000 	mov	r5, r0
   101b4:	e3026310 	movw	r6, #8976	; 0x2310
   101b8:	e3406001 	movt	r6, #1
   101bc:	e24dd008 	sub	sp, sp, #8
   101c0:	e1a0000d 	mov	r0, sp
   101c4:	ebffe23e 	bl	8ac4 <CBcmPropertyTags::CBcmPropertyTags()>
   101c8:	e1a01006 	mov	r1, r6
   101cc:	e1a0000d 	mov	r0, sp
   101d0:	e3a02070 	mov	r2, #112	; 0x70
   101d4:	ebffe245 	bl	8af0 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   101d8:	e2504000 	subs	r4, r0, #0
   101dc:	0a00001e 	beq	1025c <CBcmFrameBuffer::Initialize()+0xb0>
   101e0:	e596400c 	ldr	r4, [r6, #12]
   101e4:	e3540000 	cmp	r4, #0
   101e8:	0a00001b 	beq	1025c <CBcmFrameBuffer::Initialize()+0xb0>
   101ec:	e5964010 	ldr	r4, [r6, #16]
   101f0:	e3540000 	cmp	r4, #0
   101f4:	0a000018 	beq	1025c <CBcmFrameBuffer::Initialize()+0xb0>
   101f8:	e5964020 	ldr	r4, [r6, #32]
   101fc:	e3540000 	cmp	r4, #0
   10200:	0a000015 	beq	1025c <CBcmFrameBuffer::Initialize()+0xb0>
   10204:	e5964024 	ldr	r4, [r6, #36]	; 0x24
   10208:	e3540000 	cmp	r4, #0
   1020c:	0a000012 	beq	1025c <CBcmFrameBuffer::Initialize()+0xb0>
   10210:	e5964034 	ldr	r4, [r6, #52]	; 0x34
   10214:	e3540000 	cmp	r4, #0
   10218:	0a00000f 	beq	1025c <CBcmFrameBuffer::Initialize()+0xb0>
   1021c:	e5964058 	ldr	r4, [r6, #88]	; 0x58
   10220:	e3540000 	cmp	r4, #0
   10224:	0a00000c 	beq	1025c <CBcmFrameBuffer::Initialize()+0xb0>
   10228:	e5953010 	ldr	r3, [r5, #16]
   1022c:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
   10230:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
   10234:	e3530008 	cmp	r3, #8
   10238:	e596306c 	ldr	r3, [r6, #108]	; 0x6c
   1023c:	e5854014 	str	r4, [r5, #20]
   10240:	83a04001 	movhi	r4, #1
   10244:	e5852018 	str	r2, [r5, #24]
   10248:	e585301c 	str	r3, [r5, #28]
   1024c:	8a000002 	bhi	1025c <CBcmFrameBuffer::Initialize()+0xb0>
   10250:	e1a00005 	mov	r0, r5
   10254:	ebffff4a 	bl	ff84 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   10258:	e1a04000 	mov	r4, r0
   1025c:	e1a0000d 	mov	r0, sp
   10260:	ebffe21d 	bl	8adc <CBcmPropertyTags::~CBcmPropertyTags()>
   10264:	e1a00004 	mov	r0, r4
   10268:	e28dd008 	add	sp, sp, #8
   1026c:	e8bd8070 	pop	{r4, r5, r6, pc}

00010270 <CBcmFrameBuffer::GetWidth() const>:
   10270:	e5900000 	ldr	r0, [r0]
   10274:	e12fff1e 	bx	lr

00010278 <CBcmFrameBuffer::GetHeight() const>:
   10278:	e5900004 	ldr	r0, [r0, #4]
   1027c:	e12fff1e 	bx	lr

00010280 <CBcmFrameBuffer::GetVirtWidth() const>:
   10280:	e5900008 	ldr	r0, [r0, #8]
   10284:	e12fff1e 	bx	lr

00010288 <CBcmFrameBuffer::GetVirtHeight() const>:
   10288:	e590000c 	ldr	r0, [r0, #12]
   1028c:	e12fff1e 	bx	lr

00010290 <CBcmFrameBuffer::GetPitch() const>:
   10290:	e590001c 	ldr	r0, [r0, #28]
   10294:	e12fff1e 	bx	lr

00010298 <CBcmFrameBuffer::GetDepth() const>:
   10298:	e5900010 	ldr	r0, [r0, #16]
   1029c:	e12fff1e 	bx	lr

000102a0 <CBcmFrameBuffer::GetBuffer() const>:
   102a0:	e5900014 	ldr	r0, [r0, #20]
   102a4:	e12fff1e 	bx	lr

000102a8 <CBcmFrameBuffer::GetSize() const>:
   102a8:	e5900018 	ldr	r0, [r0, #24]
   102ac:	e12fff1e 	bx	lr

000102b0 <CBcmFrameBuffer::UpdatePalette()>:
   102b0:	e5903010 	ldr	r3, [r0, #16]
   102b4:	e3530008 	cmp	r3, #8
   102b8:	9a000001 	bls	102c4 <CBcmFrameBuffer::UpdatePalette()+0x14>
   102bc:	e3a00001 	mov	r0, #1
   102c0:	e12fff1e 	bx	lr
   102c4:	eaffff2e 	b	ff84 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

000102c8 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   102c8:	e92d4070 	push	{r4, r5, r6, lr}
   102cc:	e1a05001 	mov	r5, r1
   102d0:	e1a06002 	mov	r6, r2
   102d4:	e24dd028 	sub	sp, sp, #40	; 0x28
   102d8:	e28d000c 	add	r0, sp, #12
   102dc:	ebffe1f8 	bl	8ac4 <CBcmPropertyTags::CBcmPropertyTags()>
   102e0:	e3a03008 	mov	r3, #8
   102e4:	e58d3000 	str	r3, [sp]
   102e8:	e3a03014 	mov	r3, #20
   102ec:	e28d000c 	add	r0, sp, #12
   102f0:	e3081009 	movw	r1, #32777	; 0x8009
   102f4:	e3401004 	movt	r1, #4
   102f8:	e08d2003 	add	r2, sp, r3
   102fc:	e58d5020 	str	r5, [sp, #32]
   10300:	e58d6024 	str	r6, [sp, #36]	; 0x24
   10304:	ebffe236 	bl	8be4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10308:	e2504000 	subs	r4, r0, #0
   1030c:	0a000006 	beq	1032c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   10310:	e59d3020 	ldr	r3, [sp, #32]
   10314:	e1550003 	cmp	r5, r3
   10318:	13a04000 	movne	r4, #0
   1031c:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   10320:	00444006 	subeq	r4, r4, r6
   10324:	016f4f14 	clzeq	r4, r4
   10328:	01a042a4 	lsreq	r4, r4, #5
   1032c:	e28d000c 	add	r0, sp, #12
   10330:	ebffe1e9 	bl	8adc <CBcmPropertyTags::~CBcmPropertyTags()>
   10334:	e1a00004 	mov	r0, r4
   10338:	e28dd028 	add	sp, sp, #40	; 0x28
   1033c:	e8bd8070 	pop	{r4, r5, r6, pc}
